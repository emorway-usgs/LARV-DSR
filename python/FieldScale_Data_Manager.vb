Imports System.IO
Imports System.Globalization
Imports Csu.GEODSS.ANNGeoInputs
Imports System.Data.OleDb
Imports ESRI.ArcGIS.ArcMapUI
Imports ESRI.ArcGIS.Carto
Imports ESRI.ArcGIS.DataSourcesRaster
Imports ESRI.ArcGIS.Framework
Imports ESRI.ArcGIS.GeoAnalyst
Imports ESRI.ArcGIS.Geodatabase
Imports ESRI.ArcGIS.Geometry
Imports ESRI.ArcGIS.SpatialAnalyst

Public Class FieldScale_Data_Manager


    Dim myPath As String = "c:\eric\"  '"O:\"

    Dim CellSize As Single
    Dim NEXRADDataLocation1 As String
    Dim ETDataLocation1 As String
    Dim Upstream_or_not1 As Boolean
    Dim WeeklyPrecipSaveName As String

    Dim CatlinETAmt_mmperWk As Single
    Dim CatlinPrcpAmt_mmperWk As Single
    Dim FortLyonETAmt_mmperWk As Single
    Dim FortLyonPrcpAmt_mmperWk As Single
    Dim HolbrookETAmt_mmperWk As Single
    Dim HolbrookPrcpAmt_mmperWk As Single
    Dim OteroETAmt_mmperWk As Single
    Dim OteroPrcpAmt_mmperWk As Single
    Dim RockyFordETAmt_mmperWk As Single
    Dim RockyFordPrcpAmt_mmperWk As Single
    Dim RockyFordHighlineETAmt_mmperWk As Single
    Dim RockyFordHighlinePrcpAmt_mmperWk As Single
    Dim AmityETAmt_mmperWk As Single
    Dim AmityPrcpAmt_mmperWk As Single
    Dim BuffaloETAmt_mmperWk As Single
    Dim BuffaloPrcpAmt_mmperWk As Single
    Dim FortBentETAmt_mmperWk As Single
    Dim FortBentPrcpAmt_mmperWk As Single
    Dim FortLyonDSETAmt_mmperWk As Single
    Dim FortLyonDSPrcpAmt_mmperWk As Single
    Dim HydeETAmt_mmperWk As Single
    Dim HydePrcpAmt_mmperWk As Single
    Dim LamarETAmt_mmperWk As Single
    Dim LamarPrcpAmt_mmperWk As Single
    Dim Mean_Leaching_Fraction As Single = 0.46 'From Walter Study
    Dim Mean_Total_Losses As Single = 0.66      'From Walter Study

    Public Sub New(ByVal NEXRADDataLocation As String, ByVal ETDataLocation As String, ByVal Upstream_or_not As Boolean)
        Me.NEXRADDataLocation1 = NEXRADDataLocation
        Me.ETDataLocation1 = ETDataLocation
        Me.Upstream_or_not1 = Upstream_or_not
    End Sub

    Public Function SetInitialSoilMoistureConditions(ByVal connToETDb As System.Data.OleDb.OleDbConnection, ByVal FirstTimeStep As Boolean, _
                                                     ByVal CurrentDate As Date)
        connToETDb.Open()
        Dim Phil_Fld As Integer
        Dim pFeatWS As IFeatureWorkspace
        Dim DBName As String = myPath & "Arkansas River Valley\Entire_Basin\GIS\Weekly_ETCalculation.mdb"
        Dim db As dbutilities
        db = New dbutilities
        pFeatWS = db.OpenAccessDatabase(DBName)

        If CurrentDate < #1/1/2002# Then
            Phil_Fld = 1
        Else
            Phil_Fld = 0
        End If

        Dim WaterContentTableName As String = "Water_Content_wrtTime"
        Dim QueryString As String
        Dim myCMD As OleDbCommand
        Dim myReader As OleDbDataReader

        If FirstTimeStep Then
            Dim pFields As IFields
            pFields = pFeatWS.OpenTable(WaterContentTableName).Fields
            Try
                db.DeleteTableInDB(DBName, WaterContentTableName, True)
            Catch ex As Exception
            End Try

            Dim NewTable As ITable
            NewTable = pFeatWS.CreateTable(WaterContentTableName, pFields, Nothing, Nothing, "")

            QueryString = "INSERT INTO " & WaterContentTableName & " ( FIELD_NO_TXT, [DATE], THETA_INITIAL ) "
            QueryString += "SELECT Combined.FIELD_NO_TXT, DateLookup.DATE, Combined.Theta_FC "
            QueryString += "FROM Combined, DateLookup "
            QueryString += "WHERE(((Combined.Phil_Fld) = " & Phil_Fld & ") And ((DateLookup.DATE) = #" & CurrentDate & "#)) "
            QueryString += "ORDER BY Combined.FIELD_NO_TXT;"
        End If
        myCMD = New OleDbCommand(QueryString, connToETDb)
        'myCMD.Connection = connToETDb
        'myCMD.CommandText = QueryString
        myReader = myCMD.ExecuteReader()

        connToETDb.Close()
    End Function

    Public Function SetInitialSoilMoistureConditions_Fields(ByVal connToAVDb As System.Data.OleDb.OleDbConnection, ByVal CurrentDate As Date)
        connToAVDb.Open()

        'This Query sets the initial soil moisture condition in the root zone for the irrigated fields.
        'The initial soil moisture conditions are currently taken to be at the RAW threshold
        Dim QueryString As String
        'Not getting values, find out why and fix.
        If Upstream_or_not1 Then
            QueryString = "SELECT Combined.FIELD_NO, [WeeklyPrecip_Estimate_Flds]![RAW] AS StartingSoilMoisture "
            QueryString += "FROM Combined INNER JOIN WeeklyPrecip_Estimate_Flds ON Combined.FIELD_NO_TXT = WeeklyPrecip_Estimate_Flds.FIELD_NO_TXT "
            QueryString += "WHERE(((Combined.Phil_Fld) = 1)) "
            QueryString += "ORDER BY Combined.FIELD_NO;"
        Else
            QueryString = "SELECT Combined_DS.FIELD_NO, [WeeklyPrecip_Estimate_Flds]![RAW] AS StartingSoilMoisture "
            QueryString += "FROM Combined_DS INNER JOIN WeeklyPrecip_Estimate_Flds ON Combined_DS.FIELD_NO_TXT = WeeklyPrecip_Estimate_Flds.FIELD_NO_TXT "
            QueryString += "WHERE(((Combined_DS.Eric_Fld) = 0)) "
            QueryString += "ORDER BY Combined_DS.FIELD_NO;"
        End If

        'Instantiate OleDbDataAdapter to create DataSet
        Dim StartingSMAdapter As OleDbDataAdapter = New OleDbDataAdapter
        'Fetch Tract details
        StartingSMAdapter.SelectCommand = New OleDbCommand(QueryString, connToAVDb)
        'In Memory cache of data
        Dim SMInformation As DataSet = New DataSet("SMInformation")
        'Fill the dataset
        StartingSMAdapter.Fill(SMInformation, "InitialSoilMoistureConditions_Fields")
        'Release the adapter
        StartingSMAdapter.Dispose()

        Dim DataDump As MyDBUtils
        If Upstream_or_not1 Then
            DataDump = New MyDBUtils(myPath & "Arkansas River Valley\Entire_Basin\GIS\RegionalModelOutput.mdb")
        Else
            DataDump = New MyDBUtils(myPath & "Arkansas River Valley\Downstream\GIS\RegionalModelOutput_DS.mdb")
        End If

        Try
            DataDump.DeleteExistingTables("InitialSoilMoistureConditions_Fields")
        Catch
        End Try
        DataDump.CreateTableInDB(SMInformation.Tables(0))
        DataDump.InsertValuesInDBTable(SMInformation.Tables(0))
        connToAVDb.Close()
        connToAVDb = Nothing

    End Function
    Public Function SetInitialSoilMoistureConditions_NatAreas_Trsk(ByVal connToAVDb As System.Data.OleDb.OleDbConnection, ByVal CurrentDate As Date)

        'This Query sets the initial soil moisture condition in the root zone for the natural areas.
        'The initial soil moisture conditions are currently taken to be at the RAW threshold
        Dim QueryString As String
        Dim QueryString2 As String

        'The following two Queries can be found in ArkansasBasinData, Queries, InitialSoilMoisture_NatVeg & InitialSoilMoisture_Tamarisk
        If Upstream_or_not1 Then
            QueryString = "SELECT NatVeg_US.Poly_ID, NatVeg_US.RAW AS StartingSoilMoisture INTO InitialSoilMoisture_Temp "
            QueryString += "FROM(NatVeg_US) "
            QueryString += "ORDER BY NatVeg_US.Poly_ID;"

            QueryString2 = "INSERT INTO InitialSoilMoisture_Temp ( Poly_ID, StartingSoilMoisture ) "
            QueryString2 += "SELECT Tamarisk_US.Id, Tamarisk_US.RAW "
            QueryString2 += "FROM Tamarisk_US "
            QueryString2 += "ORDER BY Tamarisk_US.Id;"
        Else
            QueryString = "SELECT NatVeg_DS.Poly_ID, NatVeg_DS.RAW AS StartingSoilMoisture INTO InitialSoilMoisture_Temp "
            QueryString += "FROM(NatVeg_DS) "
            QueryString += "ORDER BY NatVeg_DS.Poly_ID;"

            QueryString2 = "INSERT INTO InitialSoilMoisture_Temp ( Poly_ID, StartingSoilMoisture ) "
            QueryString2 += "SELECT Tamarisk_DS.Id, Tamarisk_DS.RAW "
            QueryString2 += "FROM Tamarisk_DS "
            QueryString2 += "ORDER BY Tamarisk_DS.Id;"
        End If

        connToAVDb.Open()
        Dim myCMD As New OleDbCommand
        Dim myReader As OleDbDataReader

        'First delete the existing table
        Dim insertStr As String
        insertStr = "DROP TABLE InitialSoilMoisture_Temp"
        Try
            With myCMD
                .CommandText = insertStr
                .Connection = connToAVDb
                .ExecuteNonQuery()
            End With
        Catch ex As Exception
            MsgBox(ex.Message)
        End Try

        'The Queries are meant to first do a "Make Table Query" and then perform an append query
        myCMD = New OleDbCommand(QueryString, connToAVDb)
        myCMD.ExecuteNonQuery()
        myCMD.Dispose()
        myCMD = New OleDbCommand(QueryString2, connToAVDb)
        myCMD.ExecuteNonQuery()
        myCMD.Dispose()
        connToAVDb.Close()
        connToAVDb = Nothing

        'Next I need to take the resulting table and place it into the output database
        QueryString = "SELECT InitialSoilMoisture_Temp.* "
        QueryString += "FROM InitialSoilMoisture_Temp;"

        ''Instantiate OleDbDataAdapter to create DataSet
        'Dim StartSMAdapter As OleDbDataAdapter = New OleDbDataAdapter
        ''Fetch Tract details
        'StartSMAdapter.SelectCommand = New OleDbCommand(QueryString, connToAVDb)
        ''In Memory cache of data
        'Dim SMInformation As DataSet = New DataSet("SMInformation")
        ''Fill the dataset
        'StartSMAdapter.Fill(SMInformation, "InitialSoilMoistureConditions_NatVeg")
        ''Release the adapter
        'StartSMAdapter.Dispose()

        Dim DataDeposit As MyDBUtils
        If Upstream_or_not1 Then
            DataDeposit = New MyDBUtils(myPath & "Arkansas River Valley\Entire_Basin\GIS\RegionalModelOutput.mdb")
        Else
            DataDeposit = New MyDBUtils(myPath & "Arkansas River Valley\Downstream\GIS\RegionalModelOutput_DS.mdb")
        End If

        Try
            DataDeposit.DeleteExistingTables("InitialSoilMoistureConditions_NatVeg_Trsk")
        Catch
        End Try

        Dim m_dbutl As MyDBUtils
        If Upstream_or_not1 Then
            m_dbutl = New MyDBUtils(myPath & "Arkansas River Valley\Entire_Basin\GIS\ArkansasBasinData.mdb")
        Else
            m_dbutl = New MyDBUtils(myPath & "Arkansas River Valley\Downstream\GIS\BaseModel.mdb")
        End If

        Dim m_Tbl As DataTable = m_dbutl.GetTableFromDB(QueryString, "InitialSoilMoistureConditions_NatVeg_Trsk")
        DataDeposit.CreateTableInDB(m_Tbl)
        DataDeposit.InsertValuesInDBTable(m_Tbl)

    End Function
    Public Function CopyNatVegTrskInfoToOutputDB(ByVal connToAVDb As System.Data.OleDb.OleDbConnection, ByVal CurrentDate As Date)

        'This function is meant to copy over rainfall and et information calculated in the ArkansasBasinData database
        'to the RegionalModelOutput database.
        Dim QueryString As String
        Dim QueryString2 As String
        Dim DateString As String
        DateString = QueryDateString(CurrentDate)
        Dim m_dbutl As MyDBUtils
        If Upstream_or_not1 Then
            m_dbutl = New MyDBUtils(myPath & "Arkansas River Valley\Entire_Basin\GIS\ArkansasBasinData.mdb")
        Else
            m_dbutl = New MyDBUtils(myPath & "Arkansas River Valley\Downstream\GIS\BaseModel.mdb")
        End If

        Try
            m_dbutl.DeleteExistingTables("WaterAllocation_NatVeg_Trsk_" & DateString & "_Temp")
        Catch
        End Try
        'Make Sure the table (WaterAllocation_NatVeg_Trsk_" & DateString & "_Temp) does not exist, otherwise error will occur.
        'This Query can be found in ArkansasBasinData.mdb/Queries/TableToGoTo_RegionalModelOutput_Date
        If Upstream_or_not1 Then
            QueryString = "SELECT WeeklyPrecip_Estimate_NatVeg.Poly_ID, WeeklyPrecip_Estimate_NatVeg.Date_, WeeklyPrecip_Estimate_NatVeg.Precip_Amt, WeeklyPrecip_Estimate_NatVeg.ETo, WeeklyPrecip_Estimate_NatVeg.Kc, WeeklyPrecip_Estimate_NatVeg.ETc, WeeklyPrecip_Estimate_NatVeg.Ks, WeeklyPrecip_Estimate_NatVeg.ETadj, NatVeg_US.TAW, NatVeg_US.RAW INTO WaterAllocation_NatVeg_Trsk_" & DateString & "_Temp "
            QueryString += "FROM NatVeg_US INNER JOIN WeeklyPrecip_Estimate_NatVeg ON NatVeg_US.Poly_ID = WeeklyPrecip_Estimate_NatVeg.Poly_ID;"
        Else
            QueryString = "SELECT WeeklyPrecip_Estimate_NatVeg.Poly_ID, WeeklyPrecip_Estimate_NatVeg.Date_, WeeklyPrecip_Estimate_NatVeg.Precip_Amt, WeeklyPrecip_Estimate_NatVeg.ETo, WeeklyPrecip_Estimate_NatVeg.Kc, WeeklyPrecip_Estimate_NatVeg.ETc, WeeklyPrecip_Estimate_NatVeg.Ks, WeeklyPrecip_Estimate_NatVeg.ETadj, NatVeg_DS.TAW, NatVeg_DS.RAW INTO WaterAllocation_NatVeg_Trsk_" & DateString & "_Temp "
            QueryString += "FROM NatVeg_DS INNER JOIN WeeklyPrecip_Estimate_NatVeg ON NatVeg_DS.Poly_ID = WeeklyPrecip_Estimate_NatVeg.Poly_ID;"
        End If

        'This Query can be found in ArkansasBasinData.mdb/Queries/TableToAppendWith_WatAlloc_Date
        If Upstream_or_not1 Then
            QueryString2 = "INSERT INTO WaterAllocation_NatVeg_Trsk_" & DateString & "_Temp ( Poly_ID, Date_, Precip_Amt, ETo, Kc, ETc, TAW, RAW ) "
            QueryString2 += "SELECT WeeklyPrecip_Estimate_Trsk.Id, WeeklyPrecip_Estimate_Trsk.Date_, WeeklyPrecip_Estimate_Trsk.Precip_Amt, WeeklyPrecip_Estimate_Trsk.ETo, WeeklyPrecip_Estimate_Trsk.Kc, WeeklyPrecip_Estimate_Trsk.ETc, Tamarisk_US.TAW, Tamarisk_US.RAW "
            QueryString2 += "FROM WeeklyPrecip_Estimate_Trsk INNER JOIN Tamarisk_US ON WeeklyPrecip_Estimate_Trsk.Id = Tamarisk_US.Id;"
        Else
            QueryString2 = "INSERT INTO WaterAllocation_NatVeg_Trsk_" & DateString & "_Temp ( Poly_ID, Date_, Precip_Amt, ETo, Kc, ETc, TAW, RAW ) "
            QueryString2 += "SELECT WeeklyPrecip_Estimate_Trsk.Id, WeeklyPrecip_Estimate_Trsk.Date_, WeeklyPrecip_Estimate_Trsk.Precip_Amt, WeeklyPrecip_Estimate_Trsk.ETo, WeeklyPrecip_Estimate_Trsk.Kc, WeeklyPrecip_Estimate_Trsk.ETc, Tamarisk_DS.TAW, Tamarisk_DS.RAW "
            QueryString2 += "FROM WeeklyPrecip_Estimate_Trsk INNER JOIN Tamarisk_DS ON WeeklyPrecip_Estimate_Trsk.Id = Tamarisk_DS.Id;"
        End If


        'connToAVDb.Open()
        'Dim myCMD As New OleDbCommand
        'Dim myReader As OleDbDataReader

        'The Queries are meant to first do a "Make Table Query" and then perform an append query
        'myCMD = New OleDbCommand(QueryString, connToAVDb)
        'Try
        '    myCMD.ExecuteNonQuery()
        'Catch ex As Exception
        '    MsgBox(ex.Message)
        'End Try

        'myCMD.Dispose()
        'myCMD = New OleDbCommand(QueryString2, connToAVDb)
        'myCMD.ExecuteNonQuery()
        'myCMD.Dispose()
        'connToAVDb.Close()
        'connToAVDb = Nothing
        m_dbutl.ExecuteQuery(QueryString)
        m_dbutl.ExecuteQuery(QueryString2)

        Dim DataDeposit As MyDBUtils
        If Upstream_or_not1 Then
            DataDeposit = New MyDBUtils(myPath & "Arkansas River Valley\Entire_Basin\GIS\RegionalModelOutput.mdb")
        Else
            DataDeposit = New MyDBUtils(myPath & "Arkansas River Valley\Downstream\GIS\RegionalModelOutput_DS.mdb")
        End If
        Try
            DataDeposit.DeleteExistingTables("WaterAllocation_NatVeg_Trsk_" & DateString)
        Catch
        End Try

        QueryString = "SELECT WaterAllocation_NatVeg_Trsk_" & DateString & "_Temp.* "
        QueryString += "FROM WaterAllocation_NatVeg_Trsk_" & DateString & "_Temp;"
        Dim m_Tbl As DataTable = m_dbutl.GetTableFromDB(QueryString, "WaterAllocation_NatVeg_Trsk_" & DateString & "_Temp")
        m_Tbl.TableName() = "WaterAllocation_NatVeg_Trsk_" & DateString
        DataDeposit.CreateTableInDB(m_Tbl)
        DataDeposit.InsertValuesInDBTable(m_Tbl)

        'Lastly delete the existing table to avoid clutter
        m_dbutl.DeleteExistingTables("WaterAllocation_NatVeg_Trsk_" & DateString & "_Temp")

    End Function
    'ByVal connToAVDatabase As System.Data.OleDb.OleDbConnection, _ This used to go on the next line
    Public Function Calculate_Weekly_Precip_Amt(ByVal CurrentDate As Date, ByVal pWSF2 As IWorkspaceFactory, ByVal m_app As IApplication, _
                                                ByVal pFeatureLayer_Flds As IFeatureLayer, ByVal pFeatureLayer_NatVeg As IFeatureLayer, _
                                                ByVal pFeatureLayer_Trsk As IFeatureLayer) ', ByVal Orig_Data As MyDBUtils)
        Dim m_Day1STR As String
        Dim m_Day2STR As String
        Dim m_Day3STR As String
        Dim m_Day4STR As String
        Dim m_Day5STR As String
        Dim m_Day6STR As String
        Dim m_Day7STR As String
        SetDailyDateStrings(m_Day1STR, m_Day2STR, m_Day3STR, m_Day4STR, m_Day5STR, m_Day6STR, m_Day7STR, CurrentDate)

        Dim pWS2 As IWorkspace
        pWS2 = pWSF2.OpenFromFile(NEXRADDataLocation1, 0)

        'Dim eWSF As IWorkspaceFactory           'loads rasters from hard drive
        'eWSF = New RasterWorkspaceFactory       'loads rasters from hard drive
        Dim pRasWS As IRasterWorkspace          'loads rasters from hard drive
        pRasWS = pWSF2.OpenFromFile(NEXRADDataLocation1, 0)

        Dim Day1RasterDataset As IRasterDataset
        Dim Day2RasterDataset As IRasterDataset
        Dim Day3RasterDataset As IRasterDataset
        Dim Day4RasterDataset As IRasterDataset
        Dim Day5RasterDataset As IRasterDataset
        Dim Day6RasterDataset As IRasterDataset
        Dim Day7RasterDataset As IRasterDataset
        Dim pLayer_Day1Precip As IRaster
        Dim pLayer_Day2Precip As IRaster
        Dim pLayer_Day3Precip As IRaster
        Dim pLayer_Day4Precip As IRaster
        Dim pLayer_Day5Precip As IRaster
        Dim pLayer_Day6Precip As IRaster
        Dim pLayer_Day7Precip As IRaster
        Dim eRasterDay1 As IRasterLayer = New RasterLayer
        Dim eRasterDay2 As IRasterLayer = New RasterLayer
        Dim eRasterDay3 As IRasterLayer = New RasterLayer
        Dim eRasterDay4 As IRasterLayer = New RasterLayer
        Dim eRasterDay5 As IRasterLayer = New RasterLayer
        Dim eRasterDay6 As IRasterLayer = New RasterLayer
        Dim eRasterDay7 As IRasterLayer = New RasterLayer

        Day1RasterDataset = pRasWS.OpenRasterDataset("rain" & m_Day1STR)
        Day2RasterDataset = pRasWS.OpenRasterDataset("rain" & m_Day2STR)
        Day3RasterDataset = pRasWS.OpenRasterDataset("rain" & m_Day3STR)
        Day4RasterDataset = pRasWS.OpenRasterDataset("rain" & m_Day4STR)
        Day5RasterDataset = pRasWS.OpenRasterDataset("rain" & m_Day5STR)
        Day6RasterDataset = pRasWS.OpenRasterDataset("rain" & m_Day6STR)
        Day7RasterDataset = pRasWS.OpenRasterDataset("rain" & m_Day7STR)
        pLayer_Day1Precip = Day1RasterDataset.CreateDefaultRaster
        pLayer_Day2Precip = Day2RasterDataset.CreateDefaultRaster
        pLayer_Day3Precip = Day3RasterDataset.CreateDefaultRaster
        pLayer_Day4Precip = Day4RasterDataset.CreateDefaultRaster
        pLayer_Day5Precip = Day5RasterDataset.CreateDefaultRaster
        pLayer_Day6Precip = Day6RasterDataset.CreateDefaultRaster
        pLayer_Day7Precip = Day7RasterDataset.CreateDefaultRaster
        eRasterDay1.CreateFromRaster(pLayer_Day1Precip)
        eRasterDay2.CreateFromRaster(pLayer_Day2Precip)
        eRasterDay3.CreateFromRaster(pLayer_Day3Precip)
        eRasterDay4.CreateFromRaster(pLayer_Day4Precip)
        eRasterDay5.CreateFromRaster(pLayer_Day5Precip)
        eRasterDay6.CreateFromRaster(pLayer_Day6Precip)
        eRasterDay7.CreateFromRaster(pLayer_Day7Precip)

        pLayer_Day1Precip = eRasterDay1.Raster
        pLayer_Day2Precip = eRasterDay2.Raster
        pLayer_Day3Precip = eRasterDay3.Raster
        pLayer_Day4Precip = eRasterDay4.Raster
        pLayer_Day5Precip = eRasterDay5.Raster
        pLayer_Day6Precip = eRasterDay6.Raster
        pLayer_Day7Precip = eRasterDay7.Raster

        'Dim pGeoDs1 As IGeoDataset
        Dim pAlgbOp As IMapAlgebraOp
        pAlgbOp = New RasterMapAlgebraOp

        ' Bind the rasters
        pAlgbOp.BindRaster(pLayer_Day1Precip, "Day1Precip")
        pAlgbOp.BindRaster(pLayer_Day2Precip, "Day2Precip")
        pAlgbOp.BindRaster(pLayer_Day3Precip, "Day3Precip")
        pAlgbOp.BindRaster(pLayer_Day4Precip, "Day4Precip")
        pAlgbOp.BindRaster(pLayer_Day5Precip, "Day5Precip")
        pAlgbOp.BindRaster(pLayer_Day6Precip, "Day6Precip")
        pAlgbOp.BindRaster(pLayer_Day7Precip, "Day7Precip")

        ' Set output workspace 
        Dim pRasterEnv As IRasterAnalysisEnvironment
        CellSize = 4762.5
        pRasterEnv = SetRasterEnvironment(pAlgbOp, CellSize)

        ' Define result raster
        Dim WeeklyPrecipitationRaster As IRaster
        Dim pNewRBD As IRasterBandCollection
        Dim StrExpression As String

        ' Check to see if Weekly Raster Exists
        Dim WeeklyPrecipRasterCheck As IRasterDataset
        Dim pLayer_WeekPrecip As IRaster
        Dim eRasterWeek As IRasterLayer = New RasterLayer
        Try
            WeeklyPrecipRasterCheck = pRasWS.OpenRasterDataset("wprec" & m_Day1STR)
            pLayer_WeekPrecip = WeeklyPrecipRasterCheck.CreateDefaultRaster
            eRasterWeek.CreateFromRaster(pLayer_WeekPrecip)
            pLayer_WeekPrecip = eRasterWeek.Raster
            WeeklyPrecipitationRaster = pLayer_WeekPrecip
        Catch ex As Exception
            StrExpression = "[Day1Precip] + [Day2Precip] + [Day3Precip] + [Day4Precip] + [Day5Precip] + [Day6Precip] + [Day7Precip]"
            WeeklyPrecipitationRaster = pAlgbOp.Execute(StrExpression)

            pNewRBD = WeeklyPrecipitationRaster
            Dim sFormat As String
            sFormat = "GRID"

            ' Check if file exist
            DeleteRasterFiles("WPrec" & m_Day1STR, "Precip")

            ' write out the dataset that was created in memory:
            If pNewRBD.SaveAs("WPrec" & m_Day1STR, pWS2, sFormat) Is Nothing Then
                MessageBox.Show("Problem saving raster WeeklyPrecip" & m_Day1STR)
            End If
        End Try
        'Dim pFeatureClass_Flds As IFeatureClass
        'pFeatureClass_Flds = pFeatureLayer_Flds.FeatureClass

        ' Started inserted code after this point
        Dim pMxDoc As IMxDocument
        pMxDoc = m_app.Document
        Dim pMap As IMap
        pMap = pMxDoc.FocusMap
        Dim pQF As IQueryFilter
        Dim pQF_2 As IQueryFilter
        Dim pQF_3 As IQueryFilter

        ' set up query filter with where clause
        pQF = New QueryFilter
        pQF_3 = New QueryFilter
        If Upstream_or_not1 Then
            If CurrentDate < #1/1/2002# Or CurrentDate > #12/31/2003# Then
                pQF.WhereClause = "Phil_Fld = 1" 'code will need to account for which year we're dealing with
            Else
                pQF.WhereClause = "Phil_Fld = 0"
            End If
            pQF_3.WhereClause = "CSU_Region = 'Upstream'"
        Else
            If CurrentDate < #1/1/2004# Then
                pQF.WhereClause = "Eric_Fld = 0"
            Else
                pQF.WhereClause = "Eric_Fld = 1"
            End If
            pQF_3.WhereClause = "CSU_Region = 'Downstream'"
        End If

        ' Get the zone field for the zonal statistics procedure
        Dim eGeoDS_Flds As IGeoDataset
        Dim eGeoDS_NatVeg As IGeoDataset
        Dim eGeoDS_Trsk As IGeoDataset
        Dim strField_Flds As String = "FIELD_NO_TXT"
        Dim strField_NatVeg As String = "Poly_ID"
        Dim strField_Trsk As String = "Id"

        If TypeOf pFeatureLayer_Flds Is IFeatureLayer Then
            eGeoDS_Flds = pFeatureLayer_Flds.FeatureClass
            ' Now use the zone field "FIELD_NO_TXT"
            Dim pFDesc_Flds As IFeatureClassDescriptor
            pFDesc_Flds = New FeatureClassDescriptor
            pFDesc_Flds.Create(eGeoDS_Flds, pQF, strField_Flds)
            eGeoDS_Flds = pFDesc_Flds
        End If

        If TypeOf pFeatureLayer_NatVeg Is IFeatureLayer Then
            eGeoDS_NatVeg = pFeatureLayer_NatVeg.FeatureClass
            ' Now use the zone field "Poly_ID"
            Dim pFDesc_NatVeg As IFeatureClassDescriptor
            pFDesc_NatVeg = New FeatureClassDescriptor
            pFDesc_NatVeg.Create(eGeoDS_NatVeg, pQF_2, strField_NatVeg)
            eGeoDS_NatVeg = pFDesc_NatVeg
        End If

        If TypeOf pFeatureLayer_Trsk Is IFeatureLayer Then
            eGeoDS_Trsk = pFeatureLayer_Trsk.FeatureClass
            ' Now use the zone field "Id"
            Dim pFDesc_Trsk As IFeatureClassDescriptor
            pFDesc_Trsk = New FeatureClassDescriptor
            pFDesc_Trsk.Create(eGeoDS_Trsk, pQF_3, strField_Trsk)
            eGeoDS_Trsk = pFDesc_Trsk
        End If

        Dim eGeoDs1 As IGeoDataset
        Dim pRLayer As IRasterLayer = New RasterLayer
        pRLayer.CreateFromRaster(WeeklyPrecipitationRaster)
        eGeoDs1 = pRLayer.Raster

        ' Create a Spatial operator
        Dim pZoneOp As IZonalOp
        pZoneOp = New RasterZonalOp

        ' Set output workspace
        Dim pSR As ISpatialReference
        pSR = pMxDoc.FocusMap.SpatialReference
        Dim pEnv As IRasterAnalysisEnvironment
        CellSize = 50
        pEnv = SetRasterEnvironment(pZoneOp, CellSize)
        'pEnv.OutSpatialReference() = pSR
        pEnv.OutWorkspace = pWS2

        'Perform the Zonal Statistics operation for the irrigated fields
        Dim pZonalTable_Flds As ITable
        pZonalTable_Flds = pZoneOp.ZonalStatisticsAsTable(eGeoDS_Flds, eGeoDs1, True)

        'Perform the Zonal Statistics operation for the naturally vegetated areas
        Dim pZonalTable_NatVeg As ITable
        pZonalTable_NatVeg = pZoneOp.ZonalStatisticsAsTable(eGeoDS_NatVeg, eGeoDs1, True)

        'Perform the Zonal Statistics operation for the Tamarisk areas
        Dim pZonalTable_Trsk As ITable
        pZonalTable_Trsk = pZoneOp.ZonalStatisticsAsTable(eGeoDS_Trsk, eGeoDs1, True)

        'Dim pFields As IFields
        Dim i, j As Integer
        ' open database connection
        Dim DBName As String
        If Upstream_or_not1 Then
            DBName = myPath & "Arkansas River Valley\Entire_Basin\GIS\ArkansasBasinData.mdb"
        Else
            DBName = myPath & "Arkansas River Valley\Downstream\GIS\BaseModel.mdb"
        End If
        Dim db As dbutilities
        db = New dbutilities
        Dim pFeatWS As IFeatureWorkspace
        pFeatWS = db.OpenAccessDatabase(DBName)

        Dim ZonalTableName_Flds As String
        Dim ZonalTableName_NatVeg As String
        Dim ZonalTableName_Trsk As String
        Dim ZonalTableName As String
        ZonalTableName_Flds = "WeeklyPrecip_Estimate_Flds"  'Formerly "WeeksPrecip_ETEstimate"
        ZonalTableName_NatVeg = "WeeklyPrecip_Estimate_NatVeg"
        ZonalTableName_Trsk = "WeeklyPrecip_Estimate_Trsk"

        For i = 1 To 3
            Select Case i
                Case 1
                    ZonalTableName = ZonalTableName_Flds
                Case 2
                    ZonalTableName = ZonalTableName_NatVeg
                Case 3
                    ZonalTableName = ZonalTableName_Trsk
            End Select
            Try
                db.DeleteTableInDB(DBName, ZonalTableName, True)
            Catch ex As Exception
            End Try
        Next i

        'Write out the information from the zonal statistics procedure for the irrigated fields
        Dim pFields2 As IFields
        'pFields2 = pFeatWS.OpenTable("CropET_Framework").Fields
        '****Try Alternate Method****
        Dim pFeatWS_ProblemFix As IFeatureWorkspace
        pFeatWS_ProblemFix = db.OpenAccessDatabase("C:\Eric\Arkansas River Valley\Entire_Basin\GIS\Copy of ArkansasBasinData.mdb")
        pFields2 = pFeatWS_ProblemFix.OpenTable("CropEvapotranspiration_Framework").Fields
        '****End Alternate Method****
        Dim pAccTable As ITable
        pAccTable = pFeatWS.CreateTable(ZonalTableName_Flds, pFields2, Nothing, Nothing, "")

        ' Loop through the sorted cursor and write to new table
        Dim pRow As IRow
        Dim pCur, pCur2 As ICursor
        Dim pRowBuf As IRowBuffer

        'Open an insert cursor on the new table
        pCur2 = pAccTable.Insert(True)
        pRowBuf = pAccTable.CreateRowBuffer
        pCur = pZonalTable_Flds.Search(Nothing, True)
        'Dim PrecipRow As IRow                 'Formerly "cropRow"
        'Dim Field_NO_TXT_Row As Integer
        For j = 0 To pZonalTable_Flds.RowCount(Nothing) - 1
            pRow = pCur.NextRow
            If Not pRow Is Nothing Then
                pRowBuf.Value(0) = pRow.Value(1)    'GeoLoc
                pRowBuf.Value(2) = CurrentDate      'Date
                pRowBuf.Value(4) = pRow.Value(8)    'Precip
                pCur2.InsertRow(pRowBuf)
                i = i + 1
            End If
        Next j

        'The following chunk of code had to be inserted because I started getting an error message I didn't understand
        'This is all an attempt to get around that error.  
        'System.Runtime.InteropServices.Marshal.ReleaseComObject(pAccTable)
        'Dim EDM_TransferTable As DataTable
        'EDM_TransferTable = New DataTable
        'Dim dataRetriever As MyDBUtils = New MyDBUtils("C:\Eric\Arkansas River Valley\Entire_Basin\GIS\Temp_ProbFixDB.mdb")
        'EDM_TransferTable = dataRetriever.GetTableFromDB("SELECT WeeklyPrecip_Estimate_Flds.* FROM WeeklyPrecip_Estimate_Flds;", "WeeklyPrecip_Estimate_Flds")
        'Orig_Data.CreateTableInDB(EDM_TransferTable)
        'Orig_Data.InsertValuesInDBTable(EDM_TransferTable)
        'dataRetriever.CloseDBConnection()
        'System.Runtime.InteropServices.Marshal.ReleaseComObject(dataRetriever)

        'Write out the information from the zonal statistics procedure for the naturally vegetated areas
        Dim pFields2_NatVeg As IFields
        pFields2_NatVeg = pFeatWS.OpenTable("NatVegEvapotranspiration_Framework").Fields()
        Dim pAccTable_NatVeg As ITable
        pAccTable_NatVeg = pFeatWS.CreateTable(ZonalTableName_NatVeg, pFields2_NatVeg, Nothing, Nothing, "")
        Dim pRow_NatVeg As IRow
        Dim pCur_NatVeg, pCur2_NatVeg As ICursor
        Dim pRowBuf_NatVeg As IRowBuffer
        pCur2_NatVeg = pAccTable_NatVeg.Insert(True)
        pRowBuf_NatVeg = pAccTable_NatVeg.CreateRowBuffer
        pCur_NatVeg = pZonalTable_NatVeg.Search(Nothing, True)
        For j = 0 To pZonalTable_NatVeg.RowCount(Nothing) - 1
            pRow_NatVeg = pCur_NatVeg.NextRow
            If Not pRow_NatVeg Is Nothing Then
                pRowBuf_NatVeg.Value(0) = pRow_NatVeg.Value(1)  'GeoLoc
                pRowBuf_NatVeg.Value(1) = CurrentDate           'Date
                pRowBuf_NatVeg.Value(2) = pRow_NatVeg.Value(7)  'Precip
                pCur2_NatVeg.InsertRow(pRowBuf_NatVeg)
                i = i + 1
            End If
        Next j

        'Write out the information from the zonal statistics procedure for the tamarisk areas
        Dim pFields2_Trsk As IFields
        pFields2_Trsk = pFeatWS.OpenTable("TamariskEvapotranspiration_Framework").Fields()
        Dim pAccTable_Trsk As ITable
        pAccTable_Trsk = pFeatWS.CreateTable(ZonalTableName_Trsk, pFields2_Trsk, Nothing, Nothing, "")
        Dim pRow_Trsk As IRow
        Dim pCur_Trsk, pCur2_Trsk As ICursor
        Dim pRowBuf_Trsk As IRowBuffer
        pCur2_Trsk = pAccTable_Trsk.Insert(True)
        pRowBuf_Trsk = pAccTable_Trsk.CreateRowBuffer
        pCur_Trsk = pZonalTable_Trsk.Search(Nothing, True)
        For j = 0 To pZonalTable_Trsk.RowCount(Nothing) - 1
            pRow_Trsk = pCur_Trsk.NextRow
            If Not pRow_Trsk Is Nothing Then
                pRowBuf_Trsk.Value(0) = pRow_Trsk.Value(1)  'GeoLoc
                pRowBuf_Trsk.Value(1) = CurrentDate         'Date
                pRowBuf_Trsk.Value(2) = pRow_Trsk.Value(7)  'Precip
                pCur2_Trsk.InsertRow(pRowBuf_Trsk)
                i = i + 1
            End If
        Next j

        db = Nothing
        'System.Runtime.InteropServices.Marshal.ReleaseComObject(db)

    End Function

    Public Function Calculate_Weekly_ET_Amt(ByVal CurrentDate As Date, ByRef Orig_Data As MyDBUtils, _
                                            ByVal connToETDb As System.Data.OleDb.OleDbConnection, ByVal pWSF3 As IWorkspaceFactory, _
                                            ByVal m_app As IApplication, ByVal pFeatureLayer_Flds As IFeatureLayer, ByVal pFeatureLayer_NatVeg As IFeatureLayer, ByVal pFeatureLayer_Trsk As IFeatureLayer)

        connToETDb.Open()
        Dim Kc As Single
        Dim Kratio As Single    'added on 3/5/2010
        Dim Zr As Single
        Dim TAW As Single

        Dim Flds_Table As DataTable
        Dim NatVeg_Table As DataTable
        Dim Trsk_Table As DataTable

        Static CreateTableFirstTimeFlag As Boolean = True
        Dim m_Day1STR As String
        Dim m_Day2STR As String
        Dim m_Day3STR As String
        Dim m_Day4STR As String
        Dim m_Day5STR As String
        Dim m_Day6STR As String
        Dim m_Day7STR As String
        SetDailyDateStrings(m_Day1STR, m_Day2STR, m_Day3STR, m_Day4STR, m_Day5STR, m_Day6STR, m_Day7STR, CurrentDate)

        Dim pWS3 As IWorkspace
        pWS3 = pWSF3.OpenFromFile(ETDataLocation1, 0)
        Dim pRasWS As IRasterWorkspace          'Needed to load rasters from the hard drive
        pRasWS = pWSF3.OpenFromFile(ETDataLocation1, 0)

        Dim Day1RasterDataset As IRasterDataset
        Dim Day2RasterDataset As IRasterDataset
        Dim Day3RasterDataset As IRasterDataset
        Dim Day4RasterDataset As IRasterDataset
        Dim Day5RasterDataset As IRasterDataset
        Dim Day6RasterDataset As IRasterDataset
        Dim Day7RasterDataset As IRasterDataset
        Dim pLayer_Day1ET As IRaster
        Dim pLayer_Day2ET As IRaster
        Dim pLayer_Day3ET As IRaster
        Dim pLayer_Day4ET As IRaster
        Dim pLayer_Day5ET As IRaster
        Dim pLayer_Day6ET As IRaster
        Dim pLayer_Day7ET As IRaster
        Dim eRasterDay1 As IRasterLayer = New RasterLayer
        Dim eRasterDay2 As IRasterLayer = New RasterLayer
        Dim eRasterDay3 As IRasterLayer = New RasterLayer
        Dim eRasterDay4 As IRasterLayer = New RasterLayer
        Dim eRasterDay5 As IRasterLayer = New RasterLayer
        Dim eRasterDay6 As IRasterLayer = New RasterLayer
        Dim eRasterDay7 As IRasterLayer = New RasterLayer

        Day1RasterDataset = pRasWS.OpenRasterDataset("eto" & m_Day1STR)
        Day2RasterDataset = pRasWS.OpenRasterDataset("eto" & m_Day2STR)
        Day3RasterDataset = pRasWS.OpenRasterDataset("eto" & m_Day3STR)
        Day4RasterDataset = pRasWS.OpenRasterDataset("eto" & m_Day4STR)
        Day5RasterDataset = pRasWS.OpenRasterDataset("eto" & m_Day5STR)
        Day6RasterDataset = pRasWS.OpenRasterDataset("eto" & m_Day6STR)
        Day7RasterDataset = pRasWS.OpenRasterDataset("eto" & m_Day7STR)
        pLayer_Day1ET = Day1RasterDataset.CreateDefaultRaster
        pLayer_Day2ET = Day2RasterDataset.CreateDefaultRaster
        pLayer_Day3ET = Day3RasterDataset.CreateDefaultRaster
        pLayer_Day4ET = Day4RasterDataset.CreateDefaultRaster
        pLayer_Day5ET = Day5RasterDataset.CreateDefaultRaster
        pLayer_Day6ET = Day6RasterDataset.CreateDefaultRaster
        pLayer_Day7ET = Day7RasterDataset.CreateDefaultRaster
        eRasterDay1.CreateFromRaster(pLayer_Day1ET)
        eRasterDay2.CreateFromRaster(pLayer_Day2ET)
        eRasterDay3.CreateFromRaster(pLayer_Day3ET)
        eRasterDay4.CreateFromRaster(pLayer_Day4ET)
        eRasterDay5.CreateFromRaster(pLayer_Day5ET)
        eRasterDay6.CreateFromRaster(pLayer_Day6ET)
        eRasterDay7.CreateFromRaster(pLayer_Day7ET)

        pLayer_Day1ET = eRasterDay1.Raster
        pLayer_Day2ET = eRasterDay2.Raster
        pLayer_Day3ET = eRasterDay3.Raster
        pLayer_Day4ET = eRasterDay4.Raster
        pLayer_Day5ET = eRasterDay5.Raster
        pLayer_Day6ET = eRasterDay6.Raster
        pLayer_Day7ET = eRasterDay7.Raster

        'Dim pGeoDs1 As IGeoDataset
        Dim pAlgbOp As IMapAlgebraOp
        pAlgbOp = New RasterMapAlgebraOp

        ' Bind the rasters
        pAlgbOp.BindRaster(pLayer_Day1ET, "Day1ET")
        pAlgbOp.BindRaster(pLayer_Day2ET, "Day2ET")
        pAlgbOp.BindRaster(pLayer_Day3ET, "Day3ET")
        pAlgbOp.BindRaster(pLayer_Day4ET, "Day4ET")
        pAlgbOp.BindRaster(pLayer_Day5ET, "Day5ET")
        pAlgbOp.BindRaster(pLayer_Day6ET, "Day6ET")
        pAlgbOp.BindRaster(pLayer_Day7ET, "Day7ET")

        ' Set output workspace 
        'Dim pRasterEnv As IRasterAnalysisEnvironment
        'CellSize = 36
        'pRasterEnv = SetRasterEnvironment(pAlgbOp, CellSize)

        ' Define result raster
        'Dim WeeklyETRaster As IRaster
        'Dim pNewRBD As IRasterBandCollection
        'Dim StrExpression As String

        'StrExpression = "[Day1ET] + [Day2ET] + [Day3ET] + [Day4ET] + [Day5ET] + [Day6ET] + [Day7ET]"
        'WeeklyETRaster = pAlgbOp.Execute(StrExpression)
        'pNewRBD = WeeklyETRaster
        'Dim sFormat As String
        'sFormat = "GRID"

        ' Check if the file exist
        'DeleteRasterFiles("WEt_" & m_Day1STR, "ET")

        ' Write out the dataset that was created in memory:
        'If pNewRBD.SaveAs("WEt_" & m_Day1STR, pWS3, sFormat) Is Nothing Then
        '    MessageBox.Show("Problem saving raster WEt_" & m_Day1STR)
        'End If

        'Dim pFeatureClass_Flds As IFeatureClass
        'pFeatureClass_Flds = pFeatureLayer_Flds.FeatureClass

        Dim pMxDoc As IMxDocument
        pMxDoc = m_app.Document
        Dim pMap As IMap
        pMap = pMxDoc.FocusMap
        Dim pQF As IQueryFilter
        Dim pQF_2 As IQueryFilter
        Dim pQF_3 As IQueryFilter

        ' set up query filter with where clause
        pQF = New QueryFilter
        pQF_3 = New QueryFilter

        ' If Upstream_or_not is true then dealing with upstream region, otherwise dealing with downstream
        If Upstream_or_not1 Then
            If CurrentDate < #1/1/2002# Or CurrentDate > #12/31/2003# Then
                pQF.WhereClause = "Phil_Fld = 1" 'code will need to account for which year we're dealing with
            Else
                pQF.WhereClause = "Phil_Fld = 0"
            End If
            pQF_3.WhereClause = "CSU_Region = 'Upstream'"
        Else 'downstream case
            If CurrentDate < #12/31/2003# Then
                pQF.WhereClause = "Eric_Fld = 0" 'code will need to account for which year we're dealing with
            Else
                pQF.WhereClause = "Eric_Fld = 1"
            End If
            pQF_3.WhereClause = "CSU_Region = 'Downstream'"
        End If

        ' Get the zone field for the zonal statistics procedure
        Dim eGeoDS_Flds As IGeoDataset
        Dim eGeoDS_NatVeg As IGeoDataset
        Dim eGeoDS_Trsk As IGeoDataset
        Dim pFDesc_Flds As IFeatureClassDescriptor
        Dim pFDesc_NatVeg As IFeatureClassDescriptor
        Dim pFDesc_Trsk As IFeatureClassDescriptor
        Dim strField_Flds As String = "FIELD_NO_TXT"
        Dim strField_NatVeg As String = "Poly_ID"
        Dim strField_Trsk As String = "Id"

        'Perform the setup for doing the irrigated fields zonal statistics
        If TypeOf pFeatureLayer_Flds Is IFeatureLayer Then
            eGeoDS_Flds = pFeatureLayer_Flds.FeatureClass
            ' Now use the zone field "FIELD_NO_TXT"
            pFDesc_Flds = New FeatureClassDescriptor
            pFDesc_Flds.Create(eGeoDS_Flds, pQF, strField_Flds)
            eGeoDS_Flds = pFDesc_Flds
        End If

        'Perform the setup for doing the natural area zonal statistics
        If TypeOf pFeatureLayer_NatVeg Is IFeatureLayer Then
            eGeoDS_NatVeg = pFeatureLayer_NatVeg.FeatureClass
            ' Now use the zone field "Poly_ID"
            pFDesc_NatVeg = New FeatureClassDescriptor
            pFDesc_NatVeg.Create(eGeoDS_NatVeg, pQF_2, strField_NatVeg)
            eGeoDS_NatVeg = pFDesc_NatVeg
        End If

        'Perform the setup for doing the Tamarisk zonal statistics
        If TypeOf pFeatureLayer_Trsk Is IFeatureLayer Then
            eGeoDS_Trsk = pFeatureLayer_Trsk.FeatureClass
            ' Now use the zone field "Id"
            pFDesc_Trsk = New FeatureClassDescriptor
            pFDesc_Trsk.Create(eGeoDS_Trsk, pQF_3, strField_Trsk)
            eGeoDS_Trsk = pFDesc_Trsk
        End If

        ' Start the for loop here for computing each day's et
        Dim DayInTS As Integer
        Dim eGeoDS1 As IGeoDataset
        Dim pRLayer As IRasterLayer = New RasterLayer

        ' Create a Spatial Operator
        Dim pZoneOp As IZonalOp
        pZoneOp = New RasterZonalOp

        ' set output workspace
        Dim pSR As ISpatialReference
        pSR = pMxDoc.FocusMap.SpatialReference
        Dim pEnv As IRasterAnalysisEnvironment
        CellSize = 36
        pEnv = SetRasterEnvironment(pZoneOp, CellSize)
        pEnv.OutWorkspace = pWS3

        Dim pZonalTable_Flds As ITable
        Dim pZonalTable_NatVeg As ITable
        Dim pZonalTable_Trsk As ITable
        Dim pFields_Flds As IFields
        Dim pFields_NatVeg As IFields
        Dim pFields_Trsk As IFields

        Dim j As Integer

        ' open database connection
        Dim DBName As String
        If Upstream_or_not1 Then
            DBName = myPath & "Arkansas River Valley\Entire_Basin\GIS\ArkansasBasinData.mdb"
        Else    'The downstream case
            DBName = myPath & "Arkansas River Valley\Downstream\GIS\BaseModel.mdb"
        End If

        Dim db As dbutilities
        db = New dbutilities
        Dim pFeatWS As IFeatureWorkspace
        pFeatWS = db.OpenAccessDatabase(DBName)

        Dim ZonalTableName As String
        Dim ZonalTableName_Flds As String
        Dim ZonalTableName_NatVeg As String
        Dim ZonalTableName_Trsk As String
        ZonalTableName_Flds = "WeeklyET_Estimate_Flds"
        ZonalTableName_NatVeg = "WeeklyET_Estimate_NatVeg"
        ZonalTableName_Trsk = "WeeklyET_Estimate_Trsk"

        Flds_Table = Orig_Data.GetTableFromDB("SELECT CropEvapotranspiration_Framework.* FROM CropEvapotranspiration_Framework;", "CropEvapotranspiration_Framework")
        NatVeg_Table = Orig_Data.GetTableFromDB("SELECT NatVegEvapotranspiration_Framework.* FROM NatVegEvapotranspiration_Framework;", "NatVegEvapotranspiration_Framework")
        Trsk_Table = Orig_Data.GetTableFromDB("SELECT TamariskEvapotranspiration_Framework.* FROM TamariskEvapotranspiration_Framework;", "TamariskEvapotranspiration_Framework")

        Flds_Table.TableName = ZonalTableName_Flds
        NatVeg_Table.TableName = ZonalTableName_NatVeg
        Trsk_Table.TableName = ZonalTableName_Trsk

        Dim pRow_Flds As IRow
        Dim pCursor1_Flds As ICursor ', pCursor2_Flds As ICursor
        'Dim pRowBuf_Flds As IRowBuffer

        Dim pRow_NatVeg As IRow
        Dim pCursor1_NatVeg As ICursor ', pCursor2_NatVeg As ICursor
        'Dim pRowBuf_NatVeg As IRowBuffer

        Dim pRow_Trsk As IRow
        Dim pCursor1_Trsk As ICursor ', pCursor2_Trsk As ICursor
        'Dim pRowBuf_Trsk As IRowBuffer

        'Dim pAppendTableWithETData_Flds As ITable
        'Dim pAppendTableWithETData_NatVeg As ITable
        'Dim pAppendTableWithETData_Trsk As ITable
        'If CreateTableFirstTimeFlag Then
        'pAppendTableWithETData_Flds = pFeatWS.CreateTable(ZonalTableName_Flds, pFields_Flds, Nothing, Nothing, "")
        'pAppendTableWithETData_NatVeg = pFeatWS.CreateTable(ZonalTableName_NatVeg, pFields_NatVeg, Nothing, Nothing, "")
        'pAppendTableWithETData_Trsk = pFeatWS.CreateTable(ZonalTableName_Trsk, pFields_Trsk, Nothing, Nothing, "")
        'CreateTableFirstTimeFlag = False
        'System.Runtime.InteropServices.Marshal.ReleaseComObject(pFeatWS)
        'End If

        'pCursor2_Flds = pAppendTableWithETData_Flds.Insert(True)
        'pCursor2_NatVeg = pAppendTableWithETData_NatVeg.Insert(True)
        'pCursor2_Trsk = pAppendTableWithETData_Trsk.Insert(True)
        'pRowBuf_Flds = pAppendTableWithETData_Flds.CreateRowBuffer
        'pRowBuf_NatVeg = pAppendTableWithETData_NatVeg.CreateRowBuffer
        'pRowBuf_Trsk = pAppendTableWithETData_Trsk.CreateRowBuffer
        Dim incrementingDate As Date
        Dim Flds_DR As DataRow
        Dim NatVeg_DR As DataRow
        Dim Trsk_DR As DataRow

        Dim BugFlag As Boolean = False
        If (Year(CurrentDate) <> Year(CurrentDate.AddDays(7)) And (Year(CurrentDate) = 2001 Or Year(CurrentDate) = 2003)) Then
            BugFlag = True
        End If

        'added 3/5/2010:  A little bit of background:  I previously had ETo rasters calcualted for the 
        'valley so that I could use Kc values from Table 12 in FAO56.  Then I went ETr rasters because
        'we felt since that is what the state is using we better get on board.  Turns out the state values
        'are flat wrong, based on discussions with Dr. Gates 3/4/2010.  At this point I'm going to continue
        'to use the ETr rasters (tall reference ET) but go back to using the Kc values from Table 12 that 
        'are meant to be used with the short reference values.  What I plan on doing to correct the Kc
        'values is follow the procedure given on page 133 of FAO56.  My Kratio = 1.26 (see write-up)
        Kratio = 1.2 + (0.04 * (2.79 - 2) - 0.004 * (29 - 45)) * Math.Pow(0.5 / 3, 0.3)


        For DayInTS = 1 To 7
            Select Case DayInTS
                Case 1
                    pRLayer.CreateFromRaster(pLayer_Day1ET)
                    incrementingDate = CurrentDate
                Case 2
                    pRLayer.CreateFromRaster(pLayer_Day2ET)
                    incrementingDate = CurrentDate.AddDays(1)
                Case 3
                    pRLayer.CreateFromRaster(pLayer_Day3ET)
                    incrementingDate = CurrentDate.AddDays(2)
                Case 4
                    pRLayer.CreateFromRaster(pLayer_Day4ET)
                    incrementingDate = CurrentDate.AddDays(3)
                Case 5
                    pRLayer.CreateFromRaster(pLayer_Day5ET)
                    incrementingDate = CurrentDate.AddDays(4)
                Case 6
                    pRLayer.CreateFromRaster(pLayer_Day6ET)
                    incrementingDate = CurrentDate.AddDays(5)
                Case 7
                    pRLayer.CreateFromRaster(pLayer_Day7ET)
                    incrementingDate = CurrentDate.AddDays(6)
            End Select
            eGeoDS1 = pRLayer.Raster

            pZonalTable_Flds = pZoneOp.ZonalStatisticsAsTable(eGeoDS_Flds, eGeoDS1, True)
            pZonalTable_NatVeg = pZoneOp.ZonalStatisticsAsTable(eGeoDS_NatVeg, eGeoDS1, True)
            pZonalTable_Trsk = pZoneOp.ZonalStatisticsAsTable(eGeoDS_Trsk, eGeoDS1, True)
            pCursor1_Flds = pZonalTable_Flds.Search(Nothing, True)
            pCursor1_NatVeg = pZonalTable_NatVeg.Search(Nothing, True)
            pCursor1_Trsk = pZonalTable_Trsk.Search(Nothing, True)

            'Fill the table for the fields ET analysis
            For j = 0 To pZonalTable_Flds.RowCount(Nothing) - 1
                Flds_DR = Flds_Table.NewRow()
                pRow_Flds = pCursor1_Flds.NextRow
                If Not pRow_Flds Is Nothing Then
                    Flds_DR("FIELD_NO_TXT") = pRow_Flds.Value(1)
                    'It seems the compiler was skipping over this code (it was coming up with the wrong Kc value)
                    'so placing an if statement here seems to have forced the code to step in and run this code
                    'Leave it here if only for this reason.  There is another area in the code that seems like it
                    'was behaving this way.
                    If pRow_Flds.Value(1) = "22582303" Then
                        pRow_Flds.Value(1) = pRow_Flds.Value(1)
                    End If
                    Flds_DR("DATE_") = incrementingDate
                    Flds_DR("ETo") = pRow_Flds.Value(8)
                    Kc = Calculate_Kc(connToETDb, incrementingDate, pRow_Flds.Value(1))
                    Flds_DR("Kc") = Kc / Kratio     'explanation of Kratio found on page 133 of FAO56
                    Flds_DR("ETc") = (Kc / Kratio) * pRow_Flds.Value(8)
                    If pRow_Flds.Value(1) = "22463303" Then
                        Dim dumby As String
                        dumby = "dummy"
                    End If
                    Zr = Calculate_Zr(connToETDb, incrementingDate, pRow_Flds.Value(1), BugFlag, DayInTS)
                    Flds_DR("Zr") = Zr
                    TAW = Calculate_TAW(pRow_Flds.Value(1), Zr, connToETDb)
                    Flds_DR("TAW") = TAW
                    Flds_DR("RAW") = Calculate_RAW(pRow_Flds.Value(1), TAW, CurrentDate, connToETDb)
                    Flds_Table.Rows.Add(Flds_DR)
                End If
            Next j
            'Fill the table for the naturally vegetated areas ET analysis
            For j = 0 To pZonalTable_NatVeg.RowCount(Nothing) - 1
                NatVeg_DR = NatVeg_Table.NewRow()
                pRow_NatVeg = pCursor1_NatVeg.NextRow
                If Not pRow_NatVeg Is Nothing Then
                    NatVeg_DR("Poly_ID") = pRow_NatVeg.Value(1)             'GeoLoc
                    NatVeg_DR("Date_") = incrementingDate                   'Date
                    NatVeg_DR("ETo") = pRow_NatVeg.Value(7)                 'ETo
                    NatVeg_DR("Kc") = 1             'Because the calced ETo is a tall reference to start with, no modification necessary   'Kc
                    NatVeg_DR("ETc") = pRow_NatVeg.Value(7) * 1 'an explicit formulation
                    NatVeg_Table.Rows.Add(NatVeg_DR)
                End If
            Next j

            'Fill the table for the tamarisk vegetated areas ET analysis
            For j = 0 To pZonalTable_Trsk.RowCount(Nothing) - 1
                Trsk_DR = Trsk_Table.NewRow()
                pRow_Trsk = pCursor1_Trsk.NextRow
                If Not pRow_Trsk Is Nothing Then
                    Trsk_DR("Id") = pRow_Trsk.Value(1)     'GeoLoc
                    Trsk_DR("Date_") = incrementingDate         'Date
                    Trsk_DR("ETo") = pRow_Trsk.Value(7)         'ETo
                    Trsk_DR("Kc") = 1       'Because the calced ETo is a grass reference to start with, no modification necessary   'Kc
                    Trsk_DR("ETc") = pRow_Trsk.Value(7) * 1     'an explicit formulation
                    Trsk_Table.Rows.Add(Trsk_DR)
                End If
            Next j

        Next DayInTS

        'Keep in mind that Orig_Data here is passed in and will already be either upstream or downstream controlled
        Orig_Data.CreateTableInDB(Flds_Table)
        Orig_Data.InsertValuesInDBTable(Flds_Table)
        Orig_Data.CreateTableInDB(NatVeg_Table)
        Orig_Data.InsertValuesInDBTable(NatVeg_Table)
        Orig_Data.CreateTableInDB(Trsk_Table)
        Orig_Data.InsertValuesInDBTable(Trsk_Table)

        Dim QueryString2 As String
        Dim TableToDelete As String
        Dim SumOfETc_Table_Flds As String = "SumOfETc_Table_Flds"
        Dim SumOfETc_Table_NatVeg As String = "SumOfETc_Table_NatVeg"
        Dim SumOfETc_Table_Trsk As String = "SumOfETc_Table_Trsk"


        ' This is a "Make Table Query" and updates SumOfETc_Table_Flds table:  Look at "MakeTable_SumOfETc_Table_Flds" Query in ArkansasBasinData.mdb
        QueryString2 = "SELECT WeeklyET_Estimate_Flds.FIELD_NO_TXT, Sum(WeeklyET_Estimate_Flds.ETo) AS SumOfETo, Avg(WeeklyET_Estimate_Flds.Kc) AS AvgOfKc, Sum(WeeklyET_Estimate_Flds.ETc) AS SumOfETc, Avg(WeeklyET_Estimate_Flds.Zr) AS AvgOfZr, Avg(WeeklyET_Estimate_Flds.TAW) AS AvgOfTAW, Avg(WeeklyET_Estimate_Flds.RAW) AS AvgOfRAW INTO SumOfETc_Table_Flds "
        QueryString2 += "FROM WeeklyET_Estimate_Flds "
        QueryString2 += "GROUP BY WeeklyET_Estimate_Flds.FIELD_NO_TXT;"

        'connToAVDb.Open()
        'Dim myCMD As OleDbCommand
        'Dim myReader As OleDbDataReader
        'myCMD = New OleDbCommand
        'myCMD.Connection = connToAVDb
        'myCMD.CommandText = QueryString2
        'myCMD.ExecuteNonQuery()
        Try
            Dim i As Integer = Orig_Data.ExecuteQuery(QueryString2)
        Catch ex As Exception
            MsgBox(ex.Message, MsgBoxStyle.Information)
        End Try
        If Upstream_or_not1 Then
            QueryString2 = "UPDATE (Combined INNER JOIN WeeklyPrecip_Estimate_Flds ON Combined.FIELD_NO_TXT = WeeklyPrecip_Estimate_Flds.FIELD_NO_TXT) INNER JOIN " & SumOfETc_Table_Flds & " ON WeeklyPrecip_Estimate_Flds.FIELD_NO_TXT = " & SumOfETc_Table_Flds & ".FIELD_NO_TXT SET WeeklyPrecip_Estimate_Flds.DITCH = [Combined]![CANAL], WeeklyPrecip_Estimate_Flds.ETo = [" & SumOfETc_Table_Flds & "]![SumOfETo], WeeklyPrecip_Estimate_Flds.Kc = [" & SumOfETc_Table_Flds & "]![AvgOfKc], WeeklyPrecip_Estimate_Flds.ETc = [" & SumOfETc_Table_Flds & "]![SumOfETc], WeeklyPrecip_Estimate_Flds.Zr = [" & SumOfETc_Table_Flds & "]![AvgOfZr], WeeklyPrecip_Estimate_Flds.TAW = [" & SumOfETc_Table_Flds & "]![AvgOfTAW], WeeklyPrecip_Estimate_Flds.RAW = [" & SumOfETc_Table_Flds & "]![AvgOfRAW];"
        Else  'the downstream case
            QueryString2 = "UPDATE (Combined_DS INNER JOIN WeeklyPrecip_Estimate_Flds ON Combined_DS.FIELD_NO_TXT = WeeklyPrecip_Estimate_Flds.FIELD_NO_TXT) INNER JOIN " & SumOfETc_Table_Flds & " ON WeeklyPrecip_Estimate_Flds.FIELD_NO_TXT = " & SumOfETc_Table_Flds & ".FIELD_NO_TXT SET WeeklyPrecip_Estimate_Flds.DITCH = [Combined_DS]![CANAL], WeeklyPrecip_Estimate_Flds.ETo = [" & SumOfETc_Table_Flds & "]![SumOfETo], WeeklyPrecip_Estimate_Flds.Kc = [" & SumOfETc_Table_Flds & "]![AvgOfKc], WeeklyPrecip_Estimate_Flds.ETc = [" & SumOfETc_Table_Flds & "]![SumOfETc], WeeklyPrecip_Estimate_Flds.Zr = [" & SumOfETc_Table_Flds & "]![AvgOfZr], WeeklyPrecip_Estimate_Flds.TAW = [" & SumOfETc_Table_Flds & "]![AvgOfTAW], WeeklyPrecip_Estimate_Flds.RAW = [" & SumOfETc_Table_Flds & "]![AvgOfRAW];"
        End If
        Orig_Data.ExecuteQuery(QueryString2)

        '******************************************************
        '3/8/10: Due to something odd with the Kc values I'm writing temp
        'code that is meant to dump table to the tmp directory for look over.
        'Everything between the "***" is debug code and should be eligible
        'for delete once I get to the bottom of the problem.
        'Dim m_table As DataTable
        'Dim p As Integer
        'Dim k As Integer
        'm_table = Orig_Data.GetTableFromDB("SELECT * FROM SumOfETc_Table_Flds", "SumOfETc_Table_Flds")
        'Dim sw As StreamWriter = New StreamWriter("C:\tmp\SumOfETc_Table_Flds" & CurrentDate.ToString("MMddyyyy") & ".txt")
        'For p = 0 To m_table.Rows.Count() - 1
        '    For k = 0 To m_table.Columns.Count() - 1
        '        sw.Write(m_table.Rows(p)(k) & vbTab)
        '    Next k
        '    sw.Write(vbNewLine)
        '    sw.Flush()
        'Next p
        'm_table = Nothing
        'sw.Close()
        '******************************************************

        'myCMD.CommandText = QueryString2
        'myCMD.ExecuteNonQuery()

        'This is a "Make Table Query" and updates SumOfETc_Table_NatVeg table:  Look at "MakeTable_SumOfETc_Table_NatVeg" Query in ArkansasBasinData.mdb
        QueryString2 = "SELECT WeeklyET_Estimate_NatVeg.Poly_ID, Sum(WeeklyET_Estimate_NatVeg.ETo) AS SumOfETo, Avg(WeeklyET_Estimate_NatVeg.Kc) AS AvgOfKc, Sum(WeeklyET_Estimate_NatVeg.ETc) AS SumOfETc INTO SumOfETc_Table_NatVeg "
        QueryString2 += "FROM WeeklyET_Estimate_NatVeg "
        QueryString2 += "GROUP BY WeeklyET_Estimate_NatVeg.Poly_ID;"
        'myCMD.CommandText = QueryString2
        Try
            'Dim i As Integer = myCMD.ExecuteNonQuery()
            Orig_Data.ExecuteQuery(QueryString2)
        Catch ex As Exception
            MsgBox(ex.Message, MsgBoxStyle.Information)
        End Try
        QueryString2 = "UPDATE WeeklyPrecip_Estimate_NatVeg INNER JOIN " & SumOfETc_Table_NatVeg & " ON WeeklyPrecip_Estimate_NatVeg.Poly_ID = " & SumOfETc_Table_NatVeg & ".Poly_ID SET WeeklyPrecip_Estimate_NatVeg.ETo = [" & SumOfETc_Table_NatVeg & "]![SumOfETo], WeeklyPrecip_Estimate_NatVeg.Kc = [" & SumOfETc_Table_NatVeg & "]![AvgOfKc], WeeklyPrecip_Estimate_NatVeg.ETc = [" & SumOfETc_Table_NatVeg & "]![SumOfETc];"
        Orig_Data.ExecuteQuery(QueryString2)
        'myCMD.CommandText = QueryString2
        'myCMD.ExecuteNonQuery()

        'This is a "Make Table Query" and updates SumOfETc_Table_NatVeg table:  Look at "MakeTable_SumOfETc_Table_NatVeg" Query in ArkansasBasinData.mdb
        QueryString2 = "SELECT WeeklyET_Estimate_Trsk.Id, Sum(WeeklyET_Estimate_Trsk.ETo) AS SumOfETo, Avg(WeeklyET_Estimate_Trsk.Kc) AS AvgOfKc, Sum(WeeklyET_Estimate_Trsk.ETc) AS SumOfETc INTO SumOfETc_Table_Trsk "
        QueryString2 += "FROM WeeklyET_Estimate_Trsk "
        QueryString2 += "GROUP BY WeeklyET_Estimate_Trsk.Id;"
        'myCMD.CommandText = QueryString2
        Try
            'Dim i As Integer = myCMD.ExecuteNonQuery()
            Orig_Data.ExecuteQuery(QueryString2)
        Catch ex As Exception
            MsgBox(ex.Message, MsgBoxStyle.Information)
        End Try
        QueryString2 = "UPDATE WeeklyPrecip_Estimate_Trsk INNER JOIN " & SumOfETc_Table_Trsk & " ON WeeklyPrecip_Estimate_Trsk.Id = " & SumOfETc_Table_Trsk & ".Id SET WeeklyPrecip_Estimate_Trsk.ETo = [" & SumOfETc_Table_Trsk & "]![SumOfETo], WeeklyPrecip_Estimate_Trsk.Kc = [" & SumOfETc_Table_Trsk & "]![AvgOfKc], WeeklyPrecip_Estimate_Trsk.ETc = [" & SumOfETc_Table_Trsk & "]![SumOfETc];"
        Orig_Data.ExecuteQuery(QueryString2)
        'myCMD.CommandText = QueryString2
        'myCMD.ExecuteNonQuery()

        'connToAVDb.Close()

        connToETDb.Close()
        connToETDb = Nothing

    End Function
    Public Function Calculate_Weekly_ET_Amt_UseExistingData(ByVal CurrentDate As Date, ByVal Output_Data As MyDBUtils, _
                                                            ByVal Cop_Data As MyDBUtils)
        Dim TempTable As DataTable
        Dim TempTable2 As DataTable
        Dim TempRow As DataRow
        Dim QueryString As String
        Dim DateString As String = QueryDateString(CurrentDate)
        Dim i As Integer

        If Upstream_or_not1 Then
            QueryString = "SELECT WaterAllocation" & DateString & ".Field_No AS FIELD_NO_TXT, Combined.CANAL AS DITCH, WaterAllocation" & DateString & ".Date_, 0 AS Random_No, WaterAllocation" & DateString & ".Precip_Amt, 0 AS ETo, 0 AS Kc, WaterAllocation" & DateString & ".ETc, WaterAllocation" & DateString & ".Zr, WaterAllocation" & DateString & ".TAW, WaterAllocation" & DateString & ".RAW "
            QueryString += "FROM WaterAllocation" & DateString & " INNER JOIN Combined ON WaterAllocation" & DateString & ".Field_No = Combined.FIELD_NO "
            QueryString += "ORDER BY WaterAllocation" & DateString & ".Field_No;"
        Else
            QueryString = "SELECT WaterAllocation" & DateString & ".Field_No AS FIELD_NO_TXT, Combined_DS.CANAL AS DITCH, WaterAllocation" & DateString & ".Date_, 0 AS Random_No, WaterAllocation" & DateString & ".Precip_Amt, 0 AS ETo, 0 AS Kc, WaterAllocation" & DateString & ".ETc, WaterAllocation" & DateString & ".Zr, WaterAllocation" & DateString & ".TAW, WaterAllocation" & DateString & ".RAW "
            QueryString += "FROM WaterAllocation" & DateString & " INNER JOIN Combined_DS ON WaterAllocation" & DateString & ".Field_No = Combined_DS.FIELD_NO "
            QueryString += "ORDER BY WaterAllocation" & DateString & ".Field_No;"
        End If

        TempTable = Output_Data.GetTableFromDB(QueryString, "WeeklyPrecip_Estimate_Flds")

        TempTable2 = TempTable.Clone()
        TempTable2.Columns(0).DataType = System.Type.GetType("System.String")
        For i = 1 To TempTable.Rows.Count()
            TempRow = TempTable2.NewRow()
            TempRow(0) = TempTable.Rows(i - 1)(0)
            TempRow(1) = TempTable.Rows(i - 1)(1)
            TempRow(2) = TempTable.Rows(i - 1)(2)
            TempRow(3) = TempTable.Rows(i - 1)(3)
            TempRow(4) = TempTable.Rows(i - 1)(4)
            TempRow(5) = TempTable.Rows(i - 1)(5)
            TempRow(6) = TempTable.Rows(i - 1)(6)
            TempRow(7) = TempTable.Rows(i - 1)(7)
            TempRow(8) = TempTable.Rows(i - 1)(8)
            TempRow(9) = TempTable.Rows(i - 1)(9)
            TempRow(10) = TempTable.Rows(i - 1)(10)
            TempTable2.Rows.Add(TempRow)
        Next i

        If Cop_Data.TableExist("WeeklyPrecip_Estimate_Flds") Then
            Cop_Data.DeleteExistingTables("WeeklyPrecip_Estimate_Flds")
        End If
        Cop_Data.CreateTableInDB(TempTable2)
        Cop_Data.InsertValuesInDBTable(TempTable2)

        TempTable.Dispose()
        TempTable2.Dispose()
    End Function
    Private Sub DeleteRasterFiles(ByVal rastername As String, ByVal Process As String)
        Try
            Dim pWSF As IWorkspaceFactory
            pWSF = New RasterWorkspaceFactory
            Dim OpenRasterDataset As IRasterDataset
            Dim PathToUse As String

            If Process = "Precip" Then
                PathToUse = NEXRADDataLocation1
            ElseIf Process = "ET" Then
                PathToUse = ETDataLocation1
            End If

            ' Get RasterWorkspace
            Dim pRasWS As IRasterWorkspace
            If pWSF.IsWorkspace(PathToUse) Then
                pRasWS = pWSF.OpenFromFile(PathToUse, 0)
                OpenRasterDataset = pRasWS.OpenRasterDataset(rastername)
            End If

            If Not OpenRasterDataset Is Nothing Then
                Dim m_dataset As IDataset = OpenRasterDataset
                m_dataset.Delete()
            End If
        Catch ex As Exception
        End Try
    End Sub

    Private Sub AddRasterToMap(ByVal m_raster As Raster, ByVal rasterName As String, ByVal m_app As IApplication)

        ' Add it into ArcMap 
        Dim pMxDoc As IMxDocument
        Dim pMap As IMap
        Dim pActiveView As IActiveView
        pMxDoc = m_app.Document
        Dim pRLayer As IRasterLayer = New RasterLayer
        pRLayer.CreateFromRaster(m_raster)
        pRLayer.Name = rasterName
        pMxDoc.FocusMap.AddLayer(pRLayer)

    End Sub

    Public Sub SetDailyDateStrings(ByRef m_Day1STR As String, ByRef m_Day2STR As String, ByRef m_Day3STR As String, ByRef m_Day4STR As String, _
                                   ByRef m_Day5STR As String, ByRef m_Day6STR As String, ByRef m_Day7STR As String, ByVal CurrentDate As Date)

        Dim CurrentYear As String
        Dim CurrentMonth As String
        Dim CurrentDay As String
        Dim NextWeeksDate As Date
        Dim SubsequentYear As String
        Dim SubsequentMonth As String
        Dim SubsequentDay As String
        CurrentYear = CStr(Year(CurrentDate))
        CurrentMonth = CStr(Month(CurrentDate))
        CurrentDay = CStr(Microsoft.VisualBasic.DateAndTime.Day(CurrentDate))
        NextWeeksDate = CurrentDate.AddDays(7)
        SubsequentYear = CStr(Year(NextWeeksDate))
        SubsequentMonth = CStr(Month(NextWeeksDate))
        SubsequentDay = CStr(Microsoft.VisualBasic.DateAndTime.Day(NextWeeksDate))

        Dim Day2 As String
        Dim Day3 As String
        Dim Day4 As String
        Dim Day5 As String
        Dim Day6 As String
        Dim Day7 As String

        If CInt(SubsequentDay) - CInt(CurrentDay) >= 7 Then
76:         If CInt(CurrentMonth) < 10 Then
                CurrentMonth = "0" & CurrentMonth
            End If
            If CInt(CurrentDay) < 10 Then
                CurrentDay = "0" & CurrentDay
            End If
            m_Day1STR = CurrentMonth & CurrentDay & CurrentYear

            Day2 = CStr(CInt(CurrentDay) + 1)
            If CInt(Day2) < 10 Then
                Day2 = "0" & Day2
            End If
            m_Day2STR = CurrentMonth & Day2 & CurrentYear

            Day3 = CStr(CInt(CurrentDay) + 2)
            If CInt(Day3) < 10 Then
                Day3 = "0" & Day3
            End If
            m_Day3STR = CurrentMonth & Day3 & CurrentYear

            Day4 = CStr(CInt(CurrentDay) + 3)
            If CInt(Day4) < 10 Then
                Day4 = "0" & Day4
            End If
            m_Day4STR = CurrentMonth & Day4 & CurrentYear

            Day5 = CStr(CInt(CurrentDay) + 4)
            If CInt(Day5) < 10 Then
                Day5 = "0" & Day5
            End If
            m_Day5STR = CurrentMonth & Day5 & CurrentYear

            Day6 = CStr(CInt(CurrentDay) + 5)
            If CInt(Day6) < 10 Then
                Day6 = "0" & Day6
            End If
            m_Day6STR = CurrentMonth & Day6 & CurrentYear

            Day7 = CStr(CInt(CurrentDay) + 6)
            If CInt(Day7) < 10 Then
                Day7 = "0" & Day7
            End If
            m_Day7STR = CurrentMonth & Day7 & CurrentYear
        Else
            Dim DaysLeftInCurrentMonth As Integer
            DaysLeftInCurrentMonth = System.DateTime.DaysInMonth(CurrentYear, CurrentMonth)
            DaysLeftInCurrentMonth = DaysLeftInCurrentMonth - CurrentDay + 1
            If CInt(CurrentMonth) < 10 Then
                CurrentMonth = "0" & CurrentMonth
            End If
            If CInt(SubsequentMonth) < 10 Then
                SubsequentMonth = "0" & SubsequentMonth
            End If
            Select Case DaysLeftInCurrentMonth
                Case "1"
                    m_Day1STR = CurrentMonth & CurrentDay & CurrentYear
                    m_Day2STR = SubsequentMonth & "01" & SubsequentYear
                    m_Day3STR = SubsequentMonth & "02" & SubsequentYear
                    m_Day4STR = SubsequentMonth & "03" & SubsequentYear
                    m_Day5STR = SubsequentMonth & "04" & SubsequentYear
                    m_Day6STR = SubsequentMonth & "05" & SubsequentYear
                    m_Day7STR = SubsequentMonth & "06" & SubsequentYear
                Case "2"
                    m_Day1STR = CurrentMonth & CurrentDay & CurrentYear
                    m_Day2STR = CurrentMonth & CStr(CInt(CurrentDay) + 1) & CurrentYear
                    m_Day3STR = SubsequentMonth & "01" & SubsequentYear
                    m_Day4STR = SubsequentMonth & "02" & SubsequentYear
                    m_Day5STR = SubsequentMonth & "03" & SubsequentYear
                    m_Day6STR = SubsequentMonth & "04" & SubsequentYear
                    m_Day7STR = SubsequentMonth & "05" & SubsequentYear
                Case "3"
                    m_Day1STR = CurrentMonth & CurrentDay & CurrentYear
                    m_Day2STR = CurrentMonth & CStr(CInt(CurrentDay) + 1) & CurrentYear
                    m_Day3STR = CurrentMonth & CStr(CInt(CurrentDay) + 2) & CurrentYear
                    m_Day4STR = SubsequentMonth & "01" & SubsequentYear
                    m_Day5STR = SubsequentMonth & "02" & SubsequentYear
                    m_Day6STR = SubsequentMonth & "03" & SubsequentYear
                    m_Day7STR = SubsequentMonth & "04" & SubsequentYear
                Case "4"
                    m_Day1STR = CurrentMonth & CurrentDay & CurrentYear
                    m_Day2STR = CurrentMonth & CStr(CInt(CurrentDay) + 1) & CurrentYear
                    m_Day3STR = CurrentMonth & CStr(CInt(CurrentDay) + 2) & CurrentYear
                    m_Day4STR = CurrentMonth & CStr(CInt(CurrentDay) + 3) & CurrentYear
                    m_Day5STR = SubsequentMonth & "01" & SubsequentYear
                    m_Day6STR = SubsequentMonth & "02" & SubsequentYear
                    m_Day7STR = SubsequentMonth & "03" & SubsequentYear
                Case "5"
                    m_Day1STR = CurrentMonth & CurrentDay & CurrentYear
                    m_Day2STR = CurrentMonth & CStr(CInt(CurrentDay) + 1) & CurrentYear
                    m_Day3STR = CurrentMonth & CStr(CInt(CurrentDay) + 2) & CurrentYear
                    m_Day4STR = CurrentMonth & CStr(CInt(CurrentDay) + 3) & CurrentYear
                    m_Day5STR = CurrentMonth & CStr(CInt(CurrentDay) + 4) & CurrentYear
                    m_Day6STR = SubsequentMonth & "01" & SubsequentYear
                    m_Day7STR = SubsequentMonth & "02" & SubsequentYear
                Case "6"
                    m_Day1STR = CurrentMonth & CurrentDay & CurrentYear
                    m_Day2STR = CurrentMonth & CStr(CInt(CurrentDay) + 1) & CurrentYear
                    m_Day3STR = CurrentMonth & CStr(CInt(CurrentDay) + 2) & CurrentYear
                    m_Day4STR = CurrentMonth & CStr(CInt(CurrentDay) + 3) & CurrentYear
                    m_Day5STR = CurrentMonth & CStr(CInt(CurrentDay) + 4) & CurrentYear
                    m_Day6STR = CurrentMonth & CStr(CInt(CurrentDay) + 5) & CurrentYear
                    m_Day7STR = SubsequentMonth & "01" & SubsequentYear
                Case "7"
                    CurrentMonth = CStr(Month(CurrentDate))
                    GoTo 76
            End Select
        End If
    End Sub

    Private Function SetRasterEnvironment(ByVal m_object As Object, ByVal CellSize As Single) As IRasterAnalysisEnvironment
        'Create the raster environment
        Dim pRasterEnv As IRasterAnalysisEnvironment
        pRasterEnv = m_object
        pRasterEnv.SetCellSize(esriRasterEnvSettingEnum.esriRasterEnvValue, CellSize)
        Dim pExt As IEnvelope
        pExt = New Envelope
        pExt.XMax = 838769
        pExt.YMax = 4365393
        pExt.XMin = 357809
        pExt.YMin = 4032136
        pRasterEnv.SetExtent(esriRasterEnvSettingEnum.esriRasterEnvMaxOf, pExt)
        Return pRasterEnv
    End Function

    Private Function Calculate_Kc(ByRef conn As System.Data.OleDb.OleDbConnection, ByVal m_date As Date, ByVal GeoLoc As String) As Double

        Dim Kc As Double
        Dim NumRows As Integer = 0
        Dim CurDay As Integer
        Dim CropType As String
        Dim PlantingDate As Integer
        Dim HarvestDate As Integer
        'Dim FirstDate As Date
        Dim LastFrost As Date
        Dim LastFrost_JDay As Integer
        Dim FirstFrost As Date
        Dim FirstFrost_JDay As Integer
        Dim Lini As Integer
        Dim Lini2 As Integer
        Dim Ldev As Integer
        Dim Ldev2 As Integer
        Dim Lmid As Integer
        Dim Lmid2 As Integer
        Dim Lend As Integer
        Dim Lend2 As Integer
        Dim Kcini As Double
        Dim Kcini2 As Double
        Dim Kcmid As Double
        Dim Kcmid2 As Double
        Dim Kcend As Double
        Dim Kcend2 As Double

        Dim QueryString As String

        'If (m_date > #12/31/2002#) Then
        '    QueryString = "SELECT Fields_03.GEOLOC, Fields_03.CROPTXT03, Kc_LOOKUP.*"
        '    QueryString += " FROM Fields_03 INNER JOIN Kc_LOOKUP ON Fields_03.CROPTXT03 = Kc_LOOKUP.CROP"
        '    QueryString += " WHERE (((Fields_03.GEOLOC)=" & GeoLoc & "));"
        'ElseIf (m_date < #1/1/2002#) Then
        '    QueryString = "SELECT Fields_01.GEOLOC, Fields_01.CROPTXT01, Kc_LOOKUP.*"                           'Added by EDM for Phil's Field's Analysis
        '    QueryString += " FROM (Fields_01 INNER JOIN CropKey ON Fields_01.CROPTXT01 = CropKey.CROPTXT01) INNER JOIN Kc_LOOKUP ON CropKey.CROPTXT03 = Kc_LOOKUP.CROP" 'Added by EDM for Phil's Field's Analysis
        '    QueryString += " WHERE (((Fields_01.GEOLOC)=" & GeoLoc & "));"                                      'Added by EDM for Phil's Field's Analysis
        'End If

        If Upstream_or_not1 Then
            QueryString = "SELECT Combined.FIELD_NO_TXT, Combined.CROPS" & Right(CStr(Year(m_date)), 2) & ", Kc_LOOKUP.* "
            QueryString += "FROM (Combined INNER JOIN CropKey ON Combined.CROPS" & Right(CStr(Year(m_date)), 2) & " = CropKey.INITIAL_CROP_CODE) INNER JOIN Kc_LOOKUP ON CropKey.FINAL_CROP_CODE = Kc_LOOKUP.CROP "
            QueryString += "WHERE (((Combined.FIELD_NO_TXT)=""" & GeoLoc & """));"
        Else
            QueryString = "SELECT Combined_DS.FIELD_NO_TXT, Combined_DS.CROPS" & Right(CStr(Year(m_date)), 2) & ", Kc_LOOKUP.* "
            QueryString += "FROM (Combined_DS INNER JOIN CropKey ON Combined_DS.CROPS" & Right(CStr(Year(m_date)), 2) & " = CropKey.INITIAL_CROP_CODE) INNER JOIN Kc_LOOKUP ON CropKey.FINAL_CROP_CODE = Kc_LOOKUP.CROP "
            QueryString += "WHERE (((Combined_DS.FIELD_NO_TXT)=""" & GeoLoc & """));"
        End If

        Dim myCMD As OleDbCommand
        Dim myReader As OleDbDataReader
        myCMD = New OleDbCommand(QueryString, conn)
        myReader = myCMD.ExecuteReader()

        Do While myReader.Read()
            NumRows += 1
            If myReader.GetValue(myReader.GetOrdinal("STAGE")) = "First" Then
                PlantingDate = myReader.GetValue(myReader.GetOrdinal("GROW_START"))
                HarvestDate = myReader.GetValue(myReader.GetOrdinal("GROW_END"))
                Lini = myReader.GetValue(myReader.GetOrdinal("LEN_ini"))
                Ldev = myReader.GetValue(myReader.GetOrdinal("LEN_dev"))
                Lmid = myReader.GetValue(myReader.GetOrdinal("LEN_mid"))
                Lend = myReader.GetValue(myReader.GetOrdinal("LEN_end"))
                Kcini = myReader.GetValue(myReader.GetOrdinal("Kc_ini"))
                Kcmid = myReader.GetValue(myReader.GetOrdinal("Kc_mid"))
                Kcend = myReader.GetValue(myReader.GetOrdinal("Kc_end"))
                CropType = myReader.GetValue(myReader.GetOrdinal("CROP"))
                'PlantingRootDepth = myReader.GetValue(myReader.GetOrdinal("PLANT_ROOT_DEPTH"))
                'MaxRootDepth = myReader.GetValue(myReader.GetOrdinal("MAX_ROOT_DEPTH"))
            ElseIf myReader.GetValue(myReader.GetOrdinal("STAGE")) = "Sub" Then
                Lini2 = myReader.GetValue(myReader.GetOrdinal("LEN_ini"))
                Ldev2 = myReader.GetValue(myReader.GetOrdinal("LEN_dev"))
                Lmid2 = myReader.GetValue(myReader.GetOrdinal("LEN_mid"))
                Lend2 = myReader.GetValue(myReader.GetOrdinal("LEN_end"))
                Kcini2 = myReader.GetValue(myReader.GetOrdinal("Kc_ini"))
                Kcmid2 = myReader.GetValue(myReader.GetOrdinal("Kc_mid"))
                Kcend2 = myReader.GetValue(myReader.GetOrdinal("Kc_end"))
            End If
        Loop
        myReader.Close()
        Dim yearStr As Integer
        yearStr = Year(m_date)
        If NumRows = 2 Then
            QueryString = "SELECT Frost_Info.FROST_YEAR, Frost_Info.FROST_LAST, Frost_Info.FROST_FIRST"
            QueryString += " FROM Frost_Info"
            QueryString += " WHERE (((Frost_Info.FROST_YEAR)=" & yearStr & "));"

            myCMD = New OleDbCommand(QueryString, conn)
            myReader = myCMD.ExecuteReader()
            myReader.Read()
            LastFrost = myReader.GetValue(1)
            LastFrost_JDay = CalculateJulienDay(LastFrost)
            FirstFrost = myReader.GetValue(2)
            FirstFrost_JDay = CalculateJulienDay(FirstFrost)
        End If
        myReader.Close()

        ' Convert the current date to a julian day (Jan 1st = 1, Feb 1 = 32, etc.)
        CurDay = CalculateJulienDay(m_date)

        ' Figure out where that day falls in the Kc Curve and return Kc
        If CropType = "ALFALFA" Or CropType = "GRASS" Then
            If CurDay <= LastFrost_JDay Then
                ' Adjust this number based on what we want the ET to be before the crop starts growing
                Kc = Kcini
            ElseIf (CurDay > LastFrost_JDay And CurDay <= FirstFrost_JDay) Then
                If CurDay <= LastFrost_JDay + Lini Then
                    Kc = Kcini
                ElseIf (CurDay > LastFrost_JDay + Lini And CurDay <= LastFrost_JDay + Lini + Ldev) Then
                    Kc = (((Kcmid - Kcini) / Ldev) * (CurDay - (LastFrost_JDay + Lini))) + Kcini
                ElseIf (CurDay > LastFrost_JDay + Lini + Ldev And CurDay <= LastFrost_JDay + Lini + Ldev + Lmid) Then
                    Kc = Kcmid
                ElseIf (CurDay > LastFrost_JDay + Lini + Ldev + Lmid And CurDay <= LastFrost_JDay + Lini + Ldev + Lmid + Lend) Then
                    Kc = Kcmid - (((Kcmid - Kcend) / Lend) * (CurDay - (LastFrost_JDay + Lini + Ldev + Lmid)))
                ElseIf (CurDay > LastFrost_JDay + Lini + Ldev + Lmid + Lend And CurDay <= LastFrost_JDay + Lini + Ldev + Lmid + Lend + Lini2) Then
                    Kc = Kcini2
                ElseIf (CurDay > LastFrost_JDay + Lini + Ldev + Lmid + Lend + Lini2 And CurDay <= LastFrost_JDay + Lini + Ldev + Lmid + Lend + Lini2 + Ldev2) Then
                    Kc = (((Kcmid2 - Kcini2) / Ldev2) * (CurDay - (LastFrost_JDay + Lini + Ldev + Lmid + Lend + Lini2))) + Kcini2
                ElseIf (CurDay > LastFrost_JDay + Lini + Ldev + Lmid + Lend + Lini2 + Ldev2 And CurDay <= LastFrost_JDay + Lini + Ldev + Lmid + Lend + Lini2 + Ldev2 + Lmid2) Then
                    Kc = Kcmid2
                ElseIf (CurDay > LastFrost_JDay + Lini + Ldev + Lmid + Lend + Lini2 + Ldev2 + Lmid2 And CurDay <= LastFrost_JDay + Lini + Ldev + Lmid + Lend + Lini2 + Ldev2 + Lmid2 + Lend2) Then
                    Kc = Kcmid2 - (((Kcmid2 - Kcend2) / Lend2) * (CurDay - (LastFrost_JDay + Lini + Ldev + Lmid + Lend + Lini2 + Ldev2 + Lmid2)))
                ElseIf (CurDay > LastFrost_JDay + Lini + Ldev + Lmid + Lend + Lini2 + Ldev2 + Lmid2 + Lend2 And CurDay <= LastFrost_JDay + Lini + Ldev + Lmid + Lend + (2 * Lini2) + Ldev2 + Lmid2 + Lend2) Then
                    Kc = Kcini2
                ElseIf (CurDay > LastFrost_JDay + Lini + Ldev + Lmid + Lend + (2 * Lini2) + Ldev2 + Lmid2 + Lend2 And CurDay <= LastFrost_JDay + Lini + Ldev + Lmid + Lend + (2 * Lini2) + (2 * Ldev2) + Lmid2 + Lend2) Then
                    Kc = (((Kcmid2 - Kcini2) / Ldev2) * (CurDay - (LastFrost_JDay + Lini + Ldev + Lmid + Lend + (2 * Lini2) + Ldev2 + Lmid2 + Lend2))) + Kcini2
                ElseIf (CurDay > LastFrost_JDay + Lini + Ldev + Lmid + Lend + (2 * Lini2) + (2 * Ldev2) + Lmid2 + Lend2 And CurDay <= LastFrost_JDay + Lini + Ldev + Lmid + Lend + (2 * Lini2) + (2 * Ldev2) + (2 * Lmid2) + Lend2) Then
                    Kc = Kcmid2
                ElseIf (CurDay > LastFrost_JDay + Lini + Ldev + Lmid + Lend + (2 * Lini2) + (2 * Ldev2) + (2 * Lmid2) + Lend2 And CurDay <= LastFrost_JDay + Lini + Ldev + Lmid + Lend + (2 * Lini2) + (2 * Ldev2) + (2 * Lmid2) + (2 * Lend2)) Then
                    Kc = Kcmid2 - (((Kcmid2 - Kcend2) / Lend2) * (CurDay - (LastFrost_JDay + Lini + Ldev + Lmid + Lend + (2 * Lini2) + (2 * Ldev2) + (2 * Lmid2) + Lend2)))
                ElseIf (CurDay > LastFrost_JDay + Lini + Ldev + Lmid + Lend + (2 * Lini2) + (2 * Ldev2) + (2 * Lmid2) + (2 * Lend2) And CurDay <= LastFrost_JDay + Lini + Ldev + Lmid + Lend + (3 * Lini2) + (2 * Ldev2) + (2 * Lmid2) + (2 * Lend2)) Then
                    Kc = Kcini2
                ElseIf (CurDay > LastFrost_JDay + Lini + Ldev + Lmid + Lend + (3 * Lini2) + (2 * Ldev2) + (2 * Lmid2) + (2 * Lend2) And CurDay <= LastFrost_JDay + Lini + Ldev + Lmid + Lend + (3 * Lini2) + (3 * Ldev2) + (2 * Lmid2) + (2 * Lend2)) Then
                    Kc = (((Kcmid2 - Kcini2) / Ldev2) * (CurDay - (LastFrost_JDay + Lini + Ldev + Lmid + Lend + (3 * Lini2) + (2 * Ldev2) + (2 * Lmid2) + (2 * Lend2)))) + Kcini2
                ElseIf (CurDay > LastFrost_JDay + Lini + Ldev + Lmid + Lend + (3 * Lini2) + (3 * Ldev2) + (2 * Lmid2) + (2 * Lend2) And CurDay <= LastFrost_JDay + Lini + Ldev + Lmid + Lend + (3 * Lini2) + (3 * Ldev2) + (3 * Lmid2) + (2 * Lend2)) Then
                    Kc = Kcmid2
                ElseIf (CurDay > LastFrost_JDay + Lini + Ldev + Lmid + Lend + (3 * Lini2) + (3 * Ldev2) + (3 * Lmid2) + (2 * Lend2) And CurDay <= LastFrost_JDay + Lini + Ldev + Lmid + Lend + (3 * Lini2) + (3 * Ldev2) + (3 * Lmid2) + (3 * Lend2)) Then
                    Kc = Kcmid2 - (((Kcmid2 - Kcend2) / Lend2) * (CurDay - (LastFrost_JDay + Lini + Ldev + Lmid + Lend + (3 * Lini2) + (3 * Ldev2) + (3 * Lmid2) + (2 * Lend2))))
                End If
            ElseIf (CurDay > FirstFrost_JDay) Then
                ' Adjust this number based on what we want the ET to be after the first frost of the season when the crop stops growing
                Kc = Kcini
            End If
        ElseIf CropType = "WHEAT" Then
            If CurDay <= HarvestDate Then
                ' Then next If statement accounts for leap years.  the reason for the year being one year larger than leap years is because
                ' this is dealing with the carry over from the previous year.
                If (Not (yearStr = 2001 Or yearStr = 2005 Or yearStr = 2009 Or yearStr = 2013)) Then
                    If CurDay <= 40 Then
                        Kc = Kcini
                    ElseIf (CurDay > 40 And CurDay <= 40 + Ldev) Then
                        Kc = ((Kcmid - Kcini) / Ldev) * (CurDay - 40) + Kcini
                    ElseIf (CurDay > 40 + Ldev And CurDay <= 40 + Ldev + Lmid) Then
                        Kc = Kcmid
                    ElseIf (CurDay > 40 + Ldev + Lmid And CurDay <= 40 + Ldev + Lmid + Lend) Then
                        Kc = Kcmid - (((Kcmid - Kcend) / Lend) * (CurDay - (40 + Ldev + Lmid)))
                    End If
                Else
                    If CurDay <= 39 Then
                        Kc = Kcini
                    ElseIf (CurDay > 39 And CurDay <= 39 + Ldev) Then
                        Kc = ((Kcmid - Kcini) / Ldev) * (CurDay - 39) + Kcini
                    ElseIf (CurDay > 39 + Ldev And CurDay <= 39 + Ldev + Lmid) Then
                        Kc = Kcmid
                    ElseIf (CurDay > 39 + Ldev + Lmid And CurDay <= 39 + Ldev + Lmid + Lend) Then
                        Kc = Kcmid - (((Kcmid - Kcend) / Lend) * (CurDay - (39 + Ldev + Lmid)))
                    End If
                End If
            ElseIf (CurDay > HarvestDate And CurDay <= PlantingDate) Then
                ' Adjust this number based on what we want the ET to be after the first frost of the season when the crop stops growing
                Kc = Kcini
            ElseIf (CurDay > PlantingDate) Then
                Kc = Kcini
            End If
        Else    ' For all other crop types
            If CurDay <= PlantingDate Then
                ' Adjust this number based on what we want the ET to be after the first frost of the season when the crop stops growing
                Kc = Kcini
            ElseIf (CurDay > PlantingDate And CurDay <= HarvestDate) Then
                If (CurDay <= PlantingDate + Lini) Then
                    Kc = Kcini
                ElseIf (CurDay > PlantingDate + Lini And CurDay <= PlantingDate + Lini + Ldev) Then
                    Kc = ((Kcmid - Kcini) / Ldev) * (CurDay - (PlantingDate + Lini)) + Kcini
                ElseIf (CurDay > PlantingDate + Lini + Ldev And CurDay <= PlantingDate + Lini + Ldev + Lmid) Then
                    Kc = Kcmid
                ElseIf (CurDay > PlantingDate + Lini + Ldev + Lmid And CurDay <= PlantingDate + Lini + Ldev + Lmid + Lend) Then
                    Kc = Kcmid - (((Kcmid - Kcend) / Lend) * (CurDay - (PlantingDate + Lini + Ldev + Lmid)))
                End If
            ElseIf (CurDay > HarvestDate) Then
                ' Adjust this number based on what we want the ET to be after the first frost of the season when the crop stops growing
                Kc = Kcini
            Else    'added 12-19-09 as a stop gap for fallow fields
                Kc = 0.45   'this is the average of all Kcini
            End If
        End If
        Return Kc
    End Function

    Private Function Calculate_Zr(ByVal connToETDb As System.Data.OleDb.OleDbConnection, ByVal CurrentDate As Date, ByVal FieldNumber As String, _
                                  ByVal BugFlag As Boolean, ByVal j As Integer) As Double

        Dim Zr As Double
        Dim PlantingDate As Integer
        Dim HarvestDate As Integer
        Dim CropType As String
        Dim Lini As Integer
        Dim Ldev As Integer
        Dim Lmid As Integer
        Dim Lend As Integer
        Dim PlantingRootDepth As Double
        Dim MaxRootDepth As Double
        Dim QueryString As String
        Dim CurDay As Integer

        If BugFlag Then
            CurrentDate = CurrentDate.AddDays(-j + 1)
        End If

        If Upstream_or_not1 Then
            QueryString = "SELECT Combined.FIELD_NO_TXT, CropKey.FINAL_CROP_CODE, Kc_LOOKUP.GROW_START, Kc_LOOKUP.GROW_END, Kc_LOOKUP.LEN_ini, Kc_LOOKUP.LEN_dev, Kc_LOOKUP.LEN_mid, Kc_LOOKUP.LEN_end, Kc_LOOKUP.PLANT_ROOT_DEPTH, Kc_LOOKUP.MAX_ROOT_DEPTH "
            QueryString += "FROM (Combined INNER JOIN CropKey ON Combined.CROPS" & Right(CStr(Year(CurrentDate)), 2) & " = CropKey.INITIAL_CROP_CODE) INNER JOIN Kc_LOOKUP ON CropKey.FINAL_CROP_CODE = Kc_LOOKUP.CROP "
            QueryString += "WHERE (((Combined.FIELD_NO_TXT)=""" & FieldNumber & """));"
        Else
            QueryString = "SELECT Combined_DS.FIELD_NO_TXT, CropKey.FINAL_CROP_CODE, Kc_LOOKUP.GROW_START, Kc_LOOKUP.GROW_END, Kc_LOOKUP.LEN_ini, Kc_LOOKUP.LEN_dev, Kc_LOOKUP.LEN_mid, Kc_LOOKUP.LEN_end, Kc_LOOKUP.PLANT_ROOT_DEPTH, Kc_LOOKUP.MAX_ROOT_DEPTH "
            QueryString += "FROM (Combined_DS INNER JOIN CropKey ON Combined_DS.CROPS" & Right(CStr(Year(CurrentDate)), 2) & " = CropKey.INITIAL_CROP_CODE) INNER JOIN Kc_LOOKUP ON CropKey.FINAL_CROP_CODE = Kc_LOOKUP.CROP "
            QueryString += "WHERE (((Combined_DS.FIELD_NO_TXT)=""" & FieldNumber & """));"
        End If

        Dim myCMD As OleDbCommand
        Dim myReader As OleDbDataReader
        myCMD = New OleDbCommand(QueryString, connToETDb)
        myReader = myCMD.ExecuteReader()

        myReader.Read()
        CropType = myReader.GetValue(myReader.GetOrdinal("FINAL_CROP_CODE"))
        PlantingDate = myReader.GetValue(myReader.GetOrdinal("GROW_START"))
        HarvestDate = myReader.GetValue(myReader.GetOrdinal("GROW_END"))
        Lini = myReader.GetValue(myReader.GetOrdinal("LEN_ini"))
        Ldev = myReader.GetValue(myReader.GetOrdinal("LEN_dev"))
        Lmid = myReader.GetValue(myReader.GetOrdinal("LEN_mid"))
        Lend = myReader.GetValue(myReader.GetOrdinal("LEN_end"))
        PlantingRootDepth = myReader.GetValue(myReader.GetOrdinal("PLANT_ROOT_DEPTH"))
        MaxRootDepth = myReader.GetValue(myReader.GetOrdinal("MAX_ROOT_DEPTH"))
        myReader.Close()

        ' Convert the current date to a julian day (Jan 1st = 1, Feb 1 = 32, etc.)
        CurDay = CalculateJulienDay(CurrentDate)

        If CurDay < PlantingDate Or CurDay > HarvestDate Then
            Zr = PlantingRootDepth
        ElseIf CurDay >= PlantingDate And CurDay <= HarvestDate Then
            If Not (CropType = "ALFALFA" Or CropType = "GRASS" Or CropType = "FALLOW" Or CropType = "GRASS/PASTURE") Then   'This if statement to keep these crop types from getting a zero value out of the next if statement
                If CurDay < PlantingDate + Lini + Ldev + Lmid Then
                    Zr = PlantingRootDepth + (((MaxRootDepth - PlantingRootDepth) / (Lini + Ldev + Lmid)) * (CurDay - PlantingDate))
                Else
                    Zr = MaxRootDepth
                End If
            Else
                Zr = MaxRootDepth
            End If
        End If

        Return Zr
    End Function

    Private Function Calculate_TAW(ByVal FieldNo As Integer, ByVal Zr As Single, ByVal connToETDb As System.Data.OleDb.OleDbConnection) As Single

        'connToETDb.Open()
        Dim TAW As Single
        Dim QueryString As String

        If Upstream_or_not1 Then
            QueryString = "SELECT Combined.FIELD_NO_TXT, Combined.Theta_FC, Combined.Theta_WP "
            QueryString += "FROM(Combined) "
            QueryString += "WHERE (((Combined.FIELD_NO_TXT)=""" & FieldNo & """));"
        Else
            QueryString = "SELECT Combined_DS.FIELD_NO_TXT, Combined_DS.Theta_FC, Combined_DS.Theta_WP "
            QueryString += "FROM(Combined_DS) "
            QueryString += "WHERE (((Combined_DS.FIELD_NO_TXT)=""" & FieldNo & """));"
        End If

        Dim myCMD As OleDbCommand
        Dim myReader As OleDbDataReader
        myCMD = New OleDbCommand(QueryString, connToETDb)
        myReader = myCMD.ExecuteReader()
        Try
            myReader.Read()
        Catch ex As Exception
            MsgBox("Error calculating TAW: Field " & FieldNo & " not found.", MsgBoxStyle.OKOnly, "Error")
        End Try

        TAW = 1000 * (myReader.GetValue(myReader.GetOrdinal("Theta_FC")) - myReader.GetValue(myReader.GetOrdinal("Theta_WP"))) * Zr

        myReader.Close()
        'connToETDb.Close()
        Return TAW

    End Function

    Private Function Calculate_RAW(ByVal FieldNo As Integer, ByVal TAW As Single, ByVal CurrentDate As Date, ByVal connToETDb As System.data.oledb.OleDbConnection) As Single

        'connToETDb.Open()
        Dim RAW As Single
        Dim QueryString As String
        Dim YearString As String

        YearString = Right(CStr(CurrentDate), 2)

        If Upstream_or_not1 Then
            QueryString = "SELECT Combined.FIELD_NO_TXT, Kc_LOOKUP.[p(Depletion_Factor)] "
            QueryString += "FROM (Combined INNER JOIN CropKey ON Combined.CROPS" & YearString & " = CropKey.INITIAL_CROP_CODE) INNER JOIN Kc_LOOKUP ON CropKey.FINAL_CROP_CODE = Kc_LOOKUP.CROP "
            QueryString += "GROUP BY Combined.FIELD_NO_TXT, Kc_LOOKUP.[p(Depletion_Factor)] "
            QueryString += "HAVING (((Combined.FIELD_NO_TXT)=""" & FieldNo & """));"
        Else
            QueryString = "SELECT Combined_DS.FIELD_NO_TXT, Kc_LOOKUP.[p(Depletion_Factor)] "
            QueryString += "FROM (Combined_DS INNER JOIN CropKey ON Combined_DS.CROPS" & YearString & " = CropKey.INITIAL_CROP_CODE) INNER JOIN Kc_LOOKUP ON CropKey.FINAL_CROP_CODE = Kc_LOOKUP.CROP "
            QueryString += "GROUP BY Combined_DS.FIELD_NO_TXT, Kc_LOOKUP.[p(Depletion_Factor)] "
            QueryString += "HAVING (((Combined_DS.FIELD_NO_TXT)=""" & FieldNo & """));"
        End If

        Dim myCMD As OleDbCommand
        Dim myReader As OleDbDataReader
        myCMD = New OleDbCommand(QueryString, connToETDb)
        myReader = myCMD.ExecuteReader()
        Try
            myReader.Read()
        Catch ex As Exception
            MsgBox("Error calculating TAW: Field " & FieldNo & " not found.", MsgBoxStyle.OKOnly, "Error")
        End Try

        RAW = myReader.GetValue(myReader.GetOrdinal("p(Depletion_Factor)")) * TAW

        myReader.Close()
        'connToETDb.Close()
        Return RAW

    End Function

    Private Function CalculateJulienDay(ByVal m_date As String) As Integer
        Dim day_Value As Integer
        Dim month_Value As Integer
        Dim year_Value As Integer
        Dim j_day As Integer

        day_Value = Microsoft.VisualBasic.DateAndTime.Day(m_date)
        month_Value = Microsoft.VisualBasic.DateAndTime.Month(m_date)
        year_Value = Microsoft.VisualBasic.DateAndTime.Year(m_date)

        If Not (year_Value = 2000 Or year_Value = 2004 Or year_Value = 2008 Or year_Value = 2012) Then 'keep adding years as necessary
            If month_Value = 1 Then     'If not a leap year, use 28 days for february when determing the julien day from the first of the year
                j_day = day_Value
            ElseIf month_Value = 2 Then
                j_day = 31 + day_Value
            ElseIf month_Value = 3 Then
                j_day = 31 + 28 + day_Value
            ElseIf month_Value = 4 Then
                j_day = 31 + 28 + 31 + day_Value
            ElseIf month_Value = 5 Then
                j_day = 31 + 28 + 31 + 30 + day_Value
            ElseIf month_Value = 6 Then
                j_day = 31 + 28 + 31 + 30 + 31 + day_Value
            ElseIf month_Value = 7 Then
                j_day = 31 + 28 + 31 + 30 + 31 + 30 + day_Value
            ElseIf month_Value = 8 Then
                j_day = 31 + 28 + 31 + 30 + 31 + 30 + 31 + day_Value
            ElseIf month_Value = 9 Then
                j_day = 31 + 28 + 31 + 30 + 31 + 30 + 31 + 31 + day_Value
            ElseIf month_Value = 10 Then
                j_day = 31 + 28 + 31 + 30 + 31 + 30 + 31 + 31 + 30 + day_Value
            ElseIf month_Value = 11 Then
                j_day = 31 + 28 + 31 + 30 + 31 + 30 + 31 + 31 + 30 + 31 + day_Value
            ElseIf month_Value = 12 Then
                j_day = 31 + 28 + 31 + 30 + 31 + 30 + 31 + 31 + 30 + 31 + 30 + day_Value
            End If
        Else        'Code will jump here in the event of a leap year.  29 days for february is used in the addition
            If month_Value = 1 Then
                j_day = day_Value
            ElseIf month_Value = 2 Then
                j_day = 31 + day_Value
            ElseIf month_Value = 3 Then
                j_day = 31 + 29 + day_Value
            ElseIf month_Value = 4 Then
                j_day = 31 + 29 + 31 + day_Value
            ElseIf month_Value = 5 Then
                j_day = 31 + 29 + 31 + 30 + day_Value
            ElseIf month_Value = 6 Then
                j_day = 31 + 29 + 31 + 30 + 31 + day_Value
            ElseIf month_Value = 7 Then
                j_day = 31 + 29 + 31 + 30 + 31 + 30 + day_Value
            ElseIf month_Value = 8 Then
                j_day = 31 + 29 + 31 + 30 + 31 + 30 + 31 + day_Value
            ElseIf month_Value = 9 Then
                j_day = 31 + 29 + 31 + 30 + 31 + 30 + 31 + 31 + day_Value
            ElseIf month_Value = 10 Then
                j_day = 31 + 29 + 31 + 30 + 31 + 30 + 31 + 31 + 30 + day_Value
            ElseIf month_Value = 11 Then
                j_day = 31 + 29 + 31 + 30 + 31 + 30 + 31 + 31 + 30 + 31 + day_Value
            ElseIf month_Value = 12 Then
                j_day = 31 + 29 + 31 + 30 + 31 + 30 + 31 + 31 + 30 + 31 + 30 + day_Value
            End If
        End If
        Return j_day
    End Function

    Public Function CalculateRecharge(ByVal connToAVDb As System.Data.OleDb.OleDbConnection, ByVal connToETDb As System.Data.OleDb.OleDbConnection, _
                                      ByVal CurrentDate As Date, ByVal CatlinPumpedAmt_m3perWk As Single, ByVal FortLyonUSPumpedAmt_m3perWk As Single, _
                                      ByVal HolbrookPumpedAmt_m3perWk As Single, ByVal OteroPumpedAmt_m3perWk As Single, ByVal RockyFordPumpedAmt_m3perWk As Single, _
                                      ByVal RockyFordHighlinePumpedAmt_m3perWk As Single, ByVal AmityPumpedAmt_m3perWk As Single, _
                                      ByVal BuffaloPumpedAmt_m3perWk As Single, ByVal FortBentPumpedAmt_m3perWk As Single, ByVal FortLyonDSPumpedAmt_m3perWk As Single, _
                                      ByVal HydePumpedAmt_m3perWk As Single, ByVal LamarPumpedAmt_m3perWk As Single, ByVal XYGrahamPumpedAmt_m3perWk As Single, _
                                      ByVal CatlinDivertedAmt_m3perWk As Single, ByVal FortLyonDivertedAmt_m3perWk As Single, ByVal HolbrookDivertedAmt_m3perWk As Single, ByVal OteroDivertedAmt_m3perWk As Single, _
                                      ByVal RockyFordDivertedAmt_m3perWk As Single, ByVal RockyFordHighlineDivertedAmt_m3perWk As Single, _
                                      ByVal AmityDivertedAmt_m3perWk As Single, ByVal BuffaloDivertedAmt_m3perWk As Single, ByVal FortBentDivertedAmt_m3perWk As Single, _
                                      ByVal FortLyonDSDivertedAmt_m3perWk As Single, ByVal HydeDivertedAmt_m3perWk As Single, ByVal LamarDivertedAmt_m3perWk As Single) ', _
        'ByVal ActiveWells() As Object)


        'connToAVDb.Open()
        Dim QueryString As String
        Dim i As Integer = 1
        Dim CatlinDelivery_Efficiency As Single = 0.8
        Dim FortLyonUSDelivery_Efficiency As Single = 0.8
        Dim HolbrookDelivery_Efficiency As Single = 0.8
        Dim OteroDelivery_Efficiency As Single = 0.8
        Dim RockyFordDelivery_Efficiency As Single = 0.8
        Dim RockyFordHighlineDelivery_Efficiency As Single = 0.8
        Dim AmityDelivery_Efficiency As Single = 0.8
        Dim BuffaloDelivery_Efficiency As Single = 0.8
        Dim FortBentDelivery_Efficiency As Single = 0.8
        Dim FortLyonDSDelivery_Efficiency As Single = 0.8
        Dim HydeDelivery_Efficiency As Single = 0.8
        Dim LamarDelivery_Efficiency As Single = 0.8
        Dim Standard_Deviation As Single = 0.2
        Static CatlinETDemandMetByUpflux As Single = 0
        Static FortLyonUSETDemandMetByUpflux As Single = 0
        Static HolbrookETDemandMetByUpflux As Single = 0
        Static OteroETDemandMetByUpflux As Single = 0
        Static RockyFordETDemandMetByUpflux As Single = 0
        Static RockyFordHighlineETDemandMetByUpflux As Single = 0
        Static AmityETDemandMetByUpflux As Single = 0
        Static BuffaloETDemandMetByUpflux As Single = 0
        Static FortBentETDemandMetByUpflux As Single = 0
        Static FortLyonDSETDemandMetByUpflux As Single = 0
        Static HydeETDemandMetByUpflux As Single = 0
        Static LamarETDemandMetByUpflux As Single = 0
        Static XYGrahamETDemandMetByUpflux As Single = 0
        Dim Catlin_Reqd_vs_Appld As Single
        Dim FortLyonUS_Reqd_vs_Appld As Single
        Dim Holbrook_Reqd_vs_Appld As Single
        Dim Otero_Reqd_vs_Appld As Single
        Dim RockyFord_Reqd_vs_Appld As Single
        Dim RockyFordHighline_Reqd_vs_Appld As Single
        Dim Amity_Reqd_vs_Appld As Single
        Dim Buffalo_Reqd_vs_Appld As Single
        Dim FortBent_Reqd_vs_Appld As Single
        Dim FortLyonDS_Reqd_vs_Appld As Single
        Dim Hyde_Reqd_vs_Appld As Single
        Dim Lamar_Reqd_vs_Appld As Single
        Dim XYGraham_Reqd_vs_Appld As Single

        Dim CatlinTotalArea As Double
        Dim FortLyonTotalArea As Double
        Dim HolbrookTotalArea As Double
        Dim OteroTotalArea As Double
        Dim RockyFordTotalArea As Double
        Dim RockyFordHighlineTotalArea As Double
        Dim AmityTotalArea As Double
        Dim BuffaloTotalArea As Double
        Dim FortBentTotalArea As Double
        Dim HydeTotalArea As Double
        Dim LamarTotalArea As Double
        Dim XYGrahamTotalArea As Double

        Dim CatlinWithinArea As Double
        Dim FortLyonUSWithinArea As Double
        Dim HolbrookWithinArea As Double
        Dim OteroWithinArea As Double
        Dim RockyFordWithinArea As Double
        Dim RockyFordHighlineWithinArea As Double
        Dim AmityWithinArea As Double
        Dim BuffaloWithinArea As Double
        Dim FortBentWithinArea As Double
        Dim FortLyonDSWithinArea As Double
        Dim HydeWithinArea As Double
        Dim LamarWithinArea As Double
        Dim XYGrahamWithinArea As Double

        Dim DBName As String
        DBName = myPath & "Arkansas River Valley\Entire_Basin\GIS\ArkansasBasinData.mdb"
        Dim db As dbutilities
        db = New dbutilities
        Dim pFeatWS As IFeatureWorkspace
        pFeatWS = db.OpenAccessDatabase(DBName)

        Dim RechargeTableName As String = "RechargeCalculation_Framework"
        Dim myTable As ITable
        myTable = pFeatWS.OpenTable("CommandAreaAcreage")
        Dim myCursor As ICursor
        Dim myRow As IRow
        Dim myQF As IQueryFilter
        myQF = New QueryFilter

        Do
            Select Case i
                Case 1
                    myQF.WhereClause = "CANAL = 'Catlin Canal'"
                Case 2
                    myQF.WhereClause = "CANAL = 'Fort Lyon Canal US'"
                Case 3
                    myQF.WhereClause = "CANAL = 'Holbrook Canal'"
                Case 4
                    myQF.WhereClause = "CANAL = 'Otero Canal'"
                Case 5
                    myQF.WhereClause = "CANAL = 'Rocky Ford Ditch'"
                Case 6
                    myQF.WhereClause = "CANAL = 'Rocky Ford Highline'"
                Case 7
                    myQF.WhereClause = "CANAL = 'Amity Canal'"
                Case 8
                    myQF.WhereClause = "CANAL = 'Buffalo Canal'"
                Case 9
                    myQF.WhereClause = "CANAL = 'Fort Bent Canal'"
                Case 10
                    myQF.WhereClause = "CANAL = 'Fort Lyon Canal DS'"
                Case 11
                    myQF.WhereClause = "CANAL = 'Hyde Ditch'"
                Case 12
                    myQF.WhereClause = "CANAL = 'Lamar Canal'"
                Case 13
                    myQF.WhereClause = "CANAL = 'XY Graham'"
                Case 14
                    Exit Do
            End Select
            myCursor = myTable.Search(myQF, False)
            Try
                myRow = myCursor.NextRow()
            Catch ex As Exception
                Exit Do
            End Try
            If myRow.Value(0) = "Catlin Canal" Then
                CatlinTotalArea = myRow.Value(1)
                CatlinWithinArea = myRow.Value(2)
            ElseIf myRow.Value(0) = "Fort Lyon Canal US" Then
                FortLyonTotalArea = myRow.Value(1)
                FortLyonUSWithinArea = myRow.Value(2)
            ElseIf myRow.Value(0) = "Holbrook Canal" Then
                HolbrookTotalArea = myRow.Value(1)
                HolbrookWithinArea = myRow.Value(2)
            ElseIf myRow.Value(0) = "Otero Canal" Then
                OteroTotalArea = myRow.Value(1)
                OteroWithinArea = myRow.Value(2)
            ElseIf myRow.Value(0) = "Rocky Ford Ditch" Then
                RockyFordTotalArea = myRow.Value(1)
                RockyFordWithinArea = myRow.Value(2)
            ElseIf myRow.Value(0) = "Rocky Ford Highline" Then
                RockyFordHighlineTotalArea = myRow.Value(1)
                RockyFordHighlineWithinArea = myRow.Value(2)
            ElseIf myRow.Value(0) = "Amity Canal" Then
                AmityTotalArea = myRow.Value(1)
                AmityWithinArea = myRow.Value(2)
            ElseIf myRow.Value(0) = "Buffalo Canal" Then
                BuffaloTotalArea = myRow.Value(1)
                BuffaloWithinArea = myRow.Value(2)
            ElseIf myRow.Value(0) = "Fort Bent Canal" Then
                FortBentTotalArea = myRow.Value(1)
                FortBentWithinArea = myRow.Value(2)
            ElseIf myRow.Value(0) = "Fort Lyon Canal DS" Then   'I need to revisit this to get the Fort Lyon areas straight
                FortLyonDSWithinArea = myRow.Value(2)
            ElseIf myRow.Value(0) = "Hyde Ditch" Then
                HydeTotalArea = myRow.Value(1)
                HydeWithinArea = myRow.Value(2)
            ElseIf myRow.Value(0) = "Lamar Canal" Then
                LamarTotalArea = myRow.Value(1)
                LamarWithinArea = myRow.Value(2)
            ElseIf myRow.Value(0) = "XY Graham" Then
                XYGrahamTotalArea = myRow.Value(1)
                XYGrahamWithinArea = myRow.Value(2)
            End If
            i = i + 1
        Loop
        'System.Runtime.InteropServices.Marshal.ReleaseComObject(pFeatWS)
        connToAVDb.Open()
        FillCommandAreaPrcp_and_ET_variables(connToAVDb, CurrentDate)
        Catlin_Reqd_vs_Appld = ((1 - CatlinETDemandMetByUpflux) * CatlinETAmt_mmperWk - CatlinPrcpAmt_mmperWk) / _
                               (CatlinDelivery_Efficiency * (CatlinDivertedAmt_m3perWk * (CatlinWithinArea / CatlinTotalArea) * (1 / CatlinWithinArea) * 1000) + (CatlinPumpedAmt_m3perWk * (1000 / CatlinWithinArea))) ' multiplied by a 1000 for unit covertion purposes (m -> mm)
        FortLyonUS_Reqd_vs_Appld = ((1 - FortLyonUSETDemandMetByUpflux) * FortLyonETAmt_mmperWk - FortLyonPrcpAmt_mmperWk) / _
                               (FortLyonUSDelivery_Efficiency * (FortLyonDivertedAmt_m3perWk * (FortLyonUSWithinArea / FortLyonTotalArea) * (1 / FortLyonUSWithinArea) * 1000) + (FortLyonUSPumpedAmt_m3perWk * (1000 / FortLyonUSWithinArea)))
        Holbrook_Reqd_vs_Appld = ((1 - HolbrookETDemandMetByUpflux) * HolbrookETAmt_mmperWk - HolbrookPrcpAmt_mmperWk) / _
                               (HolbrookDelivery_Efficiency * (HolbrookDivertedAmt_m3perWk * (HolbrookWithinArea / HolbrookTotalArea) * (1 / HolbrookWithinArea) * 1000) + (HolbrookPumpedAmt_m3perWk * (1000 / HolbrookWithinArea)))
        Otero_Reqd_vs_Appld = ((1 - OteroETDemandMetByUpflux) * OteroETAmt_mmperWk - OteroPrcpAmt_mmperWk) / _
                               (OteroDelivery_Efficiency * (OteroDivertedAmt_m3perWk * (OteroWithinArea / OteroTotalArea) * (1 / OteroWithinArea) * 1000) + (OteroPumpedAmt_m3perWk * (1000 / OteroWithinArea)))
        RockyFord_Reqd_vs_Appld = ((1 - RockyFordETDemandMetByUpflux) * RockyFordETAmt_mmperWk - RockyFordPrcpAmt_mmperWk) / _
                               (RockyFordDelivery_Efficiency * (RockyFordDivertedAmt_m3perWk * (RockyFordWithinArea / RockyFordTotalArea) * (1 / RockyFordWithinArea) * 1000) + (RockyFordPumpedAmt_m3perWk * (1000 / RockyFordWithinArea)))
        RockyFordHighline_Reqd_vs_Appld = ((1 - RockyFordHighlineETDemandMetByUpflux) * RockyFordHighlineETAmt_mmperWk - RockyFordHighlinePrcpAmt_mmperWk) / _
                               (RockyFordHighlineDelivery_Efficiency * (RockyFordHighlineDivertedAmt_m3perWk * (RockyFordHighlineWithinArea / RockyFordHighlineTotalArea) * (1 / RockyFordHighlineWithinArea) * 1000) + (RockyFordHighlinePumpedAmt_m3perWk * (1000 / RockyFordHighlineWithinArea)))
        'Amity_Reqd_vs_Appld = ((1 - AmityETDemandMetByUpflux) * AmityETAmt_mmperWk - AmityPrcpAmt_mmperWk) / _


        If Catlin_Reqd_vs_Appld < 0.15 Then
            Catlin_Reqd_vs_Appld = 0.15
        ElseIf Catlin_Reqd_vs_Appld > 0.85 Then
            Catlin_Reqd_vs_Appld = 0.85
        End If
        If FortLyonUS_Reqd_vs_Appld < 0.15 Then
            FortLyonUS_Reqd_vs_Appld = 0.15
        ElseIf FortLyonUS_Reqd_vs_Appld > 0.85 Then
            FortLyonUS_Reqd_vs_Appld = 0.85
        End If
        If Holbrook_Reqd_vs_Appld < 0.15 Then
            Holbrook_Reqd_vs_Appld = 0.15
        ElseIf Holbrook_Reqd_vs_Appld > 0.85 Then
            Holbrook_Reqd_vs_Appld = 0.85
        End If
        If Otero_Reqd_vs_Appld < 0.15 Then
            Otero_Reqd_vs_Appld = 0.15
        ElseIf Otero_Reqd_vs_Appld > 0.85 Then
            Otero_Reqd_vs_Appld = 0.85
        End If
        If RockyFord_Reqd_vs_Appld < 0.15 Then
            RockyFord_Reqd_vs_Appld = 0.15
        ElseIf RockyFord_Reqd_vs_Appld > 0.85 Then
            RockyFord_Reqd_vs_Appld = 0.85
        End If
        If FortLyonDS_Reqd_vs_Appld < 0.15 Then
            FortLyonDS_Reqd_vs_Appld = 0.15
        ElseIf FortLyonDS_Reqd_vs_Appld > 0.85 Then
            FortLyonDS_Reqd_vs_Appld = 0.85
        End If

        ' Based upon the Query "RechargeCalculations" located in ArkansasBasinData
        QueryString = "SELECT WeeksPrecip_ETEstimate.FIELD_NO_TXT, Combined.CANAL, CropKey.IRRIG_FREQ_CODE, WeeksPrecip_ETEstimate.RANDOM_NO, WeeksPrecip_ETEstimate.ETc, WeeksPrecip_ETEstimate.PRECIP_AMT "
        QueryString += "FROM (Combined INNER JOIN [SELECT * FROM CropKey IN 'C:\Eric\Arkansas River Valley\Entire_Basin\GIS\weekly_ETCalculation.mdb']. AS CropKey ON Combined.CROPS99 = CropKey.INITIAL_CROP_CODE) INNER JOIN WeeksPrecip_ETEstimate ON Combined.FIELD_NO_TXT = WeeksPrecip_ETEstimate.FIELD_NO_TXT "
        QueryString += "GROUP BY WeeksPrecip_ETEstimate.FIELD_NO_TXT, Combined.CANAL, CropKey.IRRIG_FREQ_CODE, WeeksPrecip_ETEstimate.RANDOM_NO, WeeksPrecip_ETEstimate.ETc, WeeksPrecip_ETEstimate.PRECIP_AMT "
        QueryString += "ORDER BY WeeksPrecip_ETEstimate.FIELD_NO_TXT;"

        'connToAVDb.Open()
        Dim myCMD As OleDbCommand
        Dim myReader As OleDbDataReader
        myCMD = New OleDbCommand(QueryString, connToAVDb)
        myReader = myCMD.ExecuteReader()

        Dim pFields As IFields

        pFields = pFeatWS.OpenTable(RechargeTableName).Fields
        Dim newTable As ITable
        Dim mDay As String
        Dim mMonth As String
        Dim mYear As String
        mDay = Microsoft.VisualBasic.DateAndTime.Day(CurrentDate)
        If mDay.Length = 1 Then mDay = "0" & mDay
        mMonth = Month(CurrentDate)
        If mMonth.Length = 1 Then mMonth = "0" & mMonth
        mYear = Year(CurrentDate)
        Try
            db.DeleteTableInDB(DBName, "Recharge" & mMonth & mDay & mYear, True)
        Catch ex As Exception
        End Try
        newTable = pFeatWS.CreateTable("Recharge" & mMonth & mDay & mYear, pFields, Nothing, Nothing, "")

        Dim pRow As IRow
        Dim pCur As ICursor
        Dim pRowBuf As IRowBuffer
        Dim ApplicationEff As Double
        'Dim RandomGenerator As Random
        'RandomGenerator = New Random

        pCur = newTable.Insert(True)
        pRowBuf = newTable.CreateRowBuffer

        While myReader.Read()
            ' Fill Field Number field
            pRowBuf.Value(0) = myReader.GetValue(myReader.GetOrdinal("FIELD_NO_TXT"))

            ' Fill Command Area field
            pRowBuf.Value(1) = myReader.GetValue(myReader.GetOrdinal("CANAL"))

            ' Fill Irrigation Timing Code field
            ' This is no longer necessary as of 7/3/06 - I simply did this calculation for the fields ahead of time since it doesn't need to change
            ' upon running the code
            'If ((myReader.GetValue(myReader.GetOrdinal("IRRIG_FREQ_CODE")) = 0) Or (myReader.GetValue(myReader.GetOrdinal("IRRIG_FREQ_CODE")) = 1)) Then
            '    pRowBuf.Value(2) = 1
            'ElseIf (myReader.GetValue(myReader.GetOrdinal("IRRIG_FREQ_CODE")) = 2) Then
            '    pRowBuf.Value(2) = RandomGenerator.Next(2, 3)
            'ElseIf (myReader.GetValue(myReader.GetOrdinal("IRRIG_FREQ_CODE")) = 3) Then
            '    pRowBuf.Value(2) = RandomGenerator.Next(4, 7)
            'End If

            ' Fill Irrigation Efficiency for each field
            ' I need to reevaluate the methodology below.  I need an efficiency that only deals with runoff losses and not deep percolation losses.
            ' Deep percolation is now a function of the amount of water applied above Theta_FC.  
            ' New methodology for efficiency can be applied here.  For now going with .9 ((19cm - 1.9cm)/19cm) for all fields which a rough result from
            ' figures contained in technical report.  
            pRowBuf.Value(3) = 0.9

            'If (myReader.GetValue(myReader.GetOrdinal("CANAL")) = "Catlin Canal") Then
            '    ApplicationEff = (1 / (Math.Sqrt(2 * Math.PI) * Standard_Deviation)) * Math.Pow(Math.E, (-1 * ((Math.Pow((myReader.GetValue(myReader.GetOrdinal("RANDOM_NO")) - Catlin_Reqd_vs_Appld), 2)) / (2 * Math.Pow(Standard_Deviation, 2)))))
            '    pRowBuf.Value(3) = (1 / (Math.Sqrt(2 * Math.PI))) * Math.Pow(Math.E, (-1 * (Math.Pow(ApplicationEff, 2) / 2)))
            'ElseIf (myReader.GetValue(myReader.GetOrdinal("CANAL")) = "Fort Lyon Canal") Then
            '    ApplicationEff = (1 / (Math.Sqrt(2 * Math.PI) * Standard_Deviation)) * Math.Pow(Math.E, (-1 * ((Math.Pow((myReader.GetValue(myReader.GetOrdinal("RANDOM_NO")) - FortLyonUS_Reqd_vs_Appld), 2)) / (2 * Math.Pow(Standard_Deviation, 2)))))
            '    pRowBuf.Value(3) = (1 / (Math.Sqrt(2 * Math.PI))) * Math.Pow(Math.E, (-1 * (Math.Pow(ApplicationEff, 2) / 2)))
            'ElseIf (myReader.GetValue(myReader.GetOrdinal("CANAL")) = "Holbrook Canal") Then
            '    ApplicationEff = (1 / (Math.Sqrt(2 * Math.PI) * Standard_Deviation)) * Math.Pow(Math.E, (-1 * ((Math.Pow((myReader.GetValue(myReader.GetOrdinal("RANDOM_NO")) - Holbrook_Reqd_vs_Appld), 2)) / (2 * Math.Pow(Standard_Deviation, 2)))))
            '    pRowBuf.Value(3) = (1 / (Math.Sqrt(2 * Math.PI))) * Math.Pow(Math.E, (-1 * (Math.Pow(ApplicationEff, 2) / 2)))
            'ElseIf (myReader.GetValue(myReader.GetOrdinal("CANAL")) = "Otero Canal") Then
            '    ApplicationEff = (1 / (Math.Sqrt(2 * Math.PI) * Standard_Deviation)) * Math.Pow(Math.E, (-1 * ((Math.Pow((myReader.GetValue(myReader.GetOrdinal("RANDOM_NO")) - Otero_Reqd_vs_Appld), 2)) / (2 * Math.Pow(Standard_Deviation, 2)))))
            '    pRowBuf.Value(3) = (1 / (Math.Sqrt(2 * Math.PI))) * Math.Pow(Math.E, (-1 * (Math.Pow(ApplicationEff, 2) / 2)))
            'ElseIf (myReader.GetValue(myReader.GetOrdinal("CANAL")) = "Rocky Ford Ditch") Then
            '    ApplicationEff = (1 / (Math.Sqrt(2 * Math.PI) * Standard_Deviation)) * Math.Pow(Math.E, (-1 * ((Math.Pow((myReader.GetValue(myReader.GetOrdinal("RANDOM_NO")) - RockyFord_Reqd_vs_Appld), 2)) / (2 * Math.Pow(Standard_Deviation, 2)))))
            '    pRowBuf.Value(3) = (1 / (Math.Sqrt(2 * Math.PI))) * Math.Pow(Math.E, (-1 * (Math.Pow(ApplicationEff, 2) / 2)))
            'ElseIf (myReader.GetValue(myReader.GetOrdinal("CANAL")) = "Rocky Ford Highline") Then
            '    ApplicationEff = (1 / (Math.Sqrt(2 * Math.PI) * Standard_Deviation)) * Math.Pow(Math.E, (-1 * ((Math.Pow((myReader.GetValue(myReader.GetOrdinal("RANDOM_NO")) - RockyFordHighline_Reqd_vs_Appld), 2)) / (2 * Math.Pow(Standard_Deviation, 2)))))
            '    pRowBuf.Value(3) = (1 / (Math.Sqrt(2 * Math.PI))) * Math.Pow(Math.E, (-1 * (Math.Pow(ApplicationEff, 2) / 2)))
            'End If



            ' Fill Required Irrigation Field
            'pRowBuf.Value(4) = myReader.GetValue(myReader.GetOrdinal("ETc")) - myReader.GetValue(myReader.GetOrdinal("PRECIP_AMT"))

            ' No longer using Required Irrig Fld.  Instead, allocate each well's pumped water. 
            'pRowBuf.Value(4) = Report_Ipump(pRowBuf.Value(0), CurrentDate, pRowBuf.Value(2))

            ' Fill Field's Application Amt
            'If myReader.GetValue(myReader.GetOrdinal("IRRIG_FREQ_CODE")) = 0 Then
            '    pRowBuf.Value(5) = 0
            'ElseIf myReader.GetValue(myReader.GetOrdinal("IRRIG_FREQ_CODE")) > 0 Then
            '    pRowBuf.Value(5) = pRowBuf.Value(4) / pRowBuf.Value(3)
            'End If

            ' Determine field's Leaching Fraction
            'pRowBuf.Value(6) = (1 - pRowBuf.Value(3)) * (Mean_Leaching_Fraction / Mean_Total_Losses)

            ' Determine Unadjusted recharge amount
            'pRowBuf.Value(7) = (pRowBuf.Value(5) + myReader.GetValue(myReader.GetOrdinal("PRECIP_AMT"))) * pRowBuf.Value(6)

            ' Determine Adjusted recharge amount
            ' To be determined after all this has been carried out for atleast 4 time steps

            ' Insert the pRowBuf
            pCur.InsertRow(pRowBuf)

        End While
        myReader.Close()
        connToAVDb.Close()
    End Function

    Public Sub FillCommandAreaPrcp_and_ET_variables(ByVal connToAVDb As System.Data.OleDb.OleDbConnection, ByVal CurrentDate As Date)

        Dim QueryString As String
        QueryString = "SELECT WeeksPrecip_ETEstimate.DITCH, First(WeeksPrecip_ETEstimate.DATE) AS FirstOfDATE, Avg(WeeksPrecip_ETEstimate.PRECIP_AMT) AS AvgOfPRECIP_AMT, Avg(WeeksPrecip_ETEstimate.ETc) AS AvgOfETc "
        QueryString += "FROM(WeeksPrecip_ETEstimate) "
        QueryString += "GROUP BY WeeksPrecip_ETEstimate.DITCH;"

        Dim myCMD As OleDbCommand
        Dim myReader As OleDbDataReader
        myCMD = New OleDbCommand(QueryString, connToAVDb)
        myReader = myCMD.ExecuteReader()

        While myReader.Read()
            If CurrentDate = myReader.GetValue(1) Then
                Select Case myReader.GetValue(0)
                    Case "Catlin Canal"
                        CatlinPrcpAmt_mmperWk = myReader.GetValue(2)
                        CatlinETAmt_mmperWk = myReader.GetValue(3)
                    Case "Fort Lyon Canal"
                        FortLyonPrcpAmt_mmperWk = myReader.GetValue(2)
                        FortLyonETAmt_mmperWk = myReader.GetValue(3)
                    Case "Holbrook Canal"
                        HolbrookPrcpAmt_mmperWk = myReader.GetValue(2)
                        HolbrookETAmt_mmperWk = myReader.GetValue(3)
                    Case "Otero Canal"
                        OteroPrcpAmt_mmperWk = myReader.GetValue(2)
                        OteroETAmt_mmperWk = myReader.GetValue(3)
                    Case "Rocky Ford Ditch"
                        RockyFordPrcpAmt_mmperWk = myReader.GetValue(2)
                        RockyFordETAmt_mmperWk = myReader.GetValue(3)
                    Case "Rocky Ford Highline"
                        RockyFordHighlinePrcpAmt_mmperWk = myReader.GetValue(2)
                        RockyFordHighlineETAmt_mmperWk = myReader.GetValue(3)
                End Select
            End If
        End While
        myReader.Close()
    End Sub

    Public Function Determine_Qpump_EligibleFields(ByVal ActiveWells() As Object, ByVal CurrentDate As Date, _
                                                   ByRef WellAndSurf_WaterAllocTable As DataSet, ByVal MonthlyPumpedAcreFt() As Object)

        Dim x As Integer = 0
        Dim TS As Integer
        Dim QpumpFlag As Boolean
        Dim AVDatabaseName2 As String = myPath & "Arkansas River Valley\Entire_Basin\GIS\ArkansasBasinData.mdb"

        'Connecting to the "ArkValley" database.  
        Dim connToAVDb2 As System.Data.OleDb.OleDbConnection
        connToAVDb2 = New System.Data.OleDb.OleDbConnection
        connToAVDb2.ConnectionString = _
            "Provider=Microsoft.Jet.OLEDB.4.0;Data source=" & AVDatabaseName2

        Dim TableOfActiveWellsWithAssocFields As DataTable = WellAndSurf_WaterAllocTable.Tables("PrelimPumpedWaterAllocScheme")
        Dim PumpingWellTableRow As DataRow
        connToAVDb2.Open()

        Dim QueryString As String
        TS = CurrentTS(CurrentDate)
        Dim myCMD_Sub As OleDbCommand
        Dim myReader_Sub As OleDbDataReader

        ' The mere presense of a field in the element (datatable) for which the query is storing its information 
        ' signifies that field is eligible to receive groundwater to satisfy irrigation demands.

        While Not (ActiveWells.GetValue(TS)(x) = 0)

            QueryString = "SELECT Join_Output_Buffer.IDENT, Combined.FIELD_NO_TXT, Combined.IRRIG_TIME_CODE" & Right(CurrentDate.ToShortDateString, 2) & ", WeeksPrecip_ETEstimate.PRECIP_AMT, WeeksPrecip_ETEstimate.ETc, Combined.SHAPE_Area, CombinedFields_Wells_Intersect.USE, Wells_wTractNum.TRACT "
            QueryString += "FROM WeeksPrecip_ETEstimate INNER JOIN (Wells_wTractNum INNER JOIN ((Fields_01 INNER JOIN ((((CombinedFields_Wells_Intersect INNER JOIN Join_Output_Buffer ON CombinedFields_Wells_Intersect.IDENT = Join_Output_Buffer.IDENT) INNER JOIN Combined ON CombinedFields_Wells_Intersect.FIELD_NO_TXT = Combined.FIELD_NO_TXT) INNER JOIN Canal_Name_Key ON Combined.CANAL = Canal_Name_Key.COMBINED_NAME) INNER JOIN Join_Output ON Join_Output_Buffer.IDENT = Join_Output.IDENT) ON Fields_01.FIELD_NO_TXT = CombinedFields_Wells_Intersect.FIELD_NO_TXT) INNER JOIN Wells_Command ON Join_Output.IDENT = Wells_Command.IDENT) ON Wells_wTractNum.IDENT = CombinedFields_Wells_Intersect.IDENT) ON WeeksPrecip_ETEstimate.FIELD_NO_TXT = CombinedFields_Wells_Intersect.FIELD_NO_TXT "
            QueryString += "WHERE (((Combined.Mean_Fld_Elevation)<[Join_Output]![GRND_ELEV]) AND ((Canal_Name_Key.DWR_NAME)=[Wells_Command]![DITCH]) AND ((Wells_wTractNum.TRACT)=[Fields_01]![TRACT])) "
            QueryString += "GROUP BY Join_Output_Buffer.IDENT, Combined.FIELD_NO_TXT, Combined.IRRIG_TIME_CODE" & Right(CurrentDate.ToShortDateString, 2) & ", WeeksPrecip_ETEstimate.PRECIP_AMT, WeeksPrecip_ETEstimate.ETc, Combined.SHAPE_Area, CombinedFields_Wells_Intersect.USE, Combined.Phil_Fld, Wells_wTractNum.TRACT "
            QueryString += "HAVING (((Join_Output_Buffer.IDENT)=""" & ActiveWells.GetValue(TS)(x) & """) AND ((CombinedFields_Wells_Intersect.USE)=""" & "I" & """) AND ((Combined.Phil_Fld)=1));"

            'I will need to put a different query string together for when the date is >#12/31/2001#

            myCMD_Sub = New OleDbCommand(QueryString, connToAVDb2)
            myReader_Sub = myCMD_Sub.ExecuteReader()

            While myReader_Sub.Read()
                If myReader_Sub.GetValue(myReader_Sub.GetOrdinal("USE")) = "I" Then
                    ' I could add Qpump values here if I would like, but i am going to look in to passing the ActiveWells & MonthlyPumpedAcreFt arrays into the necessary function
                    PumpingWellTableRow = TableOfActiveWellsWithAssocFields.NewRow
                    PumpingWellTableRow("IDENT") = myReader_Sub.GetValue(myReader_Sub.GetOrdinal("IDENT"))
                    PumpingWellTableRow("USE") = myReader_Sub.GetValue(myReader_Sub.GetOrdinal("USE"))
                    PumpingWellTableRow("FIELD_NO_TXT") = myReader_Sub.GetValue(myReader_Sub.GetOrdinal("FIELD_NO_TXT"))
                    PumpingWellTableRow("IRRIG_TIME_CODE") = myReader_Sub.GetValue(myReader_Sub.GetOrdinal("IRRIG_TIME_CODE" & Right(CurrentDate.ToShortDateString, 2)))
                    If myReader_Sub.GetValue(myReader_Sub.GetOrdinal("IRRIG_TIME_CODE" & Right(CurrentDate.ToShortDateString, 2))) = 0 Then
                        QpumpFlag = False
                    ElseIf myReader_Sub.GetValue(myReader_Sub.GetOrdinal("IRRIG_TIME_CODE" & Right(CurrentDate.ToShortDateString, 2))) = 1 Then
                        QpumpFlag = True
                    ElseIf myReader_Sub.GetValue(myReader_Sub.GetOrdinal("IRRIG_TIME_CODE" & Right(CurrentDate.ToShortDateString, 2))) = 2 Or _
                           myReader_Sub.GetValue(myReader_Sub.GetOrdinal("IRRIG_TIME_CODE" & Right(CurrentDate.ToShortDateString, 2))) = 3 Then
                        ' This statement checks to see if time step is odd or even and then decides if the field is to receive surf water.
                        If (Math.Abs(TS Mod 2) Mod TS) = 0 And Not (TS = 1) Then
                            QpumpFlag = True
                        Else
                            QpumpFlag = False
                        End If
                        ' I need to try and consolidate these statements into one like above.
                    ElseIf myReader_Sub.GetValue(myReader_Sub.GetOrdinal("IRRIG_TIME_CODE" & Right(CurrentDate.ToShortDateString, 2))) = 4 Or _
                           myReader_Sub.GetValue(myReader_Sub.GetOrdinal("IRRIG_TIME_CODE" & Right(CurrentDate.ToShortDateString, 2))) = 5 Or _
                           myReader_Sub.GetValue(myReader_Sub.GetOrdinal("IRRIG_TIME_CODE" & Right(CurrentDate.ToShortDateString, 2))) = 6 Or _
                           myReader_Sub.GetValue(myReader_Sub.GetOrdinal("IRRIG_TIME_CODE" & Right(CurrentDate.ToShortDateString, 2))) = 7 Then
                        If (Math.Abs(TS Mod 2) Mod TS) = 0 And Not (TS = 1) Then
                            If ((myReader_Sub.GetValue(myReader_Sub.GetOrdinal("IRRIG_TIME_CODE" & Right(CurrentDate.ToShortDateString, 2))) + TS) Mod 4) = 3 Then
                                QpumpFlag = True
                            Else
                                QpumpFlag = False
                            End If
                        Else
                            If ((myReader_Sub.GetValue(myReader_Sub.GetOrdinal("IRRIG_TIME_CODE" & Right(CurrentDate.ToShortDateString, 2))) + TS) Mod 4) = 1 Then
                                QpumpFlag = True
                            Else
                                QpumpFlag = False
                            End If
                        End If
                    End If
                    PumpingWellTableRow("RECEIVE_PUMP_WAT") = QpumpFlag
                    PumpingWellTableRow("Area") = myReader_Sub.GetValue(myReader_Sub.GetOrdinal("SHAPE_Area"))
                    PumpingWellTableRow("Precip") = myReader_Sub.GetValue(myReader_Sub.GetOrdinal("PRECIP_AMT"))
                    PumpingWellTableRow("ETc") = myReader_Sub.GetValue(myReader_Sub.GetOrdinal("ETc"))
                    PumpingWellTableRow("TRACT") = myReader_Sub.GetValue(myReader_Sub.GetOrdinal("TRACT"))
                    TableOfActiveWellsWithAssocFields.Rows.Add(PumpingWellTableRow)
                Else
                    Exit While
                End If
            End While
            x += 1
            myReader_Sub.Close()
        End While

        connToAVDb2.Close()

    End Function

    Public Function Determine_Qsurf_EligibleFields(ByVal CurrentDate As Date, ByRef WellAndSurf_WaterAllocTable As DataSet)

        Dim AVDatabaseName3 As String = myPath & "Arkansas River Valley\Entire_Basin\GIS\ArkansasBasinData.mdb"
        Dim TableOfFieldsWithAssocSurfWat As DataTable = WellAndSurf_WaterAllocTable.Tables("PrelimSurfWaterAllocScheme")
        Dim SurfWatTableRow As DataRow
        Dim QueryString As String
        Dim SurfWatFlag As Boolean
        Dim TS As Integer
        TS = CurrentTS(CurrentDate)

        'Connecting to the "ArkValley" database.  
        Dim connToAVDb3 As System.Data.OleDb.OleDbConnection
        connToAVDb3 = New System.Data.OleDb.OleDbConnection
        connToAVDb3.ConnectionString = _
            "Provider=Microsoft.Jet.OLEDB.4.0;Data source=" & AVDatabaseName3
        connToAVDb3.Open()

        ' This query should select all the fields for Phil_Fld = 1 and store them in the dataset, thus the element "PrelimSurfWaterAllocScheme"
        ' can be used to step through all the irrigated fields and make sure none are skipped while allocating water. 

        QueryString = "SELECT Fields_01.TRACT, Fields_01.FIELD_NO_TXT, Combined.IRRIG_TIME_CODE" & Right(CurrentDate.ToShortDateString, 2) & ", Fields_01.Shape_Area, WeeksPrecip_ETEstimate.PRECIP_AMT, WeeksPrecip_ETEstimate.ETc, Combined.CANAL, Combined.CROPS" & Right(CurrentDate.ToShortDateString, 2) & " "
        QueryString += "FROM Combined INNER JOIN (Fields_01 INNER JOIN WeeksPrecip_ETEstimate ON Fields_01.FIELD_NO_TXT = WeeksPrecip_ETEstimate.FIELD_NO_TXT) ON Combined.FIELD_NO_TXT = Fields_01.FIELD_NO_TXT "
        QueryString += "WHERE (((Combined.Phil_Fld)=1));"

        Dim myCMD_Sub2 As OleDbCommand
        Dim myReader_Sub2 As OleDbDataReader
        myCMD_Sub2 = New OleDbCommand(QueryString, connToAVDb3)
        myReader_Sub2 = myCMD_Sub2.ExecuteReader()

        While myReader_Sub2.Read()
            SurfWatTableRow = TableOfFieldsWithAssocSurfWat.NewRow()
            SurfWatTableRow("TRACT") = myReader_Sub2.GetValue(myReader_Sub2.GetOrdinal("TRACT"))
            SurfWatTableRow("FIELD_NO_TXT") = myReader_Sub2.GetValue(myReader_Sub2.GetOrdinal("FIELD_NO_TXT"))
            SurfWatTableRow("IRRIG_TIME_CODE") = myReader_Sub2.GetValue(myReader_Sub2.GetOrdinal("IRRIG_TIME_CODE" & Right(CurrentDate.ToShortDateString, 2)))
            SurfWatTableRow("Area") = myReader_Sub2.GetValue(myReader_Sub2.GetOrdinal("Shape_Area"))
            SurfWatTableRow("Precip") = myReader_Sub2.GetValue(myReader_Sub2.GetOrdinal("PRECIP_AMT"))
            SurfWatTableRow("ETc") = myReader_Sub2.GetValue(myReader_Sub2.GetOrdinal("ETc"))
            If myReader_Sub2.GetValue(myReader_Sub2.GetOrdinal("IRRIG_TIME_CODE" & Right(CurrentDate.ToShortDateString, 2))) = 0 Then
                SurfWatFlag = False
            ElseIf myReader_Sub2.GetValue(myReader_Sub2.GetOrdinal("IRRIG_TIME_CODE" & Right(CurrentDate.ToShortDateString, 2))) = 1 Then
                SurfWatFlag = True
            ElseIf myReader_Sub2.GetValue(myReader_Sub2.GetOrdinal("IRRIG_TIME_CODE" & Right(CurrentDate.ToShortDateString, 2))) = 2 Or _
                   myReader_Sub2.GetValue(myReader_Sub2.GetOrdinal("IRRIG_TIME_CODE" & Right(CurrentDate.ToShortDateString, 2))) = 3 Then
                ' This statement checks to see if time step is odd or even and then decides if the field is to receive surf water. Statement doesn't work on the first time step...thus the 
                If TS Mod 2 = 1 Then
                    'If myReader_Sub2.GetValue(myReader_Sub2.GetOrdinal("IRRIG_TIME_CODE" & Right(CurrentDate.ToShortDateString, 2))) = 2 Then SurfWatFlag = False
                    'If myReader_Sub2.GetValue(myReader_Sub2.GetOrdinal("IRRIG_TIME_CODE" & Right(CurrentDate.ToShortDateString, 2))) = 3 Then SurfWatFlag = True
                    If (Math.Abs(myReader_Sub2.GetValue(myReader_Sub2.GetOrdinal("IRRIG_TIME_CODE" & Right(CurrentDate.ToShortDateString, 2))) Mod 2) Mod myReader_Sub2.GetValue(myReader_Sub2.GetOrdinal("IRRIG_TIME_CODE" & Right(CurrentDate.ToShortDateString, 2)))) = 1 Then
                        SurfWatFlag = True
                    Else
                        SurfWatFlag = False
                    End If
                Else
                    If (Math.Abs(myReader_Sub2.GetValue(myReader_Sub2.GetOrdinal("IRRIG_TIME_CODE" & Right(CurrentDate.ToShortDateString, 2))) Mod 2) Mod myReader_Sub2.GetValue(myReader_Sub2.GetOrdinal("IRRIG_TIME_CODE" & Right(CurrentDate.ToShortDateString, 2)))) = 0 Then
                        SurfWatFlag = True
                    Else
                        SurfWatFlag = False
                    End If
                End If
                ' I need to try and consolidate these statements into one like above.
            ElseIf myReader_Sub2.GetValue(myReader_Sub2.GetOrdinal("IRRIG_TIME_CODE" & Right(CurrentDate.ToShortDateString, 2))) = 4 Or _
                   myReader_Sub2.GetValue(myReader_Sub2.GetOrdinal("IRRIG_TIME_CODE" & Right(CurrentDate.ToShortDateString, 2))) = 5 Or _
                   myReader_Sub2.GetValue(myReader_Sub2.GetOrdinal("IRRIG_TIME_CODE" & Right(CurrentDate.ToShortDateString, 2))) = 6 Or _
                   myReader_Sub2.GetValue(myReader_Sub2.GetOrdinal("IRRIG_TIME_CODE" & Right(CurrentDate.ToShortDateString, 2))) = 7 Then
                If (Math.Abs(TS Mod 2) Mod TS) = 0 And Not (TS = 1) Then
                    If ((myReader_Sub2.GetValue(myReader_Sub2.GetOrdinal("IRRIG_TIME_CODE" & Right(CurrentDate.ToShortDateString, 2))) + TS) Mod 4) = 3 Then
                        SurfWatFlag = True
                    Else
                        SurfWatFlag = False
                    End If
                Else
                    If ((myReader_Sub2.GetValue(myReader_Sub2.GetOrdinal("IRRIG_TIME_CODE" & Right(CurrentDate.ToShortDateString, 2))) + TS) Mod 4) = 1 Then
                        SurfWatFlag = True
                    Else
                        SurfWatFlag = False
                    End If
                End If
            End If
            SurfWatTableRow("RECEIVE_SURF_WAT") = SurfWatFlag
            SurfWatTableRow("CANAL") = myReader_Sub2.GetValue(myReader_Sub2.GetOrdinal("CANAL"))
            SurfWatTableRow("CROP") = myReader_Sub2.GetValue(myReader_Sub2.GetOrdinal("CROPS" & Right(CurrentDate.ToShortDateString, 2)))
            TableOfFieldsWithAssocSurfWat.Rows.Add(SurfWatTableRow)
        End While
        myReader_Sub2.Close()
        connToAVDb3.Close()

    End Function

    Public Function Create_CurrentTS_WaterBalanceTable(ByVal CurrentDate As Date, ByVal DataSorter As MyDBUtils)
        'This function was built for primarily the old bucket model that was proposed by edm
        'However, when the switch to MODFLOW's UZF package came, this function was no longer
        'necessary.  It will be left here, but calls to it should be commented out.
        'connToETDb.Open()

        Dim QueryString As String
        Dim DateString As String
        Dim PrevDate As Date
        Dim Prev_DateString As String

        DateString = QueryDateString(CurrentDate)
        PrevDate = CurrentDate.AddDays(-7)
        Prev_DateString = QueryDateString(PrevDate)

        Try
            DataSorter.DeleteExistingTables("WaterBalance" & DateString)
        Catch
        End Try
        Try
            DataSorter.DeleteExistingTables("WaterBalance_NatVeg_Trsk_" & DateString)
        Catch
        End Try

        'This query string can be found in the QUERY in C:\Eric\Arkansas River Valley\Entire_Basin\GIS\RegionalModelOutput.mdb\DP_Adjustment & Ks Determination
        If CurrentDate = #4/1/1999# Then
            QueryString = "SELECT WaterAllocation" & DateString & ".Field_No, WaterAllocation" & DateString & ".RAW, InitialSoilMoistureConditions_Fields.StartingSoilMoisture AS D_r_i_prev, [WaterAllocation" & DateString & "]![SurfWatDelivered]+[WaterAllocation" & DateString & "]![PumpWatDelivered]+[WaterAllocation" & DateString & "]![Precip_Amt] AS Inflow, [WaterAllocation" & DateString & "]![Runoff_Amt]+[WaterAllocation" & DateString & "]![DeepPerc_Amt] AS Outflow, "
            QueryString += "IIf(([D_r_i_prev]-[Inflow]+[Outflow])<0,0,IIf(([D_r_i_prev]-[Inflow]+[Outflow])>[WaterAllocation" & DateString & "]![TAW],[WaterAllocation" & DateString & "]![TAW],([D_r_i_prev]-[Inflow]+[Outflow]))) AS D_r_i_strt, WaterAllocation" & DateString & ".ETc, IIf([D_r_i_strt]<[WaterAllocation" & DateString & "]![RAW],1,IIf((([WaterAllocation" & DateString & "]![TAW]-[D_r_i_strt])/([WaterAllocation" & DateString & "]![TAW]-[WaterAllocation" & DateString & "]![RAW]))<0,0,(([WaterAllocation" & DateString & "]![TAW]-[D_r_i_strt])/([WaterAllocation" & DateString & "]![TAW]-[WaterAllocation" & DateString & "]![RAW])))) AS K_s, "
            QueryString += "[WaterAllocation" & DateString & "]![ETc]*[K_s] AS ET_adj, IIf([D_r_i_strt]+[ET_adj]>[WaterAllocation" & DateString & "]![TAW],[WaterAllocation" & DateString & "]![TAW],([D_r_i_strt]+[ET_adj])) AS D_r_i_end, IIf([D_r_i_prev]-[Inflow]+[Outflow]<0,Abs([D_r_i_prev]-[Inflow]+[Outflow]),0) AS DP_add, [WaterAllocation" & DateString & "]![DeepPerc_Amt]+[DP_add] AS DP_final INTO WaterBalance" & DateString & " "
            QueryString += "FROM InitialSoilMoistureConditions_Fields INNER JOIN WaterAllocation" & DateString & " ON InitialSoilMoistureConditions_Fields.FIELD_NO = WaterAllocation" & DateString & ".Field_No "
            QueryString += "ORDER BY WaterAllocation" & DateString & ".Field_No;"
        ElseIf CurrentDate = #3/28/2002# And Not Upstream_or_not1 Then
            QueryString = "SELECT WaterAllocation" & DateString & ".Field_No, WaterAllocation" & DateString & ".RAW, InitialSoilMoistureConditions_Fields.StartingSoilMoisture AS D_r_i_prev, [WaterAllocation" & DateString & "]![SurfWatDelivered]+[WaterAllocation" & DateString & "]![PumpWatDelivered]+[WaterAllocation" & DateString & "]![Precip_Amt] AS Inflow, [WaterAllocation" & DateString & "]![Runoff_Amt]+[WaterAllocation" & DateString & "]![DeepPerc_Amt] AS Outflow, "
            QueryString += "IIf(([D_r_i_prev]-[Inflow]+[Outflow])<0,0,IIf(([D_r_i_prev]-[Inflow]+[Outflow])>[WaterAllocation" & DateString & "]![TAW],[WaterAllocation" & DateString & "]![TAW],([D_r_i_prev]-[Inflow]+[Outflow]))) AS D_r_i_strt, WaterAllocation" & DateString & ".ETc, IIf([D_r_i_strt]<[WaterAllocation" & DateString & "]![RAW],1,IIf((([WaterAllocation" & DateString & "]![TAW]-[D_r_i_strt])/([WaterAllocation" & DateString & "]![TAW]-[WaterAllocation" & DateString & "]![RAW]))<0,0,(([WaterAllocation" & DateString & "]![TAW]-[D_r_i_strt])/([WaterAllocation" & DateString & "]![TAW]-[WaterAllocation" & DateString & "]![RAW])))) AS K_s, "
            QueryString += "[WaterAllocation" & DateString & "]![ETc]*[K_s] AS ET_adj, IIf([D_r_i_strt]+[ET_adj]>[WaterAllocation" & DateString & "]![TAW],[WaterAllocation" & DateString & "]![TAW],([D_r_i_strt]+[ET_adj])) AS D_r_i_end, IIf([D_r_i_prev]-[Inflow]+[Outflow]<0,Abs([D_r_i_prev]-[Inflow]+[Outflow]),0) AS DP_add, [WaterAllocation" & DateString & "]![DeepPerc_Amt]+[DP_add] AS DP_final INTO WaterBalance" & DateString & " "
            QueryString += "FROM InitialSoilMoistureConditions_Fields INNER JOIN WaterAllocation" & DateString & " ON InitialSoilMoistureConditions_Fields.FIELD_NO = WaterAllocation" & DateString & ".Field_No "
            QueryString += "ORDER BY WaterAllocation" & DateString & ".Field_No;"
        ElseIf CurrentDate > #1/1/2002# And CurrentDate <= #1/7/2002# Then
            'The base structure for this query can be found in the Query located in: C:\Eric\Arkansas River Valley\Entire_Basin\GIS\RegionalModelOutput.mdb\DP_Adjustment & Ks Determination_Flds_Transition 
            'This String is saved in PS Pad in the following location: C:\Eric\RegionalModel\Create_CurrentTS_WaterBalanceTable_Transition.sql
            QueryString = "SELECT WaterAllocation" & DateString & ".Field_No, WaterAllocation" & DateString & ".RAW, WaterBalance" & Prev_DateString & ".D_r_i_end AS D_r_i_prev, WaterAllocation" & DateString & "!SurfWatDelivered+WaterAllocation" & DateString & "!PumpWatDelivered+WaterAllocation" & DateString & "!Precip_Amt AS Inflow, WaterAllocation" & DateString & "!Runoff_Amt+WaterAllocation" & DateString & "!DeepPerc_Amt AS Outflow, IIf(((WaterBalance" & Prev_DateString & ".D_r_i_end)-(WaterAllocation" & DateString & "!SurfWatDelivered+WaterAllocation" & DateString & "!PumpWatDelivered+WaterAllocation" & DateString & "!Precip_Amt)+(WaterAllocation" & DateString & "!Runoff_Amt+WaterAllocation" & DateString & "!DeepPerc_Amt))<0,0,IIf(((WaterBalance" & Prev_DateString & ".D_r_i_end)-(WaterAllocation" & DateString & "!SurfWatDelivered+WaterAllocation" & DateString & "!PumpWatDelivered+WaterAllocation" & DateString & "!Precip_Amt)+(WaterAllocation" & DateString & "!Runoff_Amt+WaterAllocation" & DateString & "!DeepPerc_Amt))>WaterAllocation" & DateString & "!TAW,WaterAllocation" & DateString & "!TAW,((WaterBalance" & Prev_DateString & ".D_r_i_end)-(WaterAllocation" & DateString & "!SurfWatDelivered+WaterAllocation" & DateString & "!PumpWatDelivered+WaterAllocation" & DateString & "!Precip_Amt)+(WaterAllocation" & DateString & "!Runoff_Amt+WaterAllocation" & DateString & "!DeepPerc_Amt)))) AS D_r_i_strt, WaterAllocation" & DateString & ".ETc, IIf((IIf(((WaterBalance" & Prev_DateString & ".D_r_i_end)-(WaterAllocation" & DateString & "!SurfWatDelivered+WaterAllocation" & DateString & "!PumpWatDelivered+WaterAllocation" & DateString & "!Precip_Amt)+(WaterAllocation" & DateString & "!Runoff_Amt+WaterAllocation" & DateString & "!DeepPerc_Amt))<0,0,IIf(((WaterBalance" & Prev_DateString & ".D_r_i_end)-(WaterAllocation" & DateString & "!SurfWatDelivered+WaterAllocation" & DateString & "!PumpWatDelivered+WaterAllocation" & DateString & "!Precip_Amt)+(WaterAllocation" & DateString & "!Runoff_Amt+WaterAllocation" & DateString & "!DeepPerc_Amt))>WaterAllocation" & DateString & "!TAW,WaterAllocation" & DateString & "!TAW,((WaterBalance" & Prev_DateString & ".D_r_i_end)-(WaterAllocation" & DateString & "!SurfWatDelivered+WaterAllocation" & DateString & "!PumpWatDelivered+WaterAllocation" & DateString & "!Precip_Amt)+(WaterAllocation" & DateString & "!Runoff_Amt+WaterAllocation" & DateString & "!DeepPerc_Amt)))))<WaterAllocation" & DateString & "!RAW,1,IIf(((WaterAllocation" & DateString & "!TAW-(IIf(((WaterBalance" & Prev_DateString & ".D_r_i_end)-(WaterAllocation" & DateString & "!SurfWatDelivered+WaterAllocation" & DateString & "!PumpWatDelivered+WaterAllocation" & DateString & "!Precip_Amt)+(WaterAllocation" & DateString & "!Runoff_Amt+WaterAllocation" & DateString & "!DeepPerc_Amt))<0,0,IIf(((WaterBalance" & Prev_DateString & ".D_r_i_end)-(WaterAllocation" & DateString & "!SurfWatDelivered+WaterAllocation" & DateString & "!PumpWatDelivered+WaterAllocation" & DateString & "!Precip_Amt)+(WaterAllocation" & DateString & "!Runoff_Amt+WaterAllocation" & DateString & "!DeepPerc_Amt))>WaterAllocation" & DateString & "!TAW,WaterAllocation" & DateString & "!TAW,((WaterBalance" & Prev_DateString & ".D_r_i_end)-(WaterAllocation" & DateString & "!SurfWatDelivered+WaterAllocation" & DateString & "!PumpWatDelivered+WaterAllocation" & DateString & "!Precip_Amt)+(WaterAllocation" & DateString & "!Runoff_Amt+WaterAllocation" & DateString & "!DeepPerc_Amt))))))/(WaterAllocation" & DateString & "!TAW-WaterAllocation" & DateString & "!RAW))<0,0,((WaterAllocation" & DateString & "!TAW-(IIf(((WaterBalance" & Prev_DateString & ".D_r_i_end)-(WaterAllocation" & DateString & "!SurfWatDelivered+WaterAllocation" & DateString & "!PumpWatDelivered+WaterAllocation" & DateString & "!Precip_Amt)+(WaterAllocation" & DateString & "!Runoff_Amt+WaterAllocation" & DateString & "!DeepPerc_Amt))<0,0,IIf(((WaterBalance" & Prev_DateString & ".D_r_i_end)-(WaterAllocation" & DateString & "!SurfWatDelivered+WaterAllocation" & DateString & "!PumpWatDelivered+WaterAllocation" & DateString & "!Precip_Amt)+(WaterAllocation" & DateString & "!Runoff_Amt+WaterAllocation" & DateString & "!DeepPerc_Amt))>WaterAllocation" & DateString & "!TAW,WaterAllocation" & DateString & "!TAW,"
            QueryString += "((WaterBalance" & Prev_DateString & ".D_r_i_end)-(WaterAllocation" & DateString & "!SurfWatDelivered+WaterAllocation" & DateString & "!PumpWatDelivered+WaterAllocation" & DateString & "!Precip_Amt)+(WaterAllocation" & DateString & "!Runoff_Amt+WaterAllocation" & DateString & "!DeepPerc_Amt))))))/(WaterAllocation" & DateString & "!TAW-WaterAllocation" & DateString & "!RAW)))) AS K_s, WaterAllocation" & DateString & "!ETc*(IIf((IIf(((WaterBalance" & Prev_DateString & ".D_r_i_end)-(WaterAllocation" & DateString & "!SurfWatDelivered+WaterAllocation" & DateString & "!PumpWatDelivered+WaterAllocation" & DateString & "!Precip_Amt)+(WaterAllocation" & DateString & "!Runoff_Amt+WaterAllocation" & DateString & "!DeepPerc_Amt))<0,0,IIf(((WaterBalance" & Prev_DateString & ".D_r_i_end)-(WaterAllocation" & DateString & "!SurfWatDelivered+WaterAllocation" & DateString & "!PumpWatDelivered+WaterAllocation" & DateString & "!Precip_Amt)+(WaterAllocation" & DateString & "!Runoff_Amt+WaterAllocation" & DateString & "!DeepPerc_Amt))>WaterAllocation" & DateString & "!TAW,WaterAllocation" & DateString & "!TAW,((WaterBalance" & Prev_DateString & ".D_r_i_end)-(WaterAllocation" & DateString & "!SurfWatDelivered+WaterAllocation" & DateString & "!PumpWatDelivered+WaterAllocation" & DateString & "!Precip_Amt)+(WaterAllocation" & DateString & "!Runoff_Amt+WaterAllocation" & DateString & "!DeepPerc_Amt)))))<WaterAllocation" & DateString & "!RAW,1,IIf(((WaterAllocation" & DateString & "!TAW-(IIf(((WaterBalance" & Prev_DateString & ".D_r_i_end)-(WaterAllocation" & DateString & "!SurfWatDelivered+WaterAllocation" & DateString & "!PumpWatDelivered+WaterAllocation" & DateString & "!Precip_Amt)+(WaterAllocation" & DateString & "!Runoff_Amt+WaterAllocation" & DateString & "!DeepPerc_Amt))<0,0,IIf(((WaterBalance" & Prev_DateString & ".D_r_i_end)-(WaterAllocation" & DateString & "!SurfWatDelivered+WaterAllocation" & DateString & "!PumpWatDelivered+WaterAllocation" & DateString & "!Precip_Amt)+(WaterAllocation" & DateString & "!Runoff_Amt+WaterAllocation" & DateString & "!DeepPerc_Amt))>WaterAllocation" & DateString & "!TAW,WaterAllocation" & DateString & "!TAW,((WaterBalance" & Prev_DateString & ".D_r_i_end)-(WaterAllocation" & DateString & "!SurfWatDelivered+WaterAllocation" & DateString & "!PumpWatDelivered+WaterAllocation" & DateString & "!Precip_Amt)+(WaterAllocation" & DateString & "!Runoff_Amt+WaterAllocation" & DateString & "!DeepPerc_Amt))))))/(WaterAllocation" & DateString & "!TAW-WaterAllocation" & DateString & "!RAW))<0,0,((WaterAllocation" & DateString & "!TAW-(IIf(((WaterBalance" & Prev_DateString & ".D_r_i_end)-(WaterAllocation" & DateString & "!SurfWatDelivered+WaterAllocation" & DateString & "!PumpWatDelivered+WaterAllocation" & DateString & "!Precip_Amt)+(WaterAllocation" & DateString & "!Runoff_Amt+WaterAllocation" & DateString & "!DeepPerc_Amt))<0,0,IIf(((WaterBalance" & Prev_DateString & ".D_r_i_end)-(WaterAllocation" & DateString & "!SurfWatDelivered+WaterAllocation" & DateString & "!PumpWatDelivered+WaterAllocation" & DateString & "!Precip_Amt)+(WaterAllocation" & DateString & "!Runoff_Amt+WaterAllocation" & DateString & "!DeepPerc_Amt))>WaterAllocation" & DateString & "!TAW,WaterAllocation" & DateString & "!TAW,((WaterBalance" & Prev_DateString & ".D_r_i_end)-(WaterAllocation" & DateString & "!SurfWatDelivered+WaterAllocation" & DateString & "!PumpWatDelivered+WaterAllocation" & DateString & "!Precip_Amt)+(WaterAllocation" & DateString & "!Runoff_Amt+WaterAllocation" & DateString & "!DeepPerc_Amt))))))/(WaterAllocation" & DateString & "!TAW-WaterAllocation" & DateString & "!RAW))))) AS ET_adj, IIf((IIf(((WaterBalance" & Prev_DateString & ".D_r_i_end)-(WaterAllocation" & DateString & "!SurfWatDelivered+WaterAllocation" & DateString & "!PumpWatDelivered+WaterAllocation" & DateString & "!Precip_Amt)+(WaterAllocation" & DateString & "!Runoff_Amt+WaterAllocation" & DateString & "!DeepPerc_Amt))<0,0,IIf(((WaterBalance" & Prev_DateString & ".D_r_i_end)-(WaterAllocation" & DateString & "!SurfWatDelivered+WaterAllocation" & DateString & "!PumpWatDelivered+WaterAllocation" & DateString & "!Precip_Amt)+(WaterAllocation" & DateString & "!Runoff_Amt+WaterAllocation" & DateString & "!DeepPerc_Amt))>WaterAllocation" & DateString & "!TAW,"
            QueryString += "WaterAllocation" & DateString & "!TAW,((WaterBalance" & Prev_DateString & ".D_r_i_end)-(WaterAllocation" & DateString & "!SurfWatDelivered+WaterAllocation" & DateString & "!PumpWatDelivered+WaterAllocation" & DateString & "!Precip_Amt)+(WaterAllocation" & DateString & "!Runoff_Amt+WaterAllocation" & DateString & "!DeepPerc_Amt)))))+(WaterAllocation" & DateString & "!ETc*(IIf((IIf(((WaterBalance" & Prev_DateString & ".D_r_i_end)-(WaterAllocation" & DateString & "!SurfWatDelivered+WaterAllocation" & DateString & "!PumpWatDelivered+WaterAllocation" & DateString & "!Precip_Amt)+(WaterAllocation" & DateString & "!Runoff_Amt+WaterAllocation" & DateString & "!DeepPerc_Amt))<0,0,IIf(((WaterBalance" & Prev_DateString & ".D_r_i_end)-(WaterAllocation" & DateString & "!SurfWatDelivered+WaterAllocation" & DateString & "!PumpWatDelivered+WaterAllocation" & DateString & "!Precip_Amt)+(WaterAllocation" & DateString & "!Runoff_Amt+WaterAllocation" & DateString & "!DeepPerc_Amt))>WaterAllocation" & DateString & "!TAW,WaterAllocation" & DateString & "!TAW,((WaterBalance" & Prev_DateString & ".D_r_i_end)-(WaterAllocation" & DateString & "!SurfWatDelivered+WaterAllocation" & DateString & "!PumpWatDelivered+WaterAllocation" & DateString & "!Precip_Amt)+(WaterAllocation" & DateString & "!Runoff_Amt+WaterAllocation" & DateString & "!DeepPerc_Amt)))))<WaterAllocation" & DateString & "!RAW,1,IIf(((WaterAllocation" & DateString & "!TAW-(IIf(((WaterBalance" & Prev_DateString & ".D_r_i_end)-(WaterAllocation" & DateString & "!SurfWatDelivered+WaterAllocation" & DateString & "!PumpWatDelivered+WaterAllocation" & DateString & "!Precip_Amt)+(WaterAllocation" & DateString & "!Runoff_Amt+WaterAllocation" & DateString & "!DeepPerc_Amt))<0,0,IIf(((WaterBalance" & Prev_DateString & ".D_r_i_end)-(WaterAllocation" & DateString & "!SurfWatDelivered+WaterAllocation" & DateString & "!PumpWatDelivered+WaterAllocation" & DateString & "!Precip_Amt)+(WaterAllocation" & DateString & "!Runoff_Amt+WaterAllocation" & DateString & "!DeepPerc_Amt))>WaterAllocation" & DateString & "!TAW,WaterAllocation" & DateString & "!TAW,((WaterBalance" & Prev_DateString & ".D_r_i_end)-(WaterAllocation" & DateString & "!SurfWatDelivered+WaterAllocation" & DateString & "!PumpWatDelivered+WaterAllocation" & DateString & "!Precip_Amt)+(WaterAllocation" & DateString & "!Runoff_Amt+WaterAllocation" & DateString & "!DeepPerc_Amt))))))/(WaterAllocation" & DateString & "!TAW-WaterAllocation" & DateString & "!RAW))<0,0,((WaterAllocation" & DateString & "!TAW-(IIf(((WaterBalance" & Prev_DateString & ".D_r_i_end)-(WaterAllocation" & DateString & "!SurfWatDelivered+WaterAllocation" & DateString & "!PumpWatDelivered+WaterAllocation" & DateString & "!Precip_Amt)+(WaterAllocation" & DateString & "!Runoff_Amt+WaterAllocation" & DateString & "!DeepPerc_Amt))<0,0,IIf(((WaterBalance" & Prev_DateString & ".D_r_i_end)-(WaterAllocation" & DateString & "!SurfWatDelivered+WaterAllocation" & DateString & "!PumpWatDelivered+WaterAllocation" & DateString & "!Precip_Amt)+(WaterAllocation" & DateString & "!Runoff_Amt+WaterAllocation" & DateString & "!DeepPerc_Amt))>WaterAllocation" & DateString & "!TAW,WaterAllocation" & DateString & "!TAW,((WaterBalance" & Prev_DateString & ".D_r_i_end)-(WaterAllocation" & DateString & "!SurfWatDelivered+WaterAllocation" & DateString & "!PumpWatDelivered+WaterAllocation" & DateString & "!Precip_Amt)+(WaterAllocation" & DateString & "!Runoff_Amt+WaterAllocation" & DateString & "!DeepPerc_Amt))))))/(WaterAllocation" & DateString & "!TAW-WaterAllocation" & DateString & "!RAW))))))>WaterAllocation" & DateString & "!TAW,WaterAllocation" & DateString & "!TAW,((IIf(((WaterBalance" & Prev_DateString & ".D_r_i_end)-(WaterAllocation" & DateString & "!SurfWatDelivered+WaterAllocation" & DateString & "!PumpWatDelivered+WaterAllocation" & DateString & "!Precip_Amt)+(WaterAllocation" & DateString & "!Runoff_Amt+WaterAllocation" & DateString & "!DeepPerc_Amt))<0,0,IIf(((WaterBalance" & Prev_DateString & ".D_r_i_end)-(WaterAllocation" & DateString & "!SurfWatDelivered+WaterAllocation" & DateString & "!PumpWatDelivered+WaterAllocation" & DateString & "!Precip_Amt)+(WaterAllocation" & DateString & "!Runoff_Amt+WaterAllocation" & DateString & "!DeepPerc_Amt))>WaterAllocation" & DateString & "!TAW,"
            QueryString += "WaterAllocation" & DateString & "!TAW,((WaterBalance" & Prev_DateString & ".D_r_i_end)-(WaterAllocation" & DateString & "!SurfWatDelivered+WaterAllocation" & DateString & "!PumpWatDelivered+WaterAllocation" & DateString & "!Precip_Amt)+(WaterAllocation" & DateString & "!Runoff_Amt+WaterAllocation" & DateString & "!DeepPerc_Amt)))))+(WaterAllocation" & DateString & "!ETc*(IIf((IIf(((WaterBalance" & Prev_DateString & ".D_r_i_end)-(WaterAllocation" & DateString & "!SurfWatDelivered+WaterAllocation" & DateString & "!PumpWatDelivered+WaterAllocation" & DateString & "!Precip_Amt)+(WaterAllocation" & DateString & "!Runoff_Amt+WaterAllocation" & DateString & "!DeepPerc_Amt))<0,0,IIf(((WaterBalance" & Prev_DateString & ".D_r_i_end)-(WaterAllocation" & DateString & "!SurfWatDelivered+WaterAllocation" & DateString & "!PumpWatDelivered+WaterAllocation" & DateString & "!Precip_Amt)+(WaterAllocation" & DateString & "!Runoff_Amt+WaterAllocation" & DateString & "!DeepPerc_Amt))>WaterAllocation" & DateString & "!TAW,WaterAllocation" & DateString & "!TAW,((WaterBalance" & Prev_DateString & ".D_r_i_end)-(WaterAllocation" & DateString & "!SurfWatDelivered+WaterAllocation" & DateString & "!PumpWatDelivered+WaterAllocation" & DateString & "!Precip_Amt)+(WaterAllocation" & DateString & "!Runoff_Amt+WaterAllocation" & DateString & "!DeepPerc_Amt)))))<WaterAllocation" & DateString & "!RAW,1,IIf(((WaterAllocation" & DateString & "!TAW-(IIf(((WaterBalance" & Prev_DateString & ".D_r_i_end)-(WaterAllocation" & DateString & "!SurfWatDelivered+WaterAllocation" & DateString & "!PumpWatDelivered+WaterAllocation" & DateString & "!Precip_Amt)+(WaterAllocation" & DateString & "!Runoff_Amt+WaterAllocation" & DateString & "!DeepPerc_Amt))<0,0,IIf(((WaterBalance" & Prev_DateString & ".D_r_i_end)-(WaterAllocation" & DateString & "!SurfWatDelivered+WaterAllocation" & DateString & "!PumpWatDelivered+WaterAllocation" & DateString & "!Precip_Amt)+(WaterAllocation" & DateString & "!Runoff_Amt+WaterAllocation" & DateString & "!DeepPerc_Amt))>WaterAllocation" & DateString & "!TAW,WaterAllocation" & DateString & "!TAW,((WaterBalance" & Prev_DateString & ".D_r_i_end)-(WaterAllocation" & DateString & "!SurfWatDelivered+WaterAllocation" & DateString & "!PumpWatDelivered+WaterAllocation" & DateString & "!Precip_Amt)+(WaterAllocation" & DateString & "!Runoff_Amt+WaterAllocation" & DateString & "!DeepPerc_Amt))))))/(WaterAllocation" & DateString & "!TAW-WaterAllocation" & DateString & "!RAW))<0,0,((WaterAllocation" & DateString & "!TAW-(IIf(((WaterBalance" & Prev_DateString & ".D_r_i_end)-(WaterAllocation" & DateString & "!SurfWatDelivered+WaterAllocation" & DateString & "!PumpWatDelivered+WaterAllocation" & DateString & "!Precip_Amt)+(WaterAllocation" & DateString & "!Runoff_Amt+WaterAllocation" & DateString & "!DeepPerc_Amt))<0,0,IIf(((WaterBalance" & Prev_DateString & ".D_r_i_end)-(WaterAllocation" & DateString & "!SurfWatDelivered+WaterAllocation" & DateString & "!PumpWatDelivered+WaterAllocation" & DateString & "!Precip_Amt)+(WaterAllocation" & DateString & "!Runoff_Amt+WaterAllocation" & DateString & "!DeepPerc_Amt))>WaterAllocation" & DateString & "!TAW,WaterAllocation" & DateString & "!TAW,((WaterBalance" & Prev_DateString & ".D_r_i_end)-(WaterAllocation" & DateString & "!SurfWatDelivered+WaterAllocation" & DateString & "!PumpWatDelivered+WaterAllocation" & DateString & "!Precip_Amt)+(WaterAllocation" & DateString & "!Runoff_Amt+WaterAllocation" & DateString & "!DeepPerc_Amt))))))/(WaterAllocation" & DateString & "!TAW-WaterAllocation" & DateString & "!RAW)))))))) AS D_r_i_end, IIf((WaterBalance" & Prev_DateString & ".D_r_i_end)-(WaterAllocation" & DateString & "!SurfWatDelivered+WaterAllocation" & DateString & "!PumpWatDelivered+WaterAllocation" & DateString & "!Precip_Amt)+(WaterAllocation" & DateString & "!Runoff_Amt+WaterAllocation" & DateString & "!DeepPerc_Amt)<0,Abs((WaterBalance" & Prev_DateString & ".D_r_i_end)-(WaterAllocation" & DateString & "!SurfWatDelivered+WaterAllocation" & DateString & "!PumpWatDelivered+WaterAllocation" & DateString & "!Precip_Amt)+(WaterAllocation" & DateString & "!Runoff_Amt+WaterAllocation" & DateString & "!DeepPerc_Amt)),0) AS DP_add, "
            QueryString += "WaterAllocation" & DateString & "!DeepPerc_Amt+(IIf((WaterBalance" & Prev_DateString & ".D_r_i_end)-(WaterAllocation" & DateString & "!SurfWatDelivered+WaterAllocation" & DateString & "!PumpWatDelivered+WaterAllocation" & DateString & "!Precip_Amt)+(WaterAllocation" & DateString & "!Runoff_Amt+WaterAllocation" & DateString & "!DeepPerc_Amt)<0,Abs((WaterBalance" & Prev_DateString & ".D_r_i_end)-(WaterAllocation" & DateString & "!SurfWatDelivered+WaterAllocation" & DateString & "!PumpWatDelivered+WaterAllocation" & DateString & "!Precip_Amt)+(WaterAllocation" & DateString & "!Runoff_Amt+WaterAllocation" & DateString & "!DeepPerc_Amt)),0)) AS DP_final INTO WaterBalance" & DateString & " "
            QueryString += "FROM ((WaterAllocation" & Prev_DateString & " INNER JOIN WaterBalance" & Prev_DateString & " ON WaterAllocation" & Prev_DateString & ".Field_No = WaterBalance" & Prev_DateString & ".Field_No) INNER JOIN [Phil->DWR Working] ON WaterBalance" & Prev_DateString & ".Field_No = [Phil->DWR Working].Phil_Fld) INNER JOIN WaterAllocation" & DateString & " ON [Phil->DWR Working].DWR_Fld = WaterAllocation" & DateString & ".Field_No "
            QueryString += "ORDER BY WaterAllocation" & DateString & ".Field_No;"

        ElseIf CurrentDate >= #1/1/2004# And CurrentDate <= #1/7/2004# Then
            'Need to make another transtion query using the "DWR->Phil Working" Table as a key to do so
            'The first querystring, commented out below is for the upstream region and can be found in
            'C:\Eric\Arkansas River Valley\Entire_Basin\GIS\RegionalModelOutput.mdb\Queries\DP_Adjustment & Ks Determination_Flds_Transition_03 to_04
            'I decided to copy a condensed version of the Query here and comment it out because often times the
            'query gets lost in access if the tables being used by the query get deleted because of database size
            'concerns.  The other problem is once the query gets expanded upon (so that it works from .NET)
            'it is difficult to copy the query string into access because there will be too many characters.
            'The commented out query should then represent a safe copy. 
            'QueryString = "SELECT WaterAllocation01012004.Field_No, WaterAllocation01012004.RAW, WaterBalance12252003.D_r_i_end AS D_r_i_prev, [WaterAllocation01012004]![SurfWatDelivered]+[WaterAllocation01012004]![PumpWatDelivered]+[WaterAllocation01012004]![Precip_Amt] AS Inflow, [WaterAllocation01012004]![Runoff_Amt]+[WaterAllocation01012004]![DeepPerc_Amt] AS Outflow, IIf(([D_r_i_prev]-[Inflow]+[Outflow])<0,0,IIf(([D_r_i_prev]-[Inflow]+[Outflow])>[WaterAllocation01012004]![TAW],[WaterAllocation01012004]![TAW],([D_r_i_prev]-[Inflow]+[Outflow]))) AS D_r_i_strt, WaterAllocation01012004.ETc, IIf([D_r_i_strt]<[WaterAllocation01012004]![RAW],1,IIf((([WaterAllocation01012004]![TAW]-[D_r_i_strt])/([WaterAllocation01012004]![TAW]-[WaterAllocation01012004]![RAW]))<0,0,(([WaterAllocation01012004]![TAW]-[D_r_i_strt])/([WaterAllocation01012004]![TAW]-[WaterAllocation01012004]![RAW])))) AS K_s, [WaterAllocation01012004]![ETc]*[K_s] AS ET_adj, IIf([D_r_i_strt]+[ET_adj]>[WaterAllocation01012004]![TAW],[WaterAllocation01012004]![TAW],([D_r_i_strt]+[ET_adj])) AS D_r_i_end, IIf([D_r_i_prev]-[Inflow]+[Outflow]<0,Abs([D_r_i_prev]-[Inflow]+[Outflow]),0) AS DP_add, [WaterAllocation01012004]![DeepPerc_Amt]+[DP_add] AS DP_final INTO WaterBalance01012004 "
            'QueryString += "FROM WaterAllocation01012004 INNER JOIN (WaterAllocation12252003 INNER JOIN ([DWR->Phil Working] INNER JOIN WaterBalance12252003 ON [DWR->Phil Working].DWR_Fld = WaterBalance12252003.Field_No) ON WaterAllocation12252003.Field_No = [DWR->Phil Working].DWR_Fld) ON WaterAllocation01012004.Field_No = [DWR->Phil Working].Phil_Fld;"

            If Upstream_or_not1 Then
                QueryString = "SELECT WaterAllocation" & DateString & ".Field_No, WaterAllocation" & DateString & ".RAW, WaterBalance" & Prev_DateString & ".D_r_i_end AS D_r_i_prev, [WaterAllocation" & DateString & "]![SurfWatDelivered]+[WaterAllocation" & DateString & "]![PumpWatDelivered]+[WaterAllocation" & DateString & "]![Precip_Amt] AS Inflow, [WaterAllocation" & DateString & "]![Runoff_Amt]+[WaterAllocation" & DateString & "]![DeepPerc_Amt] AS Outflow, IIf(((WaterBalance" & Prev_DateString & ".D_r_i_end)-([WaterAllocation" & DateString & "]![SurfWatDelivered]+[WaterAllocation" & DateString & "]![PumpWatDelivered]+[WaterAllocation" & DateString & "]![Precip_Amt])+([WaterAllocation" & DateString & "]![Runoff_Amt]+[WaterAllocation" & DateString & "]![DeepPerc_Amt]))<0,0,IIf(((WaterBalance" & Prev_DateString & ".D_r_i_end)-([WaterAllocation" & DateString & "]![SurfWatDelivered]+[WaterAllocation" & DateString & "]![PumpWatDelivered]+[WaterAllocation" & DateString & "]![Precip_Amt])+([WaterAllocation" & DateString & "]![Runoff_Amt]+[WaterAllocation" & DateString & "]![DeepPerc_Amt]))>[WaterAllocation" & DateString & "]![TAW],[WaterAllocation" & DateString & "]![TAW],((WaterBalance" & Prev_DateString & ".D_r_i_end)-([WaterAllocation" & DateString & "]![SurfWatDelivered]+[WaterAllocation" & DateString & "]![PumpWatDelivered]+[WaterAllocation" & DateString & "]![Precip_Amt])+([WaterAllocation" & DateString & "]![Runoff_Amt]+[WaterAllocation" & DateString & "]![DeepPerc_Amt])))) AS D_r_i_strt, WaterAllocation" & DateString & ".ETc, IIf((IIf(((WaterBalance" & Prev_DateString & ".D_r_i_end)-([WaterAllocation" & DateString & "]![SurfWatDelivered]+[WaterAllocation" & DateString & "]![PumpWatDelivered]+[WaterAllocation" & DateString & "]![Precip_Amt])+([WaterAllocation" & DateString & "]![Runoff_Amt]+[WaterAllocation" & DateString & "]![DeepPerc_Amt]))<0,0,IIf(((WaterBalance" & Prev_DateString & ".D_r_i_end)-([WaterAllocation" & DateString & "]![SurfWatDelivered]+[WaterAllocation" & DateString & "]![PumpWatDelivered]+[WaterAllocation" & DateString & "]![Precip_Amt])+([WaterAllocation" & DateString & "]![Runoff_Amt]+[WaterAllocation" & DateString & "]![DeepPerc_Amt]))>[WaterAllocation" & DateString & "]![TAW],[WaterAllocation" & DateString & "]![TAW],((WaterBalance" & Prev_DateString & ".D_r_i_end)-([WaterAllocation" & DateString & "]![SurfWatDelivered]+[WaterAllocation" & DateString & "]![PumpWatDelivered]+[WaterAllocation" & DateString & "]![Precip_Amt])+([WaterAllocation" & DateString & "]![Runoff_Amt]+[WaterAllocation" & DateString & "]![DeepPerc_Amt])))))<[WaterAllocation" & DateString & "]![RAW],1,IIf((([WaterAllocation" & DateString & "]![TAW]-(IIf(((WaterBalance" & Prev_DateString & ".D_r_i_end)-([WaterAllocation" & DateString & "]![SurfWatDelivered]+[WaterAllocation" & DateString & "]![PumpWatDelivered]+[WaterAllocation" & DateString & "]![Precip_Amt])+([WaterAllocation" & DateString & "]![Runoff_Amt]+[WaterAllocation" & DateString & "]![DeepPerc_Amt]))<0,0,IIf(((WaterBalance" & Prev_DateString & ".D_r_i_end)-([WaterAllocation" & DateString & "]![SurfWatDelivered]+[WaterAllocation" & DateString & "]![PumpWatDelivered]+[WaterAllocation" & DateString & "]![Precip_Amt])+([WaterAllocation" & DateString & "]![Runoff_Amt]+[WaterAllocation" & DateString & "]![DeepPerc_Amt]))>[WaterAllocation" & DateString & "]![TAW],[WaterAllocation" & DateString & "]![TAW],((WaterBalance" & Prev_DateString & ".D_r_i_end)-([WaterAllocation" & DateString & "]![SurfWatDelivered]+[WaterAllocation" & DateString & "]![PumpWatDelivered]+[WaterAllocation" & DateString & "]![Precip_Amt])+([WaterAllocation" & DateString & "]![Runoff_Amt]+[WaterAllocation" & DateString & "]![DeepPerc_Amt]))))))/([WaterAllocation" & DateString & "]![TAW]-[WaterAllocation" & DateString & "]![RAW]))<0,0,(([WaterAllocation" & DateString & "]![TAW]-(IIf(((WaterBalance" & Prev_DateString & ".D_r_i_end)-([WaterAllocation" & DateString & "]![SurfWatDelivered]+[WaterAllocation" & DateString & "]![PumpWatDelivered]+[WaterAllocation" & DateString & "]![Precip_Amt])+([WaterAllocation" & DateString & "]![Runoff_Amt]+[WaterAllocation" & DateString & "]![DeepPerc_Amt]))<0,0,IIf(((WaterBalance" & Prev_DateString & ".D_r_i_end)-([WaterAllocation" & DateString & "]![SurfWatDelivered]+[WaterAllocation" & DateString & "]![PumpWatDelivered]+[WaterAllocation" & DateString & "]![Precip_Amt])+([WaterAllocation" & DateString & "]![Runoff_Amt]+[WaterAllocation" & DateString & "]![DeepPerc_Amt]))>[WaterAllocation" & DateString & "]![TAW],[WaterAllocation" & DateString & "]![TAW],((WaterBalance" & Prev_DateString & ".D_r_i_end)-([WaterAllocation" & DateString & "]![SurfWatDelivered]+[WaterAllocation" & DateString & "]![PumpWatDelivered]+[WaterAllocation" & DateString & "]![Precip_Amt])+([WaterAllocation" & DateString & "]![Runoff_Amt]+[WaterAllocation" & DateString & "]![DeepPerc_Amt]))))))/([WaterAllocation" & DateString & "]![TAW]-[WaterAllocation" & DateString & "]![RAW])))) AS K_s, "
                QueryString += "[WaterAllocation" & DateString & "]![ETc]*(IIf((IIf(((WaterBalance" & Prev_DateString & ".D_r_i_end)-([WaterAllocation" & DateString & "]![SurfWatDelivered]+[WaterAllocation" & DateString & "]![PumpWatDelivered]+[WaterAllocation" & DateString & "]![Precip_Amt])+([WaterAllocation" & DateString & "]![Runoff_Amt]+[WaterAllocation" & DateString & "]![DeepPerc_Amt]))<0,0,IIf(((WaterBalance" & Prev_DateString & ".D_r_i_end)-([WaterAllocation" & DateString & "]![SurfWatDelivered]+[WaterAllocation" & DateString & "]![PumpWatDelivered]+[WaterAllocation" & DateString & "]![Precip_Amt])+([WaterAllocation" & DateString & "]![Runoff_Amt]+[WaterAllocation" & DateString & "]![DeepPerc_Amt]))>[WaterAllocation" & DateString & "]![TAW],[WaterAllocation" & DateString & "]![TAW],((WaterBalance" & Prev_DateString & ".D_r_i_end)-([WaterAllocation" & DateString & "]![SurfWatDelivered]+[WaterAllocation" & DateString & "]![PumpWatDelivered]+[WaterAllocation" & DateString & "]![Precip_Amt])+([WaterAllocation" & DateString & "]![Runoff_Amt]+[WaterAllocation" & DateString & "]![DeepPerc_Amt])))))<[WaterAllocation" & DateString & "]![RAW],1,IIf((([WaterAllocation" & DateString & "]![TAW]-(IIf(((WaterBalance" & Prev_DateString & ".D_r_i_end)-([WaterAllocation" & DateString & "]![SurfWatDelivered]+[WaterAllocation" & DateString & "]![PumpWatDelivered]+[WaterAllocation" & DateString & "]![Precip_Amt])+([WaterAllocation" & DateString & "]![Runoff_Amt]+[WaterAllocation" & DateString & "]![DeepPerc_Amt]))<0,0,IIf(((WaterBalance" & Prev_DateString & ".D_r_i_end)-([WaterAllocation" & DateString & "]![SurfWatDelivered]+[WaterAllocation" & DateString & "]![PumpWatDelivered]+[WaterAllocation" & DateString & "]![Precip_Amt])+([WaterAllocation" & DateString & "]![Runoff_Amt]+[WaterAllocation" & DateString & "]![DeepPerc_Amt]))>[WaterAllocation" & DateString & "]![TAW],[WaterAllocation" & DateString & "]![TAW],((WaterBalance" & Prev_DateString & ".D_r_i_end)-([WaterAllocation" & DateString & "]![SurfWatDelivered]+[WaterAllocation" & DateString & "]![PumpWatDelivered]+[WaterAllocation" & DateString & "]![Precip_Amt])+([WaterAllocation" & DateString & "]![Runoff_Amt]+[WaterAllocation" & DateString & "]![DeepPerc_Amt]))))))/([WaterAllocation" & DateString & "]![TAW]-[WaterAllocation" & DateString & "]![RAW]))<0,0,(([WaterAllocation" & DateString & "]![TAW]-(IIf(((WaterBalance" & Prev_DateString & ".D_r_i_end)-([WaterAllocation" & DateString & "]![SurfWatDelivered]+[WaterAllocation" & DateString & "]![PumpWatDelivered]+[WaterAllocation" & DateString & "]![Precip_Amt])+([WaterAllocation" & DateString & "]![Runoff_Amt]+[WaterAllocation" & DateString & "]![DeepPerc_Amt]))<0,0,IIf(((WaterBalance" & Prev_DateString & ".D_r_i_end)-([WaterAllocation" & DateString & "]![SurfWatDelivered]+[WaterAllocation" & DateString & "]![PumpWatDelivered]+[WaterAllocation" & DateString & "]![Precip_Amt])+([WaterAllocation" & DateString & "]![Runoff_Amt]+[WaterAllocation" & DateString & "]![DeepPerc_Amt]))>[WaterAllocation" & DateString & "]![TAW],[WaterAllocation" & DateString & "]![TAW],((WaterBalance" & Prev_DateString & ".D_r_i_end)-([WaterAllocation" & DateString & "]![SurfWatDelivered]+[WaterAllocation" & DateString & "]![PumpWatDelivered]+[WaterAllocation" & DateString & "]![Precip_Amt])+([WaterAllocation" & DateString & "]![Runoff_Amt]+[WaterAllocation" & DateString & "]![DeepPerc_Amt]))))))/([WaterAllocation" & DateString & "]![TAW]-[WaterAllocation" & DateString & "]![RAW]))))) AS ET_adj, IIf((IIf(((WaterBalance" & Prev_DateString & ".D_r_i_end)-([WaterAllocation" & DateString & "]![SurfWatDelivered]+[WaterAllocation" & DateString & "]![PumpWatDelivered]+[WaterAllocation" & DateString & "]![Precip_Amt])+([WaterAllocation" & DateString & "]![Runoff_Amt]+[WaterAllocation" & DateString & "]![DeepPerc_Amt]))<0,0,IIf(((WaterBalance" & Prev_DateString & ".D_r_i_end)-([WaterAllocation" & DateString & "]![SurfWatDelivered]+[WaterAllocation" & DateString & "]![PumpWatDelivered]+[WaterAllocation" & DateString & "]![Precip_Amt])+([WaterAllocation" & DateString & "]![Runoff_Amt]+[WaterAllocation" & DateString & "]![DeepPerc_Amt]))>[WaterAllocation" & DateString & "]![TAW],[WaterAllocation" & DateString & "]![TAW],((WaterBalance" & Prev_DateString & ".D_r_i_end)-([WaterAllocation" & DateString & "]![SurfWatDelivered]+[WaterAllocation" & DateString & "]![PumpWatDelivered]+[WaterAllocation" & DateString & "]![Precip_Amt])+([WaterAllocation" & DateString & "]![Runoff_Amt]+[WaterAllocation" & DateString & "]![DeepPerc_Amt])))))+([WaterAllocation" & DateString & "]![ETc]*(IIf((IIf(((WaterBalance" & Prev_DateString & ".D_r_i_end)-([WaterAllocation" & DateString & "]![SurfWatDelivered]+[WaterAllocation" & DateString & "]![PumpWatDelivered]+[WaterAllocation" & DateString & "]![Precip_Amt])+([WaterAllocation" & DateString & "]![Runoff_Amt]+[WaterAllocation" & DateString & "]![DeepPerc_Amt]))<0,0,IIf(((WaterBalance" & Prev_DateString & ".D_r_i_end)-"
                QueryString += "([WaterAllocation" & DateString & "]![SurfWatDelivered]+[WaterAllocation" & DateString & "]![PumpWatDelivered]+[WaterAllocation" & DateString & "]![Precip_Amt])+([WaterAllocation" & DateString & "]![Runoff_Amt]+[WaterAllocation" & DateString & "]![DeepPerc_Amt]))>[WaterAllocation" & DateString & "]![TAW],[WaterAllocation" & DateString & "]![TAW],((WaterBalance" & Prev_DateString & ".D_r_i_end)-([WaterAllocation" & DateString & "]![SurfWatDelivered]+[WaterAllocation" & DateString & "]![PumpWatDelivered]+[WaterAllocation" & DateString & "]![Precip_Amt])+([WaterAllocation" & DateString & "]![Runoff_Amt]+[WaterAllocation" & DateString & "]![DeepPerc_Amt])))))<[WaterAllocation" & DateString & "]![RAW],1,IIf((([WaterAllocation" & DateString & "]![TAW]-(IIf(((WaterBalance" & Prev_DateString & ".D_r_i_end)-([WaterAllocation" & DateString & "]![SurfWatDelivered]+[WaterAllocation" & DateString & "]![PumpWatDelivered]+[WaterAllocation" & DateString & "]![Precip_Amt])+([WaterAllocation" & DateString & "]![Runoff_Amt]+[WaterAllocation" & DateString & "]![DeepPerc_Amt]))<0,0,IIf(((WaterBalance" & Prev_DateString & ".D_r_i_end)-([WaterAllocation" & DateString & "]![SurfWatDelivered]+[WaterAllocation" & DateString & "]![PumpWatDelivered]+[WaterAllocation" & DateString & "]![Precip_Amt])+([WaterAllocation" & DateString & "]![Runoff_Amt]+[WaterAllocation" & DateString & "]![DeepPerc_Amt]))>[WaterAllocation" & DateString & "]![TAW],[WaterAllocation" & DateString & "]![TAW],((WaterBalance" & Prev_DateString & ".D_r_i_end)-([WaterAllocation" & DateString & "]![SurfWatDelivered]+[WaterAllocation" & DateString & "]![PumpWatDelivered]+[WaterAllocation" & DateString & "]![Precip_Amt])+([WaterAllocation" & DateString & "]![Runoff_Amt]+[WaterAllocation" & DateString & "]![DeepPerc_Amt]))))))/([WaterAllocation" & DateString & "]![TAW]-[WaterAllocation" & DateString & "]![RAW]))<0,0,(([WaterAllocation" & DateString & "]![TAW]-(IIf(((WaterBalance" & Prev_DateString & ".D_r_i_end)-([WaterAllocation" & DateString & "]![SurfWatDelivered]+[WaterAllocation" & DateString & "]![PumpWatDelivered]+[WaterAllocation" & DateString & "]![Precip_Amt])+([WaterAllocation" & DateString & "]![Runoff_Amt]+[WaterAllocation" & DateString & "]![DeepPerc_Amt]))<0,0,IIf(((WaterBalance" & Prev_DateString & ".D_r_i_end)-([WaterAllocation" & DateString & "]![SurfWatDelivered]+[WaterAllocation" & DateString & "]![PumpWatDelivered]+[WaterAllocation" & DateString & "]![Precip_Amt])+([WaterAllocation" & DateString & "]![Runoff_Amt]+[WaterAllocation" & DateString & "]![DeepPerc_Amt]))>[WaterAllocation" & DateString & "]![TAW],[WaterAllocation" & DateString & "]![TAW],((WaterBalance" & Prev_DateString & ".D_r_i_end)-([WaterAllocation" & DateString & "]![SurfWatDelivered]+[WaterAllocation" & DateString & "]![PumpWatDelivered]+[WaterAllocation" & DateString & "]![Precip_Amt])+([WaterAllocation" & DateString & "]![Runoff_Amt]+[WaterAllocation" & DateString & "]![DeepPerc_Amt]))))))/([WaterAllocation" & DateString & "]![TAW]-[WaterAllocation" & DateString & "]![RAW]))))))>[WaterAllocation" & DateString & "]![TAW],[WaterAllocation" & DateString & "]![TAW],((IIf(((WaterBalance" & Prev_DateString & ".D_r_i_end)-([WaterAllocation" & DateString & "]![SurfWatDelivered]+[WaterAllocation" & DateString & "]![PumpWatDelivered]+[WaterAllocation" & DateString & "]![Precip_Amt])+([WaterAllocation" & DateString & "]![Runoff_Amt]+[WaterAllocation" & DateString & "]![DeepPerc_Amt]))<0,0,IIf(((WaterBalance" & Prev_DateString & ".D_r_i_end)-([WaterAllocation" & DateString & "]![SurfWatDelivered]+[WaterAllocation" & DateString & "]![PumpWatDelivered]+[WaterAllocation" & DateString & "]![Precip_Amt])+([WaterAllocation" & DateString & "]![Runoff_Amt]+[WaterAllocation" & DateString & "]![DeepPerc_Amt]))>[WaterAllocation" & DateString & "]![TAW],[WaterAllocation" & DateString & "]![TAW],((WaterBalance" & Prev_DateString & ".D_r_i_end)-([WaterAllocation" & DateString & "]![SurfWatDelivered]+[WaterAllocation" & DateString & "]![PumpWatDelivered]+[WaterAllocation" & DateString & "]![Precip_Amt])+([WaterAllocation" & DateString & "]![Runoff_Amt]+[WaterAllocation" & DateString & "]![DeepPerc_Amt])))))+([WaterAllocation" & DateString & "]![ETc]*(IIf((IIf(((WaterBalance" & Prev_DateString & ".D_r_i_end)-([WaterAllocation" & DateString & "]![SurfWatDelivered]+[WaterAllocation" & DateString & "]![PumpWatDelivered]+[WaterAllocation" & DateString & "]![Precip_Amt])+([WaterAllocation" & DateString & "]![Runoff_Amt]+[WaterAllocation" & DateString & "]![DeepPerc_Amt]))<0,0,IIf(((WaterBalance" & Prev_DateString & ".D_r_i_end)-([WaterAllocation" & DateString & "]![SurfWatDelivered]+[WaterAllocation" & DateString & "]![PumpWatDelivered]+[WaterAllocation" & DateString & "]![Precip_Amt])+([WaterAllocation" & DateString & "]![Runoff_Amt]+[WaterAllocation" & DateString & "]![DeepPerc_Amt]))>[WaterAllocation" & DateString & "]![TAW],[WaterAllocation" & DateString & "]![TAW],((WaterBalance" & Prev_DateString & ".D_r_i_end)-([WaterAllocation" & DateString & "]![SurfWatDelivered]+[WaterAllocation" & DateString & "]![PumpWatDelivered]+[WaterAllocation" & DateString & "]![Precip_Amt])+([WaterAllocation" & DateString & "]![Runoff_Amt]+[WaterAllocation" & DateString & "]![DeepPerc_Amt])))))<[WaterAllocation" & DateString & "]![RAW],1, "
                QueryString += "IIf((([WaterAllocation" & DateString & "]![TAW]-(IIf(((WaterBalance" & Prev_DateString & ".D_r_i_end)-([WaterAllocation" & DateString & "]![SurfWatDelivered]+[WaterAllocation" & DateString & "]![PumpWatDelivered]+[WaterAllocation" & DateString & "]![Precip_Amt])+([WaterAllocation" & DateString & "]![Runoff_Amt]+[WaterAllocation" & DateString & "]![DeepPerc_Amt]))<0,0,IIf(((WaterBalance" & Prev_DateString & ".D_r_i_end)-([WaterAllocation" & DateString & "]![SurfWatDelivered]+[WaterAllocation" & DateString & "]![PumpWatDelivered]+[WaterAllocation" & DateString & "]![Precip_Amt])+([WaterAllocation" & DateString & "]![Runoff_Amt]+[WaterAllocation" & DateString & "]![DeepPerc_Amt]))>[WaterAllocation" & DateString & "]![TAW],[WaterAllocation" & DateString & "]![TAW],((WaterBalance" & Prev_DateString & ".D_r_i_end)-([WaterAllocation" & DateString & "]![SurfWatDelivered]+[WaterAllocation" & DateString & "]![PumpWatDelivered]+[WaterAllocation" & DateString & "]![Precip_Amt])+([WaterAllocation" & DateString & "]![Runoff_Amt]+[WaterAllocation" & DateString & "]![DeepPerc_Amt]))))))/([WaterAllocation" & DateString & "]![TAW]-[WaterAllocation" & DateString & "]![RAW]))<0,0,(([WaterAllocation" & DateString & "]![TAW]-(IIf(((WaterBalance" & Prev_DateString & ".D_r_i_end)-([WaterAllocation" & DateString & "]![SurfWatDelivered]+[WaterAllocation" & DateString & "]![PumpWatDelivered]+[WaterAllocation" & DateString & "]![Precip_Amt])+([WaterAllocation" & DateString & "]![Runoff_Amt]+[WaterAllocation" & DateString & "]![DeepPerc_Amt]))<0,0,IIf(((WaterBalance" & Prev_DateString & ".D_r_i_end)-([WaterAllocation" & DateString & "]![SurfWatDelivered]+[WaterAllocation" & DateString & "]![PumpWatDelivered]+[WaterAllocation" & DateString & "]![Precip_Amt])+([WaterAllocation" & DateString & "]![Runoff_Amt]+[WaterAllocation" & DateString & "]![DeepPerc_Amt]))>[WaterAllocation" & DateString & "]![TAW],[WaterAllocation" & DateString & "]![TAW],((WaterBalance" & Prev_DateString & ".D_r_i_end)-([WaterAllocation" & DateString & "]![SurfWatDelivered]+[WaterAllocation" & DateString & "]![PumpWatDelivered]+[WaterAllocation" & DateString & "]![Precip_Amt])+([WaterAllocation" & DateString & "]![Runoff_Amt]+[WaterAllocation" & DateString & "]![DeepPerc_Amt]))))))/([WaterAllocation" & DateString & "]![TAW]-[WaterAllocation" & DateString & "]![RAW])))))))) AS D_r_i_end, IIf((WaterBalance" & Prev_DateString & ".D_r_i_end)-([WaterAllocation" & DateString & "]![SurfWatDelivered]+[WaterAllocation" & DateString & "]![PumpWatDelivered]+[WaterAllocation" & DateString & "]![Precip_Amt])+([WaterAllocation" & DateString & "]![Runoff_Amt]+[WaterAllocation" & DateString & "]![DeepPerc_Amt])<0,Abs((WaterBalance" & Prev_DateString & ".D_r_i_end)-([WaterAllocation" & DateString & "]![SurfWatDelivered]+[WaterAllocation" & DateString & "]![PumpWatDelivered]+[WaterAllocation" & DateString & "]![Precip_Amt])+([WaterAllocation" & DateString & "]![Runoff_Amt]+[WaterAllocation" & DateString & "]![DeepPerc_Amt])),0) AS DP_add, [WaterAllocation" & DateString & "]![DeepPerc_Amt]+[DP_add] AS DP_final INTO WaterBalance" & DateString & " "
                QueryString += "FROM WaterAllocation" & DateString & " INNER JOIN (WaterAllocation" & Prev_DateString & " INNER JOIN ([DWR->Phil Working] INNER JOIN WaterBalance" & Prev_DateString & " ON [DWR->Phil Working].DWR_Fld = WaterBalance" & Prev_DateString & ".Field_No) ON WaterAllocation" & Prev_DateString & ".Field_No = [DWR->Phil Working].DWR_Fld) ON WaterAllocation" & DateString & ".Field_No = [DWR->Phil Working].Phil_Fld; "
            Else
                QueryString = "SELECT WaterAllocation" & DateString & ".Field_No, WaterAllocation" & DateString & ".RAW, WaterBalance" & Prev_DateString & ".D_r_i_end AS D_r_i_prev, [WaterAllocation" & DateString & "]![SurfWatDelivered]+[WaterAllocation" & DateString & "]![PumpWatDelivered]+[WaterAllocation" & DateString & "]![Precip_Amt] AS Inflow, [WaterAllocation" & DateString & "]![Runoff_Amt]+[WaterAllocation" & DateString & "]![DeepPerc_Amt] AS Outflow, IIf(((WaterBalance" & Prev_DateString & ".D_r_i_end)-([WaterAllocation" & DateString & "]![SurfWatDelivered]+[WaterAllocation" & DateString & "]![PumpWatDelivered]+[WaterAllocation" & DateString & "]![Precip_Amt])+([WaterAllocation" & DateString & "]![Runoff_Amt]+[WaterAllocation" & DateString & "]![DeepPerc_Amt]))<0,0,IIf(((WaterBalance" & Prev_DateString & ".D_r_i_end)-([WaterAllocation" & DateString & "]![SurfWatDelivered]+[WaterAllocation" & DateString & "]![PumpWatDelivered]+[WaterAllocation" & DateString & "]![Precip_Amt])+([WaterAllocation" & DateString & "]![Runoff_Amt]+[WaterAllocation" & DateString & "]![DeepPerc_Amt]))>[WaterAllocation" & DateString & "]![TAW],[WaterAllocation" & DateString & "]![TAW],((WaterBalance" & Prev_DateString & ".D_r_i_end)-([WaterAllocation" & DateString & "]![SurfWatDelivered]+[WaterAllocation" & DateString & "]![PumpWatDelivered]+[WaterAllocation" & DateString & "]![Precip_Amt])+([WaterAllocation" & DateString & "]![Runoff_Amt]+[WaterAllocation" & DateString & "]![DeepPerc_Amt])))) AS D_r_i_strt, WaterAllocation" & DateString & ".ETc, IIf((IIf(((WaterBalance" & Prev_DateString & ".D_r_i_end)-([WaterAllocation" & DateString & "]![SurfWatDelivered]+[WaterAllocation" & DateString & "]![PumpWatDelivered]+[WaterAllocation" & DateString & "]![Precip_Amt])+([WaterAllocation" & DateString & "]![Runoff_Amt]+[WaterAllocation" & DateString & "]![DeepPerc_Amt]))<0,0,IIf(((WaterBalance" & Prev_DateString & ".D_r_i_end)-([WaterAllocation" & DateString & "]![SurfWatDelivered]+[WaterAllocation" & DateString & "]![PumpWatDelivered]+[WaterAllocation" & DateString & "]![Precip_Amt])+([WaterAllocation" & DateString & "]![Runoff_Amt]+[WaterAllocation" & DateString & "]![DeepPerc_Amt]))>[WaterAllocation" & DateString & "]![TAW],[WaterAllocation" & DateString & "]![TAW],((WaterBalance" & Prev_DateString & ".D_r_i_end)-([WaterAllocation" & DateString & "]![SurfWatDelivered]+[WaterAllocation" & DateString & "]![PumpWatDelivered]+[WaterAllocation" & DateString & "]![Precip_Amt])+([WaterAllocation" & DateString & "]![Runoff_Amt]+[WaterAllocation" & DateString & "]![DeepPerc_Amt])))))<[WaterAllocation" & DateString & "]![RAW],1,IIf((([WaterAllocation" & DateString & "]![TAW]-(IIf(((WaterBalance" & Prev_DateString & ".D_r_i_end)-([WaterAllocation" & DateString & "]![SurfWatDelivered]+[WaterAllocation" & DateString & "]![PumpWatDelivered]+[WaterAllocation" & DateString & "]![Precip_Amt])+([WaterAllocation" & DateString & "]![Runoff_Amt]+[WaterAllocation" & DateString & "]![DeepPerc_Amt]))<0,0,IIf(((WaterBalance" & Prev_DateString & ".D_r_i_end)-([WaterAllocation" & DateString & "]![SurfWatDelivered]+[WaterAllocation" & DateString & "]![PumpWatDelivered]+[WaterAllocation" & DateString & "]![Precip_Amt])+([WaterAllocation" & DateString & "]![Runoff_Amt]+[WaterAllocation" & DateString & "]![DeepPerc_Amt]))>[WaterAllocation" & DateString & "]![TAW],[WaterAllocation" & DateString & "]![TAW],((WaterBalance" & Prev_DateString & ".D_r_i_end)-([WaterAllocation" & DateString & "]![SurfWatDelivered]+[WaterAllocation" & DateString & "]![PumpWatDelivered]+[WaterAllocation" & DateString & "]![Precip_Amt])+([WaterAllocation" & DateString & "]![Runoff_Amt]+[WaterAllocation" & DateString & "]![DeepPerc_Amt]))))))/([WaterAllocation" & DateString & "]![TAW]-[WaterAllocation" & DateString & "]![RAW]))<0,0,(([WaterAllocation" & DateString & "]![TAW]-(IIf(((WaterBalance" & Prev_DateString & ".D_r_i_end)-([WaterAllocation" & DateString & "]![SurfWatDelivered]+[WaterAllocation" & DateString & "]![PumpWatDelivered]+[WaterAllocation" & DateString & "]![Precip_Amt])+([WaterAllocation" & DateString & "]![Runoff_Amt]+[WaterAllocation" & DateString & "]![DeepPerc_Amt]))<0,0,IIf(((WaterBalance" & Prev_DateString & ".D_r_i_end)-([WaterAllocation" & DateString & "]![SurfWatDelivered]+[WaterAllocation" & DateString & "]![PumpWatDelivered]+[WaterAllocation" & DateString & "]![Precip_Amt])+([WaterAllocation" & DateString & "]![Runoff_Amt]+[WaterAllocation" & DateString & "]![DeepPerc_Amt]))>[WaterAllocation" & DateString & "]![TAW],[WaterAllocation" & DateString & "]![TAW],((WaterBalance" & Prev_DateString & ".D_r_i_end)-([WaterAllocation" & DateString & "]![SurfWatDelivered]+[WaterAllocation" & DateString & "]![PumpWatDelivered]+[WaterAllocation" & DateString & "]![Precip_Amt])+([WaterAllocation" & DateString & "]![Runoff_Amt]+[WaterAllocation" & DateString & "]![DeepPerc_Amt]))))))/([WaterAllocation" & DateString & "]![TAW]-[WaterAllocation" & DateString & "]![RAW])))) AS K_s, "
                QueryString += "[WaterAllocation" & DateString & "]![ETc]*(IIf((IIf(((WaterBalance" & Prev_DateString & ".D_r_i_end)-([WaterAllocation" & DateString & "]![SurfWatDelivered]+[WaterAllocation" & DateString & "]![PumpWatDelivered]+[WaterAllocation" & DateString & "]![Precip_Amt])+([WaterAllocation" & DateString & "]![Runoff_Amt]+[WaterAllocation" & DateString & "]![DeepPerc_Amt]))<0,0,IIf(((WaterBalance" & Prev_DateString & ".D_r_i_end)-([WaterAllocation" & DateString & "]![SurfWatDelivered]+[WaterAllocation" & DateString & "]![PumpWatDelivered]+[WaterAllocation" & DateString & "]![Precip_Amt])+([WaterAllocation" & DateString & "]![Runoff_Amt]+[WaterAllocation" & DateString & "]![DeepPerc_Amt]))>[WaterAllocation" & DateString & "]![TAW],[WaterAllocation" & DateString & "]![TAW],((WaterBalance" & Prev_DateString & ".D_r_i_end)-([WaterAllocation" & DateString & "]![SurfWatDelivered]+[WaterAllocation" & DateString & "]![PumpWatDelivered]+[WaterAllocation" & DateString & "]![Precip_Amt])+([WaterAllocation" & DateString & "]![Runoff_Amt]+[WaterAllocation" & DateString & "]![DeepPerc_Amt])))))<[WaterAllocation" & DateString & "]![RAW],1,IIf((([WaterAllocation" & DateString & "]![TAW]-(IIf(((WaterBalance" & Prev_DateString & ".D_r_i_end)-([WaterAllocation" & DateString & "]![SurfWatDelivered]+[WaterAllocation" & DateString & "]![PumpWatDelivered]+[WaterAllocation" & DateString & "]![Precip_Amt])+([WaterAllocation" & DateString & "]![Runoff_Amt]+[WaterAllocation" & DateString & "]![DeepPerc_Amt]))<0,0,IIf(((WaterBalance" & Prev_DateString & ".D_r_i_end)-([WaterAllocation" & DateString & "]![SurfWatDelivered]+[WaterAllocation" & DateString & "]![PumpWatDelivered]+[WaterAllocation" & DateString & "]![Precip_Amt])+([WaterAllocation" & DateString & "]![Runoff_Amt]+[WaterAllocation" & DateString & "]![DeepPerc_Amt]))>[WaterAllocation" & DateString & "]![TAW],[WaterAllocation" & DateString & "]![TAW],((WaterBalance" & Prev_DateString & ".D_r_i_end)-([WaterAllocation" & DateString & "]![SurfWatDelivered]+[WaterAllocation" & DateString & "]![PumpWatDelivered]+[WaterAllocation" & DateString & "]![Precip_Amt])+([WaterAllocation" & DateString & "]![Runoff_Amt]+[WaterAllocation" & DateString & "]![DeepPerc_Amt]))))))/([WaterAllocation" & DateString & "]![TAW]-[WaterAllocation" & DateString & "]![RAW]))<0,0,(([WaterAllocation" & DateString & "]![TAW]-(IIf(((WaterBalance" & Prev_DateString & ".D_r_i_end)-([WaterAllocation" & DateString & "]![SurfWatDelivered]+[WaterAllocation" & DateString & "]![PumpWatDelivered]+[WaterAllocation" & DateString & "]![Precip_Amt])+([WaterAllocation" & DateString & "]![Runoff_Amt]+[WaterAllocation" & DateString & "]![DeepPerc_Amt]))<0,0,IIf(((WaterBalance" & Prev_DateString & ".D_r_i_end)-([WaterAllocation" & DateString & "]![SurfWatDelivered]+[WaterAllocation" & DateString & "]![PumpWatDelivered]+[WaterAllocation" & DateString & "]![Precip_Amt])+([WaterAllocation" & DateString & "]![Runoff_Amt]+[WaterAllocation" & DateString & "]![DeepPerc_Amt]))>[WaterAllocation" & DateString & "]![TAW],[WaterAllocation" & DateString & "]![TAW],((WaterBalance" & Prev_DateString & ".D_r_i_end)-([WaterAllocation" & DateString & "]![SurfWatDelivered]+[WaterAllocation" & DateString & "]![PumpWatDelivered]+[WaterAllocation" & DateString & "]![Precip_Amt])+([WaterAllocation" & DateString & "]![Runoff_Amt]+[WaterAllocation" & DateString & "]![DeepPerc_Amt]))))))/([WaterAllocation" & DateString & "]![TAW]-[WaterAllocation" & DateString & "]![RAW]))))) AS ET_adj, IIf((IIf(((WaterBalance" & Prev_DateString & ".D_r_i_end)-([WaterAllocation" & DateString & "]![SurfWatDelivered]+[WaterAllocation" & DateString & "]![PumpWatDelivered]+[WaterAllocation" & DateString & "]![Precip_Amt])+([WaterAllocation" & DateString & "]![Runoff_Amt]+[WaterAllocation" & DateString & "]![DeepPerc_Amt]))<0,0,IIf(((WaterBalance" & Prev_DateString & ".D_r_i_end)-([WaterAllocation" & DateString & "]![SurfWatDelivered]+[WaterAllocation" & DateString & "]![PumpWatDelivered]+[WaterAllocation" & DateString & "]![Precip_Amt])+([WaterAllocation" & DateString & "]![Runoff_Amt]+[WaterAllocation" & DateString & "]![DeepPerc_Amt]))>[WaterAllocation" & DateString & "]![TAW],[WaterAllocation" & DateString & "]![TAW],((WaterBalance" & Prev_DateString & ".D_r_i_end)-([WaterAllocation" & DateString & "]![SurfWatDelivered]+[WaterAllocation" & DateString & "]![PumpWatDelivered]+[WaterAllocation" & DateString & "]![Precip_Amt])+([WaterAllocation" & DateString & "]![Runoff_Amt]+[WaterAllocation" & DateString & "]![DeepPerc_Amt])))))+([WaterAllocation" & DateString & "]![ETc]*(IIf((IIf(((WaterBalance" & Prev_DateString & ".D_r_i_end)-([WaterAllocation" & DateString & "]![SurfWatDelivered]+[WaterAllocation" & DateString & "]![PumpWatDelivered]+[WaterAllocation" & DateString & "]![Precip_Amt])+([WaterAllocation" & DateString & "]![Runoff_Amt]+[WaterAllocation" & DateString & "]![DeepPerc_Amt]))<0,0,IIf(((WaterBalance" & Prev_DateString & ".D_r_i_end)-"
                QueryString += "([WaterAllocation" & DateString & "]![SurfWatDelivered]+[WaterAllocation" & DateString & "]![PumpWatDelivered]+[WaterAllocation" & DateString & "]![Precip_Amt])+([WaterAllocation" & DateString & "]![Runoff_Amt]+[WaterAllocation" & DateString & "]![DeepPerc_Amt]))>[WaterAllocation" & DateString & "]![TAW],[WaterAllocation" & DateString & "]![TAW],((WaterBalance" & Prev_DateString & ".D_r_i_end)-([WaterAllocation" & DateString & "]![SurfWatDelivered]+[WaterAllocation" & DateString & "]![PumpWatDelivered]+[WaterAllocation" & DateString & "]![Precip_Amt])+([WaterAllocation" & DateString & "]![Runoff_Amt]+[WaterAllocation" & DateString & "]![DeepPerc_Amt])))))<[WaterAllocation" & DateString & "]![RAW],1,IIf((([WaterAllocation" & DateString & "]![TAW]-(IIf(((WaterBalance" & Prev_DateString & ".D_r_i_end)-([WaterAllocation" & DateString & "]![SurfWatDelivered]+[WaterAllocation" & DateString & "]![PumpWatDelivered]+[WaterAllocation" & DateString & "]![Precip_Amt])+([WaterAllocation" & DateString & "]![Runoff_Amt]+[WaterAllocation" & DateString & "]![DeepPerc_Amt]))<0,0,IIf(((WaterBalance" & Prev_DateString & ".D_r_i_end)-([WaterAllocation" & DateString & "]![SurfWatDelivered]+[WaterAllocation" & DateString & "]![PumpWatDelivered]+[WaterAllocation" & DateString & "]![Precip_Amt])+([WaterAllocation" & DateString & "]![Runoff_Amt]+[WaterAllocation" & DateString & "]![DeepPerc_Amt]))>[WaterAllocation" & DateString & "]![TAW],[WaterAllocation" & DateString & "]![TAW],((WaterBalance" & Prev_DateString & ".D_r_i_end)-([WaterAllocation" & DateString & "]![SurfWatDelivered]+[WaterAllocation" & DateString & "]![PumpWatDelivered]+[WaterAllocation" & DateString & "]![Precip_Amt])+([WaterAllocation" & DateString & "]![Runoff_Amt]+[WaterAllocation" & DateString & "]![DeepPerc_Amt]))))))/([WaterAllocation" & DateString & "]![TAW]-[WaterAllocation" & DateString & "]![RAW]))<0,0,(([WaterAllocation" & DateString & "]![TAW]-(IIf(((WaterBalance" & Prev_DateString & ".D_r_i_end)-([WaterAllocation" & DateString & "]![SurfWatDelivered]+[WaterAllocation" & DateString & "]![PumpWatDelivered]+[WaterAllocation" & DateString & "]![Precip_Amt])+([WaterAllocation" & DateString & "]![Runoff_Amt]+[WaterAllocation" & DateString & "]![DeepPerc_Amt]))<0,0,IIf(((WaterBalance" & Prev_DateString & ".D_r_i_end)-([WaterAllocation" & DateString & "]![SurfWatDelivered]+[WaterAllocation" & DateString & "]![PumpWatDelivered]+[WaterAllocation" & DateString & "]![Precip_Amt])+([WaterAllocation" & DateString & "]![Runoff_Amt]+[WaterAllocation" & DateString & "]![DeepPerc_Amt]))>[WaterAllocation" & DateString & "]![TAW],[WaterAllocation" & DateString & "]![TAW],((WaterBalance" & Prev_DateString & ".D_r_i_end)-([WaterAllocation" & DateString & "]![SurfWatDelivered]+[WaterAllocation" & DateString & "]![PumpWatDelivered]+[WaterAllocation" & DateString & "]![Precip_Amt])+([WaterAllocation" & DateString & "]![Runoff_Amt]+[WaterAllocation" & DateString & "]![DeepPerc_Amt]))))))/([WaterAllocation" & DateString & "]![TAW]-[WaterAllocation" & DateString & "]![RAW]))))))>[WaterAllocation" & DateString & "]![TAW],[WaterAllocation" & DateString & "]![TAW],((IIf(((WaterBalance" & Prev_DateString & ".D_r_i_end)-([WaterAllocation" & DateString & "]![SurfWatDelivered]+[WaterAllocation" & DateString & "]![PumpWatDelivered]+[WaterAllocation" & DateString & "]![Precip_Amt])+([WaterAllocation" & DateString & "]![Runoff_Amt]+[WaterAllocation" & DateString & "]![DeepPerc_Amt]))<0,0,IIf(((WaterBalance" & Prev_DateString & ".D_r_i_end)-([WaterAllocation" & DateString & "]![SurfWatDelivered]+[WaterAllocation" & DateString & "]![PumpWatDelivered]+[WaterAllocation" & DateString & "]![Precip_Amt])+([WaterAllocation" & DateString & "]![Runoff_Amt]+[WaterAllocation" & DateString & "]![DeepPerc_Amt]))>[WaterAllocation" & DateString & "]![TAW],[WaterAllocation" & DateString & "]![TAW],((WaterBalance" & Prev_DateString & ".D_r_i_end)-([WaterAllocation" & DateString & "]![SurfWatDelivered]+[WaterAllocation" & DateString & "]![PumpWatDelivered]+[WaterAllocation" & DateString & "]![Precip_Amt])+([WaterAllocation" & DateString & "]![Runoff_Amt]+[WaterAllocation" & DateString & "]![DeepPerc_Amt])))))+([WaterAllocation" & DateString & "]![ETc]*(IIf((IIf(((WaterBalance" & Prev_DateString & ".D_r_i_end)-([WaterAllocation" & DateString & "]![SurfWatDelivered]+[WaterAllocation" & DateString & "]![PumpWatDelivered]+[WaterAllocation" & DateString & "]![Precip_Amt])+([WaterAllocation" & DateString & "]![Runoff_Amt]+[WaterAllocation" & DateString & "]![DeepPerc_Amt]))<0,0,IIf(((WaterBalance" & Prev_DateString & ".D_r_i_end)-([WaterAllocation" & DateString & "]![SurfWatDelivered]+[WaterAllocation" & DateString & "]![PumpWatDelivered]+[WaterAllocation" & DateString & "]![Precip_Amt])+([WaterAllocation" & DateString & "]![Runoff_Amt]+[WaterAllocation" & DateString & "]![DeepPerc_Amt]))>[WaterAllocation" & DateString & "]![TAW],[WaterAllocation" & DateString & "]![TAW],((WaterBalance" & Prev_DateString & ".D_r_i_end)-([WaterAllocation" & DateString & "]![SurfWatDelivered]+[WaterAllocation" & DateString & "]![PumpWatDelivered]+[WaterAllocation" & DateString & "]![Precip_Amt])+([WaterAllocation" & DateString & "]![Runoff_Amt]+[WaterAllocation" & DateString & "]![DeepPerc_Amt])))))<[WaterAllocation" & DateString & "]![RAW],1, "
                QueryString += "IIf((([WaterAllocation" & DateString & "]![TAW]-(IIf(((WaterBalance" & Prev_DateString & ".D_r_i_end)-([WaterAllocation" & DateString & "]![SurfWatDelivered]+[WaterAllocation" & DateString & "]![PumpWatDelivered]+[WaterAllocation" & DateString & "]![Precip_Amt])+([WaterAllocation" & DateString & "]![Runoff_Amt]+[WaterAllocation" & DateString & "]![DeepPerc_Amt]))<0,0,IIf(((WaterBalance" & Prev_DateString & ".D_r_i_end)-([WaterAllocation" & DateString & "]![SurfWatDelivered]+[WaterAllocation" & DateString & "]![PumpWatDelivered]+[WaterAllocation" & DateString & "]![Precip_Amt])+([WaterAllocation" & DateString & "]![Runoff_Amt]+[WaterAllocation" & DateString & "]![DeepPerc_Amt]))>[WaterAllocation" & DateString & "]![TAW],[WaterAllocation" & DateString & "]![TAW],((WaterBalance" & Prev_DateString & ".D_r_i_end)-([WaterAllocation" & DateString & "]![SurfWatDelivered]+[WaterAllocation" & DateString & "]![PumpWatDelivered]+[WaterAllocation" & DateString & "]![Precip_Amt])+([WaterAllocation" & DateString & "]![Runoff_Amt]+[WaterAllocation" & DateString & "]![DeepPerc_Amt]))))))/([WaterAllocation" & DateString & "]![TAW]-[WaterAllocation" & DateString & "]![RAW]))<0,0,(([WaterAllocation" & DateString & "]![TAW]-(IIf(((WaterBalance" & Prev_DateString & ".D_r_i_end)-([WaterAllocation" & DateString & "]![SurfWatDelivered]+[WaterAllocation" & DateString & "]![PumpWatDelivered]+[WaterAllocation" & DateString & "]![Precip_Amt])+([WaterAllocation" & DateString & "]![Runoff_Amt]+[WaterAllocation" & DateString & "]![DeepPerc_Amt]))<0,0,IIf(((WaterBalance" & Prev_DateString & ".D_r_i_end)-([WaterAllocation" & DateString & "]![SurfWatDelivered]+[WaterAllocation" & DateString & "]![PumpWatDelivered]+[WaterAllocation" & DateString & "]![Precip_Amt])+([WaterAllocation" & DateString & "]![Runoff_Amt]+[WaterAllocation" & DateString & "]![DeepPerc_Amt]))>[WaterAllocation" & DateString & "]![TAW],[WaterAllocation" & DateString & "]![TAW],((WaterBalance" & Prev_DateString & ".D_r_i_end)-([WaterAllocation" & DateString & "]![SurfWatDelivered]+[WaterAllocation" & DateString & "]![PumpWatDelivered]+[WaterAllocation" & DateString & "]![Precip_Amt])+([WaterAllocation" & DateString & "]![Runoff_Amt]+[WaterAllocation" & DateString & "]![DeepPerc_Amt]))))))/([WaterAllocation" & DateString & "]![TAW]-[WaterAllocation" & DateString & "]![RAW])))))))) AS D_r_i_end, IIf((WaterBalance" & Prev_DateString & ".D_r_i_end)-([WaterAllocation" & DateString & "]![SurfWatDelivered]+[WaterAllocation" & DateString & "]![PumpWatDelivered]+[WaterAllocation" & DateString & "]![Precip_Amt])+([WaterAllocation" & DateString & "]![Runoff_Amt]+[WaterAllocation" & DateString & "]![DeepPerc_Amt])<0,Abs((WaterBalance" & Prev_DateString & ".D_r_i_end)-([WaterAllocation" & DateString & "]![SurfWatDelivered]+[WaterAllocation" & DateString & "]![PumpWatDelivered]+[WaterAllocation" & DateString & "]![Precip_Amt])+([WaterAllocation" & DateString & "]![Runoff_Amt]+[WaterAllocation" & DateString & "]![DeepPerc_Amt])),0) AS DP_add, [WaterAllocation" & DateString & "]![DeepPerc_Amt]+[DP_add] AS DP_final INTO WaterBalance" & DateString & " "
                QueryString += "FROM WaterAllocation" & DateString & " INNER JOIN (WaterAllocation" & Prev_DateString & " INNER JOIN ([DWR->Eric Working] INNER JOIN WaterBalance" & Prev_DateString & " ON [DWR->Eric Working].DWR_Fld = WaterBalance" & Prev_DateString & ".Field_No) ON WaterAllocation" & Prev_DateString & ".Field_No = [DWR->Eric Working].DWR_Fld) ON WaterAllocation" & DateString & ".Field_No = [DWR->Eric Working].Eric_Fld; "
            End If
        Else
            'This String is saved in PS Pad in the following location: C:\Eric\RegionalModel\Create_CurrentTS_WaterBalanceTable.sql
            QueryString = "SELECT WaterAllocation" & DateString & ".Field_No, WaterAllocation" & DateString & ".RAW, WaterBalance" & Prev_DateString & ".D_r_i_end AS D_r_i_prev, [WaterAllocation" & DateString & "]![SurfWatDelivered]+[WaterAllocation" & DateString & "]![PumpWatDelivered]+[WaterAllocation" & DateString & "]![Precip_Amt] AS Inflow, [WaterAllocation" & DateString & "]![Runoff_Amt]+[WaterAllocation" & DateString & "]![DeepPerc_Amt] AS Outflow, IIf(((WaterBalance" & Prev_DateString & ".D_r_i_end)-([WaterAllocation" & DateString & "]![SurfWatDelivered]+[WaterAllocation" & DateString & "]![PumpWatDelivered]+[WaterAllocation" & DateString & "]![Precip_Amt])+([WaterAllocation" & DateString & "]![Runoff_Amt]+[WaterAllocation" & DateString & "]![DeepPerc_Amt]))<0,0,IIf(((WaterBalance" & Prev_DateString & ".D_r_i_end)-([WaterAllocation" & DateString & "]![SurfWatDelivered]+[WaterAllocation" & DateString & "]![PumpWatDelivered]+[WaterAllocation" & DateString & "]![Precip_Amt])+([WaterAllocation" & DateString & "]![Runoff_Amt]+[WaterAllocation" & DateString & "]![DeepPerc_Amt]))>[WaterAllocation" & DateString & "]![TAW],[WaterAllocation" & DateString & "]![TAW],((WaterBalance" & Prev_DateString & ".D_r_i_end)-([WaterAllocation" & DateString & "]![SurfWatDelivered]+[WaterAllocation" & DateString & "]![PumpWatDelivered]+[WaterAllocation" & DateString & "]![Precip_Amt])+([WaterAllocation" & DateString & "]![Runoff_Amt]+[WaterAllocation" & DateString & "]![DeepPerc_Amt])))) AS D_r_i_strt, "
            QueryString += "WaterAllocation" & DateString & ".ETc, IIf((IIf(((WaterBalance" & Prev_DateString & ".D_r_i_end)-([WaterAllocation" & DateString & "]![SurfWatDelivered]+[WaterAllocation" & DateString & "]![PumpWatDelivered]+[WaterAllocation" & DateString & "]![Precip_Amt])+([WaterAllocation" & DateString & "]![Runoff_Amt]+[WaterAllocation" & DateString & "]![DeepPerc_Amt]))<0,0,IIf(((WaterBalance" & Prev_DateString & ".D_r_i_end)-([WaterAllocation" & DateString & "]![SurfWatDelivered]+[WaterAllocation" & DateString & "]![PumpWatDelivered]+[WaterAllocation" & DateString & "]![Precip_Amt])+([WaterAllocation" & DateString & "]![Runoff_Amt]+[WaterAllocation" & DateString & "]![DeepPerc_Amt]))>[WaterAllocation" & DateString & "]![TAW],[WaterAllocation" & DateString & "]![TAW],((WaterBalance" & Prev_DateString & ".D_r_i_end)-([WaterAllocation" & DateString & "]![SurfWatDelivered]+[WaterAllocation" & DateString & "]![PumpWatDelivered]+[WaterAllocation" & DateString & "]![Precip_Amt])+([WaterAllocation" & DateString & "]![Runoff_Amt]+[WaterAllocation" & DateString & "]![DeepPerc_Amt])))))<[WaterAllocation" & DateString & "]![RAW],1,IIf((([WaterAllocation" & DateString & "]![TAW]-(IIf(((WaterBalance" & Prev_DateString & ".D_r_i_end)-([WaterAllocation" & DateString & "]![SurfWatDelivered]+[WaterAllocation" & DateString & "]![PumpWatDelivered]+[WaterAllocation" & DateString & "]![Precip_Amt])+([WaterAllocation" & DateString & "]![Runoff_Amt]+[WaterAllocation" & DateString & "]![DeepPerc_Amt]))<0,0,IIf(((WaterBalance" & Prev_DateString & ".D_r_i_end)-([WaterAllocation" & DateString & "]![SurfWatDelivered]+[WaterAllocation" & DateString & "]![PumpWatDelivered]+[WaterAllocation" & DateString & "]![Precip_Amt])+([WaterAllocation" & DateString & "]![Runoff_Amt]+[WaterAllocation" & DateString & "]![DeepPerc_Amt]))>[WaterAllocation" & DateString & "]![TAW],[WaterAllocation" & DateString & "]![TAW],((WaterBalance" & Prev_DateString & ".D_r_i_end)-([WaterAllocation" & DateString & "]![SurfWatDelivered]+[WaterAllocation" & DateString & "]![PumpWatDelivered]+[WaterAllocation" & DateString & "]![Precip_Amt])+([WaterAllocation" & DateString & "]![Runoff_Amt]+[WaterAllocation" & DateString & "]![DeepPerc_Amt]))))))/([WaterAllocation" & DateString & "]![TAW]-[WaterAllocation" & DateString & "]![RAW]))<0,0,(([WaterAllocation" & DateString & "]![TAW]-(IIf(((WaterBalance" & Prev_DateString & ".D_r_i_end)-([WaterAllocation" & DateString & "]![SurfWatDelivered]+[WaterAllocation" & DateString & "]![PumpWatDelivered]+[WaterAllocation" & DateString & "]![Precip_Amt])+([WaterAllocation" & DateString & "]![Runoff_Amt]+[WaterAllocation" & DateString & "]![DeepPerc_Amt]))<0,0,IIf(((WaterBalance" & Prev_DateString & ".D_r_i_end)-([WaterAllocation" & DateString & "]![SurfWatDelivered]+[WaterAllocation" & DateString & "]![PumpWatDelivered]+[WaterAllocation" & DateString & "]![Precip_Amt])+([WaterAllocation" & DateString & "]![Runoff_Amt]+[WaterAllocation" & DateString & "]![DeepPerc_Amt]))>[WaterAllocation" & DateString & "]![TAW],[WaterAllocation" & DateString & "]![TAW],((WaterBalance" & Prev_DateString & ".D_r_i_end)-([WaterAllocation" & DateString & "]![SurfWatDelivered]+[WaterAllocation" & DateString & "]![PumpWatDelivered]+[WaterAllocation" & DateString & "]![Precip_Amt])+([WaterAllocation" & DateString & "]![Runoff_Amt]+[WaterAllocation" & DateString & "]![DeepPerc_Amt]))))))/([WaterAllocation" & DateString & "]![TAW]-[WaterAllocation" & DateString & "]![RAW])))) AS K_s, "
            QueryString += "[WaterAllocation" & DateString & "]![ETc]*(IIf((IIf(((WaterBalance" & Prev_DateString & ".D_r_i_end)-([WaterAllocation" & DateString & "]![SurfWatDelivered]+[WaterAllocation" & DateString & "]![PumpWatDelivered]+[WaterAllocation" & DateString & "]![Precip_Amt])+([WaterAllocation" & DateString & "]![Runoff_Amt]+[WaterAllocation" & DateString & "]![DeepPerc_Amt]))<0,0,IIf(((WaterBalance" & Prev_DateString & ".D_r_i_end)-([WaterAllocation" & DateString & "]![SurfWatDelivered]+[WaterAllocation" & DateString & "]![PumpWatDelivered]+[WaterAllocation" & DateString & "]![Precip_Amt])+([WaterAllocation" & DateString & "]![Runoff_Amt]+[WaterAllocation" & DateString & "]![DeepPerc_Amt]))>[WaterAllocation" & DateString & "]![TAW],[WaterAllocation" & DateString & "]![TAW],((WaterBalance" & Prev_DateString & ".D_r_i_end)-([WaterAllocation" & DateString & "]![SurfWatDelivered]+[WaterAllocation" & DateString & "]![PumpWatDelivered]+[WaterAllocation" & DateString & "]![Precip_Amt])+([WaterAllocation" & DateString & "]![Runoff_Amt]+[WaterAllocation" & DateString & "]![DeepPerc_Amt])))))<[WaterAllocation" & DateString & "]![RAW],1,IIf((([WaterAllocation" & DateString & "]![TAW]-(IIf(((WaterBalance" & Prev_DateString & ".D_r_i_end)-([WaterAllocation" & DateString & "]![SurfWatDelivered]+[WaterAllocation" & DateString & "]![PumpWatDelivered]+[WaterAllocation" & DateString & "]![Precip_Amt])+([WaterAllocation" & DateString & "]![Runoff_Amt]+[WaterAllocation" & DateString & "]![DeepPerc_Amt]))<0,0,IIf(((WaterBalance" & Prev_DateString & ".D_r_i_end)-([WaterAllocation" & DateString & "]![SurfWatDelivered]+[WaterAllocation" & DateString & "]![PumpWatDelivered]+[WaterAllocation" & DateString & "]![Precip_Amt])+([WaterAllocation" & DateString & "]![Runoff_Amt]+[WaterAllocation" & DateString & "]![DeepPerc_Amt]))>[WaterAllocation" & DateString & "]![TAW],[WaterAllocation" & DateString & "]![TAW],((WaterBalance" & Prev_DateString & ".D_r_i_end)-([WaterAllocation" & DateString & "]![SurfWatDelivered]+[WaterAllocation" & DateString & "]![PumpWatDelivered]+[WaterAllocation" & DateString & "]![Precip_Amt])+([WaterAllocation" & DateString & "]![Runoff_Amt]+[WaterAllocation" & DateString & "]![DeepPerc_Amt]))))))/([WaterAllocation" & DateString & "]![TAW]-[WaterAllocation" & DateString & "]![RAW]))<0,0,(([WaterAllocation" & DateString & "]![TAW]-(IIf(((WaterBalance" & Prev_DateString & ".D_r_i_end)-([WaterAllocation" & DateString & "]![SurfWatDelivered]+[WaterAllocation" & DateString & "]![PumpWatDelivered]+[WaterAllocation" & DateString & "]![Precip_Amt])+([WaterAllocation" & DateString & "]![Runoff_Amt]+[WaterAllocation" & DateString & "]![DeepPerc_Amt]))<0,0,IIf(((WaterBalance" & Prev_DateString & ".D_r_i_end)-([WaterAllocation" & DateString & "]![SurfWatDelivered]+[WaterAllocation" & DateString & "]![PumpWatDelivered]+[WaterAllocation" & DateString & "]![Precip_Amt])+([WaterAllocation" & DateString & "]![Runoff_Amt]+[WaterAllocation" & DateString & "]![DeepPerc_Amt]))>[WaterAllocation" & DateString & "]![TAW],[WaterAllocation" & DateString & "]![TAW],((WaterBalance" & Prev_DateString & ".D_r_i_end)-([WaterAllocation" & DateString & "]![SurfWatDelivered]+[WaterAllocation" & DateString & "]![PumpWatDelivered]+[WaterAllocation" & DateString & "]![Precip_Amt])+([WaterAllocation" & DateString & "]![Runoff_Amt]+[WaterAllocation" & DateString & "]![DeepPerc_Amt]))))))/([WaterAllocation" & DateString & "]![TAW]-[WaterAllocation" & DateString & "]![RAW]))))) AS ET_adj, "
            QueryString += "IIf((IIf(((WaterBalance" & Prev_DateString & ".D_r_i_end)-([WaterAllocation" & DateString & "]![SurfWatDelivered]+[WaterAllocation" & DateString & "]![PumpWatDelivered]+[WaterAllocation" & DateString & "]![Precip_Amt])+([WaterAllocation" & DateString & "]![Runoff_Amt]+[WaterAllocation" & DateString & "]![DeepPerc_Amt]))<0,0,IIf(((WaterBalance" & Prev_DateString & ".D_r_i_end)-([WaterAllocation" & DateString & "]![SurfWatDelivered]+[WaterAllocation" & DateString & "]![PumpWatDelivered]+[WaterAllocation" & DateString & "]![Precip_Amt])+([WaterAllocation" & DateString & "]![Runoff_Amt]+[WaterAllocation" & DateString & "]![DeepPerc_Amt]))>[WaterAllocation" & DateString & "]![TAW],[WaterAllocation" & DateString & "]![TAW],((WaterBalance" & Prev_DateString & ".D_r_i_end)-([WaterAllocation" & DateString & "]![SurfWatDelivered]+[WaterAllocation" & DateString & "]![PumpWatDelivered]+[WaterAllocation" & DateString & "]![Precip_Amt])+([WaterAllocation" & DateString & "]![Runoff_Amt]+[WaterAllocation" & DateString & "]![DeepPerc_Amt])))))+([WaterAllocation" & DateString & "]![ETc]*(IIf((IIf(((WaterBalance" & Prev_DateString & ".D_r_i_end)-([WaterAllocation" & DateString & "]![SurfWatDelivered]+[WaterAllocation" & DateString & "]![PumpWatDelivered]+[WaterAllocation" & DateString & "]![Precip_Amt])+([WaterAllocation" & DateString & "]![Runoff_Amt]+[WaterAllocation" & DateString & "]![DeepPerc_Amt]))<0,0,IIf(((WaterBalance" & Prev_DateString & ".D_r_i_end)-([WaterAllocation" & DateString & "]![SurfWatDelivered]+[WaterAllocation" & DateString & "]![PumpWatDelivered]+[WaterAllocation" & DateString & "]![Precip_Amt])+([WaterAllocation" & DateString & "]![Runoff_Amt]+[WaterAllocation" & DateString & "]![DeepPerc_Amt]))>[WaterAllocation" & DateString & "]![TAW],[WaterAllocation" & DateString & "]![TAW],((WaterBalance" & Prev_DateString & ".D_r_i_end)-([WaterAllocation" & DateString & "]![SurfWatDelivered]+[WaterAllocation" & DateString & "]![PumpWatDelivered]+[WaterAllocation" & DateString & "]![Precip_Amt])+([WaterAllocation" & DateString & "]![Runoff_Amt]+[WaterAllocation" & DateString & "]![DeepPerc_Amt])))))<[WaterAllocation" & DateString & "]![RAW],1,IIf((([WaterAllocation" & DateString & "]![TAW]-(IIf(((WaterBalance" & Prev_DateString & ".D_r_i_end)-([WaterAllocation" & DateString & "]![SurfWatDelivered]+[WaterAllocation" & DateString & "]![PumpWatDelivered]+[WaterAllocation" & DateString & "]![Precip_Amt])+([WaterAllocation" & DateString & "]![Runoff_Amt]+[WaterAllocation" & DateString & "]![DeepPerc_Amt]))<0,0,IIf(((WaterBalance" & Prev_DateString & ".D_r_i_end)-([WaterAllocation" & DateString & "]![SurfWatDelivered]+[WaterAllocation" & DateString & "]![PumpWatDelivered]+[WaterAllocation" & DateString & "]![Precip_Amt])+([WaterAllocation" & DateString & "]![Runoff_Amt]+[WaterAllocation" & DateString & "]![DeepPerc_Amt]))>[WaterAllocation" & DateString & "]![TAW],[WaterAllocation" & DateString & "]![TAW],((WaterBalance" & Prev_DateString & ".D_r_i_end)-([WaterAllocation" & DateString & "]![SurfWatDelivered]+[WaterAllocation" & DateString & "]![PumpWatDelivered]+[WaterAllocation" & DateString & "]![Precip_Amt])+([WaterAllocation" & DateString & "]![Runoff_Amt]+[WaterAllocation" & DateString & "]![DeepPerc_Amt]))))))/([WaterAllocation" & DateString & "]![TAW]-[WaterAllocation" & DateString & "]![RAW]))<0,0,(([WaterAllocation" & DateString & "]![TAW]-(IIf(((WaterBalance" & Prev_DateString & ".D_r_i_end)-([WaterAllocation" & DateString & "]![SurfWatDelivered]+"
            QueryString += "[WaterAllocation" & DateString & "]![PumpWatDelivered]+[WaterAllocation" & DateString & "]![Precip_Amt])+([WaterAllocation" & DateString & "]![Runoff_Amt]+[WaterAllocation" & DateString & "]![DeepPerc_Amt]))<0,0,IIf(((WaterBalance" & Prev_DateString & ".D_r_i_end)-([WaterAllocation" & DateString & "]![SurfWatDelivered]+[WaterAllocation" & DateString & "]![PumpWatDelivered]+[WaterAllocation" & DateString & "]![Precip_Amt])+([WaterAllocation" & DateString & "]![Runoff_Amt]+[WaterAllocation" & DateString & "]![DeepPerc_Amt]))>[WaterAllocation" & DateString & "]![TAW],[WaterAllocation" & DateString & "]![TAW],((WaterBalance" & Prev_DateString & ".D_r_i_end)-([WaterAllocation" & DateString & "]![SurfWatDelivered]+[WaterAllocation" & DateString & "]![PumpWatDelivered]+[WaterAllocation" & DateString & "]![Precip_Amt])+([WaterAllocation" & DateString & "]![Runoff_Amt]+[WaterAllocation" & DateString & "]![DeepPerc_Amt]))))))/([WaterAllocation" & DateString & "]![TAW]-[WaterAllocation" & DateString & "]![RAW]))))))>[WaterAllocation" & DateString & "]![TAW],[WaterAllocation" & DateString & "]![TAW],((IIf(((WaterBalance" & Prev_DateString & ".D_r_i_end)-([WaterAllocation" & DateString & "]![SurfWatDelivered]+[WaterAllocation" & DateString & "]![PumpWatDelivered]+[WaterAllocation" & DateString & "]![Precip_Amt])+([WaterAllocation" & DateString & "]![Runoff_Amt]+[WaterAllocation" & DateString & "]![DeepPerc_Amt]))<0,0,IIf(((WaterBalance" & Prev_DateString & ".D_r_i_end)-([WaterAllocation" & DateString & "]![SurfWatDelivered]+[WaterAllocation" & DateString & "]![PumpWatDelivered]+[WaterAllocation" & DateString & "]![Precip_Amt])+([WaterAllocation" & DateString & "]![Runoff_Amt]+[WaterAllocation" & DateString & "]![DeepPerc_Amt]))>[WaterAllocation" & DateString & "]![TAW],[WaterAllocation" & DateString & "]![TAW],((WaterBalance" & Prev_DateString & ".D_r_i_end)-([WaterAllocation" & DateString & "]![SurfWatDelivered]+[WaterAllocation" & DateString & "]![PumpWatDelivered]+[WaterAllocation" & DateString & "]![Precip_Amt])+([WaterAllocation" & DateString & "]![Runoff_Amt]+[WaterAllocation" & DateString & "]![DeepPerc_Amt])))))+"
            QueryString += "([WaterAllocation" & DateString & "]![ETc]*(IIf((IIf(((WaterBalance" & Prev_DateString & ".D_r_i_end)-([WaterAllocation" & DateString & "]![SurfWatDelivered]+[WaterAllocation" & DateString & "]![PumpWatDelivered]+[WaterAllocation" & DateString & "]![Precip_Amt])+([WaterAllocation" & DateString & "]![Runoff_Amt]+[WaterAllocation" & DateString & "]![DeepPerc_Amt]))<0,0,IIf(((WaterBalance" & Prev_DateString & ".D_r_i_end)-([WaterAllocation" & DateString & "]![SurfWatDelivered]+[WaterAllocation" & DateString & "]![PumpWatDelivered]+[WaterAllocation" & DateString & "]![Precip_Amt])+([WaterAllocation" & DateString & "]![Runoff_Amt]+[WaterAllocation" & DateString & "]![DeepPerc_Amt]))>[WaterAllocation" & DateString & "]![TAW],[WaterAllocation" & DateString & "]![TAW],((WaterBalance" & Prev_DateString & ".D_r_i_end)-([WaterAllocation" & DateString & "]![SurfWatDelivered]+[WaterAllocation" & DateString & "]![PumpWatDelivered]+[WaterAllocation" & DateString & "]![Precip_Amt])+([WaterAllocation" & DateString & "]![Runoff_Amt]+[WaterAllocation" & DateString & "]![DeepPerc_Amt])))))<[WaterAllocation" & DateString & "]![RAW],1,IIf((([WaterAllocation" & DateString & "]![TAW]-(IIf(((WaterBalance" & Prev_DateString & ".D_r_i_end)-([WaterAllocation" & DateString & "]![SurfWatDelivered]+[WaterAllocation" & DateString & "]![PumpWatDelivered]+[WaterAllocation" & DateString & "]![Precip_Amt])+([WaterAllocation" & DateString & "]![Runoff_Amt]+[WaterAllocation" & DateString & "]![DeepPerc_Amt]))<0,0,IIf(((WaterBalance" & Prev_DateString & ".D_r_i_end)-([WaterAllocation" & DateString & "]![SurfWatDelivered]+[WaterAllocation" & DateString & "]![PumpWatDelivered]+[WaterAllocation" & DateString & "]![Precip_Amt])+([WaterAllocation" & DateString & "]![Runoff_Amt]+[WaterAllocation" & DateString & "]![DeepPerc_Amt]))>[WaterAllocation" & DateString & "]![TAW],[WaterAllocation" & DateString & "]![TAW],((WaterBalance" & Prev_DateString & ".D_r_i_end)-([WaterAllocation" & DateString & "]![SurfWatDelivered]+[WaterAllocation" & DateString & "]![PumpWatDelivered]+[WaterAllocation" & DateString & "]![Precip_Amt])+([WaterAllocation" & DateString & "]![Runoff_Amt]+[WaterAllocation" & DateString & "]![DeepPerc_Amt]))))))/([WaterAllocation" & DateString & "]![TAW]-[WaterAllocation" & DateString & "]![RAW]))<0,0,(([WaterAllocation" & DateString & "]![TAW]-(IIf(((WaterBalance" & Prev_DateString & ".D_r_i_end)-([WaterAllocation" & DateString & "]![SurfWatDelivered]+[WaterAllocation" & DateString & "]![PumpWatDelivered]+[WaterAllocation" & DateString & "]![Precip_Amt])+([WaterAllocation" & DateString & "]![Runoff_Amt]+[WaterAllocation" & DateString & "]![DeepPerc_Amt]))<0,0,IIf(((WaterBalance" & Prev_DateString & ".D_r_i_end)-([WaterAllocation" & DateString & "]![SurfWatDelivered]+[WaterAllocation" & DateString & "]![PumpWatDelivered]+[WaterAllocation" & DateString & "]![Precip_Amt])+([WaterAllocation" & DateString & "]![Runoff_Amt]+[WaterAllocation" & DateString & "]![DeepPerc_Amt]))>[WaterAllocation" & DateString & "]![TAW],[WaterAllocation" & DateString & "]![TAW],((WaterBalance" & Prev_DateString & ".D_r_i_end)-([WaterAllocation" & DateString & "]![SurfWatDelivered]+[WaterAllocation" & DateString & "]![PumpWatDelivered]+[WaterAllocation" & DateString & "]![Precip_Amt])+([WaterAllocation" & DateString & "]![Runoff_Amt]+[WaterAllocation" & DateString & "]![DeepPerc_Amt]))))))/([WaterAllocation" & DateString & "]![TAW]-[WaterAllocation" & DateString & "]![RAW])))))))) AS D_r_i_end, "
            QueryString += "IIf((WaterBalance" & Prev_DateString & ".D_r_i_end)-([WaterAllocation" & DateString & "]![SurfWatDelivered]+[WaterAllocation" & DateString & "]![PumpWatDelivered]+[WaterAllocation" & DateString & "]![Precip_Amt])+([WaterAllocation" & DateString & "]![Runoff_Amt]+[WaterAllocation" & DateString & "]![DeepPerc_Amt])<0,Abs((WaterBalance" & Prev_DateString & ".D_r_i_end)-([WaterAllocation" & DateString & "]![SurfWatDelivered]+[WaterAllocation" & DateString & "]![PumpWatDelivered]+[WaterAllocation" & DateString & "]![Precip_Amt])+([WaterAllocation" & DateString & "]![Runoff_Amt]+[WaterAllocation" & DateString & "]![DeepPerc_Amt])),0) AS DP_add, [WaterAllocation" & DateString & "]![DeepPerc_Amt]+(IIf((WaterBalance" & Prev_DateString & ".D_r_i_end)-([WaterAllocation" & DateString & "]![SurfWatDelivered]+[WaterAllocation" & DateString & "]![PumpWatDelivered]+[WaterAllocation" & DateString & "]![Precip_Amt])+([WaterAllocation" & DateString & "]![Runoff_Amt]+[WaterAllocation" & DateString & "]![DeepPerc_Amt])<0,Abs((WaterBalance" & Prev_DateString & ".D_r_i_end)-([WaterAllocation" & DateString & "]![SurfWatDelivered]+[WaterAllocation" & DateString & "]![PumpWatDelivered]+[WaterAllocation" & DateString & "]![Precip_Amt])+([WaterAllocation" & DateString & "]![Runoff_Amt]+[WaterAllocation" & DateString & "]![DeepPerc_Amt])),0)) AS DP_final INTO WaterBalance" & DateString & " FROM WaterAllocation" & DateString & " INNER JOIN (WaterAllocation" & Prev_DateString & " INNER JOIN WaterBalance" & Prev_DateString & " ON WaterAllocation" & Prev_DateString & ".Field_No = WaterBalance" & Prev_DateString & ".Field_No) ON WaterAllocation" & DateString & ".Field_No = WaterBalance" & Prev_DateString & ".Field_No ORDER BY WaterAllocation" & DateString & ".Field_No;"

            'QueryString = "SELECT WaterAllocation" & DateString & ".Field_No, WaterAllocation" & DateString & ".RAW, WaterBalance" & Prev_DateString & ".D_r_i_end AS D_r_i_prev, [WaterAllocation" & DateString & "]![SurfWatDelivered]+[WaterAllocation" & DateString & "]![PumpWatDelivered]+[WaterAllocation" & DateString & "]![Precip_Amt] AS Inflow, [WaterAllocation" & DateString & "]![Runoff_Amt]+[WaterAllocation" & DateString & "]![DeepPerc_Amt] AS Outflow, IIf(((WaterBalance" & Prev_DateString & ".D_r_i_end)-([WaterAllocation" & DateString & "]![SurfWatDelivered]+[WaterAllocation" & DateString & "]![PumpWatDelivered]+[WaterAllocation" & DateString & "]![Precip_Amt])+([WaterAllocation" & DateString & "]![Runoff_Amt]+[WaterAllocation" & DateString & "]![DeepPerc_Amt]))<0,0,IIf(((WaterBalance" & Prev_DateString & ".D_r_i_end)-([WaterAllocation" & DateString & "]![SurfWatDelivered]+[WaterAllocation" & DateString & "]![PumpWatDelivered]+[WaterAllocation" & DateString & "]![Precip_Amt])+([WaterAllocation" & DateString & "]![Runoff_Amt]+[WaterAllocation" & DateString & "]![DeepPerc_Amt]))>[WaterAllocation" & DateString & "]![TAW],[WaterAllocation" & DateString & "]![TAW],((WaterBalance" & Prev_DateString & ".D_r_i_end)-([WaterAllocation" & DateString & "]![SurfWatDelivered]+[WaterAllocation" & DateString & "]![PumpWatDelivered]+[WaterAllocation" & DateString & "]![Precip_Amt])+([WaterAllocation" & DateString & "]![Runoff_Amt]+[WaterAllocation" & DateString & "]![DeepPerc_Amt])))) AS D_r_i_strt, WaterAllocation" & DateString & ".ETc, IIf((IIf(((WaterBalance" & Prev_DateString & ".D_r_i_end)-([WaterAllocation" & DateString & "]![SurfWatDelivered]+[WaterAllocation" & DateString & "]![PumpWatDelivered]+[WaterAllocation" & DateString & "]![Precip_Amt])+([WaterAllocation" & DateString & "]![Runoff_Amt]+[WaterAllocation" & DateString & "]![DeepPerc_Amt]))<0,0,IIf(((WaterBalance" & Prev_DateString & ".D_r_i_end)-([WaterAllocation" & DateString & "]![SurfWatDelivered]+[WaterAllocation" & DateString & "]![PumpWatDelivered]+[WaterAllocation" & DateString & "]![Precip_Amt])+([WaterAllocation" & DateString & "]![Runoff_Amt]+[WaterAllocation" & DateString & "]![DeepPerc_Amt]))>[WaterAllocation" & DateString & "]![TAW],[WaterAllocation" & DateString & "]![TAW],((WaterBalance" & Prev_DateString & ".D_r_i_end)-([WaterAllocation" & DateString & "]![SurfWatDelivered]+[WaterAllocation" & DateString & "]![PumpWatDelivered]+[WaterAllocation" & DateString & "]![Precip_Amt])+([WaterAllocation" & DateString & "]![Runoff_Amt]+[WaterAllocation" & DateString & "]![DeepPerc_Amt])))))<[WaterAllocation" & DateString & "]![RAW],1,IIf((([WaterAllocation" & DateString & "]![TAW]-(IIf(((WaterBalance" & Prev_DateString & ".D_r_i_end)-([WaterAllocation" & DateString & "]![SurfWatDelivered]+[WaterAllocation" & DateString & "]![PumpWatDelivered]+[WaterAllocation" & DateString & "]![Precip_Amt])+([WaterAllocation" & DateString & "]![Runoff_Amt]+[WaterAllocation" & DateString & "]![DeepPerc_Amt]))<0,0,IIf(((WaterBalance" & Prev_DateString & ".D_r_i_end)-([WaterAllocation" & DateString & "]![SurfWatDelivered]+[WaterAllocation" & DateString & "]![PumpWatDelivered]+[WaterAllocation" & DateString & "]![Precip_Amt])+([WaterAllocation" & DateString & "]![Runoff_Amt]+[WaterAllocation" & DateString & "]![DeepPerc_Amt]))>[WaterAllocation" & DateString & "]![TAW],[WaterAllocation" & DateString & "]![TAW],((WaterBalance" & Prev_DateString & ".D_r_i_end)-([WaterAllocation" & DateString & "]![SurfWatDelivered]+[WaterAllocation" & DateString & "]![PumpWatDelivered]+[WaterAllocation" & DateString & "]![Precip_Amt])+([WaterAllocation" & DateString & "]![Runoff_Amt]+[WaterAllocation" & DateString & "]![DeepPerc_Amt]))))))/([WaterAllocation" & DateString & "]![TAW]-[WaterAllocation" & DateString & "]![RAW]))<0,0,(([WaterAllocation" & DateString & "]![TAW]-(IIf(((WaterBalance" & Prev_DateString & ".D_r_i_end)-([WaterAllocation" & DateString & "]![SurfWatDelivered]+[WaterAllocation" & DateString & "]![PumpWatDelivered]+[WaterAllocation" & DateString & "]![Precip_Amt])+([WaterAllocation" & DateString & "]![Runoff_Amt]+[WaterAllocation" & DateString & "]![DeepPerc_Amt]))<0,0,IIf(((WaterBalance" & Prev_DateString & ".D_r_i_end)-([WaterAllocation" & DateString & "]![SurfWatDelivered]+[WaterAllocation" & DateString & "]![PumpWatDelivered]+[WaterAllocation" & DateString & "]![Precip_Amt])+([WaterAllocation" & DateString & "]![Runoff_Amt]+[WaterAllocation" & DateString & "]![DeepPerc_Amt]))>[WaterAllocation" & DateString & "]![TAW],[WaterAllocation" & DateString & "]![TAW],((WaterBalance" & Prev_DateString & ".D_r_i_end)-([WaterAllocation" & DateString & "]![SurfWatDelivered]+[WaterAllocation" & DateString & "]![PumpWatDelivered]+[WaterAllocation" & DateString & "]![Precip_Amt])+([WaterAllocation" & DateString & "]![Runoff_Amt]+[WaterAllocation" & DateString & "]![DeepPerc_Amt]))))))/([WaterAllocation" & DateString & "]![TAW]-[WaterAllocation" & DateString & "]![RAW])))) AS K_s, (WaterAllocation" & DateString & ".ETc)*(IIf((IIf(((WaterBalance" & Prev_DateString & ".D_r_i_end)-([WaterAllocation" & DateString & "]![SurfWatDelivered]+[WaterAllocation" & DateString & "]![PumpWatDelivered]+[WaterAllocation" & DateString & "]![Precip_Amt])+([WaterAllocation" & DateString & "]![Runoff_Amt]+[WaterAllocation" & DateString & "]![DeepPerc_Amt]))<0,0,IIf(((WaterBalance" & Prev_DateString & ".D_r_i_end)-([WaterAllocation" & DateString & "]![SurfWatDelivered]+[WaterAllocation" & DateString & "]![PumpWatDelivered]+[WaterAllocation" & DateString & "]![Precip_Amt])+([WaterAllocation" & DateString & "]![Runoff_Amt]+[WaterAllocation" & DateString & "]![DeepPerc_Amt]))>[WaterAllocation" & DateString & "]![TAW],[WaterAllocation" & DateString & "]![TAW],((WaterBalance" & Prev_DateString & ".D_r_i_end)-([WaterAllocation" & DateString & "]![SurfWatDelivered]+[WaterAllocation" & DateString & "]![PumpWatDelivered]+[WaterAllocation" & DateString & "]![Precip_Amt])+([WaterAllocation" & DateString & "]![Runoff_Amt]+[WaterAllocation" & DateString & "]![DeepPerc_Amt])))))<[WaterAllocation" & DateString & "]![RAW],1,IIf((([WaterAllocation" & DateString & "]![TAW]-(IIf(((WaterBalance" & Prev_DateString & ".D_r_i_end)-([WaterAllocation" & DateString & "]![SurfWatDelivered]+[WaterAllocation" & DateString & "]![PumpWatDelivered]+[WaterAllocation" & DateString & "]![Precip_Amt])+([WaterAllocation" & DateString & "]![Runoff_Amt]+[WaterAllocation" & DateString & "]![DeepPerc_Amt]))<0,0,IIf(((WaterBalance" & Prev_DateString & ".D_r_i_end)-([WaterAllocation" & DateString & "]![SurfWatDelivered]+[WaterAllocation" & DateString & "]![PumpWatDelivered]+[WaterAllocation" & DateString & "]![Precip_Amt])+([WaterAllocation" & DateString & "]![Runoff_Amt]+[WaterAllocation" & DateString & "]![DeepPerc_Amt]))>[WaterAllocation" & DateString & "]![TAW],[WaterAllocation" & DateString & "]![TAW],((WaterBalance" & Prev_DateString & ".D_r_i_end)-([WaterAllocation" & DateString & "]![SurfWatDelivered]+[WaterAllocation" & DateString & "]![PumpWatDelivered]+[WaterAllocation" & DateString & "]![Precip_Amt])+([WaterAllocation" & DateString & "]![Runoff_Amt]+[WaterAllocation" & DateString & "]![DeepPerc_Amt]))))))/([WaterAllocation" & DateString & "]![TAW]-[WaterAllocation" & DateString & "]![RAW]))<0,0,(([WaterAllocation" & DateString & "]![TAW]-(IIf(((WaterBalance" & Prev_DateString & ".D_r_i_end)-([WaterAllocation" & DateString & "]![SurfWatDelivered]+[WaterAllocation" & DateString & "]![PumpWatDelivered]+[WaterAllocation" & DateString & "]![Precip_Amt])+([WaterAllocation" & DateString & "]![Runoff_Amt]+[WaterAllocation" & DateString & "]![DeepPerc_Amt]))<0,0,IIf(((WaterBalance" & Prev_DateString & ".D_r_i_end)-([WaterAllocation" & DateString & "]![SurfWatDelivered]+[WaterAllocation" & DateString & "]![PumpWatDelivered]+[WaterAllocation" & DateString & "]![Precip_Amt])+([WaterAllocation" & DateString & "]![Runoff_Amt]+[WaterAllocation" & DateString & "]![DeepPerc_Amt]))>[WaterAllocation" & DateString & "]![TAW],[WaterAllocation" & DateString & "]![TAW],((WaterBalance" & Prev_DateString & ".D_r_i_end)-([WaterAllocation" & DateString & "]![SurfWatDelivered]+[WaterAllocation" & DateString & "]![PumpWatDelivered]+[WaterAllocation" & DateString & "]![Precip_Amt])+([WaterAllocation" & DateString & "]![Runoff_Amt]+[WaterAllocation" & DateString & "]![DeepPerc_Amt]))))))/([WaterAllocation" & DateString & "]![TAW]-[WaterAllocation" & DateString & "]![RAW]))))) AS ET_adj, IIf((IIf(((WaterBalance" & Prev_DateString & ".D_r_i_end)-([WaterAllocation" & DateString & "]![SurfWatDelivered]+[WaterAllocation" & DateString & "]![PumpWatDelivered]+[WaterAllocation" & DateString & "]![Precip_Amt])+([WaterAllocation" & DateString & "]![Runoff_Amt]+[WaterAllocation" & DateString & "]![DeepPerc_Amt]))<0,0,IIf(((WaterBalance" & Prev_DateString & ".D_r_i_end)-([WaterAllocation" & DateString & "]![SurfWatDelivered]+[WaterAllocation" & DateString & "]![PumpWatDelivered]+[WaterAllocation" & DateString & "]![Precip_Amt])+([WaterAllocation" & DateString & "]![Runoff_Amt]+[WaterAllocation" & DateString & "]![DeepPerc_Amt]))>[WaterAllocation" & DateString & "]![TAW],[WaterAllocation" & DateString & "]![TAW],((WaterBalance" & Prev_DateString & ".D_r_i_end)-([WaterAllocation" & DateString & "]![SurfWatDelivered]+[WaterAllocation" & DateString & "]![PumpWatDelivered]+[WaterAllocation" & DateString & "]![Precip_Amt])+([WaterAllocation" & DateString & "]![Runoff_Amt]+[WaterAllocation" & DateString & "]![DeepPerc_Amt])))))+([WaterAllocation" & DateString & "]![ETc]*(IIf((IIf(((WaterBalance" & Prev_DateString & ".D_r_i_end)-([WaterAllocation" & DateString & "]![SurfWatDelivered]+[WaterAllocation" & DateString & "]![PumpWatDelivered]+[WaterAllocation" & DateString & "]![Precip_Amt])+([WaterAllocation" & DateString & "]![Runoff_Amt]+[WaterAllocation" & DateString & "]![DeepPerc_Amt]))<0,0,IIf(((WaterBalance" & Prev_DateString & ".D_r_i_end)-([WaterAllocation" & DateString & "]![SurfWatDelivered]+[WaterAllocation" & DateString & "]![PumpWatDelivered]+[WaterAllocation" & DateString & "]![Precip_Amt])+([WaterAllocation" & DateString & "]![Runoff_Amt]+[WaterAllocation" & DateString & "]![DeepPerc_Amt]))>[WaterAllocation" & DateString & "]![TAW],[WaterAllocation" & DateString & "]![TAW],((WaterBalance" & Prev_DateString & ".D_r_i_end)-([WaterAllocation" & DateString & "]![SurfWatDelivered]+[WaterAllocation" & DateString & "]![PumpWatDelivered]+[WaterAllocation" & DateString & "]![Precip_Amt])+([WaterAllocation" & DateString & "]![Runoff_Amt]+[WaterAllocation" & DateString & "]![DeepPerc_Amt])))))<[WaterAllocation" & DateString & "]![RAW],1,IIf((([WaterAllocation" & DateString & "]![TAW]-(IIf(((WaterBalance" & Prev_DateString & ".D_r_i_end)-([WaterAllocation" & DateString & "]![SurfWatDelivered]+[WaterAllocation" & DateString & "]![PumpWatDelivered]+[WaterAllocation" & DateString & "]![Precip_Amt])+([WaterAllocation" & DateString & "]![Runoff_Amt]+[WaterAllocation" & DateString & "]![DeepPerc_Amt]))<0,0,IIf(((WaterBalance" & Prev_DateString & ".D_r_i_end)-([WaterAllocation" & DateString & "]![SurfWatDelivered]+[WaterAllocation" & DateString & "]![PumpWatDelivered]+[WaterAllocation" & DateString & "]![Precip_Amt])+([WaterAllocation" & DateString & "]![Runoff_Amt]+[WaterAllocation" & DateString & "]![DeepPerc_Amt]))>[WaterAllocation" & DateString & "]![TAW],[WaterAllocation" & DateString & "]![TAW],((WaterBalance" & Prev_DateString & ".D_r_i_end)-([WaterAllocation" & DateString & "]![SurfWatDelivered]+[WaterAllocation" & DateString & "]![PumpWatDelivered]+[WaterAllocation" & DateString & "]![Precip_Amt])+([WaterAllocation" & DateString & "]![Runoff_Amt]+[WaterAllocation" & DateString & "]![DeepPerc_Amt]))))))/([WaterAllocation" & DateString & "]![TAW]-[WaterAllocation" & DateString & "]![RAW]))<0,0,(([WaterAllocation" & DateString & "]![TAW]-(IIf(((WaterBalance" & Prev_DateString & ".D_r_i_end)-([WaterAllocation" & DateString & "]![SurfWatDelivered]+[WaterAllocation" & DateString & "]![PumpWatDelivered]+[WaterAllocation" & DateString & "]![Precip_Amt])+([WaterAllocation" & DateString & "]![Runoff_Amt]+[WaterAllocation" & DateString & "]![DeepPerc_Amt]))<0,0,IIf(((WaterBalance" & Prev_DateString & ".D_r_i_end)-([WaterAllocation" & DateString & "]![SurfWatDelivered]+[WaterAllocation" & DateString & "]![PumpWatDelivered]+[WaterAllocation" & DateString & "]![Precip_Amt])+([WaterAllocation" & DateString & "]![Runoff_Amt]+[WaterAllocation" & DateString & "]![DeepPerc_Amt]))>[WaterAllocation" & DateString & "]![TAW],[WaterAllocation" & DateString & "]![TAW],((WaterBalance" & Prev_DateString & ".D_r_i_end)-([WaterAllocation" & DateString & "]![SurfWatDelivered]+[WaterAllocation" & DateString & "]![PumpWatDelivered]+[WaterAllocation" & DateString & "]![Precip_Amt])+([WaterAllocation" & DateString & "]![Runoff_Amt]+[WaterAllocation" & DateString & "]![DeepPerc_Amt]))))))/([WaterAllocation" & DateString & "]![TAW]-[WaterAllocation" & DateString & "]![RAW]))))))>[WaterAllocation" & DateString & "]![TAW],[WaterAllocation" & DateString & "]![TAW],((IIf(((WaterBalance" & Prev_DateString & ".D_r_i_end)-([WaterAllocation" & DateString & "]![SurfWatDelivered]+[WaterAllocation" & DateString & "]![PumpWatDelivered]+[WaterAllocation" & DateString & "]![Precip_Amt])+([WaterAllocation" & DateString & "]![Runoff_Amt]+[WaterAllocation" & DateString & "]![DeepPerc_Amt]))<0,0,IIf(((WaterBalance" & Prev_DateString & ".D_r_i_end)-([WaterAllocation" & DateString & "]![SurfWatDelivered]+[WaterAllocation" & DateString & "]![PumpWatDelivered]+[WaterAllocation" & DateString & "]![Precip_Amt])+([WaterAllocation" & DateString & "]![Runoff_Amt]+[WaterAllocation" & DateString & "]![DeepPerc_Amt]))>[WaterAllocation" & DateString & "]![TAW],[WaterAllocation" & DateString & "]![TAW],((WaterBalance" & Prev_DateString & ".D_r_i_end)-([WaterAllocation" & DateString & "]![SurfWatDelivered]+[WaterAllocation" & DateString & "]![PumpWatDelivered]+[WaterAllocation" & DateString & "]![Precip_Amt])+([WaterAllocation" & DateString & "]![Runoff_Amt]+[WaterAllocation" & DateString & "]![DeepPerc_Amt])))))+([WaterAllocation" & DateString & "]![ETc]*(IIf((IIf(((WaterBalance" & Prev_DateString & ".D_r_i_end)-([WaterAllocation" & DateString & "]![SurfWatDelivered]+[WaterAllocation" & DateString & "]![PumpWatDelivered]+[WaterAllocation" & DateString & "]![Precip_Amt])+([WaterAllocation" & DateString & "]![Runoff_Amt]+[WaterAllocation" & DateString & "]![DeepPerc_Amt]))<0,0,IIf(((WaterBalance" & Prev_DateString & ".D_r_i_end)-([WaterAllocation" & DateString & "]![SurfWatDelivered]+[WaterAllocation" & DateString & "]![PumpWatDelivered]+[WaterAllocation" & DateString & "]![Precip_Amt])+([WaterAllocation" & DateString & "]![Runoff_Amt]+[WaterAllocation" & DateString & "]![DeepPerc_Amt]))>[WaterAllocation" & DateString & "]![TAW],[WaterAllocation" & DateString & "]![TAW],((WaterBalance" & Prev_DateString & ".D_r_i_end)-([WaterAllocation" & DateString & "]![SurfWatDelivered]+[WaterAllocation" & DateString & "]![PumpWatDelivered]+[WaterAllocation" & DateString & "]![Precip_Amt])+([WaterAllocation" & DateString & "]![Runoff_Amt]+[WaterAllocation" & DateString & "]![DeepPerc_Amt])))))<[WaterAllocation" & DateString & "]![RAW],1,IIf((([WaterAllocation" & DateString & "]![TAW]-(IIf(((WaterBalance" & Prev_DateString & ".D_r_i_end)-([WaterAllocation" & DateString & "]![SurfWatDelivered]+[WaterAllocation" & DateString & "]![PumpWatDelivered]+[WaterAllocation" & DateString & "]![Precip_Amt])+([WaterAllocation" & DateString & "]![Runoff_Amt]+[WaterAllocation" & DateString & "]![DeepPerc_Amt]))<0,0,IIf(((WaterBalance" & Prev_DateString & ".D_r_i_end)-([WaterAllocation" & DateString & "]![SurfWatDelivered]+[WaterAllocation" & DateString & "]![PumpWatDelivered]+[WaterAllocation" & DateString & "]![Precip_Amt])+([WaterAllocation" & DateString & "]![Runoff_Amt]+[WaterAllocation" & DateString & "]![DeepPerc_Amt]))>[WaterAllocation" & DateString & "]![TAW],[WaterAllocation" & DateString & "]![TAW],((WaterBalance" & Prev_DateString & ".D_r_i_end)-([WaterAllocation" & DateString & "]![SurfWatDelivered]+[WaterAllocation" & DateString & "]![PumpWatDelivered]+[WaterAllocation" & DateString & "]![Precip_Amt])+([WaterAllocation" & DateString & "]![Runoff_Amt]+[WaterAllocation" & DateString & "]![DeepPerc_Amt]))))))/([WaterAllocation" & DateString & "]![TAW]-[WaterAllocation" & DateString & "]![RAW]))<0,0,(([WaterAllocation" & DateString & "]![TAW]-(IIf(((WaterBalance" & Prev_DateString & ".D_r_i_end)-([WaterAllocation" & DateString & "]![SurfWatDelivered]+[WaterAllocation" & DateString & "]![PumpWatDelivered]+[WaterAllocation" & DateString & "]![Precip_Amt])+([WaterAllocation" & DateString & "]![Runoff_Amt]+[WaterAllocation" & DateString & "]![DeepPerc_Amt]))<0,0,IIf(((WaterBalance" & Prev_DateString & ".D_r_i_end)-([WaterAllocation" & DateString & "]![SurfWatDelivered]+[WaterAllocation" & DateString & "]![PumpWatDelivered]+[WaterAllocation" & DateString & "]![Precip_Amt])+([WaterAllocation" & DateString & "]![Runoff_Amt]+[WaterAllocation" & DateString & "]![DeepPerc_Amt]))>[WaterAllocation" & DateString & "]![TAW],[WaterAllocation" & DateString & "]![TAW],((WaterBalance" & Prev_DateString & ".D_r_i_end)-([WaterAllocation" & DateString & "]![SurfWatDelivered]+[WaterAllocation" & DateString & "]![PumpWatDelivered]+[WaterAllocation" & DateString & "]![Precip_Amt])+([WaterAllocation" & DateString & "]![Runoff_Amt]+[WaterAllocation" & DateString & "]![DeepPerc_Amt]))))))/([WaterAllocation" & DateString & "]![TAW]-[WaterAllocation" & DateString & "]![RAW])))))))) AS D_r_i_end, IIf((WaterBalance" & Prev_DateString & ".D_r_i_end)-([WaterAllocation" & DateString & "]![SurfWatDelivered]+[WaterAllocation" & DateString & "]![PumpWatDelivered]+[WaterAllocation" & DateString & "]![Precip_Amt])+([WaterAllocation" & DateString & "]![Runoff_Amt]+[WaterAllocation" & DateString & "]![DeepPerc_Amt])<0,Abs((WaterBalance" & Prev_DateString & ".D_r_i_end)-([WaterAllocation" & DateString & "]![SurfWatDelivered]+[WaterAllocation" & DateString & "]![PumpWatDelivered]+[WaterAllocation" & DateString & "]![Precip_Amt])+([WaterAllocation" & DateString & "]![Runoff_Amt]+[WaterAllocation" & DateString & "]![DeepPerc_Amt])),0) AS DP_add, [WaterAllocation" & DateString & "]![DeepPerc_Amt]+(IIf((WaterBalance" & Prev_DateString & ".D_r_i_end)-([WaterAllocation" & DateString & "]![SurfWatDelivered]+[WaterAllocation" & DateString & "]![PumpWatDelivered]+[WaterAllocation" & DateString & "]![Precip_Amt])+([WaterAllocation" & DateString & "]![Runoff_Amt]+[WaterAllocation" & DateString & "]![DeepPerc_Amt])<0,Abs((WaterBalance" & Prev_DateString & ".D_r_i_end)-([WaterAllocation" & DateString & "]![SurfWatDelivered]+[WaterAllocation" & DateString & "]![PumpWatDelivered]+[WaterAllocation" & DateString & "]![Precip_Amt])+([WaterAllocation" & DateString & "]![Runoff_Amt]+[WaterAllocation" & DateString & "]![DeepPerc_Amt])),0)) AS DP_final INTO WaterBalance" & DateString & " FROM WaterAllocation" & DateString & " INNER JOIN (WaterAllocation" & Prev_DateString & " INNER JOIN WaterBalance" & Prev_DateString & " ON WaterAllocation" & Prev_DateString & ".Field_No = WaterBalance" & Prev_DateString & ".Field_No) ON WaterAllocation" & DateString & ".Field_No = WaterBalance" & Prev_DateString & ".Field_No ORDER BY WaterAllocation" & DateString & ".Field_No;"

        End If

        DataSorter.ExecuteQuery(QueryString)

        If Upstream_or_not1 Then
            If CurrentDate = #4/1/1999# Then
                QueryString = "SELECT WaterAllocation_NatVeg_Trsk_" & DateString & ".Poly_ID, WaterAllocation_NatVeg_Trsk_" & DateString & ".RAW, InitialSoilMoistureConditions_NatVeg_Trsk.StartingSoilMoisture AS D_r_i_prev, WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt AS Inflow, IIf(WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt>=50,WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt*0.5,WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt*0.3) AS Outflow, IIf([D_r_i_prev]-(WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt)+(IIf(WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt>=50,WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt*0.5,WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt*0.3))<0,0,IIf([D_r_i_prev]-(WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt)+(IIf(WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt>=50,WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt*0.5,WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt*0.3))>WaterAllocation_NatVeg_Trsk_" & DateString & "!TAW,WaterAllocation_NatVeg_Trsk_" & DateString & "!TAW,[D_r_i_prev]-(WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt)+(IIf(WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt>=50,WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt*0.5,WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt*0.3)))) AS D_r_i_strt, WaterAllocation_NatVeg_Trsk_" & DateString & ".ETc, IIf((IIf([D_r_i_prev]-(WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt)+(IIf(WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt>=50,WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt*0.5,WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt*0.3))<0,0,IIf([D_r_i_prev]-(WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt)+(IIf(WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt>=50,WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt*0.5,WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt*0.3))>WaterAllocation_NatVeg_Trsk_" & DateString & "!TAW,WaterAllocation_NatVeg_Trsk_" & DateString & "!TAW,[D_r_i_prev]-(WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt)+(IIf(WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt>=50,WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt*0.5,WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt*0.3)))))<[WaterAllocation_NatVeg_Trsk_" & DateString & "]![RAW],1,IIf((([WaterAllocation_NatVeg_Trsk_" & DateString & "]![TAW]-(IIf([D_r_i_prev]-(WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt)+(IIf(WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt>=50,WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt*0.5,WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt*0.3))<0,0,IIf([D_r_i_prev]-(WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt)+(IIf(WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt>=50,WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt*0.5,WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt*0.3))>WaterAllocation_NatVeg_Trsk_" & DateString & "!TAW,WaterAllocation_NatVeg_Trsk_" & DateString & "!TAW,[D_r_i_prev]-(WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt)+(IIf(WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt>=50,WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt*0.5,WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt*0.3))))))/([WaterAllocation_NatVeg_Trsk_" & DateString & "]![TAW]-[WaterAllocation_NatVeg_Trsk_" & DateString & "]![RAW]))<0,0,(([WaterAllocation_NatVeg_Trsk_" & DateString & "]![TAW]-(IIf([D_r_i_prev]-(WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt)+(IIf(WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt>=50,WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt*0.5,WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt*0.3))<0,0,IIf([D_r_i_prev]-(WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt)+(IIf(WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt>=50,WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt*0.5,WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt*0.3))>WaterAllocation_NatVeg_Trsk_" & DateString & "!TAW,WaterAllocation_NatVeg_Trsk_" & DateString & "!TAW,[D_r_i_prev]-(WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt)+(IIf(WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt>=50,WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt*0.5,WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt*0.3))))))/([WaterAllocation_NatVeg_Trsk_" & DateString & "]![TAW]-[WaterAllocation_NatVeg_Trsk_" & DateString & "]![RAW])))) AS K_s, WaterAllocation_NatVeg_Trsk_" & DateString & "!ETc*(IIf((IIf([D_r_i_prev]-(WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt)+(IIf(WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt>=50,WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt*0.5,WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt*0.3))<0,0,IIf([D_r_i_prev]-(WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt)+(IIf(WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt>=50,WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt*0.5,WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt*0.3))>WaterAllocation_NatVeg_Trsk_" & DateString & "!TAW,WaterAllocation_NatVeg_Trsk_" & DateString & "!TAW,[D_r_i_prev]-(WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt)+(IIf(WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt>=50,WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt*0.5,WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt*0.3)))))<[WaterAllocation_NatVeg_Trsk_" & DateString & "]![RAW],1,IIf((([WaterAllocation_NatVeg_Trsk_" & DateString & "]![TAW]-(IIf([D_r_i_prev]-(WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt)+(IIf(WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt>=50,WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt*0.5,WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt*0.3))<0,0,IIf([D_r_i_prev]-(WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt)+(IIf(WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt>=50,WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt*0.5,WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt*0.3))>WaterAllocation_NatVeg_Trsk_" & DateString & "!TAW,WaterAllocation_NatVeg_Trsk_" & DateString & "!TAW,[D_r_i_prev]-(WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt)+(IIf(WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt>=50,WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt*0.5,WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt*0.3))))))/([WaterAllocation_NatVeg_Trsk_" & DateString & "]![TAW]-[WaterAllocation_NatVeg_Trsk_" & DateString & "]![RAW]))<0,0,(([WaterAllocation_NatVeg_Trsk_" & DateString & "]![TAW]-(IIf([D_r_i_prev]-(WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt)+(IIf(WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt>=50,WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt*0.5,WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt*0.3))<0,0,IIf([D_r_i_prev]-(WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt)+(IIf(WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt>=50,WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt*0.5,WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt*0.3))>WaterAllocation_NatVeg_Trsk_" & DateString & "!TAW,WaterAllocation_NatVeg_Trsk_" & DateString & "!TAW,[D_r_i_prev]-(WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt)+(IIf(WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt>=50,WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt*0.5,WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt*0.3))))))/([WaterAllocation_NatVeg_Trsk_" & DateString & "]![TAW]-[WaterAllocation_NatVeg_Trsk_" & DateString & "]![RAW]))))) AS ET_adj, IIf((IIf([D_r_i_prev]-(WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt)+(IIf(WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt>=50,WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt*0.5,WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt*0.3))<0,0,IIf([D_r_i_prev]-(WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt)+(IIf(WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt>=50,WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt*0.5,WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt*0.3))>WaterAllocation_NatVeg_Trsk_" & DateString & "!TAW,WaterAllocation_NatVeg_Trsk_" & DateString & "!TAW,[D_r_i_prev]-(WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt)+(IIf(WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt>=50,WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt*0.5,WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt*0.3)))))+(WaterAllocation_NatVeg_Trsk_" & DateString & "!ETc*(IIf((IIf([D_r_i_prev]-(WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt)+(IIf(WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt>=50,WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt*0.5,WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt*0.3))<0,0,IIf([D_r_i_prev]-(WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt)+(IIf(WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt>=50,WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt*0.5,WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt*0.3))>WaterAllocation_NatVeg_Trsk_" & DateString & "!TAW,WaterAllocation_NatVeg_Trsk_" & DateString & "!TAW,[D_r_i_prev]-(WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt)+(IIf(WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt>=50,WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt*0.5,WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt*0.3)))))<[WaterAllocation_NatVeg_Trsk_" & DateString & "]![RAW],1,IIf((([WaterAllocation_NatVeg_Trsk_" & DateString & "]![TAW]-(IIf([D_r_i_prev]-(WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt)+(IIf(WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt>=50,WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt*0.5,WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt*0.3))<0,0,IIf([D_r_i_prev]-(WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt)+(IIf(WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt>=50,WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt*0.5,WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt*0.3))>WaterAllocation_NatVeg_Trsk_" & DateString & "!TAW,WaterAllocation_NatVeg_Trsk_" & DateString & "!TAW,[D_r_i_prev]-(WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt)+(IIf(WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt>=50,WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt*0.5,WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt*0.3))))))/([WaterAllocation_NatVeg_Trsk_" & DateString & "]![TAW]-[WaterAllocation_NatVeg_Trsk_" & DateString & "]![RAW]))<0,0,(([WaterAllocation_NatVeg_Trsk_" & DateString & "]![TAW]-(IIf([D_r_i_prev]-(WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt)+(IIf(WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt>=50,WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt*0.5,WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt*0.3))<0,0,IIf([D_r_i_prev]-(WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt)+(IIf(WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt>=50,WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt*0.5,WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt*0.3))>WaterAllocation_NatVeg_Trsk_" & DateString & "!TAW,WaterAllocation_NatVeg_Trsk_" & DateString & "!TAW,[D_r_i_prev]-(WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt)+(IIf(WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt>=50,WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt*0.5,WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt*0.3))))))/([WaterAllocation_NatVeg_Trsk_" & DateString & "]![TAW]-[WaterAllocation_NatVeg_Trsk_" & DateString & "]![RAW]))))))>WaterAllocation_NatVeg_Trsk_" & DateString & "!TAW,WaterAllocation_NatVeg_Trsk_" & DateString & "!TAW,(IIf([D_r_i_prev]-(WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt)+(IIf(WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt>=50,WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt*0.5,WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt*0.3))<0,0,IIf([D_r_i_prev]-(WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt)+(IIf(WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt>=50,WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt*0.5,WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt*0.3))>WaterAllocation_NatVeg_Trsk_" & DateString & "!TAW,WaterAllocation_NatVeg_Trsk_" & DateString & "!TAW,[D_r_i_prev]-(WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt)+(IIf(WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt>=50,WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt*0.5,WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt*0.3)))))+(WaterAllocation_NatVeg_Trsk_" & DateString & "!ETc*(IIf((IIf([D_r_i_prev]-(WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt)+(IIf(WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt>=50,WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt*0.5,WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt*0.3))<0,0,IIf([D_r_i_prev]-(WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt)+(IIf(WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt>=50,WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt*0.5,WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt*0.3))>WaterAllocation_NatVeg_Trsk_" & DateString & "!TAW,WaterAllocation_NatVeg_Trsk_" & DateString & "!TAW,[D_r_i_prev]-(WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt)+(IIf(WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt>=50,WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt*0.5,WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt*0.3)))))<[WaterAllocation_NatVeg_Trsk_" & DateString & "]![RAW],1,IIf((([WaterAllocation_NatVeg_Trsk_" & DateString & "]![TAW]-(IIf([D_r_i_prev]-(WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt)+(IIf(WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt>=50,WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt*0.5,WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt*0.3))<0,0,IIf([D_r_i_prev]-(WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt)+(IIf(WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt>=50,WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt*0.5,WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt*0.3))>WaterAllocation_NatVeg_Trsk_" & DateString & "!TAW,WaterAllocation_NatVeg_Trsk_" & DateString & "!TAW,[D_r_i_prev]-(WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt)+(IIf(WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt>=50,WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt*0.5,WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt*0.3))))))/([WaterAllocation_NatVeg_Trsk_" & DateString & "]![TAW]-[WaterAllocation_NatVeg_Trsk_" & DateString & "]![RAW]))<0,0,(([WaterAllocation_NatVeg_Trsk_" & DateString & "]![TAW]-(IIf([D_r_i_prev]-(WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt)+(IIf(WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt>=50,WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt*0.5,WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt*0.3))<0,0,IIf([D_r_i_prev]-(WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt)+(IIf(WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt>=50,WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt*0.5,WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt*0.3))>WaterAllocation_NatVeg_Trsk_" & DateString & "!TAW,WaterAllocation_NatVeg_Trsk_" & DateString & "!TAW,[D_r_i_prev]-(WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt)+(IIf(WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt>=50,WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt*0.5,WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt*0.3))))))/([WaterAllocation_NatVeg_Trsk_" & DateString & "]![TAW]-[WaterAllocation_NatVeg_Trsk_" & DateString & "]![RAW]))))))) AS D_r_i_end, IIf([D_r_i_prev]-(WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt)+(IIf(WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt>=50,WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt*0.5,WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt*0.3))<0,Abs([D_r_i_prev]-(WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt)+(IIf(WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt>=50,WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt*0.5,WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt*0.3))),0) AS DP INTO WaterBalance_NatVeg_Trsk_" & DateString & " "
                QueryString += "FROM InitialSoilMoistureConditions_NatVeg_Trsk INNER JOIN WaterAllocation_NatVeg_Trsk_" & DateString & " ON InitialSoilMoistureConditions_NatVeg_Trsk.Poly_ID = WaterAllocation_NatVeg_Trsk_" & DateString & ".Poly_ID;"
            Else
                'QueryString = "SELECT WaterAllocation_NatVeg_Trsk_" & DateString & ".Poly_ID, WaterAllocation_NatVeg_Trsk_" & DateString & ".RAW, WaterBalance_NatVeg_Trsk_" & Prev_DateString & ".D_r_i_end AS D_r_i_prev, WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt AS Inflow, IIf(WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt>=50,WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt*0.5,WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt*0.3) AS Outflow, IIf((WaterBalance_NatVeg_Trsk_" & Prev_DateString & ".D_r_i_end)-(WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt)+(IIf(WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt>=50,WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt*0.5,WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt*0.3))<0,0,IIf((WaterBalance_NatVeg_Trsk_" & Prev_DateString & ".D_r_i_end)-(WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt)+(IIf(WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt>=50,WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt*0.5,WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt*0.3))>WaterAllocation_NatVeg_Trsk_" & DateString & "!TAW,WaterAllocation_NatVeg_Trsk_" & DateString & "!TAW,(WaterBalance_NatVeg_Trsk_" & Prev_DateString & ".D_r_i_end)-(WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt)+(IIf(WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt>=50,WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt*0.5,WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt*0.3)))) AS D_r_i_strt, WaterAllocation_NatVeg_Trsk_" & DateString & ".ETc, IIf((IIf((WaterBalance_NatVeg_Trsk_" & Prev_DateString & ".D_r_i_end)-(WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt)+(IIf(WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt>=50,WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt*0.5,WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt*0.3))<0,0,IIf((WaterBalance_NatVeg_Trsk_" & Prev_DateString & ".D_r_i_end)-(WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt)+(IIf(WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt>=50,WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt*0.5,WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt*0.3))>WaterAllocation_NatVeg_Trsk_" & DateString & "!TAW,WaterAllocation_NatVeg_Trsk_" & DateString & "!TAW,(WaterBalance_NatVeg_Trsk_" & Prev_DateString & ".D_r_i_end)-(WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt)+(IIf(WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt>=50,WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt*0.5,WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt*0.3)))))<WaterAllocation_NatVeg_Trsk_" & DateString & "!RAW,1,IIf(((WaterAllocation_NatVeg_Trsk_" & DateString & "!TAW-(IIf((WaterBalance_NatVeg_Trsk_" & Prev_DateString & ".D_r_i_end)-(WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt)+(IIf(WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt>=50,WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt*0.5,WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt*0.3))<0,0,IIf((WaterBalance_NatVeg_Trsk_" & Prev_DateString & ".D_r_i_end)-(WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt)+(IIf(WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt>=50,WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt*0.5,WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt*0.3))>WaterAllocation_NatVeg_Trsk_" & DateString & "!TAW,WaterAllocation_NatVeg_Trsk_" & DateString & "!TAW,(WaterBalance_NatVeg_Trsk_" & Prev_DateString & ".D_r_i_end)-(WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt)+(IIf(WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt>=50,WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt*0.5,WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt*0.3))))))/(WaterAllocation_NatVeg_Trsk_" & DateString & "!TAW-WaterAllocation_NatVeg_Trsk_" & DateString & "!RAW))<0,0,((WaterAllocation_NatVeg_Trsk_" & DateString & "!TAW-(IIf((WaterBalance_NatVeg_Trsk_" & Prev_DateString & ".D_r_i_end)-(WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt)+(IIf(WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt>=50,WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt*0.5,WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt*0.3))<0,0,IIf((WaterBalance_NatVeg_Trsk_" & Prev_DateString & ".D_r_i_end)-(WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt)+(IIf(WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt>=50,WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt*0.5,WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt*0.3))>WaterAllocation_NatVeg_Trsk_" & DateString & "!TAW,WaterAllocation_NatVeg_Trsk_" & DateString & "!TAW,(WaterBalance_NatVeg_Trsk_" & Prev_DateString & ".D_r_i_end)-(WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt)+(IIf(WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt>=50,WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt*0.5,WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt*0.3))))))/(WaterAllocation_NatVeg_Trsk_" & DateString & "!TAW-WaterAllocation_NatVeg_Trsk_" & DateString & "!RAW)))) AS K_s, WaterAllocation_NatVeg_Trsk_" & DateString & "!ETc*[K_s] AS ET_adj, IIf((IIf((WaterBalance_NatVeg_Trsk_" & Prev_DateString & ".D_r_i_end)-(WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt)+(IIf(WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt>=50,WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt*0.5,WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt*0.3))<0,0,IIf((WaterBalance_NatVeg_Trsk_" & Prev_DateString & ".D_r_i_end)-(WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt)+(IIf(WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt>=50,WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt*0.5,WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt*0.3))>WaterAllocation_NatVeg_Trsk_" & DateString & "!TAW,WaterAllocation_NatVeg_Trsk_" & DateString & "!TAW,(WaterBalance_NatVeg_Trsk_" & Prev_DateString & ".D_r_i_end)-(WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt)+(IIf(WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt>=50,WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt*0.5,WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt*0.3)))))+[ET_adj]>WaterAllocation_NatVeg_Trsk_" & DateString & "!TAW,WaterAllocation_NatVeg_Trsk_" & DateString & "!TAW,(IIf((WaterBalance_NatVeg_Trsk_" & Prev_DateString & ".D_r_i_end)-(WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt)+(IIf(WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt>=50,WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt*0.5,WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt*0.3))<0,0,IIf((WaterBalance_NatVeg_Trsk_" & Prev_DateString & ".D_r_i_end)-(WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt)+(IIf(WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt>=50,WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt*0.5,WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt*0.3))>WaterAllocation_NatVeg_Trsk_" & DateString & "!TAW,WaterAllocation_NatVeg_Trsk_" & DateString & "!TAW,(WaterBalance_NatVeg_Trsk_" & Prev_DateString & ".D_r_i_end)-(WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt)+(IIf(WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt>=50,WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt*0.5,WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt*0.3)))))+[ET_adj]) AS D_r_i_end, IIf((WaterBalance_NatVeg_Trsk_" & Prev_DateString & ".D_r_i_end)-(WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt)+(IIf(WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt>=50,WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt*0.5,WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt*0.3))<0,Abs((WaterBalance_NatVeg_Trsk_" & Prev_DateString & ".D_r_i_end)-(WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt)+(IIf(WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt>=50,WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt*0.5,WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt*0.3))),0) AS DP INTO WaterBalance_NatVeg_Trsk_" & DateString & " "
                'QueryString += "FROM WaterBalance_NatVeg_Trsk_" & Prev_DateString & " INNER JOIN WaterAllocation_NatVeg_Trsk_" & DateString & " ON WaterBalance_NatVeg_Trsk_" & Prev_DateString & ".Poly_ID=WaterAllocation_NatVeg_Trsk_" & DateString & ".Poly_ID;"

                QueryString = "SELECT WaterAllocation_NatVeg_Trsk_" & DateString & ".Poly_ID, WaterAllocation_NatVeg_Trsk_" & DateString & ".RAW, WaterBalance_NatVeg_Trsk_" & Prev_DateString & ".D_r_i_end AS D_r_i_prev, WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt AS Inflow, IIf(WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt>=50,WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt*0.5,WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt*0.3) AS Outflow, IIf((WaterBalance_NatVeg_Trsk_" & Prev_DateString & ".D_r_i_end)-(WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt)+(IIf(WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt>=50,WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt*0.5,WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt*0.3))<0,0,IIf((WaterBalance_NatVeg_Trsk_" & Prev_DateString & ".D_r_i_end)-(WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt)+(IIf(WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt>=50,WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt*0.5,WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt*0.3))>WaterAllocation_NatVeg_Trsk_" & DateString & "!TAW,WaterAllocation_NatVeg_Trsk_" & DateString & "!TAW,(WaterBalance_NatVeg_Trsk_" & Prev_DateString & ".D_r_i_end)-(WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt)+(IIf(WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt>=50,WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt*0.5,WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt*0.3)))) AS D_r_i_strt, WaterAllocation_NatVeg_Trsk_" & DateString & ".ETc, IIf((IIf((WaterBalance_NatVeg_Trsk_" & Prev_DateString & ".D_r_i_end)-(WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt)+(IIf(WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt>=50,WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt*0.5,WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt*0.3))<0,0,IIf((WaterBalance_NatVeg_Trsk_" & Prev_DateString & ".D_r_i_end)-(WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt)+(IIf(WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt>=50,WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt*0.5,WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt*0.3))>WaterAllocation_NatVeg_Trsk_" & DateString & "!TAW,WaterAllocation_NatVeg_Trsk_" & DateString & "!TAW,(WaterBalance_NatVeg_Trsk_" & Prev_DateString & ".D_r_i_end)-(WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt)+(IIf(WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt>=50,WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt*0.5,WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt*0.3)))))<WaterAllocation_NatVeg_Trsk_" & DateString & "!RAW,1,IIf(((WaterAllocation_NatVeg_Trsk_" & DateString & "!TAW-(IIf((WaterBalance_NatVeg_Trsk_" & Prev_DateString & ".D_r_i_end)-(WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt)+(IIf(WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt>=50,WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt*0.5,WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt*0.3))<0,0,IIf((WaterBalance_NatVeg_Trsk_" & Prev_DateString & ".D_r_i_end)-(WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt)+(IIf(WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt>=50,WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt*0.5,WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt*0.3))>WaterAllocation_NatVeg_Trsk_" & DateString & "!TAW,WaterAllocation_NatVeg_Trsk_" & DateString & "!TAW,(WaterBalance_NatVeg_Trsk_" & Prev_DateString & ".D_r_i_end)-(WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt)+(IIf(WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt>=50,WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt*0.5,WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt*0.3))))))/(WaterAllocation_NatVeg_Trsk_" & DateString & "!TAW-WaterAllocation_NatVeg_Trsk_" & DateString & "!RAW))<0,0,((WaterAllocation_NatVeg_Trsk_" & DateString & "!TAW-(IIf((WaterBalance_NatVeg_Trsk_" & Prev_DateString & ".D_r_i_end)-(WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt)+(IIf(WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt>=50,WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt*0.5,WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt*0.3))<0,0,IIf((WaterBalance_NatVeg_Trsk_" & Prev_DateString & ".D_r_i_end)-(WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt)+(IIf(WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt>=50,WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt*0.5,WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt*0.3))>WaterAllocation_NatVeg_Trsk_" & DateString & "!TAW,WaterAllocation_NatVeg_Trsk_" & DateString & "!TAW,(WaterBalance_NatVeg_Trsk_" & Prev_DateString & ".D_r_i_end)-(WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt)+(IIf(WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt>=50,WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt*0.5,WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt*0.3))))))/(WaterAllocation_NatVeg_Trsk_" & DateString & "!TAW-WaterAllocation_NatVeg_Trsk_" & DateString & "!RAW)))) AS K_s, WaterAllocation_NatVeg_Trsk_" & DateString & "!ETc*(IIf((IIf((WaterBalance_NatVeg_Trsk_" & Prev_DateString & ".D_r_i_end)-(WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt)+(IIf(WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt>=50,WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt*0.5,WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt*0.3))<0,0,IIf((WaterBalance_NatVeg_Trsk_" & Prev_DateString & ".D_r_i_end)-(WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt)+(IIf(WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt>=50,WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt*0.5,WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt*0.3))>WaterAllocation_NatVeg_Trsk_" & DateString & "!TAW,WaterAllocation_NatVeg_Trsk_" & DateString & "!TAW,(WaterBalance_NatVeg_Trsk_" & Prev_DateString & ".D_r_i_end)-(WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt)+(IIf(WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt>=50,WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt*0.5,WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt*0.3)))))<WaterAllocation_NatVeg_Trsk_" & DateString & "!RAW,1,IIf(((WaterAllocation_NatVeg_Trsk_" & DateString & "!TAW-(IIf((WaterBalance_NatVeg_Trsk_" & Prev_DateString & ".D_r_i_end)-(WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt)+(IIf(WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt>=50,WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt*0.5,WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt*0.3))<0,0,IIf((WaterBalance_NatVeg_Trsk_" & Prev_DateString & ".D_r_i_end)-(WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt)+(IIf(WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt>=50,WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt*0.5,WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt*0.3))>WaterAllocation_NatVeg_Trsk_" & DateString & "!TAW,WaterAllocation_NatVeg_Trsk_" & DateString & "!TAW,(WaterBalance_NatVeg_Trsk_" & Prev_DateString & ".D_r_i_end)-(WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt)+(IIf(WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt>=50,WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt*0.5,WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt*0.3))))))/(WaterAllocation_NatVeg_Trsk_" & DateString & "!TAW-WaterAllocation_NatVeg_Trsk_" & DateString & "!RAW))<0,0,((WaterAllocation_NatVeg_Trsk_" & DateString & "!TAW-(IIf((WaterBalance_NatVeg_Trsk_" & Prev_DateString & ".D_r_i_end)-(WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt)+(IIf(WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt>=50,WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt*0.5,WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt*0.3))<0,0,IIf((WaterBalance_NatVeg_Trsk_" & Prev_DateString & ".D_r_i_end)-(WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt)+(IIf(WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt>=50,WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt*0.5,WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt*0.3))>WaterAllocation_NatVeg_Trsk_" & DateString & "!TAW,WaterAllocation_NatVeg_Trsk_" & DateString & "!TAW,(WaterBalance_NatVeg_Trsk_" & Prev_DateString & ".D_r_i_end)-(WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt)+(IIf(WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt>=50,WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt*0.5,WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt*0.3))))))/(WaterAllocation_NatVeg_Trsk_" & DateString & "!TAW-WaterAllocation_NatVeg_Trsk_" & DateString & "!RAW))))) AS ET_adj, IIf((IIf((WaterBalance_NatVeg_Trsk_" & Prev_DateString & ".D_r_i_end)-(WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt)+(IIf(WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt>=50,WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt*0.5,WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt*0.3))<0,0,IIf((WaterBalance_NatVeg_Trsk_" & Prev_DateString & ".D_r_i_end)-(WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt)+(IIf(WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt>=50,WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt*0.5,WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt*0.3))>WaterAllocation_NatVeg_Trsk_" & DateString & "!TAW,WaterAllocation_NatVeg_Trsk_" & DateString & "!TAW,(WaterBalance_NatVeg_Trsk_" & Prev_DateString & ".D_r_i_end)-(WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt)+(IIf(WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt>=50,WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt*0.5,WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt*0.3)))))+( WaterAllocation_NatVeg_Trsk_" & DateString & "!ETc*(IIf((IIf((WaterBalance_NatVeg_Trsk_" & Prev_DateString & ".D_r_i_end)-(WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt)+(IIf(WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt>=50,WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt*0.5,WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt*0.3))<0,0,IIf((WaterBalance_NatVeg_Trsk_" & Prev_DateString & ".D_r_i_end)-(WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt)+(IIf(WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt>=50,WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt*0.5,WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt*0.3))>WaterAllocation_NatVeg_Trsk_" & DateString & "!TAW,WaterAllocation_NatVeg_Trsk_" & DateString & "!TAW,(WaterBalance_NatVeg_Trsk_" & Prev_DateString & ".D_r_i_end)-(WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt)+(IIf(WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt>=50,WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt*0.5,WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt*0.3)))))<WaterAllocation_NatVeg_Trsk_" & DateString & "!RAW,1,IIf(((WaterAllocation_NatVeg_Trsk_" & DateString & "!TAW-(IIf((WaterBalance_NatVeg_Trsk_" & Prev_DateString & ".D_r_i_end)-(WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt)+(IIf(WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt>=50,WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt*0.5,WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt*0.3))<0,0,IIf((WaterBalance_NatVeg_Trsk_" & Prev_DateString & ".D_r_i_end)-(WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt)+(IIf(WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt>=50,WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt*0.5,WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt*0.3))>WaterAllocation_NatVeg_Trsk_" & DateString & "!TAW,WaterAllocation_NatVeg_Trsk_" & DateString & "!TAW,(WaterBalance_NatVeg_Trsk_" & Prev_DateString & ".D_r_i_end)-(WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt)+(IIf(WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt>=50,WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt*0.5,WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt*0.3))))))/(WaterAllocation_NatVeg_Trsk_" & DateString & "!TAW-WaterAllocation_NatVeg_Trsk_" & DateString & "!RAW))<0,0,((WaterAllocation_NatVeg_Trsk_" & DateString & "!TAW-(IIf((WaterBalance_NatVeg_Trsk_" & Prev_DateString & ".D_r_i_end)-(WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt)+(IIf(WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt>=50,WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt*0.5,WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt*0.3))<0,0,IIf((WaterBalance_NatVeg_Trsk_" & Prev_DateString & ".D_r_i_end)-(WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt)+(IIf(WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt>=50,WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt*0.5,WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt*0.3))>WaterAllocation_NatVeg_Trsk_" & DateString & "!TAW,WaterAllocation_NatVeg_Trsk_" & DateString & "!TAW,(WaterBalance_NatVeg_Trsk_" & Prev_DateString & ".D_r_i_end)-(WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt)+(IIf(WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt>=50,WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt*0.5,WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt*0.3))))))/(WaterAllocation_NatVeg_Trsk_" & DateString & "!TAW-WaterAllocation_NatVeg_Trsk_" & DateString & "!RAW))))))>WaterAllocation_NatVeg_Trsk_" & DateString & "!TAW,WaterAllocation_NatVeg_Trsk_" & DateString & "!TAW,(IIf((WaterBalance_NatVeg_Trsk_" & Prev_DateString & ".D_r_i_end)-(WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt)+(IIf(WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt>=50,WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt*0.5,WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt*0.3))<0,0,IIf((WaterBalance_NatVeg_Trsk_" & Prev_DateString & ".D_r_i_end)-(WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt)+(IIf(WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt>=50,WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt*0.5,WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt*0.3))>WaterAllocation_NatVeg_Trsk_" & DateString & "!TAW,WaterAllocation_NatVeg_Trsk_" & DateString & "!TAW,(WaterBalance_NatVeg_Trsk_" & Prev_DateString & ".D_r_i_end)-(WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt)+(IIf(WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt>=50,WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt*0.5,WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt*0.3)))))+( WaterAllocation_NatVeg_Trsk_" & DateString & "!ETc*(IIf((IIf((WaterBalance_NatVeg_Trsk_" & Prev_DateString & ".D_r_i_end)-(WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt)+(IIf(WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt>=50,WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt*0.5,WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt*0.3))<0,0,IIf((WaterBalance_NatVeg_Trsk_" & Prev_DateString & ".D_r_i_end)-(WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt)+(IIf(WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt>=50,WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt*0.5,WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt*0.3))>WaterAllocation_NatVeg_Trsk_" & DateString & "!TAW,WaterAllocation_NatVeg_Trsk_" & DateString & "!TAW,(WaterBalance_NatVeg_Trsk_" & Prev_DateString & ".D_r_i_end)-(WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt)+(IIf(WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt>=50,WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt*0.5,WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt*0.3)))))<WaterAllocation_NatVeg_Trsk_" & DateString & "!RAW,1,IIf(((WaterAllocation_NatVeg_Trsk_" & DateString & "!TAW-(IIf((WaterBalance_NatVeg_Trsk_" & Prev_DateString & ".D_r_i_end)-(WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt)+(IIf(WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt>=50,WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt*0.5,WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt*0.3))<0,0,IIf((WaterBalance_NatVeg_Trsk_" & Prev_DateString & ".D_r_i_end)-(WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt)+(IIf(WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt>=50,WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt*0.5,WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt*0.3))>WaterAllocation_NatVeg_Trsk_" & DateString & "!TAW,WaterAllocation_NatVeg_Trsk_" & DateString & "!TAW,(WaterBalance_NatVeg_Trsk_" & Prev_DateString & ".D_r_i_end)-(WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt)+(IIf(WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt>=50,WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt*0.5,WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt*0.3))))))/(WaterAllocation_NatVeg_Trsk_" & DateString & "!TAW-WaterAllocation_NatVeg_Trsk_" & DateString & "!RAW))<0,0,((WaterAllocation_NatVeg_Trsk_" & DateString & "!TAW-(IIf((WaterBalance_NatVeg_Trsk_" & Prev_DateString & ".D_r_i_end)-(WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt)+(IIf(WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt>=50,WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt*0.5,WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt*0.3))<0,0,IIf((WaterBalance_NatVeg_Trsk_" & Prev_DateString & ".D_r_i_end)-(WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt)+(IIf(WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt>=50,WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt*0.5,WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt*0.3))>WaterAllocation_NatVeg_Trsk_" & DateString & "!TAW,WaterAllocation_NatVeg_Trsk_" & DateString & "!TAW,(WaterBalance_NatVeg_Trsk_" & Prev_DateString & ".D_r_i_end)-(WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt)+(IIf(WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt>=50,WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt*0.5,WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt*0.3))))))/(WaterAllocation_NatVeg_Trsk_" & DateString & "!TAW-WaterAllocation_NatVeg_Trsk_" & DateString & "!RAW))))))) AS D_r_i_end, "
                QueryString += "IIf((WaterBalance_NatVeg_Trsk_" & Prev_DateString & ".D_r_i_end)-(WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt)+(IIf(WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt>=50,WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt*0.5,WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt*0.3))<0,Abs((WaterBalance_NatVeg_Trsk_" & Prev_DateString & ".D_r_i_end)-(WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt)+(IIf(WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt>=50,WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt*0.5,WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt*0.3))),0) AS DP INTO WaterBalance_NatVeg_Trsk_" & DateString & " FROM WaterBalance_NatVeg_Trsk_" & Prev_DateString & " INNER JOIN WaterAllocation_NatVeg_Trsk_" & DateString & " ON WaterBalance_NatVeg_Trsk_" & Prev_DateString & ".Poly_ID=WaterAllocation_NatVeg_Trsk_" & DateString & ".Poly_ID;"
            End If
        Else
            If CurrentDate = #3/28/2002# Then
                QueryString = "SELECT WaterAllocation_NatVeg_Trsk_" & DateString & ".Poly_ID, WaterAllocation_NatVeg_Trsk_" & DateString & ".RAW, InitialSoilMoistureConditions_NatVeg_Trsk.StartingSoilMoisture AS D_r_i_prev, WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt AS Inflow, IIf(WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt>=50,WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt*0.5,WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt*0.3) AS Outflow, IIf([D_r_i_prev]-(WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt)+(IIf(WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt>=50,WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt*0.5,WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt*0.3))<0,0,IIf([D_r_i_prev]-(WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt)+(IIf(WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt>=50,WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt*0.5,WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt*0.3))>WaterAllocation_NatVeg_Trsk_" & DateString & "!TAW,WaterAllocation_NatVeg_Trsk_" & DateString & "!TAW,[D_r_i_prev]-(WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt)+(IIf(WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt>=50,WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt*0.5,WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt*0.3)))) AS D_r_i_strt, WaterAllocation_NatVeg_Trsk_" & DateString & ".ETc, IIf((IIf([D_r_i_prev]-(WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt)+(IIf(WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt>=50,WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt*0.5,WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt*0.3))<0,0,IIf([D_r_i_prev]-(WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt)+(IIf(WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt>=50,WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt*0.5,WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt*0.3))>WaterAllocation_NatVeg_Trsk_" & DateString & "!TAW,WaterAllocation_NatVeg_Trsk_" & DateString & "!TAW,[D_r_i_prev]-(WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt)+(IIf(WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt>=50,WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt*0.5,WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt*0.3)))))<[WaterAllocation_NatVeg_Trsk_" & DateString & "]![RAW],1,IIf((([WaterAllocation_NatVeg_Trsk_" & DateString & "]![TAW]-(IIf([D_r_i_prev]-(WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt)+(IIf(WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt>=50,WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt*0.5,WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt*0.3))<0,0,IIf([D_r_i_prev]-(WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt)+(IIf(WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt>=50,WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt*0.5,WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt*0.3))>WaterAllocation_NatVeg_Trsk_" & DateString & "!TAW,WaterAllocation_NatVeg_Trsk_" & DateString & "!TAW,[D_r_i_prev]-(WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt)+(IIf(WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt>=50,WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt*0.5,WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt*0.3))))))/([WaterAllocation_NatVeg_Trsk_" & DateString & "]![TAW]-[WaterAllocation_NatVeg_Trsk_" & DateString & "]![RAW]))<0,0,(([WaterAllocation_NatVeg_Trsk_" & DateString & "]![TAW]-(IIf([D_r_i_prev]-(WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt)+(IIf(WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt>=50,WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt*0.5,WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt*0.3))<0,0,IIf([D_r_i_prev]-(WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt)+(IIf(WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt>=50,WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt*0.5,WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt*0.3))>WaterAllocation_NatVeg_Trsk_" & DateString & "!TAW,WaterAllocation_NatVeg_Trsk_" & DateString & "!TAW,[D_r_i_prev]-(WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt)+(IIf(WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt>=50,WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt*0.5,WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt*0.3))))))/([WaterAllocation_NatVeg_Trsk_" & DateString & "]![TAW]-[WaterAllocation_NatVeg_Trsk_" & DateString & "]![RAW])))) AS K_s, WaterAllocation_NatVeg_Trsk_" & DateString & "!ETc*(IIf((IIf([D_r_i_prev]-(WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt)+(IIf(WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt>=50,WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt*0.5,WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt*0.3))<0,0,IIf([D_r_i_prev]-(WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt)+(IIf(WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt>=50,WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt*0.5,WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt*0.3))>WaterAllocation_NatVeg_Trsk_" & DateString & "!TAW,WaterAllocation_NatVeg_Trsk_" & DateString & "!TAW,[D_r_i_prev]-(WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt)+(IIf(WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt>=50,WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt*0.5,WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt*0.3)))))<[WaterAllocation_NatVeg_Trsk_" & DateString & "]![RAW],1,IIf((([WaterAllocation_NatVeg_Trsk_" & DateString & "]![TAW]-(IIf([D_r_i_prev]-(WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt)+(IIf(WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt>=50,WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt*0.5,WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt*0.3))<0,0,IIf([D_r_i_prev]-(WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt)+(IIf(WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt>=50,WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt*0.5,WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt*0.3))>WaterAllocation_NatVeg_Trsk_" & DateString & "!TAW,WaterAllocation_NatVeg_Trsk_" & DateString & "!TAW,[D_r_i_prev]-(WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt)+(IIf(WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt>=50,WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt*0.5,WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt*0.3))))))/([WaterAllocation_NatVeg_Trsk_" & DateString & "]![TAW]-[WaterAllocation_NatVeg_Trsk_" & DateString & "]![RAW]))<0,0,(([WaterAllocation_NatVeg_Trsk_" & DateString & "]![TAW]-(IIf([D_r_i_prev]-(WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt)+(IIf(WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt>=50,WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt*0.5,WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt*0.3))<0,0,IIf([D_r_i_prev]-(WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt)+(IIf(WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt>=50,WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt*0.5,WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt*0.3))>WaterAllocation_NatVeg_Trsk_" & DateString & "!TAW,WaterAllocation_NatVeg_Trsk_" & DateString & "!TAW,[D_r_i_prev]-(WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt)+(IIf(WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt>=50,WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt*0.5,WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt*0.3))))))/([WaterAllocation_NatVeg_Trsk_" & DateString & "]![TAW]-[WaterAllocation_NatVeg_Trsk_" & DateString & "]![RAW]))))) AS ET_adj, IIf((IIf([D_r_i_prev]-(WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt)+(IIf(WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt>=50,WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt*0.5,WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt*0.3))<0,0,IIf([D_r_i_prev]-(WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt)+(IIf(WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt>=50,WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt*0.5,WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt*0.3))>WaterAllocation_NatVeg_Trsk_" & DateString & "!TAW,WaterAllocation_NatVeg_Trsk_" & DateString & "!TAW,[D_r_i_prev]-(WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt)+(IIf(WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt>=50,WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt*0.5,WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt*0.3)))))+(WaterAllocation_NatVeg_Trsk_" & DateString & "!ETc*(IIf((IIf([D_r_i_prev]-(WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt)+(IIf(WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt>=50,WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt*0.5,WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt*0.3))<0,0,IIf([D_r_i_prev]-(WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt)+(IIf(WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt>=50,WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt*0.5,WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt*0.3))>WaterAllocation_NatVeg_Trsk_" & DateString & "!TAW,WaterAllocation_NatVeg_Trsk_" & DateString & "!TAW,[D_r_i_prev]-(WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt)+(IIf(WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt>=50,WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt*0.5,WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt*0.3)))))<[WaterAllocation_NatVeg_Trsk_" & DateString & "]![RAW],1,IIf((([WaterAllocation_NatVeg_Trsk_" & DateString & "]![TAW]-(IIf([D_r_i_prev]-(WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt)+(IIf(WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt>=50,WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt*0.5,WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt*0.3))<0,0,IIf([D_r_i_prev]-(WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt)+(IIf(WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt>=50,WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt*0.5,WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt*0.3))>WaterAllocation_NatVeg_Trsk_" & DateString & "!TAW,WaterAllocation_NatVeg_Trsk_" & DateString & "!TAW,[D_r_i_prev]-(WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt)+(IIf(WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt>=50,WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt*0.5,WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt*0.3))))))/([WaterAllocation_NatVeg_Trsk_" & DateString & "]![TAW]-[WaterAllocation_NatVeg_Trsk_" & DateString & "]![RAW]))<0,0,(([WaterAllocation_NatVeg_Trsk_" & DateString & "]![TAW]-(IIf([D_r_i_prev]-(WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt)+(IIf(WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt>=50,WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt*0.5,WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt*0.3))<0,0,IIf([D_r_i_prev]-(WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt)+(IIf(WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt>=50,WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt*0.5,WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt*0.3))>WaterAllocation_NatVeg_Trsk_" & DateString & "!TAW,WaterAllocation_NatVeg_Trsk_" & DateString & "!TAW,[D_r_i_prev]-(WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt)+(IIf(WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt>=50,WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt*0.5,WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt*0.3))))))/([WaterAllocation_NatVeg_Trsk_" & DateString & "]![TAW]-[WaterAllocation_NatVeg_Trsk_" & DateString & "]![RAW]))))))>WaterAllocation_NatVeg_Trsk_" & DateString & "!TAW,WaterAllocation_NatVeg_Trsk_" & DateString & "!TAW,(IIf([D_r_i_prev]-(WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt)+(IIf(WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt>=50,WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt*0.5,WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt*0.3))<0,0,IIf([D_r_i_prev]-(WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt)+(IIf(WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt>=50,WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt*0.5,WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt*0.3))>WaterAllocation_NatVeg_Trsk_" & DateString & "!TAW,WaterAllocation_NatVeg_Trsk_" & DateString & "!TAW,[D_r_i_prev]-(WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt)+(IIf(WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt>=50,WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt*0.5,WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt*0.3)))))+(WaterAllocation_NatVeg_Trsk_" & DateString & "!ETc*(IIf((IIf([D_r_i_prev]-(WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt)+(IIf(WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt>=50,WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt*0.5,WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt*0.3))<0,0,IIf([D_r_i_prev]-(WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt)+(IIf(WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt>=50,WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt*0.5,WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt*0.3))>WaterAllocation_NatVeg_Trsk_" & DateString & "!TAW,WaterAllocation_NatVeg_Trsk_" & DateString & "!TAW,[D_r_i_prev]-(WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt)+(IIf(WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt>=50,WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt*0.5,WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt*0.3)))))<[WaterAllocation_NatVeg_Trsk_" & DateString & "]![RAW],1,IIf((([WaterAllocation_NatVeg_Trsk_" & DateString & "]![TAW]-(IIf([D_r_i_prev]-(WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt)+(IIf(WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt>=50,WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt*0.5,WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt*0.3))<0,0,IIf([D_r_i_prev]-(WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt)+(IIf(WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt>=50,WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt*0.5,WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt*0.3))>WaterAllocation_NatVeg_Trsk_" & DateString & "!TAW,WaterAllocation_NatVeg_Trsk_" & DateString & "!TAW,[D_r_i_prev]-(WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt)+(IIf(WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt>=50,WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt*0.5,WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt*0.3))))))/([WaterAllocation_NatVeg_Trsk_" & DateString & "]![TAW]-[WaterAllocation_NatVeg_Trsk_" & DateString & "]![RAW]))<0,0,(([WaterAllocation_NatVeg_Trsk_" & DateString & "]![TAW]-(IIf([D_r_i_prev]-(WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt)+(IIf(WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt>=50,WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt*0.5,WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt*0.3))<0,0,IIf([D_r_i_prev]-(WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt)+(IIf(WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt>=50,WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt*0.5,WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt*0.3))>WaterAllocation_NatVeg_Trsk_" & DateString & "!TAW,WaterAllocation_NatVeg_Trsk_" & DateString & "!TAW,[D_r_i_prev]-(WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt)+(IIf(WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt>=50,WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt*0.5,WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt*0.3))))))/([WaterAllocation_NatVeg_Trsk_" & DateString & "]![TAW]-[WaterAllocation_NatVeg_Trsk_" & DateString & "]![RAW]))))))) AS D_r_i_end, IIf([D_r_i_prev]-(WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt)+(IIf(WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt>=50,WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt*0.5,WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt*0.3))<0,Abs([D_r_i_prev]-(WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt)+(IIf(WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt>=50,WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt*0.5,WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt*0.3))),0) AS DP INTO WaterBalance_NatVeg_Trsk_" & DateString & " "
                QueryString += "FROM InitialSoilMoistureConditions_NatVeg_Trsk INNER JOIN WaterAllocation_NatVeg_Trsk_" & DateString & " ON InitialSoilMoistureConditions_NatVeg_Trsk.Poly_ID = WaterAllocation_NatVeg_Trsk_" & DateString & ".Poly_ID;"
            Else
                'QueryString = "SELECT WaterAllocation_NatVeg_Trsk_" & DateString & ".Poly_ID, WaterAllocation_NatVeg_Trsk_" & DateString & ".RAW, WaterBalance_NatVeg_Trsk_" & Prev_DateString & ".D_r_i_end AS D_r_i_prev, WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt AS Inflow, IIf(WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt>=50,WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt*0.5,WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt*0.3) AS Outflow, IIf((WaterBalance_NatVeg_Trsk_" & Prev_DateString & ".D_r_i_end)-(WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt)+(IIf(WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt>=50,WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt*0.5,WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt*0.3))<0,0,IIf((WaterBalance_NatVeg_Trsk_" & Prev_DateString & ".D_r_i_end)-(WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt)+(IIf(WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt>=50,WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt*0.5,WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt*0.3))>WaterAllocation_NatVeg_Trsk_" & DateString & "!TAW,WaterAllocation_NatVeg_Trsk_" & DateString & "!TAW,(WaterBalance_NatVeg_Trsk_" & Prev_DateString & ".D_r_i_end)-(WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt)+(IIf(WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt>=50,WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt*0.5,WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt*0.3)))) AS D_r_i_strt, WaterAllocation_NatVeg_Trsk_" & DateString & ".ETc, IIf((IIf((WaterBalance_NatVeg_Trsk_" & Prev_DateString & ".D_r_i_end)-(WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt)+(IIf(WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt>=50,WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt*0.5,WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt*0.3))<0,0,IIf((WaterBalance_NatVeg_Trsk_" & Prev_DateString & ".D_r_i_end)-(WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt)+(IIf(WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt>=50,WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt*0.5,WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt*0.3))>WaterAllocation_NatVeg_Trsk_" & DateString & "!TAW,WaterAllocation_NatVeg_Trsk_" & DateString & "!TAW,(WaterBalance_NatVeg_Trsk_" & Prev_DateString & ".D_r_i_end)-(WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt)+(IIf(WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt>=50,WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt*0.5,WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt*0.3)))))<WaterAllocation_NatVeg_Trsk_" & DateString & "!RAW,1,IIf(((WaterAllocation_NatVeg_Trsk_" & DateString & "!TAW-(IIf((WaterBalance_NatVeg_Trsk_" & Prev_DateString & ".D_r_i_end)-(WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt)+(IIf(WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt>=50,WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt*0.5,WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt*0.3))<0,0,IIf((WaterBalance_NatVeg_Trsk_" & Prev_DateString & ".D_r_i_end)-(WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt)+(IIf(WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt>=50,WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt*0.5,WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt*0.3))>WaterAllocation_NatVeg_Trsk_" & DateString & "!TAW,WaterAllocation_NatVeg_Trsk_" & DateString & "!TAW,(WaterBalance_NatVeg_Trsk_" & Prev_DateString & ".D_r_i_end)-(WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt)+(IIf(WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt>=50,WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt*0.5,WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt*0.3))))))/(WaterAllocation_NatVeg_Trsk_" & DateString & "!TAW-WaterAllocation_NatVeg_Trsk_" & DateString & "!RAW))<0,0,((WaterAllocation_NatVeg_Trsk_" & DateString & "!TAW-(IIf((WaterBalance_NatVeg_Trsk_" & Prev_DateString & ".D_r_i_end)-(WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt)+(IIf(WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt>=50,WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt*0.5,WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt*0.3))<0,0,IIf((WaterBalance_NatVeg_Trsk_" & Prev_DateString & ".D_r_i_end)-(WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt)+(IIf(WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt>=50,WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt*0.5,WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt*0.3))>WaterAllocation_NatVeg_Trsk_" & DateString & "!TAW,WaterAllocation_NatVeg_Trsk_" & DateString & "!TAW,(WaterBalance_NatVeg_Trsk_" & Prev_DateString & ".D_r_i_end)-(WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt)+(IIf(WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt>=50,WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt*0.5,WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt*0.3))))))/(WaterAllocation_NatVeg_Trsk_" & DateString & "!TAW-WaterAllocation_NatVeg_Trsk_" & DateString & "!RAW)))) AS K_s, WaterAllocation_NatVeg_Trsk_" & DateString & "!ETc*[K_s] AS ET_adj, IIf((IIf((WaterBalance_NatVeg_Trsk_" & Prev_DateString & ".D_r_i_end)-(WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt)+(IIf(WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt>=50,WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt*0.5,WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt*0.3))<0,0,IIf((WaterBalance_NatVeg_Trsk_" & Prev_DateString & ".D_r_i_end)-(WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt)+(IIf(WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt>=50,WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt*0.5,WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt*0.3))>WaterAllocation_NatVeg_Trsk_" & DateString & "!TAW,WaterAllocation_NatVeg_Trsk_" & DateString & "!TAW,(WaterBalance_NatVeg_Trsk_" & Prev_DateString & ".D_r_i_end)-(WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt)+(IIf(WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt>=50,WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt*0.5,WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt*0.3)))))+[ET_adj]>WaterAllocation_NatVeg_Trsk_" & DateString & "!TAW,WaterAllocation_NatVeg_Trsk_" & DateString & "!TAW,(IIf((WaterBalance_NatVeg_Trsk_" & Prev_DateString & ".D_r_i_end)-(WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt)+(IIf(WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt>=50,WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt*0.5,WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt*0.3))<0,0,IIf((WaterBalance_NatVeg_Trsk_" & Prev_DateString & ".D_r_i_end)-(WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt)+(IIf(WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt>=50,WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt*0.5,WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt*0.3))>WaterAllocation_NatVeg_Trsk_" & DateString & "!TAW,WaterAllocation_NatVeg_Trsk_" & DateString & "!TAW,(WaterBalance_NatVeg_Trsk_" & Prev_DateString & ".D_r_i_end)-(WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt)+(IIf(WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt>=50,WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt*0.5,WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt*0.3)))))+[ET_adj]) AS D_r_i_end, IIf((WaterBalance_NatVeg_Trsk_" & Prev_DateString & ".D_r_i_end)-(WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt)+(IIf(WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt>=50,WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt*0.5,WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt*0.3))<0,Abs((WaterBalance_NatVeg_Trsk_" & Prev_DateString & ".D_r_i_end)-(WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt)+(IIf(WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt>=50,WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt*0.5,WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt*0.3))),0) AS DP INTO WaterBalance_NatVeg_Trsk_" & DateString & " "
                'QueryString += "FROM WaterBalance_NatVeg_Trsk_" & Prev_DateString & " INNER JOIN WaterAllocation_NatVeg_Trsk_" & DateString & " ON WaterBalance_NatVeg_Trsk_" & Prev_DateString & ".Poly_ID=WaterAllocation_NatVeg_Trsk_" & DateString & ".Poly_ID;"

                'The query below is one I would like to work initially, but it is reported to be too complex by MSAccess
                'QueryString = "SELECT WaterAllocation_NatVeg_Trsk_" & DateString & ".Poly_ID, WaterAllocation_NatVeg_Trsk_" & DateString & ".RAW, WaterBalance_NatVeg_Trsk_" & Prev_DateString & ".D_r_i_end AS D_r_i_prev, WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt AS Inflow, IIf(WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt>=50,WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt*0.5,WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt*0.3) AS Outflow, IIf((WaterBalance_NatVeg_Trsk_" & Prev_DateString & ".D_r_i_end)-(WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt)+(IIf(WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt>=50,WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt*0.5,WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt*0.3))<0,0,IIf((WaterBalance_NatVeg_Trsk_" & Prev_DateString & ".D_r_i_end)-(WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt)+(IIf(WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt>=50,WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt*0.5,WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt*0.3))>WaterAllocation_NatVeg_Trsk_" & DateString & "!TAW,WaterAllocation_NatVeg_Trsk_" & DateString & "!TAW,(WaterBalance_NatVeg_Trsk_" & Prev_DateString & ".D_r_i_end)-(WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt)+(IIf(WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt>=50,WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt*0.5,WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt*0.3)))) AS D_r_i_strt, "
                'QueryString += "WaterAllocation_NatVeg_Trsk_" & DateString & ".ETc, IIf((IIf((IIf((WaterBalance_NatVeg_Trsk_" & Prev_DateString & ".D_r_i_end)-(WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt)+(IIf(WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt>=50,WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt*0.5,WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt*0.3))<0,0,IIf((WaterBalance_NatVeg_Trsk_" & Prev_DateString & ".D_r_i_end)-(WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt)+(IIf(WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt>=50,WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt*0.5,WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt*0.3))>WaterAllocation_NatVeg_Trsk_" & DateString & "!TAW,WaterAllocation_NatVeg_Trsk_" & DateString & "!TAW,(WaterBalance_NatVeg_Trsk_" & Prev_DateString & ".D_r_i_end)-(WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt)+(IIf(WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt>=50,WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt*0.5,WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt*0.3)))))<WaterAllocation_NatVeg_Trsk_" & DateString & "!RAW,1,IIf(((WaterAllocation_NatVeg_Trsk_" & DateString & "!TAW-(IIf((WaterBalance_NatVeg_Trsk_" & Prev_DateString & ".D_r_i_end)-(WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt)+(IIf(WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt>=50,WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt*0.5,WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt*0.3))<0,0,IIf((WaterBalance_NatVeg_Trsk_" & Prev_DateString & ".D_r_i_end)-(WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt)+(IIf(WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt>=50,WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt*0.5,WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt*0.3))>WaterAllocation_NatVeg_Trsk_" & DateString & "!TAW,WaterAllocation_NatVeg_Trsk_" & DateString & "!TAW,(WaterBalance_NatVeg_Trsk_" & Prev_DateString & ".D_r_i_end)-(WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt)+(IIf(WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt>=50,WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt*0.5,WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt*0.3))))))/(WaterAllocation_NatVeg_Trsk_" & DateString & "!TAW-WaterAllocation_NatVeg_Trsk_" & DateString & "!RAW))<0,0,((WaterAllocation_NatVeg_Trsk_" & DateString & "!TAW-(IIf((WaterBalance_NatVeg_Trsk_" & Prev_DateString & ".D_r_i_end)-(WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt)+(IIf(WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt>=50,WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt*0.5,WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt*0.3))<0,0,IIf((WaterBalance_NatVeg_Trsk_" & Prev_DateString & ".D_r_i_end)-(WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt)+(IIf(WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt>=50,WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt*0.5,WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt*0.3))>WaterAllocation_NatVeg_Trsk_" & DateString & "!TAW,WaterAllocation_NatVeg_Trsk_" & DateString & "!TAW,(WaterBalance_NatVeg_Trsk_" & Prev_DateString & ".D_r_i_end)-(WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt)+(IIf(WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt>=50,WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt*0.5,WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt*0.3))))))/(WaterAllocation_NatVeg_Trsk_" & DateString & "!TAW-WaterAllocation_NatVeg_Trsk_" & DateString & "!RAW)))))<0.5,0.5,(IIf((IIf((WaterBalance_NatVeg_Trsk_" & Prev_DateString & ".D_r_i_end)-(WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt)+(IIf(WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt>=50,WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt*0.5,WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt*0.3))<0,0,IIf((WaterBalance_NatVeg_Trsk_" & Prev_DateString & ".D_r_i_end)-(WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt)+(IIf(WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt>=50,WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt*0.5,WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt*0.3))>WaterAllocation_NatVeg_Trsk_" & DateString & "!TAW,WaterAllocation_NatVeg_Trsk_" & DateString & "!TAW,(WaterBalance_NatVeg_Trsk_" & Prev_DateString & ".D_r_i_end)-(WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt)+(IIf(WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt>=50,WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt*0.5,WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt*0.3)))))<WaterAllocation_NatVeg_Trsk_" & DateString & "!RAW,1,IIf(((WaterAllocation_NatVeg_Trsk_" & DateString & "!TAW-(IIf((WaterBalance_NatVeg_Trsk_" & Prev_DateString & ".D_r_i_end)-(WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt)+(IIf(WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt>=50,WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt*0.5,WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt*0.3))<0,0,IIf((WaterBalance_NatVeg_Trsk_" & Prev_DateString & ".D_r_i_end)-(WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt)+(IIf(WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt>=50,WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt*0.5,WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt*0.3))>WaterAllocation_NatVeg_Trsk_" & DateString & "!TAW,WaterAllocation_NatVeg_Trsk_" & DateString & "!TAW,(WaterBalance_NatVeg_Trsk_" & Prev_DateString & ".D_r_i_end)-(WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt)+(IIf(WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt>=50,WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt*0.5,WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt*0.3))))))/(WaterAllocation_NatVeg_Trsk_" & DateString & "!TAW-WaterAllocation_NatVeg_Trsk_" & DateString & "!RAW))<0,0,((WaterAllocation_NatVeg_Trsk_" & DateString & "!TAW-(IIf((WaterBalance_NatVeg_Trsk_" & Prev_DateString & ".D_r_i_end)-(WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt)+(IIf(WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt>=50,WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt*0.5,WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt*0.3))<0,0,IIf((WaterBalance_NatVeg_Trsk_" & Prev_DateString & ".D_r_i_end)-(WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt)+(IIf(WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt>=50,WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt*0.5,WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt*0.3))>WaterAllocation_NatVeg_Trsk_" & DateString & "!TAW,WaterAllocation_NatVeg_Trsk_" & DateString & "!TAW,(WaterBalance_NatVeg_Trsk_" & Prev_DateString & ".D_r_i_end)-(WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt)+(IIf(WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt>=50,WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt*0.5,WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt*0.3))))))/(WaterAllocation_NatVeg_Trsk_" & DateString & "!TAW-WaterAllocation_NatVeg_Trsk_" & DateString & "!RAW)))))) AS K_s, "
                'QueryString += "WaterAllocation_NatVeg_Trsk_" & DateString & "!ETc*(IIf((IIf((IIf((WaterBalance_NatVeg_Trsk_" & Prev_DateString & ".D_r_i_end)-(WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt)+(IIf(WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt>=50,WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt*0.5,WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt*0.3))<0,0,IIf((WaterBalance_NatVeg_Trsk_" & Prev_DateString & ".D_r_i_end)-(WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt)+(IIf(WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt>=50,WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt*0.5,WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt*0.3))>WaterAllocation_NatVeg_Trsk_" & DateString & "!TAW,WaterAllocation_NatVeg_Trsk_" & DateString & "!TAW,(WaterBalance_NatVeg_Trsk_" & Prev_DateString & ".D_r_i_end)-(WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt)+(IIf(WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt>=50,WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt*0.5,WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt*0.3)))))<WaterAllocation_NatVeg_Trsk_" & DateString & "!RAW,1,IIf(((WaterAllocation_NatVeg_Trsk_" & DateString & "!TAW-(IIf((WaterBalance_NatVeg_Trsk_" & Prev_DateString & ".D_r_i_end)-(WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt)+(IIf(WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt>=50,WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt*0.5,WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt*0.3))<0,0,IIf((WaterBalance_NatVeg_Trsk_" & Prev_DateString & ".D_r_i_end)-(WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt)+(IIf(WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt>=50,WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt*0.5,WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt*0.3))>WaterAllocation_NatVeg_Trsk_" & DateString & "!TAW,WaterAllocation_NatVeg_Trsk_" & DateString & "!TAW,(WaterBalance_NatVeg_Trsk_" & Prev_DateString & ".D_r_i_end)-(WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt)+(IIf(WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt>=50,WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt*0.5,WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt*0.3))))))/(WaterAllocation_NatVeg_Trsk_" & DateString & "!TAW-WaterAllocation_NatVeg_Trsk_" & DateString & "!RAW))<0,0,((WaterAllocation_NatVeg_Trsk_" & DateString & "!TAW-(IIf((WaterBalance_NatVeg_Trsk_" & Prev_DateString & ".D_r_i_end)-(WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt)+(IIf(WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt>=50,WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt*0.5,WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt*0.3))<0,0,IIf((WaterBalance_NatVeg_Trsk_" & Prev_DateString & ".D_r_i_end)-(WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt)+(IIf(WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt>=50,WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt*0.5,WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt*0.3))>WaterAllocation_NatVeg_Trsk_" & DateString & "!TAW,WaterAllocation_NatVeg_Trsk_" & DateString & "!TAW,(WaterBalance_NatVeg_Trsk_" & Prev_DateString & ".D_r_i_end)-(WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt)+(IIf(WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt>=50,WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt*0.5,WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt*0.3))))))/(WaterAllocation_NatVeg_Trsk_" & DateString & "!TAW-WaterAllocation_NatVeg_Trsk_" & DateString & "!RAW)))))<0.5,0.5,(IIf((IIf((WaterBalance_NatVeg_Trsk_" & Prev_DateString & ".D_r_i_end)-(WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt)+(IIf(WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt>=50,WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt*0.5,WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt*0.3))<0,0,IIf((WaterBalance_NatVeg_Trsk_" & Prev_DateString & ".D_r_i_end)-(WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt)+(IIf(WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt>=50,WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt*0.5,WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt*0.3))>WaterAllocation_NatVeg_Trsk_" & DateString & "!TAW,WaterAllocation_NatVeg_Trsk_" & DateString & "!TAW,(WaterBalance_NatVeg_Trsk_" & Prev_DateString & ".D_r_i_end)-(WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt)+(IIf(WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt>=50,WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt*0.5,WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt*0.3)))))<WaterAllocation_NatVeg_Trsk_" & DateString & "!RAW,1,IIf(((WaterAllocation_NatVeg_Trsk_" & DateString & "!TAW-(IIf((WaterBalance_NatVeg_Trsk_" & Prev_DateString & ".D_r_i_end)-(WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt)+(IIf(WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt>=50,WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt*0.5,WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt*0.3))<0,0,IIf((WaterBalance_NatVeg_Trsk_" & Prev_DateString & ".D_r_i_end)-(WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt)+(IIf(WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt>=50,WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt*0.5,WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt*0.3))>WaterAllocation_NatVeg_Trsk_" & DateString & "!TAW,WaterAllocation_NatVeg_Trsk_" & DateString & "!TAW,(WaterBalance_NatVeg_Trsk_" & Prev_DateString & ".D_r_i_end)-(WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt)+(IIf(WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt>=50,WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt*0.5,WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt*0.3))))))/(WaterAllocation_NatVeg_Trsk_" & DateString & "!TAW-WaterAllocation_NatVeg_Trsk_" & DateString & "!RAW))<0,0,((WaterAllocation_NatVeg_Trsk_" & DateString & "!TAW-(IIf((WaterBalance_NatVeg_Trsk_" & Prev_DateString & ".D_r_i_end)-(WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt)+(IIf(WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt>=50,WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt*0.5,WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt*0.3))<0,0,IIf((WaterBalance_NatVeg_Trsk_" & Prev_DateString & ".D_r_i_end)-(WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt)+(IIf(WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt>=50,WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt*0.5,WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt*0.3))>WaterAllocation_NatVeg_Trsk_" & DateString & "!TAW,WaterAllocation_NatVeg_Trsk_" & DateString & "!TAW,(WaterBalance_NatVeg_Trsk_" & Prev_DateString & ".D_r_i_end)-(WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt)+(IIf(WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt>=50,WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt*0.5,WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt*0.3))))))/(WaterAllocation_NatVeg_Trsk_" & DateString & "!TAW-WaterAllocation_NatVeg_Trsk_" & DateString & "!RAW))))))) AS ET_adj, "
                'QueryString += "IIf((IIf((WaterBalance_NatVeg_Trsk_" & Prev_DateString & ".D_r_i_end)-(WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt)+(IIf(WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt>=50,WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt*0.5,WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt*0.3))<0,0,IIf((WaterBalance_NatVeg_Trsk_" & Prev_DateString & ".D_r_i_end)-(WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt)+(IIf(WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt>=50,WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt*0.5,WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt*0.3))>WaterAllocation_NatVeg_Trsk_" & DateString & "!TAW,WaterAllocation_NatVeg_Trsk_" & DateString & "!TAW,(WaterBalance_NatVeg_Trsk_" & Prev_DateString & ".D_r_i_end)-(WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt)+(IIf(WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt>=50,WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt*0.5,WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt*0.3)))))+(WaterAllocation_NatVeg_Trsk_" & DateString & "!ETc*(IIf((IIf((IIf((WaterBalance_NatVeg_Trsk_" & Prev_DateString & ".D_r_i_end)-(WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt)+(IIf(WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt>=50,WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt*0.5,WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt*0.3))<0,0,IIf((WaterBalance_NatVeg_Trsk_" & Prev_DateString & ".D_r_i_end)-(WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt)+(IIf(WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt>=50,WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt*0.5,WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt*0.3))>WaterAllocation_NatVeg_Trsk_" & DateString & "!TAW,WaterAllocation_NatVeg_Trsk_" & DateString & "!TAW,(WaterBalance_NatVeg_Trsk_" & Prev_DateString & ".D_r_i_end)-(WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt)+(IIf(WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt>=50,WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt*0.5,WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt*0.3)))))<WaterAllocation_NatVeg_Trsk_" & DateString & "!RAW,1,IIf(((WaterAllocation_NatVeg_Trsk_" & DateString & "!TAW-(IIf((WaterBalance_NatVeg_Trsk_" & Prev_DateString & ".D_r_i_end)-(WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt)+(IIf(WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt>=50,WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt*0.5,WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt*0.3))<0,0,IIf((WaterBalance_NatVeg_Trsk_" & Prev_DateString & ".D_r_i_end)-(WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt)+(IIf(WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt>=50,WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt*0.5,WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt*0.3))>WaterAllocation_NatVeg_Trsk_" & DateString & "!TAW,WaterAllocation_NatVeg_Trsk_" & DateString & "!TAW,(WaterBalance_NatVeg_Trsk_" & Prev_DateString & ".D_r_i_end)-(WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt)+(IIf(WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt>=50,WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt*0.5,WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt*0.3))))))/(WaterAllocation_NatVeg_Trsk_" & DateString & "!TAW-WaterAllocation_NatVeg_Trsk_" & DateString & "!RAW))<0,0,((WaterAllocation_NatVeg_Trsk_" & DateString & "!TAW-(IIf((WaterBalance_NatVeg_Trsk_" & Prev_DateString & ".D_r_i_end)-(WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt)+(IIf(WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt>=50,WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt*0.5,WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt*0.3))<0,0,IIf((WaterBalance_NatVeg_Trsk_" & Prev_DateString & ".D_r_i_end)-(WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt)+(IIf(WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt>=50,WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt*0.5,WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt*0.3))>WaterAllocation_NatVeg_Trsk_" & DateString & "!TAW,WaterAllocation_NatVeg_Trsk_" & DateString & "!TAW,(WaterBalance_NatVeg_Trsk_" & Prev_DateString & ".D_r_i_end)-(WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt)+(IIf(WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt>=50,WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt*0.5,WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt*0.3))))))/(WaterAllocation_NatVeg_Trsk_" & DateString & "!TAW-WaterAllocation_NatVeg_Trsk_" & DateString & "!RAW)))))<0.5,0.5,(IIf((IIf((WaterBalance_NatVeg_Trsk_" & Prev_DateString & ".D_r_i_end)-(WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt)+(IIf(WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt>=50,WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt*0.5,WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt*0.3))<0,0,IIf((WaterBalance_NatVeg_Trsk_" & Prev_DateString & ".D_r_i_end)-(WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt)+(IIf(WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt>=50,WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt*0.5,WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt*0.3))>WaterAllocation_NatVeg_Trsk_" & DateString & "!TAW,WaterAllocation_NatVeg_Trsk_" & DateString & "!TAW,(WaterBalance_NatVeg_Trsk_" & Prev_DateString & ".D_r_i_end)-(WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt)+(IIf(WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt>=50,WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt*0.5,WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt*0.3)))))<WaterAllocation_NatVeg_Trsk_" & DateString & "!RAW,1,IIf(((WaterAllocation_NatVeg_Trsk_" & DateString & "!TAW-(IIf((WaterBalance_NatVeg_Trsk_" & Prev_DateString & ".D_r_i_end)-(WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt)+(IIf(WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt>=50,WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt*0.5,WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt*0.3))<0,0,IIf((WaterBalance_NatVeg_Trsk_" & Prev_DateString & ".D_r_i_end)-(WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt)+(IIf(WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt>=50,WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt*0.5,WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt*0.3))>WaterAllocation_NatVeg_Trsk_" & DateString & "!TAW,WaterAllocation_NatVeg_Trsk_" & DateString & "!TAW,(WaterBalance_NatVeg_Trsk_" & Prev_DateString & ".D_r_i_end)-(WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt)+(IIf(WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt>=50,WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt*0.5,WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt*0.3))))))/(WaterAllocation_NatVeg_Trsk_" & DateString & "!TAW-WaterAllocation_NatVeg_Trsk_" & DateString & "!RAW))<0,0,((WaterAllocation_NatVeg_Trsk_" & DateString & "!TAW-(IIf((WaterBalance_NatVeg_Trsk_" & Prev_DateString & ".D_r_i_end)-(WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt)+(IIf(WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt>=50,WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt*0.5,WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt*0.3))<0,0,IIf((WaterBalance_NatVeg_Trsk_" & Prev_DateString & ".D_r_i_end)-(WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt)+(IIf(WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt>=50,WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt*0.5,WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt*0.3))>WaterAllocation_NatVeg_Trsk_" & DateString & "!TAW,WaterAllocation_NatVeg_Trsk_" & DateString & "!TAW,(WaterBalance_NatVeg_Trsk_" & Prev_DateString & ".D_r_i_end)-(WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt)+(IIf(WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt>=50,WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt*0.5,WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt*0.3))))))/(WaterAllocation_NatVeg_Trsk_" & DateString & "!TAW-WaterAllocation_NatVeg_Trsk_" & DateString & "!RAW))))))))>WaterAllocation_NatVeg_Trsk_" & DateString & "!TAW,WaterAllocation_NatVeg_Trsk_" & DateString & "!TAW,(IIf((WaterBalance_NatVeg_Trsk_" & Prev_DateString & ".D_r_i_end)-(WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt)+(IIf(WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt>=50,WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt*0.5,WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt*0.3))<0,0,IIf((WaterBalance_NatVeg_Trsk_" & Prev_DateString & ".D_r_i_end)-(WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt)+(IIf(WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt>=50,WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt*0.5,WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt*0.3))>WaterAllocation_NatVeg_Trsk_" & DateString & "!TAW,WaterAllocation_NatVeg_Trsk_" & DateString & "!TAW,(WaterBalance_NatVeg_Trsk_" & Prev_DateString & ".D_r_i_end)-(WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt)+(IIf(WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt>=50,WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt*0.5,WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt*0.3)))))+(WaterAllocation_NatVeg_Trsk_" & DateString & "!ETc*(IIf((IIf((IIf((WaterBalance_NatVeg_Trsk_" & Prev_DateString & ".D_r_i_end)-(WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt)+(IIf(WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt>=50,WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt*0.5,WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt*0.3))<0,0,IIf((WaterBalance_NatVeg_Trsk_" & Prev_DateString & ".D_r_i_end)-(WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt)+(IIf(WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt>=50,WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt*0.5,WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt*0.3))>WaterAllocation_NatVeg_Trsk_" & DateString & "!TAW,WaterAllocation_NatVeg_Trsk_" & DateString & "!TAW,(WaterBalance_NatVeg_Trsk_" & Prev_DateString & ".D_r_i_end)-(WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt)+(IIf(WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt>=50,WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt*0.5,WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt*0.3)))))<WaterAllocation_NatVeg_Trsk_" & DateString & "!RAW,1,IIf(((WaterAllocation_NatVeg_Trsk_" & DateString & "!TAW-(IIf((WaterBalance_NatVeg_Trsk_" & Prev_DateString & ".D_r_i_end)-(WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt)+(IIf(WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt>=50,WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt*0.5,WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt*0.3))<0,0,IIf((WaterBalance_NatVeg_Trsk_" & Prev_DateString & ".D_r_i_end)-(WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt)+(IIf(WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt>=50,WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt*0.5,WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt*0.3))>WaterAllocation_NatVeg_Trsk_" & DateString & "!TAW,WaterAllocation_NatVeg_Trsk_" & DateString & "!TAW,(WaterBalance_NatVeg_Trsk_" & Prev_DateString & ".D_r_i_end)-(WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt)+(IIf(WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt>=50,WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt*0.5,WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt*0.3))))))/(WaterAllocation_NatVeg_Trsk_" & DateString & "!TAW-WaterAllocation_NatVeg_Trsk_" & DateString & "!RAW))<0,0,((WaterAllocation_NatVeg_Trsk_" & DateString & "!TAW-(IIf((WaterBalance_NatVeg_Trsk_" & Prev_DateString & ".D_r_i_end)-(WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt)+(IIf(WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt>=50,WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt*0.5,WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt*0.3))<0,0,IIf((WaterBalance_NatVeg_Trsk_" & Prev_DateString & ".D_r_i_end)-(WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt)+(IIf(WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt>=50,WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt*0.5,WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt*0.3))>WaterAllocation_NatVeg_Trsk_" & DateString & "!TAW,WaterAllocation_NatVeg_Trsk_" & DateString & "!TAW,(WaterBalance_NatVeg_Trsk_" & Prev_DateString & ".D_r_i_end)-(WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt)+(IIf(WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt>=50,WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt*0.5,WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt*0.3))))))/(WaterAllocation_NatVeg_Trsk_" & DateString & "!TAW-WaterAllocation_NatVeg_Trsk_" & DateString & "!RAW)))))<0.5,0.5,(IIf((IIf((WaterBalance_NatVeg_Trsk_" & Prev_DateString & ".D_r_i_end)-(WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt)+(IIf(WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt>=50,WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt*0.5,WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt*0.3))<0,0,IIf((WaterBalance_NatVeg_Trsk_" & Prev_DateString & ".D_r_i_end)-(WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt)+(IIf(WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt>=50,WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt*0.5,WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt*0.3))>WaterAllocation_NatVeg_Trsk_" & DateString & "!TAW,WaterAllocation_NatVeg_Trsk_" & DateString & "!TAW,(WaterBalance_NatVeg_Trsk_" & Prev_DateString & ".D_r_i_end)-(WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt)+(IIf(WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt>=50,WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt*0.5,WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt*0.3)))))<WaterAllocation_NatVeg_Trsk_" & DateString & "!RAW,1,IIf(((WaterAllocation_NatVeg_Trsk_" & DateString & "!TAW-(IIf((WaterBalance_NatVeg_Trsk_" & Prev_DateString & ".D_r_i_end)-(WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt)+(IIf(WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt>=50,WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt*0.5,WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt*0.3))<0,0,IIf((WaterBalance_NatVeg_Trsk_" & Prev_DateString & ".D_r_i_end)-(WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt)+(IIf(WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt>=50,WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt*0.5,WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt*0.3))>WaterAllocation_NatVeg_Trsk_" & DateString & "!TAW,WaterAllocation_NatVeg_Trsk_" & DateString & "!TAW,(WaterBalance_NatVeg_Trsk_" & Prev_DateString & ".D_r_i_end)-(WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt)+(IIf(WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt>=50,WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt*0.5,WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt*0.3))))))/(WaterAllocation_NatVeg_Trsk_" & DateString & "!TAW-WaterAllocation_NatVeg_Trsk_" & DateString & "!RAW))<0,0,((WaterAllocation_NatVeg_Trsk_" & DateString & "!TAW-(IIf((WaterBalance_NatVeg_Trsk_" & Prev_DateString & ".D_r_i_end)-(WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt)+(IIf(WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt>=50,WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt*0.5,WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt*0.3))<0,0,IIf((WaterBalance_NatVeg_Trsk_" & Prev_DateString & ".D_r_i_end)-(WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt)+(IIf(WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt>=50,WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt*0.5,WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt*0.3))>WaterAllocation_NatVeg_Trsk_" & DateString & "!TAW,WaterAllocation_NatVeg_Trsk_" & DateString & "!TAW,(WaterBalance_NatVeg_Trsk_" & Prev_DateString & ".D_r_i_end)-(WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt)+(IIf(WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt>=50,WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt*0.5,WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt*0.3))))))/(WaterAllocation_NatVeg_Trsk_" & DateString & "!TAW-WaterAllocation_NatVeg_Trsk_" & DateString & "!RAW))))))))) AS D_r_i_end,"
                'QueryString += "IIf((WaterBalance_NatVeg_Trsk_" & Prev_DateString & ".D_r_i_end)-(WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt)+(IIf(WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt>=50,WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt*0.5,WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt*0.3))<0,Abs((WaterBalance_NatVeg_Trsk_" & Prev_DateString & ".D_r_i_end)-(WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt)+(IIf(WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt>=50,WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt*0.5,WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt*0.3))),0) AS DP INTO WaterBalance_NatVeg_Trsk_" & DateString & " FROM WaterBalance_NatVeg_Trsk_" & Prev_DateString & " INNER JOIN WaterAllocation_NatVeg_Trsk_" & DateString & " ON WaterBalance_NatVeg_Trsk_" & Prev_DateString & ".Poly_ID=WaterAllocation_NatVeg_Trsk_" & DateString & ".Poly_ID;"

                QueryString = "SELECT WaterAllocation_NatVeg_Trsk_" & DateString & ".Poly_ID, WaterAllocation_NatVeg_Trsk_" & DateString & ".RAW, WaterBalance_NatVeg_Trsk_" & Prev_DateString & ".D_r_i_end AS D_r_i_prev, WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt AS Inflow, IIf(WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt>=50,WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt*0.5,WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt*0.3) AS Outflow, IIf((WaterBalance_NatVeg_Trsk_" & Prev_DateString & ".D_r_i_end)-(WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt)+(IIf(WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt>=50,WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt*0.5,WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt*0.3))<0,0,IIf((WaterBalance_NatVeg_Trsk_" & Prev_DateString & ".D_r_i_end)-(WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt)+(IIf(WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt>=50,WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt*0.5,WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt*0.3))>WaterAllocation_NatVeg_Trsk_" & DateString & "!TAW,WaterAllocation_NatVeg_Trsk_" & DateString & "!TAW,(WaterBalance_NatVeg_Trsk_" & Prev_DateString & ".D_r_i_end)-(WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt)+(IIf(WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt>=50,WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt*0.5,WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt*0.3)))) AS D_r_i_strt, WaterAllocation_NatVeg_Trsk_" & DateString & ".ETc, IIf((IIf((WaterBalance_NatVeg_Trsk_" & Prev_DateString & ".D_r_i_end)-(WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt)+(IIf(WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt>=50,WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt*0.5,WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt*0.3))<0,0,IIf((WaterBalance_NatVeg_Trsk_" & Prev_DateString & ".D_r_i_end)-(WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt)+(IIf(WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt>=50,WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt*0.5,WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt*0.3))>WaterAllocation_NatVeg_Trsk_" & DateString & "!TAW,WaterAllocation_NatVeg_Trsk_" & DateString & "!TAW,(WaterBalance_NatVeg_Trsk_" & Prev_DateString & ".D_r_i_end)-(WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt)+(IIf(WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt>=50,WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt*0.5,WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt*0.3)))))<WaterAllocation_NatVeg_Trsk_" & DateString & "!RAW,1,IIf(((WaterAllocation_NatVeg_Trsk_" & DateString & "!TAW-(IIf((WaterBalance_NatVeg_Trsk_" & Prev_DateString & ".D_r_i_end)-(WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt)+(IIf(WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt>=50,WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt*0.5,WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt*0.3))<0,0,IIf((WaterBalance_NatVeg_Trsk_" & Prev_DateString & ".D_r_i_end)-(WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt)+(IIf(WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt>=50,WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt*0.5,WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt*0.3))>WaterAllocation_NatVeg_Trsk_" & DateString & "!TAW,WaterAllocation_NatVeg_Trsk_" & DateString & "!TAW,(WaterBalance_NatVeg_Trsk_" & Prev_DateString & ".D_r_i_end)-(WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt)+(IIf(WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt>=50,WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt*0.5,WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt*0.3))))))/(WaterAllocation_NatVeg_Trsk_" & DateString & "!TAW-WaterAllocation_NatVeg_Trsk_" & DateString & "!RAW))<0,0,((WaterAllocation_NatVeg_Trsk_" & DateString & "!TAW-(IIf((WaterBalance_NatVeg_Trsk_" & Prev_DateString & ".D_r_i_end)-(WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt)+(IIf(WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt>=50,WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt*0.5,WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt*0.3))<0,0,IIf((WaterBalance_NatVeg_Trsk_" & Prev_DateString & ".D_r_i_end)-(WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt)+(IIf(WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt>=50,WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt*0.5,WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt*0.3))>WaterAllocation_NatVeg_Trsk_" & DateString & "!TAW,WaterAllocation_NatVeg_Trsk_" & DateString & "!TAW,(WaterBalance_NatVeg_Trsk_" & Prev_DateString & ".D_r_i_end)-(WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt)+(IIf(WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt>=50,WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt*0.5,WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt*0.3))))))/(WaterAllocation_NatVeg_Trsk_" & DateString & "!TAW-WaterAllocation_NatVeg_Trsk_" & DateString & "!RAW)))) AS K_s, WaterAllocation_NatVeg_Trsk_" & DateString & "!ETc*(IIf((IIf((WaterBalance_NatVeg_Trsk_" & Prev_DateString & ".D_r_i_end)-(WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt)+(IIf(WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt>=50,WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt*0.5,WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt*0.3))<0,0,IIf((WaterBalance_NatVeg_Trsk_" & Prev_DateString & ".D_r_i_end)-(WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt)+(IIf(WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt>=50,WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt*0.5,WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt*0.3))>WaterAllocation_NatVeg_Trsk_" & DateString & "!TAW,WaterAllocation_NatVeg_Trsk_" & DateString & "!TAW,(WaterBalance_NatVeg_Trsk_" & Prev_DateString & ".D_r_i_end)-(WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt)+(IIf(WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt>=50,WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt*0.5,WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt*0.3)))))<WaterAllocation_NatVeg_Trsk_" & DateString & "!RAW,1,IIf(((WaterAllocation_NatVeg_Trsk_" & DateString & "!TAW-(IIf((WaterBalance_NatVeg_Trsk_" & Prev_DateString & ".D_r_i_end)-(WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt)+(IIf(WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt>=50,WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt*0.5,WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt*0.3))<0,0,IIf((WaterBalance_NatVeg_Trsk_" & Prev_DateString & ".D_r_i_end)-(WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt)+(IIf(WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt>=50,WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt*0.5,WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt*0.3))>WaterAllocation_NatVeg_Trsk_" & DateString & "!TAW,WaterAllocation_NatVeg_Trsk_" & DateString & "!TAW,(WaterBalance_NatVeg_Trsk_" & Prev_DateString & ".D_r_i_end)-(WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt)+(IIf(WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt>=50,WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt*0.5,WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt*0.3))))))/(WaterAllocation_NatVeg_Trsk_" & DateString & "!TAW-WaterAllocation_NatVeg_Trsk_" & DateString & "!RAW))<0,0,((WaterAllocation_NatVeg_Trsk_" & DateString & "!TAW-(IIf((WaterBalance_NatVeg_Trsk_" & Prev_DateString & ".D_r_i_end)-(WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt)+(IIf(WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt>=50,WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt*0.5,WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt*0.3))<0,0,IIf((WaterBalance_NatVeg_Trsk_" & Prev_DateString & ".D_r_i_end)-(WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt)+(IIf(WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt>=50,WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt*0.5,WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt*0.3))>WaterAllocation_NatVeg_Trsk_" & DateString & "!TAW,WaterAllocation_NatVeg_Trsk_" & DateString & "!TAW,(WaterBalance_NatVeg_Trsk_" & Prev_DateString & ".D_r_i_end)-(WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt)+(IIf(WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt>=50,WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt*0.5,WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt*0.3))))))/(WaterAllocation_NatVeg_Trsk_" & DateString & "!TAW-WaterAllocation_NatVeg_Trsk_" & DateString & "!RAW))))) AS ET_adj, "
                QueryString += "IIf((IIf((WaterBalance_NatVeg_Trsk_" & Prev_DateString & ".D_r_i_end)-(WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt)+(IIf(WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt>=50,WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt*0.5,WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt*0.3))<0,0,IIf((WaterBalance_NatVeg_Trsk_" & Prev_DateString & ".D_r_i_end)-(WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt)+(IIf(WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt>=50,WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt*0.5,WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt*0.3))>WaterAllocation_NatVeg_Trsk_" & DateString & "!TAW,WaterAllocation_NatVeg_Trsk_" & DateString & "!TAW,(WaterBalance_NatVeg_Trsk_" & Prev_DateString & ".D_r_i_end)-(WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt)+(IIf(WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt>=50,WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt*0.5,WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt*0.3)))))+( WaterAllocation_NatVeg_Trsk_" & DateString & "!ETc*(IIf((IIf((WaterBalance_NatVeg_Trsk_" & Prev_DateString & ".D_r_i_end)-(WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt)+(IIf(WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt>=50,WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt*0.5,WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt*0.3))<0,0,IIf((WaterBalance_NatVeg_Trsk_" & Prev_DateString & ".D_r_i_end)-(WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt)+(IIf(WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt>=50,WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt*0.5,WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt*0.3))>WaterAllocation_NatVeg_Trsk_" & DateString & "!TAW,WaterAllocation_NatVeg_Trsk_" & DateString & "!TAW,(WaterBalance_NatVeg_Trsk_" & Prev_DateString & ".D_r_i_end)-(WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt)+(IIf(WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt>=50,WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt*0.5,WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt*0.3)))))<WaterAllocation_NatVeg_Trsk_" & DateString & "!RAW,1,IIf(((WaterAllocation_NatVeg_Trsk_" & DateString & "!TAW-(IIf((WaterBalance_NatVeg_Trsk_" & Prev_DateString & ".D_r_i_end)-(WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt)+(IIf(WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt>=50,WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt*0.5,WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt*0.3))<0,0,IIf((WaterBalance_NatVeg_Trsk_" & Prev_DateString & ".D_r_i_end)-(WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt)+(IIf(WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt>=50,WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt*0.5,WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt*0.3))>WaterAllocation_NatVeg_Trsk_" & DateString & "!TAW,WaterAllocation_NatVeg_Trsk_" & DateString & "!TAW,(WaterBalance_NatVeg_Trsk_" & Prev_DateString & ".D_r_i_end)-(WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt)+(IIf(WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt>=50,WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt*0.5,WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt*0.3))))))/(WaterAllocation_NatVeg_Trsk_" & DateString & "!TAW-WaterAllocation_NatVeg_Trsk_" & DateString & "!RAW))<0,0,((WaterAllocation_NatVeg_Trsk_" & DateString & "!TAW-(IIf((WaterBalance_NatVeg_Trsk_" & Prev_DateString & ".D_r_i_end)-(WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt)+(IIf(WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt>=50,WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt*0.5,WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt*0.3))<0,0,IIf((WaterBalance_NatVeg_Trsk_" & Prev_DateString & ".D_r_i_end)-(WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt)+(IIf(WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt>=50,WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt*0.5,WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt*0.3))>WaterAllocation_NatVeg_Trsk_" & DateString & "!TAW,WaterAllocation_NatVeg_Trsk_" & DateString & "!TAW,(WaterBalance_NatVeg_Trsk_" & Prev_DateString & ".D_r_i_end)-(WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt)+(IIf(WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt>=50,WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt*0.5,WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt*0.3))))))/(WaterAllocation_NatVeg_Trsk_" & DateString & "!TAW-WaterAllocation_NatVeg_Trsk_" & DateString & "!RAW))))))>WaterAllocation_NatVeg_Trsk_" & DateString & "!TAW,WaterAllocation_NatVeg_Trsk_" & DateString & "!TAW,(IIf((WaterBalance_NatVeg_Trsk_" & Prev_DateString & ".D_r_i_end)-(WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt)+(IIf(WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt>=50,WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt*0.5,WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt*0.3))<0,0,IIf((WaterBalance_NatVeg_Trsk_" & Prev_DateString & ".D_r_i_end)-(WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt)+(IIf(WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt>=50,WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt*0.5,WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt*0.3))>WaterAllocation_NatVeg_Trsk_" & DateString & "!TAW,WaterAllocation_NatVeg_Trsk_" & DateString & "!TAW,(WaterBalance_NatVeg_Trsk_" & Prev_DateString & ".D_r_i_end)-(WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt)+(IIf(WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt>=50,WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt*0.5,WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt*0.3)))))+( WaterAllocation_NatVeg_Trsk_" & DateString & "!ETc*(IIf((IIf((WaterBalance_NatVeg_Trsk_" & Prev_DateString & ".D_r_i_end)-(WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt)+(IIf(WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt>=50,WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt*0.5,WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt*0.3))<0,0,IIf((WaterBalance_NatVeg_Trsk_" & Prev_DateString & ".D_r_i_end)-(WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt)+(IIf(WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt>=50,WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt*0.5,WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt*0.3))>WaterAllocation_NatVeg_Trsk_" & DateString & "!TAW,WaterAllocation_NatVeg_Trsk_" & DateString & "!TAW,(WaterBalance_NatVeg_Trsk_" & Prev_DateString & ".D_r_i_end)-(WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt)+(IIf(WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt>=50,WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt*0.5,WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt*0.3)))))<WaterAllocation_NatVeg_Trsk_" & DateString & "!RAW,1,IIf(((WaterAllocation_NatVeg_Trsk_" & DateString & "!TAW-(IIf((WaterBalance_NatVeg_Trsk_" & Prev_DateString & ".D_r_i_end)-(WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt)+(IIf(WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt>=50,WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt*0.5,WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt*0.3))<0,0,IIf((WaterBalance_NatVeg_Trsk_" & Prev_DateString & ".D_r_i_end)-(WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt)+(IIf(WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt>=50,WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt*0.5,WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt*0.3))>WaterAllocation_NatVeg_Trsk_" & DateString & "!TAW,WaterAllocation_NatVeg_Trsk_" & DateString & "!TAW,(WaterBalance_NatVeg_Trsk_" & Prev_DateString & ".D_r_i_end)-(WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt)+(IIf(WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt>=50,WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt*0.5,WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt*0.3))))))/(WaterAllocation_NatVeg_Trsk_" & DateString & "!TAW-WaterAllocation_NatVeg_Trsk_" & DateString & "!RAW))<0,0,((WaterAllocation_NatVeg_Trsk_" & DateString & "!TAW-(IIf((WaterBalance_NatVeg_Trsk_" & Prev_DateString & ".D_r_i_end)-(WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt)+(IIf(WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt>=50,WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt*0.5,WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt*0.3))<0,0,IIf((WaterBalance_NatVeg_Trsk_" & Prev_DateString & ".D_r_i_end)-(WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt)+(IIf(WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt>=50,WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt*0.5,WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt*0.3))>WaterAllocation_NatVeg_Trsk_" & DateString & "!TAW,WaterAllocation_NatVeg_Trsk_" & DateString & "!TAW,(WaterBalance_NatVeg_Trsk_" & Prev_DateString & ".D_r_i_end)-(WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt)+(IIf(WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt>=50,WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt*0.5,WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt*0.3))))))/(WaterAllocation_NatVeg_Trsk_" & DateString & "!TAW-WaterAllocation_NatVeg_Trsk_" & DateString & "!RAW))))))) AS D_r_i_end, IIf((WaterBalance_NatVeg_Trsk_" & Prev_DateString & ".D_r_i_end)-(WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt)+(IIf(WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt>=50,WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt*0.5,WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt*0.3))<0,Abs((WaterBalance_NatVeg_Trsk_" & Prev_DateString & ".D_r_i_end)-(WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt)+(IIf(WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt>=50,WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt*0.5,WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt*0.3))),0) AS DP INTO WaterBalance_NatVeg_Trsk_" & DateString & " "
                QueryString += "FROM WaterBalance_NatVeg_Trsk_" & Prev_DateString & " INNER JOIN WaterAllocation_NatVeg_Trsk_" & DateString & " ON WaterBalance_NatVeg_Trsk_" & Prev_DateString & ".Poly_ID=WaterAllocation_NatVeg_Trsk_" & DateString & ".Poly_ID;"
            End If
        End If

        DataSorter.ExecuteQuery(QueryString)

    End Function
    Public Function Fill_RCH_ET_ROOT_Columns(ByVal CurrentDate As Date, ByVal DataSorter As MyDBUtils)
        Dim QueryString As String
        Dim DateString As String

        DateString = QueryDateString(CurrentDate)

        'The original query can be found in C:\Eric\Arkansas River Valley\Entire_Basin\GIS\RegionalModelOutput.mdb\ClearRCH_ET_ROOT_Data
        QueryString = "UPDATE Combined SET Combined.RCH = 0, Combined.MAX_ET = 0, Combined.ROOT_DEPTH = 0;"

        'Perform an update Query that zeros out the three columns that are going to be updated with
        'the current time step's information
        DataSorter.ExecuteQuery(QueryString)

        'The original query can be found in C:\Eric\Arkansas River Valley\Entire_Basin\GIS\RegionalModelOutput.mdb\UpdateNew_RCH_ET_ROOT_Values
        QueryString = "UPDATE (Combined INNER JOIN WaterBalance" & DateString & " ON Combined.FIELD_NO = WaterBalance" & DateString & ".Field_No) INNER JOIN WaterAllocation" & DateString & " ON Combined.FIELD_NO = WaterAllocation" & DateString & ".Field_No SET Combined.RCH = [WaterBalance" & DateString & "]![DP_final]/1000, Combined.MAX_ET = [WaterBalance" & DateString & "]![ET_adj]/1000, Combined.ROOT_DEPTH = [WaterAllocation" & DateString & "]![Zr];"

        DataSorter.ExecuteQuery(QueryString)

    End Function
    Public Function Fill_RCH_ET_ROOT_Columns_NatAreas(ByVal CurrentDate As Date, ByVal DataSorter As MyDBUtils)
        Dim QueryString As String
        Dim DateString As String

        DateString = QueryDateString(CurrentDate)
        QueryString = "UPDATE NatVeg_US SET NatVeg_US.RCH = 0, NatVeg_US.MAX_ET = 0, NatVeg_US.ROOT_DEPTH = 0;"
        'Perform an update Query that zeros out the three columns that are going to be updated with
        'the current time step's information.  This needs to be done for both the grassland areas and 
        'also the tamarisk areas
        DataSorter.ExecuteQuery(QueryString)
        QueryString = "UPDATE Tamarisk_US SET Tamarisk_US.RCH = 0, Tamarisk_US.MAX_ET = 0, Tamarisk_US.ROOT_DEPTH = 0;"
        DataSorter.ExecuteQuery(QueryString)

        QueryString = "UPDATE NatVeg_US INNER JOIN WaterBalance_NatVeg_Trsk_" & DateString & " ON NatVeg_US.Poly_ID = WaterBalance_NatVeg_Trsk_" & DateString & ".Poly_ID SET NatVeg_US.RCH = [WaterBalance_NatVeg_Trsk_" & DateString & "]![DP]/1000, NatVeg_US.MAX_ET = [WaterBalance_NatVeg_Trsk_" & DateString & "]![ET_adj]/1000, NatVeg_US.ROOT_DEPTH = 1.5;"
        DataSorter.ExecuteQuery(QueryString)

        QueryString = "UPDATE Tamarisk_US INNER JOIN WaterBalance_NatVeg_Trsk_" & DateString & " ON Tamarisk_US.Id = WaterBalance_NatVeg_Trsk_" & DateString & ".Poly_ID SET Tamarisk_US.RCH = [WaterBalance_NatVeg_Trsk_" & DateString & "]![DP]/1000, Tamarisk_US.MAX_ET = [WaterBalance_NatVeg_Trsk_" & DateString & "]![ET_adj]/1000, Tamarisk_US.ROOT_DEPTH = 3.6;"
        DataSorter.ExecuteQuery(QueryString)
    End Function
    Public Function QueryDateString(ByVal CurrentDate As Date) As String
        Dim DateString As String
        Dim myDT As New DateTime(Year(CurrentDate), Month(CurrentDate), Microsoft.VisualBasic.Day(CurrentDate))
        DateString = myDT.ToString("MMddyyyy")
        Return DateString
    End Function

    'This function abandoned on 9/26/07.  Determined a better way to do things and carried out in "FinalizeWaterAllocation3"
    Public Function FinalizeWaterAllocation2(ByVal connToAVDb As System.Data.OleDb.OleDbConnection, ByVal connToAVDb_Rep As System.Data.OleDb.OleDbConnection, _
                                             ByRef WaterAllocationSchemeDataset1 As DataSet, ByVal CurrentDate As Date, ByVal CatlinDivertedAmt_m3perWk As Single, _
                                             ByVal FortLyonUSDivertedAmt_m3perWk As Single, ByVal HolbrookDivertedAmt_m3perWk As Single, ByVal OteroDivertedAmt_m3perWk As Single, _
                                             ByVal RockyFordDivertedAmt_m3perWk As Single, ByVal RockyFordHighlineDivertedAmt_m3perWk As Single, ByVal ActiveWells() As Object, _
                                             ByVal QueriedDate() As Object, ByVal MonthlyPumpedAcreFt() As Object)

        Dim TableOfFieldsEligibleForSurfWat As DataTable = WaterAllocationSchemeDataset1.Tables("PrelimSurfWaterAllocScheme")
        Dim TableOfFieldsEligibleForGrndWat As DataTable = WaterAllocationSchemeDataset1.Tables("PrelimPumpedWaterAllocScheme")
        Dim FinalizedWatAllocTable As DataTable = WaterAllocationSchemeDataset1.Tables("FinalWaterAllocScheme")
        Dim FinalWatAllocTableRow As DataRow

        Dim x As Integer
        Dim i As Integer
        Dim j As Integer
        Dim k As Integer
        Dim Flag As Boolean
        Dim num_eligible_flds
        Dim Tract_Area As Single
        Dim Eligible_Area As Single
        Dim Diverted_Amt As Single              'Amt diverted at headgate, needs to be corrected for channel loss
        Dim NonSeeped_Amt As Single             'The amt of water available after correcting the diverted amount for channel loss
        Dim Tract_Amt As Single                 'The amt of water available to the track in question
        Dim ModeledCommandArea_Amt As Single
        'Dim Proportional_Amt As Single          
        Dim CommandArea_WithinArea As Single
        Dim CommandArea_TotalArea As Single
        Dim Canal As String
        Dim QueryString As String
        Dim QueryString2 As String
        Dim QueryString3 As String
        Dim SurfRowsReturned() As DataRow
        Dim PumpedRowsReturned() As DataRow
        Dim ActiveSurfRowsReturned() As DataRow
        Dim Canal_Area() As DataRow
        Dim Areas_Table As DataTable
        Dim Total_Area As Single
        Dim Within_Area As Single
        Dim NonIrrigated_Area As Single
        Dim CatlinBanked_Amt As Single = 0
        Dim FortLyonBanked_Amt As Single = 0
        Dim HolbrookBanked_Amt As Single = 0
        Dim OteroBanked_Amt As Single = 0
        Dim RockyFordBanked_Amt As Single = 0
        Dim HighlineBanked_Amt As Single = 0
        Dim Field1_Amt As Single
        Dim Field2_Amt As Single
        Dim Field3_Amt As Single
        Dim Field4_Amt As Single
        Dim Field5_Amt As Single
        Dim Field6_Amt As Single
        Dim Field7_Amt As Single
        Dim Field8_Amt As Single
        Dim Field9_Amt As Single
        Dim Field10_Amt As Single
        Dim Field1_Area As Single
        Dim Field2_Area As Single
        Dim Field3_Area As Single
        Dim Field4_Area As Single
        Dim Field5_Area As Single
        Dim Field6_Area As Single
        Dim Field7_Area As Single
        Dim Field8_Area As Single
        Dim Field9_Area As Single
        Dim Field10_Area As Single
        Dim Field1_Type As String
        Dim Field2_Type As String
        Dim Field3_Type As String
        Dim Field4_Type As String
        Dim Field5_Type As String
        Dim Field6_Type As String
        Dim Field7_Type As String
        Dim Field8_Type As String
        Dim Field9_Type As String
        Dim Field10_Type As String
        Dim ct As Integer
        Dim Pumped_Amt As Double
        Dim RandomGenerator As Random
        RandomGenerator = New Random
        Dim RanNum1 As Double
        Dim RanNum2 As Double
        Dim lambda As Double = 0.084
        Dim Runoff_Fraction As Double

        'some debug variables that can eventually go
        Dim Tract As Integer
        Dim Ident As Integer

        Dim CurrentTimeStep As Integer
        CurrentTimeStep = CurrentTS(CurrentDate)

        connToAVDb.Open()
        connToAVDb_Rep.Open()

        'QueryString2 = "SELECT CommandAreaAcreage_wNumTracts.* "
        'QueryString2 += "FROM CommandAreaAcreage_wNumTracts;"
        QueryString2 = "SELECT CommandAreaAcreage_wNumTracts.CANAL, CommandAreaAcreage_wNumTracts.TOTAL_AREA, CommandAreaAcreage_wNumTracts.WITHIN_AREA, Sum(Combined.SHAPE_Area) AS SumOfSHAPE_Area "
        QueryString2 = "FROM ((CommandAreaAcreage_wNumTracts INNER JOIN AnotherCanal_Name_Key ON CommandAreaAcreage_wNumTracts.CANAL = AnotherCanal_Name_Key.FullCanalName) INNER JOIN fields_99 ON AnotherCanal_Name_Key.ShortenedCanalName = fields_99.CANAL) INNER JOIN Combined ON fields_99.FIELD_NUMB = Combined.FIELD_NO "
        QueryString2 = "WHERE(((fields_99.TRACT) = 9999)) "
        QueryString2 = "GROUP BY CommandAreaAcreage_wNumTracts.CANAL, CommandAreaAcreage_wNumTracts.TOTAL_AREA, CommandAreaAcreage_wNumTracts.WITHIN_AREA;"
        'A note about this query:  Because a large portion of each command area has "9999" tracts, which
        'presumably do not receive irrigation water, that area needs to be subtracted from within area so that
        'water delivered to command area gets completely spread among active fields.  That is what the above
        'querystring attempts to get at.  To see the design view of this query go to ArkansasBasinData
        'database and open the Query called "CommandAreaAcreage_NonirrigatedAreaExcluded"

        Areas_Table = GetTableFromDB(QueryString2, "CommandAreaAcreage_wNumTracts", connToAVDb)

        QueryString = "Select fields_99.TRACT "
        QueryString += "FROM fields_99 "
        QueryString += "GROUP BY fields_99.TRACT;"

        Dim myCMD_WA As OleDbCommand    '_WA = "Water Allocation"
        Dim myReader_WA As OleDbDataReader
        myCMD_WA = New OleDbCommand(QueryString, connToAVDb)
        myReader_WA = myCMD_WA.ExecuteReader()

        Dim myCMD_PA As OleDbCommand    '_PA = "Pumped Amount"
        Dim myReader_PA As OleDbDataReader

        Dim myCMD_CQ As OleDbCommand    '_CQ = "Canal Query"
        Dim myReader_CQ As OleDbDataReader

        'This outer loop is run through for each tract.  
        While myReader_WA.Read()

            'Parts of this code may seem a bit cryptic, however, in an effort to keep code somewhat efficient it was authored in this way.
            Tract_Area = 0

            'A bit of debug code
            Tract = myReader_WA.GetValue(myReader_WA.GetOrdinal("TRACT"))

            For i = 0 To TableOfFieldsEligibleForSurfWat.Select("TRACT = " & myReader_WA.GetValue(myReader_WA.GetOrdinal("TRACT"))).Length() - 1
                Tract_Area += TableOfFieldsEligibleForSurfWat.Select("TRACT = " & myReader_WA.GetValue(myReader_WA.GetOrdinal("TRACT")))(i)(3)
            Next i
            Canal = TableOfFieldsEligibleForSurfWat.Select("TRACT = " & myReader_WA.GetValue(myReader_WA.GetOrdinal("TRACT")))(0)(7)
            If Canal = "Fort Lyon Canal" Then
                Canal = "Fort Lyon Canal US"
            End If
            Canal_Area = Areas_Table.Select("CANAL = '" & Canal & "'")  'The DataRow Canal_Area contains "Within Area" and "Total Area"
            Total_Area = Canal_Area.GetValue(0)(1)
            Within_Area = Canal_Area.GetValue(0)(2)
            NonIrrigated_Area = Canal_Area.GetValue(0)(3)
            Select Case Canal
                Case "Catlin Canal"
                    Diverted_Amt = CatlinDivertedAmt_m3perWk
                Case "Fort Lyon Canal US"
                    Diverted_Amt = FortLyonUSDivertedAmt_m3perWk
                Case "Holbrook Canal"
                    Diverted_Amt = HolbrookDivertedAmt_m3perWk
                Case "Otero Canal"
                    Diverted_Amt = OteroDivertedAmt_m3perWk
                Case "Rocky Ford Ditch"
                    Diverted_Amt = RockyFordDivertedAmt_m3perWk
                Case "Rocky Ford Highline"
                    Diverted_Amt = RockyFordHighlineDivertedAmt_m3perWk
            End Select
            NonSeeped_Amt = 0.9 * Diverted_Amt                                              'Deduct seepage
            If Canal = "Fort Lyon Canal US" Then
                ModeledCommandArea_Amt = 0.2 * NonSeeped_Amt
            Else
                ModeledCommandArea_Amt = (Within_Area / Total_Area) * NonSeeped_Amt         'Correct for portion of Command area that lies within the modeled region
            End If
            Tract_Amt = (Tract_Area / (Within_Area - NonIrrigated_Area)) * ModeledCommandArea_Amt           'Start here follow the code through and also look at whether or not the fort lyon amount after correcting for within_area is appropriate.  

            QueryString3 = "SELECT Wells_wTractNum.TRACT, Wells_wTractNum.IDENT "
            QueryString3 += "FROM(Wells_wTractNum) "
            QueryString3 += "WHERE (((Wells_wTractNum.TRACT)=" & CStr(Tract) & "));"

            myCMD_PA = New OleDbCommand(QueryString3, connToAVDb_Rep)
            myReader_PA = myCMD_PA.ExecuteReader()

            Pumped_Amt = 0
            While myReader_PA.Read()
                ct = 0
                'a bit of debug code
                Ident = myReader_PA.GetValue(myReader_PA.GetOrdinal("IDENT"))
                While Not (ActiveWells(CurrentTimeStep)(ct) = myReader_PA.GetValue(myReader_PA.GetOrdinal("IDENT")) Or ActiveWells(CurrentTimeStep)(ct) = 0)
                    ct += 1
                End While
                Pumped_Amt = Pumped_Amt + (MonthlyPumpedAcreFt(CurrentTimeStep)(ct) * 1233.48677)
            End While

            Tract_Amt = Tract_Amt + Pumped_Amt
            'For i = 0 To TableOfFieldsEligibleForSurfWat.Select("TRACT = " & myReader_WA.GetValue(myReader_WA.GetOrdinal("TRACT")) & " and RECEIVE_SURF_WAT = " & True).Length() - 1

            Eligible_Area = 0
            Field1_Amt = 0
            Field2_Amt = 0
            Field3_Amt = 0
            Field4_Amt = 0
            Field5_Amt = 0
            Field6_Amt = 0
            Field7_Amt = 0
            Field8_Amt = 0
            Field9_Amt = 0
            Field10_Amt = 0
            Field1_Area = 0
            Field2_Area = 0
            Field3_Area = 0
            Field4_Area = 0
            Field5_Area = 0
            Field6_Area = 0
            Field7_Area = 0
            Field8_Area = 0
            Field9_Area = 0
            Field10_Area = 0
            num_eligible_flds = TableOfFieldsEligibleForSurfWat.Select("TRACT = " & myReader_WA.GetValue(myReader_WA.GetOrdinal("TRACT")) & " and RECEIVE_SURF_WAT = " & True).Length()

            'This is debug code
            If num_eligible_flds > 4 Then
                num_eligible_flds = num_eligible_flds
            End If

            'This code is used below
            For k = 0 To TableOfFieldsEligibleForSurfWat.Select("TRACT = " & myReader_WA.GetValue(myReader_WA.GetOrdinal("TRACT")) & " and RECEIVE_SURF_WAT = " & True).Length() - 1
                Eligible_Area += TableOfFieldsEligibleForSurfWat.Select("TRACT = " & myReader_WA.GetValue(myReader_WA.GetOrdinal("TRACT")) & " and RECEIVE_SURF_WAT = " & True)(k)(3)
            Next k
            Select Case TableOfFieldsEligibleForSurfWat.Select("TRACT = " & myReader_WA.GetValue(myReader_WA.GetOrdinal("TRACT")) & " and RECEIVE_SURF_WAT = " & True).Length()
                Case 0
                    'This code is no good, the water is going to have to end up somewhere!!
                    Select Case Canal
                        Case "Catlin Canal"
                            CatlinBanked_Amt = CatlinBanked_Amt + Tract_Amt
                        Case "Fort Lyon Canal US"
                            FortLyonBanked_Amt = FortLyonBanked_Amt + Tract_Amt
                        Case "Holbrook Canal"
                            HolbrookBanked_Amt = HolbrookBanked_Amt + Tract_Amt
                        Case "Otero Canal"
                            OteroBanked_Amt = OteroBanked_Amt + Tract_Amt
                        Case "Rocky Ford Ditch"
                            RockyFordBanked_Amt = RockyFordBanked_Amt + Tract_Amt
                        Case "Rocky Ford Highline"
                            HighlineBanked_Amt = HighlineBanked_Amt + Tract_Amt
                    End Select
                Case 1
                    Field1_Area = TableOfFieldsEligibleForSurfWat.Select("TRACT = " & myReader_WA.GetValue(myReader_WA.GetOrdinal("TRACT")) & " and RECEIVE_SURF_WAT = " & True)(0)(3)
                    Field1_Type = TableOfFieldsEligibleForSurfWat.Select("TRACT = " & myReader_WA.GetValue(myReader_WA.GetOrdinal("TRACT")) & " and RECEIVE_SURF_WAT = " & True)(0)(8)
                    Field1_Amt = Tract_Amt * (Field1_Area / Eligible_Area)
                    'Check_Depths(1, CurrentDate, Field1_Area, , , , , , , , , , _
                    '             Field1_Type, , , , , , , , , , _
                    '             Field1_Amt, , , , , , , , , )
                Case 2
                    Field1_Area = TableOfFieldsEligibleForSurfWat.Select("TRACT = " & myReader_WA.GetValue(myReader_WA.GetOrdinal("TRACT")) & " and RECEIVE_SURF_WAT = " & True)(0)(3)
                    Field2_Area = TableOfFieldsEligibleForSurfWat.Select("TRACT = " & myReader_WA.GetValue(myReader_WA.GetOrdinal("TRACT")) & " and RECEIVE_SURF_WAT = " & True)(1)(3)
                    Field1_Type = TableOfFieldsEligibleForSurfWat.Select("TRACT = " & myReader_WA.GetValue(myReader_WA.GetOrdinal("TRACT")) & " and RECEIVE_SURF_WAT = " & True)(0)(8)
                    Field2_Type = TableOfFieldsEligibleForSurfWat.Select("TRACT = " & myReader_WA.GetValue(myReader_WA.GetOrdinal("TRACT")) & " and RECEIVE_SURF_WAT = " & True)(1)(8)
                    Field1_Amt = Tract_Amt * (Field1_Area / Eligible_Area)
                    Field2_Amt = Tract_Amt * (Field2_Area / Eligible_Area)
                    Check_Depths(2, CurrentDate, Field1_Area, Field2_Area, , , , , , , , , _
                                 Field1_Type, Field2_Type, , , , , , , , , _
                                 Field1_Amt, Field2_Amt, , , , , , , , )
                    For i = 1 To 2
                        FinalWatAllocTableRow = FinalizedWatAllocTable.NewRow()
                        FinalWatAllocTableRow("FIELD_NO_TXT") = TableOfFieldsEligibleForSurfWat.Select("TRACT = " & myReader_WA.GetValue(myReader_WA.GetOrdinal("TRACT")))(i - 1)(0)
                        FinalWatAllocTableRow("Precip") = TableOfFieldsEligibleForSurfWat.Select("TRACT = " & myReader_WA.GetValue(myReader_WA.GetOrdinal("TRACT")))(i - 1)(4)
                        FinalWatAllocTableRow("ETc") = TableOfFieldsEligibleForSurfWat.Select("TRACT = " & myReader_WA.GetValue(myReader_WA.GetOrdinal("TRACT")))(i - 1)(5)
                        RanNum1 = RandomGenerator.NextDouble()
                        Runoff_Fraction = (-1 * Math.Log(RanNum1)) / (1 / lambda)
                        Select Case i
                            Case 1
                                FinalWatAllocTableRow("Area") = Field1_Area
                                FinalWatAllocTableRow("Water_Allocated") = Field1_Amt
                                FinalWatAllocTableRow("DepthApplied") = Field1_Amt / Field1_Area
                                FinalWatAllocTableRow("Runoff_Amt") = Runoff_Fraction * Field1_Amt
                                RanNum1 = RandomGenerator.NextDouble()
                                RanNum2 = RandomGenerator.NextDouble()
                                While Not (RanNum1 <= 0.8 And RanNum2 <= 1 - 1.25 * RanNum1)
                                    RanNum1 = RandomGenerator.NextDouble()
                                    RanNum2 = RandomGenerator.NextDouble()
                                End While
                                FinalWatAllocTableRow("DeepPerc_Amt") = RanNum1 * (Field1_Amt * (1 - Runoff_Fraction)) 'deep perc equal delivered amt less runoff times the deep perc fraction
                            Case 2
                                FinalWatAllocTableRow("Area") = Field2_Area
                                FinalWatAllocTableRow("Water_Allocated") = Field2_Amt
                                FinalWatAllocTableRow("DepthApplied") = Field2_Amt / Field2_Area
                                FinalWatAllocTableRow("Runoff_Amt") = Runoff_Fraction * Field2_Amt
                                RanNum1 = RandomGenerator.NextDouble()
                                RanNum2 = RandomGenerator.NextDouble()
                                While Not (RanNum1 <= 0.8 And RanNum2 <= 1 - 1.25 * RanNum1)
                                    RanNum1 = RandomGenerator.NextDouble()
                                    RanNum2 = RandomGenerator.NextDouble()
                                End While
                                FinalWatAllocTableRow("DeepPerc_Amt") = RanNum1 * (Field2_Amt * (1 - Runoff_Fraction)) 'deep perc equal delivered amt less runoff times the deep perc fraction
                        End Select
                    Next i

                Case 3
                    Field1_Area = TableOfFieldsEligibleForSurfWat.Select("TRACT = " & myReader_WA.GetValue(myReader_WA.GetOrdinal("TRACT")) & " and RECEIVE_SURF_WAT = " & True)(0)(3)
                    Field2_Area = TableOfFieldsEligibleForSurfWat.Select("TRACT = " & myReader_WA.GetValue(myReader_WA.GetOrdinal("TRACT")) & " and RECEIVE_SURF_WAT = " & True)(1)(3)
                    Field3_Area = TableOfFieldsEligibleForSurfWat.Select("TRACT = " & myReader_WA.GetValue(myReader_WA.GetOrdinal("TRACT")) & " and RECEIVE_SURF_WAT = " & True)(2)(3)
                    Field1_Type = TableOfFieldsEligibleForSurfWat.Select("TRACT = " & myReader_WA.GetValue(myReader_WA.GetOrdinal("TRACT")) & " and RECEIVE_SURF_WAT = " & True)(0)(8)
                    Field2_Type = TableOfFieldsEligibleForSurfWat.Select("TRACT = " & myReader_WA.GetValue(myReader_WA.GetOrdinal("TRACT")) & " and RECEIVE_SURF_WAT = " & True)(1)(8)
                    Field3_Type = TableOfFieldsEligibleForSurfWat.Select("TRACT = " & myReader_WA.GetValue(myReader_WA.GetOrdinal("TRACT")) & " and RECEIVE_SURF_WAT = " & True)(2)(8)
                    Field1_Amt = Tract_Amt * (Field1_Area / Eligible_Area)
                    Field2_Amt = Tract_Amt * (Field2_Area / Eligible_Area)
                    Field3_Amt = Tract_Amt * (Field3_Area / Eligible_Area)
                    Check_Depths(3, CurrentDate, Field1_Area, Field2_Area, Field3_Area, , , , , , , , _
                                 Field1_Type, Field2_Type, Field3_Type, , , , , , , , _
                                 Field1_Amt, Field2_Amt, Field3_Amt, , , , , , , )
                    For i = 1 To 3
                        FinalWatAllocTableRow = FinalizedWatAllocTable.NewRow()
                        FinalWatAllocTableRow("FIELD_NO_TXT") = TableOfFieldsEligibleForSurfWat.Select("TRACT = " & myReader_WA.GetValue(myReader_WA.GetOrdinal("TRACT")))(i - 1)(0)
                        FinalWatAllocTableRow("Precip") = TableOfFieldsEligibleForSurfWat.Select("TRACT = " & myReader_WA.GetValue(myReader_WA.GetOrdinal("TRACT")))(i - 1)(4)
                        FinalWatAllocTableRow("ETc") = TableOfFieldsEligibleForSurfWat.Select("TRACT = " & myReader_WA.GetValue(myReader_WA.GetOrdinal("TRACT")))(i - 1)(5)
                        RanNum1 = RandomGenerator.NextDouble()
                        Runoff_Fraction = (-1 * Math.Log(RanNum1)) / (1 / lambda)
                        Select Case i
                            Case 1
                                FinalWatAllocTableRow("Area") = Field1_Area
                                FinalWatAllocTableRow("Water_Allocated") = Field1_Amt
                                FinalWatAllocTableRow("DepthApplied") = Field1_Amt / Field1_Area
                                FinalWatAllocTableRow("Runoff_Amt") = Runoff_Fraction * Field1_Amt
                                RanNum1 = RandomGenerator.NextDouble()
                                RanNum2 = RandomGenerator.NextDouble()
                                While Not (RanNum1 <= 0.8 And RanNum2 <= 1 - 1.25 * RanNum1)
                                    RanNum1 = RandomGenerator.NextDouble()
                                    RanNum2 = RandomGenerator.NextDouble()
                                End While
                                FinalWatAllocTableRow("DeepPerc_Amt") = RanNum1 * (Field1_Amt * (1 - Runoff_Fraction)) 'deep perc equal delivered amt less runoff times the deep perc fraction
                            Case 2
                                FinalWatAllocTableRow("Area") = Field2_Area
                                FinalWatAllocTableRow("Water_Allocated") = Field2_Amt
                                FinalWatAllocTableRow("DepthApplied") = Field2_Amt / Field2_Area
                                FinalWatAllocTableRow("Runoff_Amt") = Runoff_Fraction * Field2_Amt
                                RanNum1 = RandomGenerator.NextDouble()
                                RanNum2 = RandomGenerator.NextDouble()
                                While Not (RanNum1 <= 0.8 And RanNum2 <= 1 - 1.25 * RanNum1)
                                    RanNum1 = RandomGenerator.NextDouble()
                                    RanNum2 = RandomGenerator.NextDouble()
                                End While
                                FinalWatAllocTableRow("DeepPerc_Amt") = RanNum1 * (Field2_Amt * (1 - Runoff_Fraction)) 'deep perc equal delivered amt less runoff times the deep perc fraction
                            Case 3
                                FinalWatAllocTableRow("Area") = Field3_Area
                                FinalWatAllocTableRow("Water_Allocated") = Field3_Amt
                                FinalWatAllocTableRow("DepthApplied") = Field3_Amt / Field3_Area
                                FinalWatAllocTableRow("Runoff_Amt") = Runoff_Fraction * Field3_Amt
                                RanNum1 = RandomGenerator.NextDouble()
                                RanNum2 = RandomGenerator.NextDouble()
                                While Not (RanNum1 <= 0.8 And RanNum2 <= 1 - 1.25 * RanNum1)
                                    RanNum1 = RandomGenerator.NextDouble()
                                    RanNum2 = RandomGenerator.NextDouble()
                                End While
                                FinalWatAllocTableRow("DeepPerc_Amt") = RanNum1 * (Field3_Amt * (1 - Runoff_Fraction)) 'deep perc equal delivered amt less runoff times the deep perc fraction
                        End Select
                    Next i

                Case 4
                    Field1_Area = TableOfFieldsEligibleForSurfWat.Select("TRACT = " & myReader_WA.GetValue(myReader_WA.GetOrdinal("TRACT")) & " and RECEIVE_SURF_WAT = " & True)(0)(3)
                    Field2_Area = TableOfFieldsEligibleForSurfWat.Select("TRACT = " & myReader_WA.GetValue(myReader_WA.GetOrdinal("TRACT")) & " and RECEIVE_SURF_WAT = " & True)(1)(3)
                    Field3_Area = TableOfFieldsEligibleForSurfWat.Select("TRACT = " & myReader_WA.GetValue(myReader_WA.GetOrdinal("TRACT")) & " and RECEIVE_SURF_WAT = " & True)(2)(3)
                    Field4_Area = TableOfFieldsEligibleForSurfWat.Select("TRACT = " & myReader_WA.GetValue(myReader_WA.GetOrdinal("TRACT")) & " and RECEIVE_SURF_WAT = " & True)(3)(3)
                    Field1_Type = TableOfFieldsEligibleForSurfWat.Select("TRACT = " & myReader_WA.GetValue(myReader_WA.GetOrdinal("TRACT")) & " and RECEIVE_SURF_WAT = " & True)(0)(8)
                    Field2_Type = TableOfFieldsEligibleForSurfWat.Select("TRACT = " & myReader_WA.GetValue(myReader_WA.GetOrdinal("TRACT")) & " and RECEIVE_SURF_WAT = " & True)(1)(8)
                    Field3_Type = TableOfFieldsEligibleForSurfWat.Select("TRACT = " & myReader_WA.GetValue(myReader_WA.GetOrdinal("TRACT")) & " and RECEIVE_SURF_WAT = " & True)(2)(8)
                    Field4_Type = TableOfFieldsEligibleForSurfWat.Select("TRACT = " & myReader_WA.GetValue(myReader_WA.GetOrdinal("TRACT")) & " and RECEIVE_SURF_WAT = " & True)(3)(8)
                    Field1_Amt = Tract_Amt * (Field1_Area / Eligible_Area)
                    Field2_Amt = Tract_Amt * (Field2_Area / Eligible_Area)
                    Field3_Amt = Tract_Amt * (Field3_Area / Eligible_Area)
                    Field4_Amt = Tract_Amt * (Field4_Area / Eligible_Area)
                    'dim a as WaterAllocation.
                    Check_Depths(4, CurrentDate, Field1_Area, Field2_Area, Field3_Area, Field4_Area, , , , , , , _
                                 Field1_Type, Field2_Type, Field3_Type, Field4_Type, , , , , , , _
                                 Field1_Amt, Field2_Amt, Field3_Amt, Field4_Amt, , , , , , )
                    For i = 1 To 4
                        FinalWatAllocTableRow = FinalizedWatAllocTable.NewRow()
                        FinalWatAllocTableRow("FIELD_NO_TXT") = TableOfFieldsEligibleForSurfWat.Select("TRACT = " & myReader_WA.GetValue(myReader_WA.GetOrdinal("TRACT")))(i - 1)(0)
                        FinalWatAllocTableRow("Precip") = TableOfFieldsEligibleForSurfWat.Select("TRACT = " & myReader_WA.GetValue(myReader_WA.GetOrdinal("TRACT")))(i - 1)(4)
                        FinalWatAllocTableRow("ETc") = TableOfFieldsEligibleForSurfWat.Select("TRACT = " & myReader_WA.GetValue(myReader_WA.GetOrdinal("TRACT")))(i - 1)(5)
                        RanNum1 = RandomGenerator.NextDouble()
                        Runoff_Fraction = (-1 * Math.Log(RanNum1)) / (1 / lambda)
                        Select Case i
                            Case 1
                                FinalWatAllocTableRow("Area") = Field1_Area
                                FinalWatAllocTableRow("Water_Allocated") = Field1_Amt
                                FinalWatAllocTableRow("DepthApplied") = Field1_Amt / Field1_Area
                                FinalWatAllocTableRow("Runoff_Amt") = Runoff_Fraction * Field1_Amt
                                RanNum1 = RandomGenerator.NextDouble()
                                RanNum2 = RandomGenerator.NextDouble()
                                While Not (RanNum1 <= 0.8 And RanNum2 <= 1 - 1.25 * RanNum1)
                                    RanNum1 = RandomGenerator.NextDouble()
                                    RanNum2 = RandomGenerator.NextDouble()
                                End While
                                FinalWatAllocTableRow("DeepPerc_Amt") = RanNum1 * (Field1_Amt * (1 - Runoff_Fraction)) 'deep perc equal delivered amt less runoff times the deep perc fraction
                            Case 2
                                FinalWatAllocTableRow("Area") = Field2_Area
                                FinalWatAllocTableRow("Water_Allocated") = Field2_Amt
                                FinalWatAllocTableRow("DepthApplied") = Field2_Amt / Field2_Area
                                FinalWatAllocTableRow("Runoff_Amt") = Runoff_Fraction * Field2_Amt
                                RanNum1 = RandomGenerator.NextDouble()
                                RanNum2 = RandomGenerator.NextDouble()
                                While Not (RanNum1 <= 0.8 And RanNum2 <= 1 - 1.25 * RanNum1)
                                    RanNum1 = RandomGenerator.NextDouble()
                                    RanNum2 = RandomGenerator.NextDouble()
                                End While
                                FinalWatAllocTableRow("DeepPerc_Amt") = RanNum1 * (Field2_Amt * (1 - Runoff_Fraction)) 'deep perc equal delivered amt less runoff times the deep perc fraction
                            Case 3
                                FinalWatAllocTableRow("Area") = Field3_Area
                                FinalWatAllocTableRow("Water_Allocated") = Field3_Amt
                                FinalWatAllocTableRow("DepthApplied") = Field3_Amt / Field3_Area
                                FinalWatAllocTableRow("Runoff_Amt") = Runoff_Fraction * Field3_Amt
                                RanNum1 = RandomGenerator.NextDouble()
                                RanNum2 = RandomGenerator.NextDouble()
                                While Not (RanNum1 <= 0.8 And RanNum2 <= 1 - 1.25 * RanNum1)
                                    RanNum1 = RandomGenerator.NextDouble()
                                    RanNum2 = RandomGenerator.NextDouble()
                                End While
                                FinalWatAllocTableRow("DeepPerc_Amt") = RanNum1 * (Field3_Amt * (1 - Runoff_Fraction)) 'deep perc equal delivered amt less runoff times the deep perc fraction
                            Case 4
                                FinalWatAllocTableRow("Area") = Field4_Area
                                FinalWatAllocTableRow("Water_Allocated") = Field4_Amt
                                FinalWatAllocTableRow("DepthApplied") = Field4_Amt / Field4_Area
                                FinalWatAllocTableRow("Runoff_Amt") = Runoff_Fraction * Field4_Amt
                                RanNum1 = RandomGenerator.NextDouble()
                                RanNum2 = RandomGenerator.NextDouble()
                                While Not (RanNum1 <= 0.8 And RanNum2 <= 1 - 1.25 * RanNum1)
                                    RanNum1 = RandomGenerator.NextDouble()
                                    RanNum2 = RandomGenerator.NextDouble()
                                End While
                                FinalWatAllocTableRow("DeepPerc_Amt") = RanNum1 * (Field4_Amt * (1 - Runoff_Fraction)) 'deep perc equal delivered amt less runoff times the deep perc fraction
                        End Select
                    Next i

                Case 5
                    Field1_Area = TableOfFieldsEligibleForSurfWat.Select("TRACT = " & myReader_WA.GetValue(myReader_WA.GetOrdinal("TRACT")) & " and RECEIVE_SURF_WAT = " & True)(0)(3)
                    Field2_Area = TableOfFieldsEligibleForSurfWat.Select("TRACT = " & myReader_WA.GetValue(myReader_WA.GetOrdinal("TRACT")) & " and RECEIVE_SURF_WAT = " & True)(1)(3)
                    Field3_Area = TableOfFieldsEligibleForSurfWat.Select("TRACT = " & myReader_WA.GetValue(myReader_WA.GetOrdinal("TRACT")) & " and RECEIVE_SURF_WAT = " & True)(2)(3)
                    Field4_Area = TableOfFieldsEligibleForSurfWat.Select("TRACT = " & myReader_WA.GetValue(myReader_WA.GetOrdinal("TRACT")) & " and RECEIVE_SURF_WAT = " & True)(3)(3)
                    Field5_Area = TableOfFieldsEligibleForSurfWat.Select("TRACT = " & myReader_WA.GetValue(myReader_WA.GetOrdinal("TRACT")) & " and RECEIVE_SURF_WAT = " & True)(4)(3)

                    'Dim calling5() As Integer = {1, 1, 1, 1, 1}
                    'Dim areas5() As Double = {Field1_Area, Field2_Area, Field3_Area, Field4_Area, Field5_Area}
                    'Dim allocated() As Double = {0, 0, 0, 0, 0}

                    'One option here would be to pass in the intial guess to the Lingo model and add a minimizing 
                    'difference between the final solution and the intial guess in order to get the final values to 
                    'vary somewhat rondomly.  For now however, I just proceeded with the original model in order to
                    'make progress.
                    'Dim LingoAllocator As New WaterAllocation.Form1
                    'Call LingoAllocator.RunLingo(5, calling5, areas5, Tract_Amt, allocated)

                    'Check_Depths(5, CurrentDate, Field1_Area, Field2_Area, Field3_Area, Field4_Area, Field5_Area, , , , , , _
                    '                             Field1_Type, Field2_Type, Field3_Type, Field4_Type, Field5_Type, , , , , , _
                    '                             Field1_Amt, Field2_Amt, Field3_Amt, Field4_Amt, Field5_Amt, , , , , )

                Case 6
                    Field1_Area = TableOfFieldsEligibleForSurfWat.Select("TRACT = " & myReader_WA.GetValue(myReader_WA.GetOrdinal("TRACT")) & " and RECEIVE_SURF_WAT = " & True)(0)(3)
                    Field2_Area = TableOfFieldsEligibleForSurfWat.Select("TRACT = " & myReader_WA.GetValue(myReader_WA.GetOrdinal("TRACT")) & " and RECEIVE_SURF_WAT = " & True)(1)(3)
                    Field3_Area = TableOfFieldsEligibleForSurfWat.Select("TRACT = " & myReader_WA.GetValue(myReader_WA.GetOrdinal("TRACT")) & " and RECEIVE_SURF_WAT = " & True)(2)(3)
                    Field4_Area = TableOfFieldsEligibleForSurfWat.Select("TRACT = " & myReader_WA.GetValue(myReader_WA.GetOrdinal("TRACT")) & " and RECEIVE_SURF_WAT = " & True)(3)(3)
                    Field5_Area = TableOfFieldsEligibleForSurfWat.Select("TRACT = " & myReader_WA.GetValue(myReader_WA.GetOrdinal("TRACT")) & " and RECEIVE_SURF_WAT = " & True)(4)(3)
                    Field6_Area = TableOfFieldsEligibleForSurfWat.Select("TRACT = " & myReader_WA.GetValue(myReader_WA.GetOrdinal("TRACT")) & " and RECEIVE_SURF_WAT = " & True)(5)(3)
                    Field1_Type = TableOfFieldsEligibleForSurfWat.Select("TRACT = " & myReader_WA.GetValue(myReader_WA.GetOrdinal("TRACT")) & " and RECEIVE_SURF_WAT = " & True)(0)(8)
                    Field2_Type = TableOfFieldsEligibleForSurfWat.Select("TRACT = " & myReader_WA.GetValue(myReader_WA.GetOrdinal("TRACT")) & " and RECEIVE_SURF_WAT = " & True)(1)(8)
                    Field3_Type = TableOfFieldsEligibleForSurfWat.Select("TRACT = " & myReader_WA.GetValue(myReader_WA.GetOrdinal("TRACT")) & " and RECEIVE_SURF_WAT = " & True)(2)(8)
                    Field4_Type = TableOfFieldsEligibleForSurfWat.Select("TRACT = " & myReader_WA.GetValue(myReader_WA.GetOrdinal("TRACT")) & " and RECEIVE_SURF_WAT = " & True)(3)(8)
                    Field5_Type = TableOfFieldsEligibleForSurfWat.Select("TRACT = " & myReader_WA.GetValue(myReader_WA.GetOrdinal("TRACT")) & " and RECEIVE_SURF_WAT = " & True)(4)(8)
                    Field6_Type = TableOfFieldsEligibleForSurfWat.Select("TRACT = " & myReader_WA.GetValue(myReader_WA.GetOrdinal("TRACT")) & " and RECEIVE_SURF_WAT = " & True)(5)(8)
                    Field1_Amt = Tract_Amt * (Field1_Area / Eligible_Area)
                    Field2_Amt = Tract_Amt * (Field2_Area / Eligible_Area)
                    Field3_Amt = Tract_Amt * (Field3_Area / Eligible_Area)
                    Field4_Amt = Tract_Amt * (Field4_Area / Eligible_Area)
                    Field5_Amt = Tract_Amt * (Field5_Area / Eligible_Area)
                    Field6_Amt = Tract_Amt * (Field6_Area / Eligible_Area)
                    'Flag = Check_Depths(6, CurrentDate, Field1_Area, Field2_Area, Field3_Area, Field4_Area, Field5_Area, Field6_Area, , , , , _
                    '                                    Field1_Type, Field2_Type, Field3_Type, Field4_Type, Field5_Type, Field6_Type, , , , , _
                    '                                    Field1_Amt, Field2_Amt, Field3_Amt, Field4_Amt, Field5_Amt, Field6_Amt, , , , )
                Case 7
                    Field1_Area = TableOfFieldsEligibleForSurfWat.Select("TRACT = " & myReader_WA.GetValue(myReader_WA.GetOrdinal("TRACT")) & " and RECEIVE_SURF_WAT = " & True)(0)(3)
                    Field2_Area = TableOfFieldsEligibleForSurfWat.Select("TRACT = " & myReader_WA.GetValue(myReader_WA.GetOrdinal("TRACT")) & " and RECEIVE_SURF_WAT = " & True)(1)(3)
                    Field3_Area = TableOfFieldsEligibleForSurfWat.Select("TRACT = " & myReader_WA.GetValue(myReader_WA.GetOrdinal("TRACT")) & " and RECEIVE_SURF_WAT = " & True)(2)(3)
                    Field4_Area = TableOfFieldsEligibleForSurfWat.Select("TRACT = " & myReader_WA.GetValue(myReader_WA.GetOrdinal("TRACT")) & " and RECEIVE_SURF_WAT = " & True)(3)(3)
                    Field5_Area = TableOfFieldsEligibleForSurfWat.Select("TRACT = " & myReader_WA.GetValue(myReader_WA.GetOrdinal("TRACT")) & " and RECEIVE_SURF_WAT = " & True)(4)(3)
                    Field6_Area = TableOfFieldsEligibleForSurfWat.Select("TRACT = " & myReader_WA.GetValue(myReader_WA.GetOrdinal("TRACT")) & " and RECEIVE_SURF_WAT = " & True)(5)(3)
                    Field7_Area = TableOfFieldsEligibleForSurfWat.Select("TRACT = " & myReader_WA.GetValue(myReader_WA.GetOrdinal("TRACT")) & " and RECEIVE_SURF_WAT = " & True)(6)(3)
                    Field1_Type = TableOfFieldsEligibleForSurfWat.Select("TRACT = " & myReader_WA.GetValue(myReader_WA.GetOrdinal("TRACT")) & " and RECEIVE_SURF_WAT = " & True)(0)(8)
                    Field2_Type = TableOfFieldsEligibleForSurfWat.Select("TRACT = " & myReader_WA.GetValue(myReader_WA.GetOrdinal("TRACT")) & " and RECEIVE_SURF_WAT = " & True)(1)(8)
                    Field3_Type = TableOfFieldsEligibleForSurfWat.Select("TRACT = " & myReader_WA.GetValue(myReader_WA.GetOrdinal("TRACT")) & " and RECEIVE_SURF_WAT = " & True)(2)(8)
                    Field4_Type = TableOfFieldsEligibleForSurfWat.Select("TRACT = " & myReader_WA.GetValue(myReader_WA.GetOrdinal("TRACT")) & " and RECEIVE_SURF_WAT = " & True)(3)(8)
                    Field5_Type = TableOfFieldsEligibleForSurfWat.Select("TRACT = " & myReader_WA.GetValue(myReader_WA.GetOrdinal("TRACT")) & " and RECEIVE_SURF_WAT = " & True)(4)(8)
                    Field6_Type = TableOfFieldsEligibleForSurfWat.Select("TRACT = " & myReader_WA.GetValue(myReader_WA.GetOrdinal("TRACT")) & " and RECEIVE_SURF_WAT = " & True)(5)(8)
                    Field7_Type = TableOfFieldsEligibleForSurfWat.Select("TRACT = " & myReader_WA.GetValue(myReader_WA.GetOrdinal("TRACT")) & " and RECEIVE_SURF_WAT = " & True)(6)(8)
                    Field1_Amt = Tract_Amt * (Field1_Area / Eligible_Area)
                    Field2_Amt = Tract_Amt * (Field2_Area / Eligible_Area)
                    Field3_Amt = Tract_Amt * (Field3_Area / Eligible_Area)
                    Field4_Amt = Tract_Amt * (Field4_Area / Eligible_Area)
                    Field5_Amt = Tract_Amt * (Field5_Area / Eligible_Area)
                    Field6_Amt = Tract_Amt * (Field6_Area / Eligible_Area)
                    Field7_Amt = Tract_Amt * (Field7_Area / Eligible_Area)
                    'Flag = Check_Depths(7, CurrentDate, Field1_Area, Field2_Area, Field3_Area, Field4_Area, Field5_Area, Field6_Area, Field7_Area, , , , _
                    '                                    Field1_Type, Field2_Type, Field3_Type, Field4_Type, Field5_Type, Field6_Type, Field7_Type, , , , _
                    '                                    Field1_Amt, Field2_Amt, Field3_Amt, Field4_Amt, Field5_Amt, Field6_Amt, Field7_Amt, , , )
                Case 8
                    Field1_Area = TableOfFieldsEligibleForSurfWat.Select("TRACT = " & myReader_WA.GetValue(myReader_WA.GetOrdinal("TRACT")) & " and RECEIVE_SURF_WAT = " & True)(0)(3)
                    Field2_Area = TableOfFieldsEligibleForSurfWat.Select("TRACT = " & myReader_WA.GetValue(myReader_WA.GetOrdinal("TRACT")) & " and RECEIVE_SURF_WAT = " & True)(1)(3)
                    Field3_Area = TableOfFieldsEligibleForSurfWat.Select("TRACT = " & myReader_WA.GetValue(myReader_WA.GetOrdinal("TRACT")) & " and RECEIVE_SURF_WAT = " & True)(2)(3)
                    Field4_Area = TableOfFieldsEligibleForSurfWat.Select("TRACT = " & myReader_WA.GetValue(myReader_WA.GetOrdinal("TRACT")) & " and RECEIVE_SURF_WAT = " & True)(3)(3)
                    Field5_Area = TableOfFieldsEligibleForSurfWat.Select("TRACT = " & myReader_WA.GetValue(myReader_WA.GetOrdinal("TRACT")) & " and RECEIVE_SURF_WAT = " & True)(4)(3)
                    Field6_Area = TableOfFieldsEligibleForSurfWat.Select("TRACT = " & myReader_WA.GetValue(myReader_WA.GetOrdinal("TRACT")) & " and RECEIVE_SURF_WAT = " & True)(5)(3)
                    Field7_Area = TableOfFieldsEligibleForSurfWat.Select("TRACT = " & myReader_WA.GetValue(myReader_WA.GetOrdinal("TRACT")) & " and RECEIVE_SURF_WAT = " & True)(6)(3)
                    Field8_Area = TableOfFieldsEligibleForSurfWat.Select("TRACT = " & myReader_WA.GetValue(myReader_WA.GetOrdinal("TRACT")) & " and RECEIVE_SURF_WAT = " & True)(7)(3)
                    Field1_Type = TableOfFieldsEligibleForSurfWat.Select("TRACT = " & myReader_WA.GetValue(myReader_WA.GetOrdinal("TRACT")) & " and RECEIVE_SURF_WAT = " & True)(0)(8)
                    Field2_Type = TableOfFieldsEligibleForSurfWat.Select("TRACT = " & myReader_WA.GetValue(myReader_WA.GetOrdinal("TRACT")) & " and RECEIVE_SURF_WAT = " & True)(1)(8)
                    Field3_Type = TableOfFieldsEligibleForSurfWat.Select("TRACT = " & myReader_WA.GetValue(myReader_WA.GetOrdinal("TRACT")) & " and RECEIVE_SURF_WAT = " & True)(2)(8)
                    Field4_Type = TableOfFieldsEligibleForSurfWat.Select("TRACT = " & myReader_WA.GetValue(myReader_WA.GetOrdinal("TRACT")) & " and RECEIVE_SURF_WAT = " & True)(3)(8)
                    Field5_Type = TableOfFieldsEligibleForSurfWat.Select("TRACT = " & myReader_WA.GetValue(myReader_WA.GetOrdinal("TRACT")) & " and RECEIVE_SURF_WAT = " & True)(4)(8)
                    Field6_Type = TableOfFieldsEligibleForSurfWat.Select("TRACT = " & myReader_WA.GetValue(myReader_WA.GetOrdinal("TRACT")) & " and RECEIVE_SURF_WAT = " & True)(5)(8)
                    Field7_Type = TableOfFieldsEligibleForSurfWat.Select("TRACT = " & myReader_WA.GetValue(myReader_WA.GetOrdinal("TRACT")) & " and RECEIVE_SURF_WAT = " & True)(6)(8)
                    Field8_Type = TableOfFieldsEligibleForSurfWat.Select("TRACT = " & myReader_WA.GetValue(myReader_WA.GetOrdinal("TRACT")) & " and RECEIVE_SURF_WAT = " & True)(7)(8)
                    Field1_Amt = Tract_Amt * (Field1_Area / Eligible_Area)
                    Field2_Amt = Tract_Amt * (Field2_Area / Eligible_Area)
                    Field3_Amt = Tract_Amt * (Field3_Area / Eligible_Area)
                    Field4_Amt = Tract_Amt * (Field4_Area / Eligible_Area)
                    Field5_Amt = Tract_Amt * (Field5_Area / Eligible_Area)
                    Field6_Amt = Tract_Amt * (Field6_Area / Eligible_Area)
                    Field7_Amt = Tract_Amt * (Field7_Area / Eligible_Area)
                    Field8_Amt = Tract_Amt * (Field8_Area / Eligible_Area)
                    'Flag = Check_Depths(8, CurrentDate, Field1_Area, Field2_Area, Field3_Area, Field4_Area, Field5_Area, Field6_Area, Field7_Area, Field8_Area, , , _
                    '                                    Field1_Type, Field2_Type, Field3_Type, Field4_Type, Field5_Type, Field6_Type, Field7_Type, Field8_Type, , , _
                    '                                    Field1_Amt, Field2_Amt, Field3_Amt, Field4_Amt, Field5_Amt, Field6_Amt, Field7_Amt, Field8_Amt, , )
                Case 9
                    Field1_Area = TableOfFieldsEligibleForSurfWat.Select("TRACT = " & myReader_WA.GetValue(myReader_WA.GetOrdinal("TRACT")) & " and RECEIVE_SURF_WAT = " & True)(0)(3)
                    Field2_Area = TableOfFieldsEligibleForSurfWat.Select("TRACT = " & myReader_WA.GetValue(myReader_WA.GetOrdinal("TRACT")) & " and RECEIVE_SURF_WAT = " & True)(1)(3)
                    Field3_Area = TableOfFieldsEligibleForSurfWat.Select("TRACT = " & myReader_WA.GetValue(myReader_WA.GetOrdinal("TRACT")) & " and RECEIVE_SURF_WAT = " & True)(2)(3)
                    Field4_Area = TableOfFieldsEligibleForSurfWat.Select("TRACT = " & myReader_WA.GetValue(myReader_WA.GetOrdinal("TRACT")) & " and RECEIVE_SURF_WAT = " & True)(3)(3)
                    Field5_Area = TableOfFieldsEligibleForSurfWat.Select("TRACT = " & myReader_WA.GetValue(myReader_WA.GetOrdinal("TRACT")) & " and RECEIVE_SURF_WAT = " & True)(4)(3)
                    Field6_Area = TableOfFieldsEligibleForSurfWat.Select("TRACT = " & myReader_WA.GetValue(myReader_WA.GetOrdinal("TRACT")) & " and RECEIVE_SURF_WAT = " & True)(5)(3)
                    Field7_Area = TableOfFieldsEligibleForSurfWat.Select("TRACT = " & myReader_WA.GetValue(myReader_WA.GetOrdinal("TRACT")) & " and RECEIVE_SURF_WAT = " & True)(6)(3)
                    Field8_Area = TableOfFieldsEligibleForSurfWat.Select("TRACT = " & myReader_WA.GetValue(myReader_WA.GetOrdinal("TRACT")) & " and RECEIVE_SURF_WAT = " & True)(7)(3)
                    Field9_Area = TableOfFieldsEligibleForSurfWat.Select("TRACT = " & myReader_WA.GetValue(myReader_WA.GetOrdinal("TRACT")) & " and RECEIVE_SURF_WAT = " & True)(8)(3)
                    Field1_Type = TableOfFieldsEligibleForSurfWat.Select("TRACT = " & myReader_WA.GetValue(myReader_WA.GetOrdinal("TRACT")) & " and RECEIVE_SURF_WAT = " & True)(0)(8)
                    Field2_Type = TableOfFieldsEligibleForSurfWat.Select("TRACT = " & myReader_WA.GetValue(myReader_WA.GetOrdinal("TRACT")) & " and RECEIVE_SURF_WAT = " & True)(1)(8)
                    Field3_Type = TableOfFieldsEligibleForSurfWat.Select("TRACT = " & myReader_WA.GetValue(myReader_WA.GetOrdinal("TRACT")) & " and RECEIVE_SURF_WAT = " & True)(2)(8)
                    Field4_Type = TableOfFieldsEligibleForSurfWat.Select("TRACT = " & myReader_WA.GetValue(myReader_WA.GetOrdinal("TRACT")) & " and RECEIVE_SURF_WAT = " & True)(3)(8)
                    Field5_Type = TableOfFieldsEligibleForSurfWat.Select("TRACT = " & myReader_WA.GetValue(myReader_WA.GetOrdinal("TRACT")) & " and RECEIVE_SURF_WAT = " & True)(4)(8)
                    Field6_Type = TableOfFieldsEligibleForSurfWat.Select("TRACT = " & myReader_WA.GetValue(myReader_WA.GetOrdinal("TRACT")) & " and RECEIVE_SURF_WAT = " & True)(5)(8)
                    Field7_Type = TableOfFieldsEligibleForSurfWat.Select("TRACT = " & myReader_WA.GetValue(myReader_WA.GetOrdinal("TRACT")) & " and RECEIVE_SURF_WAT = " & True)(6)(8)
                    Field8_Type = TableOfFieldsEligibleForSurfWat.Select("TRACT = " & myReader_WA.GetValue(myReader_WA.GetOrdinal("TRACT")) & " and RECEIVE_SURF_WAT = " & True)(7)(8)
                    Field9_Type = TableOfFieldsEligibleForSurfWat.Select("TRACT = " & myReader_WA.GetValue(myReader_WA.GetOrdinal("TRACT")) & " and RECEIVE_SURF_WAT = " & True)(8)(8)
                    Field1_Amt = Tract_Amt * (Field1_Area / Eligible_Area)
                    Field2_Amt = Tract_Amt * (Field2_Area / Eligible_Area)
                    Field3_Amt = Tract_Amt * (Field3_Area / Eligible_Area)
                    Field4_Amt = Tract_Amt * (Field4_Area / Eligible_Area)
                    Field5_Amt = Tract_Amt * (Field5_Area / Eligible_Area)
                    Field6_Amt = Tract_Amt * (Field6_Area / Eligible_Area)
                    Field7_Amt = Tract_Amt * (Field7_Area / Eligible_Area)
                    Field8_Amt = Tract_Amt * (Field8_Area / Eligible_Area)
                    Field9_Amt = Tract_Amt * (Field9_Area / Eligible_Area)
                    'Flag = Check_Depths(9, CurrentDate, Field1_Area, Field2_Area, Field3_Area, Field4_Area, Field5_Area, Field6_Area, Field7_Area, Field8_Area, Field9_Area, , _
                    '                                    Field1_Type, Field2_Type, Field3_Type, Field4_Type, Field5_Type, Field6_Type, Field7_Type, Field8_Type, Field9_Type, , _
                    '                                    Field1_Amt, Field2_Amt, Field3_Amt, Field4_Amt, Field5_Amt, Field6_Amt, Field7_Amt, Field8_Amt, Field9_Amt, )
                Case 10
                    Field1_Area = TableOfFieldsEligibleForSurfWat.Select("TRACT = " & myReader_WA.GetValue(myReader_WA.GetOrdinal("TRACT")) & " and RECEIVE_SURF_WAT = " & True)(0)(3)
                    Field2_Area = TableOfFieldsEligibleForSurfWat.Select("TRACT = " & myReader_WA.GetValue(myReader_WA.GetOrdinal("TRACT")) & " and RECEIVE_SURF_WAT = " & True)(1)(3)
                    Field3_Area = TableOfFieldsEligibleForSurfWat.Select("TRACT = " & myReader_WA.GetValue(myReader_WA.GetOrdinal("TRACT")) & " and RECEIVE_SURF_WAT = " & True)(2)(3)
                    Field4_Area = TableOfFieldsEligibleForSurfWat.Select("TRACT = " & myReader_WA.GetValue(myReader_WA.GetOrdinal("TRACT")) & " and RECEIVE_SURF_WAT = " & True)(3)(3)
                    Field5_Area = TableOfFieldsEligibleForSurfWat.Select("TRACT = " & myReader_WA.GetValue(myReader_WA.GetOrdinal("TRACT")) & " and RECEIVE_SURF_WAT = " & True)(4)(3)
                    Field6_Area = TableOfFieldsEligibleForSurfWat.Select("TRACT = " & myReader_WA.GetValue(myReader_WA.GetOrdinal("TRACT")) & " and RECEIVE_SURF_WAT = " & True)(5)(3)
                    Field7_Area = TableOfFieldsEligibleForSurfWat.Select("TRACT = " & myReader_WA.GetValue(myReader_WA.GetOrdinal("TRACT")) & " and RECEIVE_SURF_WAT = " & True)(6)(3)
                    Field8_Area = TableOfFieldsEligibleForSurfWat.Select("TRACT = " & myReader_WA.GetValue(myReader_WA.GetOrdinal("TRACT")) & " and RECEIVE_SURF_WAT = " & True)(7)(3)
                    Field9_Area = TableOfFieldsEligibleForSurfWat.Select("TRACT = " & myReader_WA.GetValue(myReader_WA.GetOrdinal("TRACT")) & " and RECEIVE_SURF_WAT = " & True)(8)(3)
                    Field10_Area = TableOfFieldsEligibleForSurfWat.Select("TRACT = " & myReader_WA.GetValue(myReader_WA.GetOrdinal("TRACT")) & " and RECEIVE_SURF_WAT = " & True)(9)(3)
                    Field1_Type = TableOfFieldsEligibleForSurfWat.Select("TRACT = " & myReader_WA.GetValue(myReader_WA.GetOrdinal("TRACT")) & " and RECEIVE_SURF_WAT = " & True)(0)(8)
                    Field2_Type = TableOfFieldsEligibleForSurfWat.Select("TRACT = " & myReader_WA.GetValue(myReader_WA.GetOrdinal("TRACT")) & " and RECEIVE_SURF_WAT = " & True)(1)(8)
                    Field3_Type = TableOfFieldsEligibleForSurfWat.Select("TRACT = " & myReader_WA.GetValue(myReader_WA.GetOrdinal("TRACT")) & " and RECEIVE_SURF_WAT = " & True)(2)(8)
                    Field4_Type = TableOfFieldsEligibleForSurfWat.Select("TRACT = " & myReader_WA.GetValue(myReader_WA.GetOrdinal("TRACT")) & " and RECEIVE_SURF_WAT = " & True)(3)(8)
                    Field5_Type = TableOfFieldsEligibleForSurfWat.Select("TRACT = " & myReader_WA.GetValue(myReader_WA.GetOrdinal("TRACT")) & " and RECEIVE_SURF_WAT = " & True)(4)(8)
                    Field6_Type = TableOfFieldsEligibleForSurfWat.Select("TRACT = " & myReader_WA.GetValue(myReader_WA.GetOrdinal("TRACT")) & " and RECEIVE_SURF_WAT = " & True)(5)(8)
                    Field7_Type = TableOfFieldsEligibleForSurfWat.Select("TRACT = " & myReader_WA.GetValue(myReader_WA.GetOrdinal("TRACT")) & " and RECEIVE_SURF_WAT = " & True)(6)(8)
                    Field8_Type = TableOfFieldsEligibleForSurfWat.Select("TRACT = " & myReader_WA.GetValue(myReader_WA.GetOrdinal("TRACT")) & " and RECEIVE_SURF_WAT = " & True)(7)(8)
                    Field9_Type = TableOfFieldsEligibleForSurfWat.Select("TRACT = " & myReader_WA.GetValue(myReader_WA.GetOrdinal("TRACT")) & " and RECEIVE_SURF_WAT = " & True)(8)(8)
                    Field10_Type = TableOfFieldsEligibleForSurfWat.Select("TRACT = " & myReader_WA.GetValue(myReader_WA.GetOrdinal("TRACT")) & " and RECEIVE_SURF_WAT = " & True)(9)(8)
                    Field1_Amt = Tract_Amt * (Field1_Area / Eligible_Area)
                    Field2_Amt = Tract_Amt * (Field2_Area / Eligible_Area)
                    Field3_Amt = Tract_Amt * (Field3_Area / Eligible_Area)
                    Field4_Amt = Tract_Amt * (Field4_Area / Eligible_Area)
                    Field5_Amt = Tract_Amt * (Field5_Area / Eligible_Area)
                    Field6_Amt = Tract_Amt * (Field6_Area / Eligible_Area)
                    Field7_Amt = Tract_Amt * (Field7_Area / Eligible_Area)
                    Field8_Amt = Tract_Amt * (Field8_Area / Eligible_Area)
                    Field9_Amt = Tract_Amt * (Field9_Area / Eligible_Area)
                    Field10_Amt = Tract_Amt * (Field10_Area / Eligible_Area)
                    'Flag = Check_Depths(10, CurrentDate, Field1_Area, Field2_Area, Field3_Area, Field4_Area, Field5_Area, Field6_Area, Field7_Area, Field8_Area, Field9_Area, Field10_Area, _
                    '                                    Field1_Type, Field2_Type, Field3_Type, Field4_Type, Field5_Type, Field6_Type, Field7_Type, Field8_Type, Field9_Type, Field10_Type, _
                    '                                    Field1_Amt, Field2_Amt, Field3_Amt, Field4_Amt, Field5_Amt, Field6_Amt, Field7_Amt, Field8_Amt, Field9_Amt, Field10_Amt)
                Case 11
                    Dim Field11_Area As Double
                    Dim Field11_Type As String
                    Dim Field11_Amt As Double
                    Field1_Area = TableOfFieldsEligibleForSurfWat.Select("TRACT = " & myReader_WA.GetValue(myReader_WA.GetOrdinal("TRACT")) & " and RECEIVE_SURF_WAT = " & True)(0)(3)
                    Field2_Area = TableOfFieldsEligibleForSurfWat.Select("TRACT = " & myReader_WA.GetValue(myReader_WA.GetOrdinal("TRACT")) & " and RECEIVE_SURF_WAT = " & True)(1)(3)
                    Field3_Area = TableOfFieldsEligibleForSurfWat.Select("TRACT = " & myReader_WA.GetValue(myReader_WA.GetOrdinal("TRACT")) & " and RECEIVE_SURF_WAT = " & True)(2)(3)
                    Field4_Area = TableOfFieldsEligibleForSurfWat.Select("TRACT = " & myReader_WA.GetValue(myReader_WA.GetOrdinal("TRACT")) & " and RECEIVE_SURF_WAT = " & True)(3)(3)
                    Field5_Area = TableOfFieldsEligibleForSurfWat.Select("TRACT = " & myReader_WA.GetValue(myReader_WA.GetOrdinal("TRACT")) & " and RECEIVE_SURF_WAT = " & True)(4)(3)
                    Field6_Area = TableOfFieldsEligibleForSurfWat.Select("TRACT = " & myReader_WA.GetValue(myReader_WA.GetOrdinal("TRACT")) & " and RECEIVE_SURF_WAT = " & True)(5)(3)
                    Field7_Area = TableOfFieldsEligibleForSurfWat.Select("TRACT = " & myReader_WA.GetValue(myReader_WA.GetOrdinal("TRACT")) & " and RECEIVE_SURF_WAT = " & True)(6)(3)
                    Field8_Area = TableOfFieldsEligibleForSurfWat.Select("TRACT = " & myReader_WA.GetValue(myReader_WA.GetOrdinal("TRACT")) & " and RECEIVE_SURF_WAT = " & True)(7)(3)
                    Field9_Area = TableOfFieldsEligibleForSurfWat.Select("TRACT = " & myReader_WA.GetValue(myReader_WA.GetOrdinal("TRACT")) & " and RECEIVE_SURF_WAT = " & True)(8)(3)
                    Field10_Area = TableOfFieldsEligibleForSurfWat.Select("TRACT = " & myReader_WA.GetValue(myReader_WA.GetOrdinal("TRACT")) & " and RECEIVE_SURF_WAT = " & True)(9)(3)
                    Field11_Area = TableOfFieldsEligibleForSurfWat.Select("TRACT = " & myReader_WA.GetValue(myReader_WA.GetOrdinal("TRACT")) & " and RECEIVE_SURF_WAT = " & True)(10)(3)
                    Field1_Type = TableOfFieldsEligibleForSurfWat.Select("TRACT = " & myReader_WA.GetValue(myReader_WA.GetOrdinal("TRACT")) & " and RECEIVE_SURF_WAT = " & True)(0)(8)
                    Field2_Type = TableOfFieldsEligibleForSurfWat.Select("TRACT = " & myReader_WA.GetValue(myReader_WA.GetOrdinal("TRACT")) & " and RECEIVE_SURF_WAT = " & True)(1)(8)
                    Field3_Type = TableOfFieldsEligibleForSurfWat.Select("TRACT = " & myReader_WA.GetValue(myReader_WA.GetOrdinal("TRACT")) & " and RECEIVE_SURF_WAT = " & True)(2)(8)
                    Field4_Type = TableOfFieldsEligibleForSurfWat.Select("TRACT = " & myReader_WA.GetValue(myReader_WA.GetOrdinal("TRACT")) & " and RECEIVE_SURF_WAT = " & True)(3)(8)
                    Field5_Type = TableOfFieldsEligibleForSurfWat.Select("TRACT = " & myReader_WA.GetValue(myReader_WA.GetOrdinal("TRACT")) & " and RECEIVE_SURF_WAT = " & True)(4)(8)
                    Field6_Type = TableOfFieldsEligibleForSurfWat.Select("TRACT = " & myReader_WA.GetValue(myReader_WA.GetOrdinal("TRACT")) & " and RECEIVE_SURF_WAT = " & True)(5)(8)
                    Field7_Type = TableOfFieldsEligibleForSurfWat.Select("TRACT = " & myReader_WA.GetValue(myReader_WA.GetOrdinal("TRACT")) & " and RECEIVE_SURF_WAT = " & True)(6)(8)
                    Field8_Type = TableOfFieldsEligibleForSurfWat.Select("TRACT = " & myReader_WA.GetValue(myReader_WA.GetOrdinal("TRACT")) & " and RECEIVE_SURF_WAT = " & True)(7)(8)
                    Field9_Type = TableOfFieldsEligibleForSurfWat.Select("TRACT = " & myReader_WA.GetValue(myReader_WA.GetOrdinal("TRACT")) & " and RECEIVE_SURF_WAT = " & True)(8)(8)
                    Field10_Type = TableOfFieldsEligibleForSurfWat.Select("TRACT = " & myReader_WA.GetValue(myReader_WA.GetOrdinal("TRACT")) & " and RECEIVE_SURF_WAT = " & True)(9)(8)
                    Field11_Type = TableOfFieldsEligibleForSurfWat.Select("TRACT = " & myReader_WA.GetValue(myReader_WA.GetOrdinal("TRACT")) & " and RECEIVE_SURF_WAT = " & True)(10)(8)
                    Field1_Amt = Tract_Amt * (Field1_Area / Eligible_Area)
                    Field2_Amt = Tract_Amt * (Field2_Area / Eligible_Area)
                    Field3_Amt = Tract_Amt * (Field3_Area / Eligible_Area)
                    Field4_Amt = Tract_Amt * (Field4_Area / Eligible_Area)
                    Field5_Amt = Tract_Amt * (Field5_Area / Eligible_Area)
                    Field6_Amt = Tract_Amt * (Field6_Area / Eligible_Area)
                    Field7_Amt = Tract_Amt * (Field7_Area / Eligible_Area)
                    Field8_Amt = Tract_Amt * (Field8_Area / Eligible_Area)
                    Field9_Amt = Tract_Amt * (Field9_Area / Eligible_Area)
                    Field10_Amt = Tract_Amt * (Field10_Area / Eligible_Area)
                    Field11_Amt = Tract_Amt * (Field11_Area / Eligible_Area)
            End Select

            'Next i

            ' Do I need to delete the OldDbCommand because I run through this a number of times and several new ones will be created.
            myCMD_PA.Cancel()
            myCMD_PA.Dispose()
            myReader_PA.Close()
        End While
        connToAVDb.Close()
        connToAVDb_Rep.Close()
    End Function

    Public Function FinalizeWaterAllocation3(ByVal connToAVDb As System.Data.OleDb.OleDbConnection, ByVal connToAVDb_Copy As System.Data.OleDb.OleDbConnection, _
                                             ByRef WaterAllocationBufferTable As DataSet, ByVal CurrentDate As Date, ByVal Canal1DivertedAmt_m3perWk As Single, _
                                             ByVal Canal2DivertedAmt_m3perWk As Single, ByVal Canal3DivertedAmt_m3perWk As Single, ByVal Canal4DivertedAmt_m3perWk As Single, _
                                             ByVal Canal5DivertedAmt_m3perWk As Single, ByVal Canal6DivertedAmt_m3perWk As Single, ByVal ActiveWells() As Object, _
                                             ByVal QueriedDate() As Object, ByVal MonthlyPumpedAcreFt() As Object, ByVal connToOutputDb As System.Data.OleDb.OleDbConnection)

        Dim TableOfFieldsWithWaterAlloc As DataTable = New DataTable
        'TableOfFieldsWithWaterAlloc = WaterAllocationBufferTable.Tables("HowWaterWasAllocated").Copy
        TableOfFieldsWithWaterAlloc = BuildDataTable(TableOfFieldsWithWaterAlloc)

        Dim TableOfFieldsWithWaterAllocRow As DataRow

        'temp variable for finding bug.
        Dim sw_bug As StreamWriter = New StreamWriter("C:\tmp\waterbalancebugfind.txt")
        sw_bug.WriteLine("Canal" & vbTab & "Diverted_Amt" & vbTab & "NonSeeped_Amt" & vbTab & "ModeledCommandArea_Amt" & vbTab & "Tract" & vbTab & "Tract_Amt" & vbTab & "Within_Area" & vbTab & "Total_Area" & vbTab & "Tract_Area" & vbTab & "Eligible_Area")

        'Create a preliminary allocation table to store results to.  If results aren't the way I like them
        'the water can be shuffled around to achieve a more satisfactory result.
        Dim TempWaterAllocTable As DataTable
        'This table will be filled, then checked, then if it is OK the contents will be transfered to 
        'TableOfFieldsWithWaterAlloc as final values
        'TempWaterAllocTable = WaterAllocationBufferTable.Tables("HowWaterWasAllocated").Copy
        TempWaterAllocTable = New DataTable
        TempWaterAllocTable = BuildDataTable(TempWaterAllocTable)

        Dim TempWaterAllocTableRow As DataRow
        Dim TempWaterAllocTableRow2 As DataRow

        'Keep in mind connToAVDb has been passed in as either upstream or downstream
        connToAVDb.Open()
        connToAVDb_Copy.Open()

        Dim TS As Integer
        Dim ct As Integer
        Dim ct_2 As Integer
        Dim i As Integer
        Dim area_tmp As Single
        Dim DeepPercAmt_Tmp As Single
        Dim runoff_tmp As Single
        Dim Precip_tmp As Single
        Dim SurfWatDel_Temp As Single
        Dim PumpWatDel_Temp As Single
        Dim Fld_ct As Integer
        Dim TAW As Single
        Dim RAW As Single
        Dim AllocationInExceedanceOfMax As Boolean
        Dim Pumped_Amt As Single
        Dim QueryString As String
        Dim QueryString2 As String
        Dim QueryString3 As String
        Dim StringDate As String = CurrentDate.ToShortDateString()
        Dim Tract_Area As Single
        Dim Tract As Integer
        Dim Ident As String
        Dim RandomGenerator As Random
        RandomGenerator = New Random
        Dim RanNum1 As Single
        Dim RanNum2 As Single
        Dim RanNum3 As Single
        Dim RanNum4 As Integer
        Dim Canal As String
        Dim Areas_Table As DataTable
        Dim TimingCodeActive() As Integer = {1, 0, 0}
        Dim Canal_Area() As DataRow
        Dim Total_Area As Single
        Dim Within_Area As Single
        Dim Diverted_Amt As Single
        Dim NonSeeped_Amt As Single
        Dim ModeledCommandArea_Amt As Single
        Dim Tract_Amt As Double
        Dim NumActiveFlds As Integer
        Dim Eligible_Area As Single
        Dim Field1_Area As Single
        Dim Field2_Area As Single
        Dim Field3_Area As Single
        Dim Field4_Area As Single
        Dim Field1_Type As String
        Dim Field2_Type As String
        Dim Field3_Type As String
        Dim Field4_Type As String
        Dim Field1_Amt As Single
        Dim Field2_Amt As Single
        Dim Field3_Amt As Single
        Dim Field4_Amt As Single
        Dim CatlinBanked_Amt As Single = 0
        Dim CatlinBankedPumped_Amt As Single = 0
        Dim FortLyonBanked_Amt As Single = 0
        Dim FortLyonBankedPumped_Amt As Single = 0
        Dim HolbrookBanked_Amt As Single = 0
        Dim HolbrookBankedPumped_Amt As Single = 0
        Dim OteroBanked_Amt As Single = 0
        Dim OteroBankedPumped_Amt As Single = 0
        Dim RockyFordBanked_Amt As Single = 0
        Dim RockyFordBankedPumped_Amt As Single = 0
        Dim HighlineBanked_Amt As Single = 0
        Dim HighlineBankedPumped_Amt As Single = 0
        Dim AmityBanked_Amt As Single = 0
        Dim AmityBankedPumped_Amt As Single = 0
        Dim BuffaloBanked_Amt As Single = 0
        Dim BuffaloBankedPumped_Amt As Single = 0
        Dim FortBentBanked_Amt As Single = 0
        Dim FortBentBankedPumped_Amt As Single = 0
        Dim FortLyonDSBanked_Amt As Single = 0
        Dim FortLyonDSBankedPumped_Amt As Single = 0
        Dim HydeBanked_Amt As Single = 0
        Dim HydeBankedPumped_Amt As Single = 0
        Dim LamarBanked_Amt As Single = 0
        Dim LamarBankedPumped_Amt As Single = 0
        Dim Runoff_Fraction As Single
        Dim lambda As Single = 0.084
        Dim dv As DataView
        Dim AvgFldSize As Single
        Dim Reasonable As Boolean
        Dim HighLowArray(61) As Integer
        Dim OKToReceivePumpWat As Integer
        Dim OKToReceiveSurfWat As Integer
        Dim SmallestField(61) As Boolean
        Dim NumOfDaysLeftInCurrentMonth As Integer
        Dim NumOfTotalDaysInCurrentMonth As Integer
        Dim NumOfDaysInNextMonth As Integer
        Dim NumOfTotalDaysInNextMonth As Integer
        'Dim returnedRows_of_TableOfFieldsWithWaterAlloc() As DataRow

        'Instantiate OleDbDataAdapter to create DataSet
        Dim TractAreaAdapter As OleDbDataAdapter = New OleDbDataAdapter
        'Fetch Tract details
        If Upstream_or_not1 Then
            TractAreaAdapter.SelectCommand = New OleDbCommand("SELECT Tract_Total_Areas.* FROM Tract_Total_Areas;", connToAVDb)
        Else
            If CurrentDate > #12/31/2003# Then
                TractAreaAdapter.SelectCommand = New OleDbCommand("SELECT Tract_Total_Areas.* FROM Tract_Total_Areas;", connToAVDb)
            Else
                TractAreaAdapter.SelectCommand = New OleDbCommand("SELECT Tract_Total_Areas_DWR.* FROM Tract_Total_Areas_DWR;", connToAVDb)
            End If
        End If
        'In Memory cache of data
        Dim TractInformation As DataSet = New DataSet("TractInformation")
        'Fill the dataset
        TractAreaAdapter.Fill(TractInformation, "Tract_Total_Areas")
        'Release the adapter
        TractAreaAdapter.Dispose()

        If Upstream_or_not1 Then
            QueryString = "Select fields_99.TRACT "
            QueryString += "FROM fields_99 "
            QueryString += "GROUP BY fields_99.TRACT;"
        Else
            If CurrentDate > #12/31/2003# Then
                QueryString = "Select fields_04.TRACT "
                QueryString += "FROM fields_04 "
                QueryString += "GROUP BY fields_04.TRACT;"
            Else
                QueryString = "Select DWR_BasinFields_DS.TRACT "
                QueryString += "FROM DWR_BasinFields_DS "
                QueryString += "GROUP BY DWR_BasinFields_DS.TRACT;"
            End If
        End If

        'This following string should work just fine for both upstream and downstream situations.
        QueryString2 = "SELECT CommandAreaAcreage_wNumTracts.* "
        QueryString2 += "FROM CommandAreaAcreage_wNumTracts;"
        Areas_Table = GetTableFromDB(QueryString2, "CommandAreaAcreage_wNumTracts", connToAVDb)

        Dim myCMD_WA As OleDbCommand    '_WA = "Water Allocation"
        Dim myReader_WA As OleDbDataReader
        myCMD_WA = New OleDbCommand(QueryString, connToAVDb)
        myReader_WA = myCMD_WA.ExecuteReader()

        Dim myCMD_PA As OleDbCommand    '_PA = "Pumped Amount"
        Dim myReader_PA As OleDbDataReader

        'The following bit of code determines which Timing codes to include in the subsequent query
        TS = CurrentTS(CurrentDate)
        If TS Mod 2 = 1 Then
            TimingCodeActive(1) = 3
        Else
            TimingCodeActive(1) = 2
        End If
        If ((TS + 4) Mod 4) = 1 Then
            TimingCodeActive(2) = 4
        ElseIf ((TS + 4) Mod 4) = 2 Then
            TimingCodeActive(2) = 5
        ElseIf ((TS + 4) Mod 4) = 3 Then
            TimingCodeActive(2) = 6
        ElseIf ((TS + 4) Mod 4) = 0 Then
            TimingCodeActive(2) = 7
        End If

        'If Upstream_or_not1 Then
        '    If CurrentDate <= #1/1/2002# Or CurrentDate >= #12/31/2003# Then Phil_Fld = 1 Else Phil_Fld = 0 'Time Steps greater than this need to use the State Engineers Field Coverage
        'Else
        '    If CurrentDate > #12/31/2003# Then Eric_Fld = 1 Else Eric_Fld = 0
        'End If

        While myReader_WA.Read()    'This loop only runs through for a given time step, so for multiple time steps it should be nested inside another loop

            Tract_Area = 0
            Tract = myReader_WA.GetValue(myReader_WA.GetOrdinal("TRACT"))
            If Tract = 697 Or Tract = 2692 Then
                Dim dumby As String
                dumby = "dummy"
            End If

            If Upstream_or_not1 Then
                If Tract > 3077 Then Exit While 'This ensures water isn't allocated to Tract 9999
            End If
            ct = 0
            i = 0
            'This loop is looking up the stored value for Tract on row "ct" that is equal to the Tract in question
            While Not (Tract = CStr(TractInformation.Tables.Item(0).Rows(ct)(0)))
                ct += 1
            End While
            Tract_Area = TractInformation.Tables.Item(0).Rows(ct)(1)

            QueryString3 = "SELECT Wells_wTractNum.TRACT, Wells_wTractNum.IDENT "
            QueryString3 += "FROM(Wells_wTractNum) "
            QueryString3 += "WHERE (((Wells_wTractNum.TRACT)=" & CStr(Tract) & "));"

            'Here****************************
            myCMD_PA = New OleDbCommand(QueryString3, connToAVDb_Copy)
            myReader_PA = myCMD_PA.ExecuteReader()

            Pumped_Amt = 0
            While myReader_PA.Read()
                NumOfDaysLeftInCurrentMonth = CalculateNumOfDaysLeftInCurrTS(CurrentDate)
                NumOfDaysInNextMonth = 7 - NumOfDaysLeftInCurrentMonth
                NumOfTotalDaysInCurrentMonth = CurrentDate.DaysInMonth(Year(CurrentDate), Month(CurrentDate))
                NumOfTotalDaysInNextMonth = CurrentDate.DaysInMonth(Year(CurrentDate.AddDays(7)), Month(CurrentDate.AddDays(7)))
                ct = 0
                ct_2 = 0
                'a bit of debug code
                Ident = myReader_PA.GetValue(myReader_PA.GetOrdinal("IDENT"))
                While Not (ActiveWells(TS)(ct) = myReader_PA.GetValue(myReader_PA.GetOrdinal("IDENT")) Or ActiveWells(TS)(ct) = 0)
                    ct += 1
                End While
                Try
                    While Not (ActiveWells(TS + 1)(ct_2) = myReader_PA.GetValue(myReader_PA.GetOrdinal("IDENT")) Or ActiveWells(TS + 1)(ct_2) = 0)
                        ct_2 += 1
                    End While
                Catch ex As Exception
                End Try
                Try
                    Pumped_Amt = Pumped_Amt + ((MonthlyPumpedAcreFt(TS)(ct) * 1233.48677) * NumOfDaysLeftInCurrentMonth / NumOfTotalDaysInCurrentMonth) + ((MonthlyPumpedAcreFt(TS + 1)(ct_2) * 1233.48677) * NumOfDaysInNextMonth / NumOfTotalDaysInNextMonth)
                Catch ex As Exception
                    Pumped_Amt = Pumped_Amt + ((MonthlyPumpedAcreFt(TS)(ct) * 1233.48677) * NumOfDaysLeftInCurrentMonth / NumOfTotalDaysInCurrentMonth)
                End Try

                'A bit of debug code
                If Pumped_Amt > 0 Then
                    Pumped_Amt = Pumped_Amt * 1
                End If
            End While
            myReader_PA.Close()
            myCMD_PA.Dispose()

            'Instantiate OleDbDataAdapter to create DataSet
            Dim TractInfoAdapter As OleDbDataAdapter = New OleDbDataAdapter

            If Upstream_or_not1 Then
                'This query can be found in ArkansasBasinData, Query, Allocated_Water_Priority_PhilFlds
                If CurrentDate <= #1/1/2002# Or CurrentDate >= #12/31/2003# Then
                    QueryString2 = "SELECT fields_99.TRACT, Combined.CANAL, Combined.FIELD_NO, Combined.SHAPE_Area, Combined.CROPS" & Right(StringDate, 2) & ", AllTypeCrops.Priority, Combined.IRRIG_TIME_CODE" & Right(StringDate, 2) & ", WeeklyPrecip_Estimate_Flds.TAW, WeeklyPrecip_Estimate_Flds.RAW, WeeklyPrecip_Estimate_Flds.PRECIP_AMT, WeeklyPrecip_Estimate_Flds.ETc, WeeklyPrecip_Estimate_Flds.Zr, Rnd(Right([FIELD_NO],3)) AS Expr1 "
                    QueryString2 += "FROM ((Combined INNER JOIN AllTypeCrops ON Combined.CROPS" & Right(StringDate, 2) & " = AllTypeCrops.CROPS99) INNER JOIN fields_99 ON Combined.FIELD_NO = fields_99.FIELD_NUMB) INNER JOIN WeeklyPrecip_Estimate_Flds ON Combined.FIELD_NO_TXT = WeeklyPrecip_Estimate_Flds.FIELD_NO_TXT "
                    QueryString2 += "GROUP BY fields_99.TRACT, Combined.CANAL, Combined.FIELD_NO, Combined.SHAPE_Area, Combined.CROPS" & Right(StringDate, 2) & ", AllTypeCrops.Priority, Combined.IRRIG_TIME_CODE" & Right(StringDate, 2) & ", WeeklyPrecip_Estimate_Flds.TAW, WeeklyPrecip_Estimate_Flds.RAW, WeeklyPrecip_Estimate_Flds.PRECIP_AMT, WeeklyPrecip_Estimate_Flds.ETc, WeeklyPrecip_Estimate_Flds.Zr, Rnd(Right([FIELD_NO],3)), Combined.Phil_Fld "
                    QueryString2 += "HAVING(((fields_99.TRACT) = " & Tract & ") And ((Combined.Phil_Fld) = 1)) "
                    QueryString2 += "ORDER BY AllTypeCrops.Priority, Rnd(Right([FIELD_NO],3));"
                Else
                    'This query can be found in ArkansasBasinData, Query, Allocated_Water_Priority_DWRFlds
                    QueryString2 = "SELECT DWR_USFlds.TRACT, Combined.CANAL, Combined.FIELD_NO, Combined.SHAPE_Area, Combined.CROPS" & Right(StringDate, 2) & ", AllTypeCrops.Priority, Combined.IRRIG_TIME_CODE" & Right(StringDate, 2) & ", WeeklyPrecip_Estimate_Flds.TAW, WeeklyPrecip_Estimate_Flds.RAW, WeeklyPrecip_Estimate_Flds.PRECIP_AMT, WeeklyPrecip_Estimate_Flds.ETc, WeeklyPrecip_Estimate_Flds.Zr, Rnd(Right([FIELD_NO],3)) AS Expr1 "
                    QueryString2 += "FROM ((Combined INNER JOIN DWR_USFlds ON Combined.FIELD_NO = DWR_USFlds.GEOLOC) INNER JOIN AllTypeCrops ON Combined.CROPS" & Right(StringDate, 2) & " = AllTypeCrops.CROPS99) INNER JOIN WeeklyPrecip_Estimate_Flds ON Combined.FIELD_NO_TXT = WeeklyPrecip_Estimate_Flds.FIELD_NO_TXT "
                    QueryString2 += "GROUP BY DWR_USFlds.TRACT, Combined.CANAL, Combined.FIELD_NO, Combined.SHAPE_Area, Combined.CROPS" & Right(StringDate, 2) & ", AllTypeCrops.Priority, Combined.IRRIG_TIME_CODE" & Right(StringDate, 2) & ", WeeklyPrecip_Estimate_Flds.TAW, WeeklyPrecip_Estimate_Flds.RAW, WeeklyPrecip_Estimate_Flds.PRECIP_AMT, WeeklyPrecip_Estimate_Flds.ETc, WeeklyPrecip_Estimate_Flds.Zr, Rnd(Right([FIELD_NO],3)), Combined.Phil_Fld "
                    QueryString2 += "HAVING(((DWR_USFlds.TRACT) = " & Tract & ") And ((Combined.Phil_Fld) = 0)) "
                    QueryString2 += "ORDER BY AllTypeCrops.Priority, Rnd(Right([FIELD_NO],3));"
                End If
            Else
                If CurrentDate >= #1/1/2004# Then  'I think "CROPS99" will work out OK
                    QueryString2 = "SELECT fields_04.TRACT, Combined_DS.CANAL, Combined_DS.FIELD_NO, Combined_DS.SHAPE_Area, Combined_DS.CROPS" & Right(StringDate, 2) & ", AllTypeCrops.Priority, Combined_DS.IRRIG_TIME_CODE" & Right(StringDate, 2) & ", WeeklyPrecip_Estimate_Flds.TAW, WeeklyPrecip_Estimate_Flds.RAW, WeeklyPrecip_Estimate_Flds.PRECIP_AMT, WeeklyPrecip_Estimate_Flds.ETc, WeeklyPrecip_Estimate_Flds.Zr, Rnd(Right([FIELD_NO],3)) AS Expr1 "
                    QueryString2 += "FROM ((Combined_DS INNER JOIN AllTypeCrops ON Combined_DS.CROPS" & Right(StringDate, 2) & " = AllTypeCrops.CROPS04) INNER JOIN fields_04 ON Combined_DS.FIELD_NO = fields_04.FIELD_NUMB) INNER JOIN WeeklyPrecip_Estimate_Flds ON Combined_DS.FIELD_NO_TXT = WeeklyPrecip_Estimate_Flds.FIELD_NO_TXT "
                    QueryString2 += "GROUP BY fields_04.TRACT, Combined_DS.CANAL, Combined_DS.FIELD_NO, Combined_DS.SHAPE_Area, Combined_DS.CROPS" & Right(StringDate, 2) & ", AllTypeCrops.Priority, Combined_DS.IRRIG_TIME_CODE" & Right(StringDate, 2) & ", WeeklyPrecip_Estimate_Flds.TAW, WeeklyPrecip_Estimate_Flds.RAW, WeeklyPrecip_Estimate_Flds.PRECIP_AMT, WeeklyPrecip_Estimate_Flds.ETc, WeeklyPrecip_Estimate_Flds.Zr, Rnd(Right([FIELD_NO],3)), Combined_DS.Eric_Fld "
                    QueryString2 += "HAVING(((fields_04.TRACT) = " & Tract & ") And ((Combined_DS.Eric_Fld) = 1)) "
                    QueryString2 += "ORDER BY AllTypeCrops.Priority, Rnd(Right([FIELD_NO],3));"
                Else
                    'This query can be found in ArkansasBasinData, Query, Allocated_Water_Priority_DWRFlds
                    QueryString2 = "SELECT DWR_BasinFields_DS.TRACT, Combined_DS.CANAL, Combined_DS.FIELD_NO, Combined_DS.SHAPE_Area, Combined_DS.CROPS" & Right(StringDate, 2) & ", AllTypeCrops.Priority, Combined_DS.IRRIG_TIME_CODE" & Right(StringDate, 2) & ", WeeklyPrecip_Estimate_Flds.TAW, WeeklyPrecip_Estimate_Flds.RAW, WeeklyPrecip_Estimate_Flds.PRECIP_AMT, WeeklyPrecip_Estimate_Flds.ETc, WeeklyPrecip_Estimate_Flds.Zr, Rnd(Right([FIELD_NO],3)) AS Expr1 "
                    QueryString2 += "FROM ((Combined_DS INNER JOIN DWR_BasinFields_DS ON Combined_DS.FIELD_NO = DWR_BasinFields_DS.GEOLOC) INNER JOIN AllTypeCrops ON Combined_DS.CROPS" & Right(StringDate, 2) & " = AllTypeCrops.CROPS04) INNER JOIN WeeklyPrecip_Estimate_Flds ON Combined_DS.FIELD_NO_TXT = WeeklyPrecip_Estimate_Flds.FIELD_NO_TXT "
                    QueryString2 += "GROUP BY DWR_BasinFields_DS.TRACT, Combined_DS.CANAL, Combined_DS.FIELD_NO, Combined_DS.SHAPE_Area, Combined_DS.CROPS" & Right(StringDate, 2) & ", AllTypeCrops.Priority, Combined_DS.IRRIG_TIME_CODE" & Right(StringDate, 2) & ", WeeklyPrecip_Estimate_Flds.TAW, WeeklyPrecip_Estimate_Flds.RAW, WeeklyPrecip_Estimate_Flds.PRECIP_AMT, WeeklyPrecip_Estimate_Flds.ETc, WeeklyPrecip_Estimate_Flds.Zr, Rnd(Right([FIELD_NO],3)), Combined_DS.Eric_Fld "
                    QueryString2 += "HAVING(((DWR_BasinFields_DS.TRACT) = " & Tract & ") And ((Combined_DS.Eric_Fld) = 0)) "
                    QueryString2 += "ORDER BY AllTypeCrops.Priority, Rnd(Right([FIELD_NO],3));"
                End If
            End If

            'Fetch Tract details
            'Here****************************
            'Keep in mind that connToAVDb_Copy is passed in for either upstream or downstream accordingly
            'and should be all set to go
            TractInfoAdapter.SelectCommand = New OleDbCommand(QueryString2, connToAVDb_Copy)

            'Fill the dataset
            TractInfoAdapter.Fill(TractInformation, "Allocated_Water_Priority")
            Fld_ct = TractInformation.Tables(1).Rows.Count()

            'Get the canal name and calculate how much canal water is available.
            ct = 0
            Try
                Canal = TractInformation.Tables.Item(1).Rows(ct)(1)
            Catch
                Canal = " "
            End Try
            If Canal = "Fort Lyon Canal" And Upstream_or_not1 Then
                Canal = "Fort Lyon Canal US"
            ElseIf Canal = "Fort Lyon Canal DS" And Not Upstream_or_not1 Then
                Canal = "Fort Lyon Canal DS"
            End If

            'This next if statement needed for those fields that are south of river, east of Lu Junta (since they are attached to no command area)
            If Not Canal = " " And Not Canal = "South Side" And Not Canal = "Sprinklers" Then
                Canal_Area = Areas_Table.Select("CANAL = '" & Canal & "'")  'The DataRow Canal_Area contains "Within Area" and "Total Area"
                Total_Area = Canal_Area.GetValue(0)(1)
                Within_Area = Canal_Area.GetValue(0)(2)
            End If
            If Upstream_or_not1 Then
                Select Case Canal
                    Case "Catlin Canal"
                        Diverted_Amt = Canal1DivertedAmt_m3perWk
                    Case "Fort Lyon Canal US"
                        Diverted_Amt = Canal2DivertedAmt_m3perWk
                    Case "Holbrook Canal"
                        Diverted_Amt = Canal3DivertedAmt_m3perWk
                    Case "Otero Canal"
                        Diverted_Amt = Canal4DivertedAmt_m3perWk
                    Case "Rocky Ford Ditch"
                        Diverted_Amt = Canal5DivertedAmt_m3perWk
                    Case "Rocky Ford Highline"
                        Diverted_Amt = Canal6DivertedAmt_m3perWk
                    Case Else
                        Diverted_Amt = 0
                End Select
            Else
                Select Case Canal
                    Case "Amity Canal"
                        Diverted_Amt = Canal1DivertedAmt_m3perWk
                    Case "Buffalo Canal"
                        Diverted_Amt = Canal2DivertedAmt_m3perWk
                    Case "Fort Bent Canal"
                        Diverted_Amt = Canal3DivertedAmt_m3perWk
                    Case "Fort Lyon Canal DS"
                        Diverted_Amt = Canal4DivertedAmt_m3perWk
                    Case "Hyde Ditch"
                        Diverted_Amt = Canal5DivertedAmt_m3perWk
                    Case "Lamar Canal"
                        Diverted_Amt = Canal6DivertedAmt_m3perWk
                    Case Else
                        Diverted_Amt = 0
                End Select
            End If
            'Diverted_Amt = Diverted_Amt * 0.75          '25% Lease Fallow alternative management scenario
            NonSeeped_Amt = 0.75 * Diverted_Amt        'Deduct seepage
            If Upstream_or_not1 Then
                If Canal = "Fort Lyon Canal US" Then
                    ModeledCommandArea_Amt = 0.1776 * NonSeeped_Amt '0.0888 is the proportion of the modeled region within Fort Lyon Canal US, but shares are double counted.
                Else
                    ModeledCommandArea_Amt = (Within_Area / Total_Area) * NonSeeped_Amt  'Correct for portion of Command area that lies within the modeled region
                End If
            Else
                If Canal = "Fort Lyon Canal DS" Then
                    'Added on 6-25-09: After looking at the calculated "Observed" ground water return flow, they seem too low.
                    'In an effort to look at where too much water might coming from, it seems that too much
                    'water has been simulated as making its way east of May Valley Road (County Road 8).  After
                    'speaking with Manny Torrez on 6-25-09 it sounds like there are (ballpark) 7,000 shares of 
                    'water east of the May Valley drain out of 93,000 total under the Fort Lyon.  Therefore,
                    '7,000/93,000 = 7.50%

                    'ModeledCommandArea_Amt = 0.2055 * NonSeeped_Amt '0.2055 is the proportion of the modeled region within Fort Lyon Canal DS
                    ModeledCommandArea_Amt = 0.0752 * NonSeeped_Amt '0.0752 is the new proportion of actual water making its into the 
                    'modeled region within Fort Lyon Canal DS
                Else
                    ModeledCommandArea_Amt = (Within_Area / Total_Area) * NonSeeped_Amt
                End If
            End If
            Tract_Amt = (Tract_Area / Within_Area) * ModeledCommandArea_Amt             'Start here follow the code through and also look at whether or not the fort lyon amount after correcting for within_area is appropriate.  
            Eligible_Area = 0
            For ct = 0 To TractInformation.Tables(1).Select("IRRIG_TIME_CODE" & Right(CStr(CurrentDate), 2) & " = " & TimingCodeActive(0) & " Or IRRIG_TIME_CODE" & Right(CStr(CurrentDate), 2) & " = " & TimingCodeActive(1) & " Or IRRIG_TIME_CODE" & Right(CStr(CurrentDate), 2) & " = " & TimingCodeActive(2)).Length() - 1
                Eligible_Area = Eligible_Area + TractInformation.Tables(1).Select("IRRIG_TIME_CODE" & Right(CStr(CurrentDate), 2) & " = " & TimingCodeActive(0) & " Or IRRIG_TIME_CODE" & Right(CStr(CurrentDate), 2) & " = " & TimingCodeActive(1) & " Or IRRIG_TIME_CODE" & Right(CStr(CurrentDate), 2) & " = " & TimingCodeActive(2))(ct)(3)
            Next ct
            sw_bug.WriteLine(Canal & vbTab & Diverted_Amt & vbTab & NonSeeped_Amt & vbTab & ModeledCommandArea_Amt & vbTab & Tract & vbTab & Tract_Amt & vbTab & Within_Area & vbTab & Total_Area & vbTab & Tract_Area & vbTab & Eligible_Area)
            sw_bug.Flush()
            If ct > 4 Then
                For i = 0 To TractInformation.Tables.Item(1).Rows.Count() - 1
                    RanNum1 = RandomGenerator.NextDouble()
                    TractInformation.Tables.Item(1).Rows(i)(12) = RanNum1 + TractInformation.Tables.Item(1).Rows(i)(5)
                    'The above random number is a bit of a hybrid, in that it combines two pieces of 
                    'information in one number.  When I perform a sort command on this column below
                    'it will be done in way that preserves the priority code, but randomizes the order
                    'in which fields will receive water.
                Next i
            End If

            'This next bit of code could be redone in a better way (I think), but for 
            'now I chose to do it this way for simplicity.  This checks to see if other 
            'tracts have not used their water and it was banked.  If so, that water becomes
            'available to the current tract.
            Try
                'Upstream
                If TractInformation.Tables(1).Rows(0)(1) = "Catlin Canal" Then
                    Tract_Amt = Tract_Amt + CatlinBanked_Amt
                    Pumped_Amt = Pumped_Amt + CatlinBankedPumped_Amt
                    CatlinBanked_Amt = 0
                    CatlinBankedPumped_Amt = 0
                ElseIf TractInformation.Tables(1).Rows(0)(1) = "Fort Lyon Canal" And Upstream_or_not1 Then
                    Tract_Amt = Tract_Amt + FortLyonBanked_Amt
                    Pumped_Amt = Pumped_Amt + FortLyonBankedPumped_Amt
                    FortLyonBanked_Amt = 0
                    FortLyonBankedPumped_Amt = 0
                ElseIf TractInformation.Tables(1).Rows(0)(1) = "Holbrook Canal" Then
                    Tract_Amt = Tract_Amt + HolbrookBanked_Amt
                    Pumped_Amt = Pumped_Amt + HolbrookBankedPumped_Amt
                    HolbrookBanked_Amt = 0
                    HolbrookBankedPumped_Amt = 0
                ElseIf TractInformation.Tables(1).Rows(0)(1) = "Otero Canal" Then
                    Tract_Amt = Tract_Amt + OteroBanked_Amt
                    Pumped_Amt = Pumped_Amt + OteroBankedPumped_Amt
                    OteroBanked_Amt = 0
                    OteroBankedPumped_Amt = 0
                ElseIf TractInformation.Tables(1).Rows(0)(1) = "Rocky Ford Ditch" Then
                    Tract_Amt = Tract_Amt + RockyFordBanked_Amt
                    Pumped_Amt = Pumped_Amt + RockyFordBankedPumped_Amt
                    RockyFordBanked_Amt = 0
                    RockyFordBankedPumped_Amt = 0
                ElseIf TractInformation.Tables(1).Rows(0)(1) = "Rocky Ford Highline" Then
                    Tract_Amt = Tract_Amt + HighlineBanked_Amt
                    Pumped_Amt = Pumped_Amt + HighlineBankedPumped_Amt
                    HighlineBanked_Amt = 0
                    HighlineBankedPumped_Amt = 0
                    'Downstream
                ElseIf TractInformation.Tables(1).Rows(0)(1) = "Amity Canal" Then
                    Tract_Amt = Tract_Amt + AmityBanked_Amt
                    Pumped_Amt = Pumped_Amt + AmityBankedPumped_Amt
                    AmityBanked_Amt = 0
                    AmityBankedPumped_Amt = 0
                ElseIf TractInformation.Tables(1).Rows(0)(1) = "Buffalo Canal" Then
                    Tract_Amt = Tract_Amt + BuffaloBanked_Amt
                    Pumped_Amt = Pumped_Amt + BuffaloBankedPumped_Amt
                    BuffaloBanked_Amt = 0
                    BuffaloBankedPumped_Amt = 0
                ElseIf TractInformation.Tables(1).Rows(0)(1) = "Fort Bent Canal" Then
                    Tract_Amt = Tract_Amt + FortBentBanked_Amt
                    Pumped_Amt = Pumped_Amt + FortBentBankedPumped_Amt
                    FortBentBanked_Amt = 0
                    FortBentBankedPumped_Amt = 0
                ElseIf TractInformation.Tables(1).Rows(0)(1) = "Fort Lyon Canal DS" And Not Upstream_or_not1 Then
                    Tract_Amt = Tract_Amt + FortLyonDSBanked_Amt
                    Pumped_Amt = Pumped_Amt + AmityBankedPumped_Amt
                    FortLyonDSBanked_Amt = 0
                    FortLyonDSBankedPumped_Amt = 0
                ElseIf TractInformation.Tables(1).Rows(0)(1) = "Hyde Ditch" Then
                    Tract_Amt = Tract_Amt + HydeBanked_Amt
                    Pumped_Amt = Pumped_Amt + HydeBankedPumped_Amt
                    HydeBanked_Amt = 0
                    HydeBankedPumped_Amt = 0
                ElseIf TractInformation.Tables(1).Rows(0)(1) = "Lamar Canal" Then
                    Tract_Amt = Tract_Amt + LamarBanked_Amt
                    Pumped_Amt = Pumped_Amt + LamarBankedPumped_Amt
                    LamarBanked_Amt = 0
                    LamarBankedPumped_Amt = 0
                End If
            Catch   'The reason for this try statement is due to fields that have no command area (error avoidance)
            End Try

            Select Case ct
                Case 0
50:                 TempWaterAllocTable.Clear()
                    'I completely reworked case 0 because in the case where a tract had all fields as GRASS/PASTURE
                    'way too much water would often end up on a single field.  The code now ensures that can not
                    'happen.  It may be that too little water arrives at each field the way it is coded now.
                    'However, I've decided to leave it this way for simplicity.
                    ct = TractInformation.Tables(1).Rows.Count()
                    For i = 1 To ct
                        TempWaterAllocTableRow = TempWaterAllocTable.NewRow()
                        TempWaterAllocTableRow("Tract") = TractInformation.Tables(1).Rows(i - 1)(0)
                        TempWaterAllocTableRow("Field_No") = TractInformation.Tables(1).Rows(i - 1)(2)
                        TempWaterAllocTableRow("Area") = TractInformation.Tables(1).Rows(i - 1)(3)
                        area_tmp = TractInformation.Tables(1).Rows(i - 1)(3)
                        TempWaterAllocTableRow("Date_") = CurrentDate
                        Precip_tmp = TractInformation.Tables(1).Rows(i - 1)(9)
                        TempWaterAllocTableRow("Precip_Amt") = TractInformation.Tables(1).Rows(i - 1)(9)
                        TempWaterAllocTableRow("ETc") = TractInformation.Tables(1).Rows(i - 1)(10)
                        TempWaterAllocTableRow("Zr") = TractInformation.Tables(1).Rows(i - 1)(11)
                        RanNum1 = RandomGenerator.NextDouble()
                        Runoff_Fraction = (-1 * Math.Log(RanNum1)) / (1 / lambda)
                        TempWaterAllocTableRow("SurfWatDelivered") = ((Tract_Amt * (area_tmp / Tract_Area)) / TractInformation.Tables(1).Rows(i - 1)(3)) * 1000
                        SurfWatDel_Temp = ((Tract_Amt * (area_tmp / Tract_Area)) / TractInformation.Tables(1).Rows(i - 1)(3)) * 1000
                        TempWaterAllocTableRow("PumpWatDelivered") = ((Pumped_Amt * (area_tmp / Tract_Area)) / TractInformation.Tables(1).Rows(i - 1)(3)) * 1000
                        PumpWatDel_Temp = ((Pumped_Amt * (area_tmp / Tract_Area)) / TractInformation.Tables(1).Rows(i - 1)(3)) * 1000
                        runoff_tmp = (((((Tract_Amt * (area_tmp / Tract_Area)) + (Pumped_Amt * (area_tmp / Tract_Area))) / TractInformation.Tables(1).Rows(i - 1)(3)) * 1000) + ((Pumped_Amt / TractInformation.Tables(1).Rows(i - 1)(3)) * 1000) + TractInformation.Tables(1).Rows(i - 1)(9)) * Runoff_Fraction
                        TempWaterAllocTableRow("Runoff_Amt") = (((((Tract_Amt * (area_tmp / Tract_Area)) + (Pumped_Amt * (area_tmp / Tract_Area))) / TractInformation.Tables(1).Rows(i - 1)(3)) * 1000) + TractInformation.Tables(1).Rows(i - 1)(9)) * Runoff_Fraction
                        RanNum1 = RandomGenerator.NextDouble()
                        RanNum2 = RandomGenerator.NextDouble()
                        While Not (RanNum1 <= 0.8 And RanNum2 <= 1 - 1.25 * RanNum1)
                            RanNum1 = RandomGenerator.NextDouble()
                            RanNum2 = RandomGenerator.NextDouble()
                        End While
                        DeepPercAmt_Tmp = (((((Tract_Amt * (area_tmp / Tract_Area)) + (Pumped_Amt * (area_tmp / Tract_Area))) / TractInformation.Tables(1).Rows(i - 1)(3)) * 1000) + TractInformation.Tables(1).Rows(i - 1)(9)) * (1 - Runoff_Fraction) * RanNum1
                        TempWaterAllocTableRow("DeepPerc_Amt") = (((((Tract_Amt * (area_tmp / Tract_Area)) + (Pumped_Amt * (area_tmp / Tract_Area))) / TractInformation.Tables(1).Rows(i - 1)(3)) * 1000) + TractInformation.Tables(1).Rows(i - 1)(9)) * (1 - Runoff_Fraction) * RanNum1
                        TempWaterAllocTableRow("TAW") = TractInformation.Tables(1).Rows(i - 1)(7)
                        TempWaterAllocTableRow("RAW") = TractInformation.Tables(1).Rows(i - 1)(8)
                        TempWaterAllocTable.Rows.Add(TempWaterAllocTableRow)
                    Next i

                Case 1
                    Field1_Area = TractInformation.Tables(1).Select("IRRIG_TIME_CODE" & Right(CStr(CurrentDate), 2) & " = " & TimingCodeActive(0) & " Or IRRIG_TIME_CODE" & Right(CStr(CurrentDate), 2) & " = " & TimingCodeActive(1) & " Or IRRIG_TIME_CODE" & Right(CStr(CurrentDate), 2) & " = " & TimingCodeActive(2))(ct - 1)(3)
                    'Field1_Type = TractInformation.Tables(1).Select("IRRIG_TIME_CODE" & Right(CStr(CurrentDate), 2) & " = " & TimingCodeActive(0) & " Or IRRIG_TIME_CODE" & Right(CStr(CurrentDate), 2) & " = " & TimingCodeActive(1) & " Or IRRIG_TIME_CODE" & Right(CStr(CurrentDate), 2) & " = " & TimingCodeActive(2))(ct - 1)(4)
                    Field1_Amt = Tract_Amt * (Field1_Area / Eligible_Area)
                    'This code redirects to "Case 0" above in order to avoid one field one field getting too much water
                    If Field1_Amt / Field1_Area > 0.3 Then GoTo 50
                    'Check_Depths(1, CurrentDate, Field1_Area, , , , , , , , , , _
                    '             Field1_Type, , , , , , , , , , _
                    '             Field1_Amt, , , , , , , , , )
                    If Pumped_Amt > 0 And TractInformation.Tables(1).Rows.Count() > 1 Then
                        Dim NumIterations As Integer = 0
                        RanNum4 = RandomGenerator.Next(1, TractInformation.Tables(1).Rows.Count())
                        'Send the pumped water to the "RanNum4'th" field and ensure that the RanNum4'th 
                        'field is not the same field that is to receive surface water (the next few lines of code)
                        While Math.Floor(TractInformation.Tables(1).Rows(RanNum4)(3)) = Math.Floor(Field1_Area) Or _
                                TractInformation.Tables(1).Rows(RanNum4)(6) = 0
                            RanNum4 = RandomGenerator.Next(0, TractInformation.Tables(1).Rows.Count())
                            NumIterations += 1
                            If NumIterations > 15 Then Exit While
                        End While
                        'The surface water should go to "Field1"
                        For i = 1 To TractInformation.Tables(1).Rows.Count()
                            'TableOfFieldsWithWaterAllocRow = TableOfFieldsWithWaterAlloc.NewRow()
                            TempWaterAllocTableRow = TempWaterAllocTable.NewRow()
                            'TableOfFieldsWithWaterAllocRow("Tract") = TractInformation.Tables(1).Rows(i - 1)(0)
                            TempWaterAllocTableRow("Tract") = TractInformation.Tables(1).Rows(i - 1)(0)
                            'TableOfFieldsWithWaterAllocRow("Field_No") = TractInformation.Tables(1).Rows(i - 1)(2)
                            TempWaterAllocTableRow("Field_No") = TractInformation.Tables(1).Rows(i - 1)(2)
                            TempWaterAllocTableRow("Area") = TractInformation.Tables(1).Rows(i - 1)(3)
                            'TableOfFieldsWithWaterAllocRow("Date_") = CurrentDate
                            TempWaterAllocTableRow("Date_") = CurrentDate
                            'TableOfFieldsWithWaterAllocRow("Precip_Amt") = TractInformation.Tables(1).Rows(i - 1)(9)
                            TempWaterAllocTableRow("Precip_Amt") = TractInformation.Tables(1).Rows(i - 1)(9)
                            'TableOfFieldsWithWaterAllocRow("ETc") = TractInformation.Tables(1).Rows(i - 1)(10)
                            TempWaterAllocTableRow("ETc") = TractInformation.Tables(1).Rows(i - 1)(10)
                            'TableOfFieldsWithWaterAllocRow("Zr") = TractInformation.Tables(1).Rows(i - 1)(11)
                            TempWaterAllocTableRow("Zr") = TractInformation.Tables(1).Rows(i - 1)(11)

                            RanNum1 = RandomGenerator.NextDouble()
                            Runoff_Fraction = (-1 * Math.Log(RanNum1)) / (1 / lambda)

                            If Math.Floor(TractInformation.Tables(1).Rows(i - 1)(3)) = Math.Floor(Field1_Area) Then
                                'TableOfFieldsWithWaterAllocRow("SurfWatDelivered") = (Field1_Amt / Field1_Area) * 1000
                                TempWaterAllocTableRow("SurfWatDelivered") = (Field1_Amt / Field1_Area) * 1000
                                'TableOfFieldsWithWaterAllocRow("PumpWatDelivered") = 0
                                TempWaterAllocTableRow("PumpWatDelivered") = 0
                                'TableOfFieldsWithWaterAllocRow("Runoff_Amt") = (((Field1_Amt / Field1_Area) * 1000) + TractInformation.Tables(1).Rows(i - 1)(9)) * Runoff_Fraction
                                TempWaterAllocTableRow("Runoff_Amt") = (((Field1_Amt / Field1_Area) * 1000) + TractInformation.Tables(1).Rows(i - 1)(9)) * Runoff_Fraction
                                RanNum1 = RandomGenerator.NextDouble()
                                RanNum2 = RandomGenerator.NextDouble()
                                While Not (RanNum1 <= 0.8 And RanNum2 <= 1 - 1.25 * RanNum1)
                                    RanNum1 = RandomGenerator.NextDouble()
                                    RanNum2 = RandomGenerator.NextDouble()
                                End While
                                'TableOfFieldsWithWaterAllocRow("DeepPerc_Amt") = (((Field1_Amt / Field1_Area) * 1000) + TractInformation.Tables(1).Rows(i - 1)(9)) * (1 - Runoff_Fraction) * RanNum1
                                TempWaterAllocTableRow("DeepPerc_Amt") = (((Field1_Amt / Field1_Area) * 1000) + TractInformation.Tables(1).Rows(i - 1)(9)) * (1 - Runoff_Fraction) * RanNum1
                            ElseIf i = RanNum4 Then 'Allocate Pumping Water
                                'TableOfFieldsWithWaterAllocRow("SurfWatDelivered") = 0
                                TempWaterAllocTableRow("SurfWatDelivered") = 0
                                'TableOfFieldsWithWaterAllocRow("PumpWatDelivered") = (Pumped_Amt / Field1_Area) * 1000
                                TempWaterAllocTableRow("PumpWatDelivered") = (Pumped_Amt / Field1_Area) * 1000
                                'TableOfFieldsWithWaterAllocRow("Runoff_Amt") = (((Pumped_Amt / Field1_Area) * 1000) + TractInformation.Tables(1).Rows(i - 1)(9)) * Runoff_Fraction
                                TempWaterAllocTableRow("Runoff_Amt") = (((Pumped_Amt / Field1_Area) * 1000) + TractInformation.Tables(1).Rows(i - 1)(9)) * Runoff_Fraction
                                RanNum1 = RandomGenerator.NextDouble()
                                RanNum2 = RandomGenerator.NextDouble()
                                While Not (RanNum1 <= 0.8 And RanNum2 <= 1 - 1.25 * RanNum1)
                                    RanNum1 = RandomGenerator.NextDouble()
                                    RanNum2 = RandomGenerator.NextDouble()
                                End While
                                'TableOfFieldsWithWaterAllocRow("DeepPerc_Amt") = (((Pumped_Amt / Field1_Area) * 1000) + TractInformation.Tables(1).Rows(i - 1)(9)) * (1 - Runoff_Fraction) * RanNum1
                                TempWaterAllocTableRow("DeepPerc_Amt") = (((Pumped_Amt / Field1_Area) * 1000) + TractInformation.Tables(1).Rows(i - 1)(9)) * (1 - Runoff_Fraction) * RanNum1
                            Else
                                'TableOfFieldsWithWaterAllocRow("SurfWatDelivered") = 0
                                TempWaterAllocTableRow("SurfWatDelivered") = 0
                                'TableOfFieldsWithWaterAllocRow("PumpWatDelivered") = 0
                                TempWaterAllocTableRow("PumpWatDelivered") = 0
                                If TractInformation.Tables(1).Rows(i - 1)(9) <= 50 Then
                                    'TableOfFieldsWithWaterAllocRow("Runoff_Amt") = TractInformation.Tables(1).Rows(i - 1)(9) * 0.3
                                    TempWaterAllocTableRow("Runoff_Amt") = TractInformation.Tables(1).Rows(i - 1)(9) * 0.3
                                    'The runoff from precip should be based solely upon soil capacity
                                    'TableOfFieldsWithWaterAllocRow("DeepPerc_Amt") = 0
                                    TempWaterAllocTableRow("DeepPerc_Amt") = 0
                                ElseIf TractInformation.Tables(1).Rows(i - 1)(9) > 50 Then
                                    'TableOfFieldsWithWaterAllocRow("Runoff_Amt") = TractInformation.Tables(1).Rows(i - 1)(9) * 0.5
                                    TempWaterAllocTableRow("Runoff_Amt") = TractInformation.Tables(1).Rows(i - 1)(9) * 0.5
                                    'The runoff from precip should be based solely upon soil capacity
                                    'TableOfFieldsWithWaterAllocRow("DeepPerc_Amt") = 0
                                    TempWaterAllocTableRow("DeepPerc_Amt") = 0
                                End If
                            End If
                            'TableOfFieldsWithWaterAllocRow("TAW") = TractInformation.Tables(1).Rows(i - 1)(7)
                            TempWaterAllocTableRow("TAW") = TractInformation.Tables(1).Rows(i - 1)(7)
                            'TableOfFieldsWithWaterAllocRow("RAW") = TractInformation.Tables(1).Rows(i - 1)(8)
                            TempWaterAllocTableRow("RAW") = TractInformation.Tables(1).Rows(i - 1)(8)
                            'TableOfFieldsWithWaterAlloc.Rows.Add(TableOfFieldsWithWaterAllocRow)
                            TempWaterAllocTable.Rows.Add(TempWaterAllocTableRow)
                        Next i
                    ElseIf Pumped_Amt > 0 And TractInformation.Tables(1).Rows.Count() = 1 Then
                        'TableOfFieldsWithWaterAllocRow = TableOfFieldsWithWaterAlloc.NewRow()
                        TempWaterAllocTableRow = TempWaterAllocTable.NewRow()
                        'TableOfFieldsWithWaterAllocRow("Tract") = TractInformation.Tables(1).Rows(i)(0)
                        TempWaterAllocTableRow("Tract") = TractInformation.Tables(1).Rows(i)(0)
                        'TableOfFieldsWithWaterAllocRow("Field_No") = TractInformation.Tables(1).Rows(i)(2)
                        TempWaterAllocTableRow("Field_No") = TractInformation.Tables(1).Rows(i)(2)
                        TempWaterAllocTableRow("Area") = TractInformation.Tables(1).Rows(i)(3)
                        'TableOfFieldsWithWaterAllocRow("Date_") = CurrentDate
                        TempWaterAllocTableRow("Date_") = CurrentDate
                        'TableOfFieldsWithWaterAllocRow("Precip_Amt") = TractInformation.Tables(1).Rows(i)(9)
                        TempWaterAllocTableRow("Precip_Amt") = TractInformation.Tables(1).Rows(i)(9)
                        'TableOfFieldsWithWaterAllocRow("ETc") = TractInformation.Tables(1).Rows(i)(10)
                        TempWaterAllocTableRow("ETc") = TractInformation.Tables(1).Rows(i)(10)
                        'TableOfFieldsWithWaterAllocRow("Zr") = TractInformation.Tables(1).Rows(i)(11)
                        TempWaterAllocTableRow("Zr") = TractInformation.Tables(1).Rows(i)(11)

                        RanNum1 = RandomGenerator.NextDouble()
                        Runoff_Fraction = (-1 * Math.Log(RanNum1)) / (1 / lambda)

                        'TableOfFieldsWithWaterAllocRow("SurfWatDelivered") = (Field1_Amt / Field1_Area) * 1000
                        TempWaterAllocTableRow("SurfWatDelivered") = (Field1_Amt / Field1_Area) * 1000
                        'TableOfFieldsWithWaterAllocRow("PumpWatDelivered") = (Pumped_Amt / Field1_Area) * 1000
                        TempWaterAllocTableRow("PumpWatDelivered") = (Pumped_Amt / Field1_Area) * 1000
                        'TableOfFieldsWithWaterAllocRow("Runoff_Amt") = (((Field1_Amt / Field1_Area) * 1000) + ((Pumped_Amt / Field1_Area) * 1000) + TractInformation.Tables(1).Rows(i)(9)) * Runoff_Fraction
                        TempWaterAllocTableRow("Runoff_Amt") = (((Field1_Amt / Field1_Area) * 1000) + ((Pumped_Amt / Field1_Area) * 1000) + TractInformation.Tables(1).Rows(i)(9)) * Runoff_Fraction
                        RanNum1 = RandomGenerator.NextDouble()
                        RanNum2 = RandomGenerator.NextDouble()
                        While Not (RanNum1 <= 0.8 And RanNum2 <= 1 - 1.25 * RanNum1)
                            RanNum1 = RandomGenerator.NextDouble()
                            RanNum2 = RandomGenerator.NextDouble()
                        End While
                        'TableOfFieldsWithWaterAllocRow("DeepPerc_Amt") = (((Field1_Amt / Field1_Area) * 1000) + ((Pumped_Amt / Field1_Area) * 1000) + TractInformation.Tables(1).Rows(i)(9)) * (1 - Runoff_Fraction) * RanNum1
                        TempWaterAllocTableRow("DeepPerc_Amt") = (((Field1_Amt / Field1_Area) * 1000) + ((Pumped_Amt / Field1_Area) * 1000) + TractInformation.Tables(1).Rows(i)(9)) * (1 - Runoff_Fraction) * RanNum1
                        'TableOfFieldsWithWaterAllocRow("TAW") = TractInformation.Tables(1).Rows(i)(7)
                        TempWaterAllocTableRow("TAW") = TractInformation.Tables(1).Rows(i)(7)
                        'TableOfFieldsWithWaterAllocRow("RAW") = TractInformation.Tables(1).Rows(i)(8)
                        TempWaterAllocTableRow("RAW") = TractInformation.Tables(1).Rows(i)(8)
                        'TableOfFieldsWithWaterAlloc.Rows.Add(TableOfFieldsWithWaterAllocRow)
                        TempWaterAllocTable.Rows.Add(TempWaterAllocTableRow)
                    ElseIf Pumped_Amt = 0 Then
                        For i = 1 To TractInformation.Tables(1).Rows.Count()
                            'TableOfFieldsWithWaterAllocRow = TableOfFieldsWithWaterAlloc.NewRow()
                            TempWaterAllocTableRow = TempWaterAllocTable.NewRow()
                            'TableOfFieldsWithWaterAllocRow("Tract") = TractInformation.Tables(1).Rows(i - 1)(0)
                            TempWaterAllocTableRow("Tract") = TractInformation.Tables(1).Rows(i - 1)(0)
                            'TableOfFieldsWithWaterAllocRow("Field_No") = TractInformation.Tables(1).Rows(i - 1)(2)
                            TempWaterAllocTableRow("Field_No") = TractInformation.Tables(1).Rows(i - 1)(2)
                            TempWaterAllocTableRow("Area") = TractInformation.Tables(1).Rows(i - 1)(3)
                            'TableOfFieldsWithWaterAllocRow("Date_") = CurrentDate
                            TempWaterAllocTableRow("Date_") = CurrentDate
                            'TableOfFieldsWithWaterAllocRow("Precip_Amt") = TractInformation.Tables(1).Rows(i - 1)(9)
                            TempWaterAllocTableRow("Precip_Amt") = TractInformation.Tables(1).Rows(i - 1)(9)
                            'TableOfFieldsWithWaterAllocRow("ETc") = TractInformation.Tables(1).Rows(i - 1)(10)
                            TempWaterAllocTableRow("ETc") = TractInformation.Tables(1).Rows(i - 1)(10)
                            'TableOfFieldsWithWaterAllocRow("Zr") = TractInformation.Tables(1).Rows(i - 1)(11)
                            TempWaterAllocTableRow("Zr") = TractInformation.Tables(1).Rows(i - 1)(11)

                            RanNum1 = RandomGenerator.NextDouble()
                            Runoff_Fraction = (-1 * Math.Log(RanNum1)) / (1 / lambda)

                            If Math.Floor(TractInformation.Tables(1).Rows(i - 1)(3)) = Math.Floor(Field1_Area) Then
                                'TableOfFieldsWithWaterAllocRow("SurfWatDelivered") = (Field1_Amt / Field1_Area) * 1000
                                TempWaterAllocTableRow("SurfWatDelivered") = (Field1_Amt / Field1_Area) * 1000
                                'TableOfFieldsWithWaterAllocRow("PumpWatDelivered") = 0
                                TempWaterAllocTableRow("PumpWatDelivered") = 0
                                'TableOfFieldsWithWaterAllocRow("Runoff_Amt") = (((Field1_Amt / Field1_Area) * 1000) + TractInformation.Tables(1).Rows(i - 1)(9)) * Runoff_Fraction
                                TempWaterAllocTableRow("Runoff_Amt") = (((Field1_Amt / Field1_Area) * 1000) + TractInformation.Tables(1).Rows(i - 1)(9)) * Runoff_Fraction
                                RanNum1 = RandomGenerator.NextDouble()
                                RanNum2 = RandomGenerator.NextDouble()
                                While Not (RanNum1 <= 0.8 And RanNum2 <= 1 - 1.25 * RanNum1)
                                    RanNum1 = RandomGenerator.NextDouble()
                                    RanNum2 = RandomGenerator.NextDouble()
                                End While
                                'TableOfFieldsWithWaterAllocRow("DeepPerc_Amt") = (((Field1_Amt / Field1_Area) * 1000) + TractInformation.Tables(1).Rows(i - 1)(9)) * (1 - Runoff_Fraction) * RanNum1
                                TempWaterAllocTableRow("DeepPerc_Amt") = (((Field1_Amt / Field1_Area) * 1000) + TractInformation.Tables(1).Rows(i - 1)(9)) * (1 - Runoff_Fraction) * RanNum1
                            Else
                                'TableOfFieldsWithWaterAllocRow("SurfWatDelivered") = 0
                                TempWaterAllocTableRow("SurfWatDelivered") = 0
                                'TableOfFieldsWithWaterAllocRow("PumpWatDelivered") = 0
                                TempWaterAllocTableRow("PumpWatDelivered") = 0
                                If TractInformation.Tables(1).Rows(i - 1)(9) <= 50 Then
                                    'TableOfFieldsWithWaterAllocRow("Runoff_Amt") = TractInformation.Tables(1).Rows(i - 1)(9) * 0.3
                                    TempWaterAllocTableRow("Runoff_Amt") = TractInformation.Tables(1).Rows(i - 1)(9) * 0.3
                                    'The runoff from precip should be based solely upon soil capacity
                                    'TableOfFieldsWithWaterAllocRow("DeepPerc_Amt") = 0
                                    TempWaterAllocTableRow("DeepPerc_Amt") = 0
                                ElseIf TractInformation.Tables(1).Rows(i - 1)(9) > 50 Then
                                    'TableOfFieldsWithWaterAllocRow("Runoff_Amt") = TractInformation.Tables(1).Rows(i - 1)(9) * 0.5
                                    TempWaterAllocTableRow("Runoff_Amt") = TractInformation.Tables(1).Rows(i - 1)(9) * 0.5
                                    'The runoff from precip should be based solely upon soil capacity
                                    'TableOfFieldsWithWaterAllocRow("DeepPerc_Amt") = 0
                                    TempWaterAllocTableRow("DeepPerc_Amt") = 0
                                End If
                            End If
                            'TableOfFieldsWithWaterAllocRow("TAW") = TractInformation.Tables(1).Rows(i - 1)(7)
                            TempWaterAllocTableRow("TAW") = TractInformation.Tables(1).Rows(i - 1)(7)
                            'TableOfFieldsWithWaterAllocRow("RAW") = TractInformation.Tables(1).Rows(i - 1)(8)
                            TempWaterAllocTableRow("RAW") = TractInformation.Tables(1).Rows(i - 1)(8)
                            'TableOfFieldsWithWaterAlloc.Rows.Add(TableOfFieldsWithWaterAllocRow)
                            TempWaterAllocTable.Rows.Add(TempWaterAllocTableRow)
                        Next i
                    End If
                Case 2
                    Field1_Area = TractInformation.Tables(1).Select("IRRIG_TIME_CODE" & Right(CStr(CurrentDate), 2) & " = " & TimingCodeActive(0) & " Or IRRIG_TIME_CODE" & Right(CStr(CurrentDate), 2) & " = " & TimingCodeActive(1) & " Or IRRIG_TIME_CODE" & Right(CStr(CurrentDate), 2) & " = " & TimingCodeActive(2))(ct - 2)(3)
                    Field2_Area = TractInformation.Tables(1).Select("IRRIG_TIME_CODE" & Right(CStr(CurrentDate), 2) & " = " & TimingCodeActive(0) & " Or IRRIG_TIME_CODE" & Right(CStr(CurrentDate), 2) & " = " & TimingCodeActive(1) & " Or IRRIG_TIME_CODE" & Right(CStr(CurrentDate), 2) & " = " & TimingCodeActive(2))(ct - 1)(3)
                    Field1_Type = TractInformation.Tables(1).Select("IRRIG_TIME_CODE" & Right(CStr(CurrentDate), 2) & " = " & TimingCodeActive(0) & " Or IRRIG_TIME_CODE" & Right(CStr(CurrentDate), 2) & " = " & TimingCodeActive(1) & " Or IRRIG_TIME_CODE" & Right(CStr(CurrentDate), 2) & " = " & TimingCodeActive(2))(ct - 2)(4)
                    Field2_Type = TractInformation.Tables(1).Select("IRRIG_TIME_CODE" & Right(CStr(CurrentDate), 2) & " = " & TimingCodeActive(0) & " Or IRRIG_TIME_CODE" & Right(CStr(CurrentDate), 2) & " = " & TimingCodeActive(1) & " Or IRRIG_TIME_CODE" & Right(CStr(CurrentDate), 2) & " = " & TimingCodeActive(2))(ct - 1)(4)
                    If Pumped_Amt > 0 Then
                        AvgFldSize = (Field1_Area + Field2_Area) / 2
                        Reasonable = Check_Depths(1, CurrentDate, AvgFldSize, , , , , , , , , , _
                                        Field1_Type, , , , , , , , , , _
                                        Pumped_Amt, , , , , , , , , )
                        If Reasonable Then
                            RanNum3 = RandomGenerator.NextDouble()
                            If RanNum3 > 0.5 Then
                                Field1_Amt = Pumped_Amt
                                Field2_Amt = Tract_Amt
                            Else
                                Field1_Amt = Tract_Amt
                                Field2_Amt = Pumped_Amt
                            End If
                            'I can't run Check_Depths because if water does get shuffled around
                            'I need to know exactly how it got shuffled around.  I may need to 
                            'come up with another function.
                            'Check_Depths(2, CurrentDate, Field1_Area, Field2_Area, , , , , , , , , _
                            '             Field1_Type, Field2_Type, , , , , , , , , _
                            '             Field1_Amt, Field2_Amt, , , , , , , , )
                            For i = 1 To TractInformation.Tables(1).Rows.Count()
                                'TableOfFieldsWithWaterAllocRow = TableOfFieldsWithWaterAlloc.NewRow()
                                TempWaterAllocTableRow = TempWaterAllocTable.NewRow()
                                'TableOfFieldsWithWaterAllocRow("Tract") = TractInformation.Tables(1).Rows(i - 1)(0)
                                TempWaterAllocTableRow("Tract") = TractInformation.Tables(1).Rows(i - 1)(0)
                                'TableOfFieldsWithWaterAllocRow("Field_No") = TractInformation.Tables(1).Rows(i - 1)(2)
                                TempWaterAllocTableRow("Field_No") = TractInformation.Tables(1).Rows(i - 1)(2)
                                TempWaterAllocTableRow("Area") = TractInformation.Tables(1).Rows(i - 1)(3)
                                'TableOfFieldsWithWaterAllocRow("Date_") = CurrentDate
                                TempWaterAllocTableRow("Date_") = CurrentDate
                                'TableOfFieldsWithWaterAllocRow("Precip_Amt") = TractInformation.Tables(1).Rows(i - 1)(9)
                                TempWaterAllocTableRow("Precip_Amt") = TractInformation.Tables(1).Rows(i - 1)(9)
                                'TableOfFieldsWithWaterAllocRow("ETc") = TractInformation.Tables(1).Rows(i - 1)(10)
                                TempWaterAllocTableRow("ETc") = TractInformation.Tables(1).Rows(i - 1)(10)
                                'TableOfFieldsWithWaterAllocRow("Zr") = TractInformation.Tables(1).Rows(i - 1)(11)
                                TempWaterAllocTableRow("Zr") = TractInformation.Tables(1).Rows(i - 1)(11)

                                RanNum1 = RandomGenerator.NextDouble()
                                Runoff_Fraction = (-1 * Math.Log(RanNum1)) / (1 / lambda)
                                If Math.Floor(TractInformation.Tables(1).Rows(i - 1)(3)) = Math.Floor(Field1_Area) Then
                                    'This If statment attempts to route pumped water and store the result
                                    If RanNum3 > 0.5 Then
                                        'TableOfFieldsWithWaterAllocRow("SurfWatDelivered") = 0
                                        TempWaterAllocTableRow("SurfWatDelivered") = 0
                                        'TableOfFieldsWithWaterAllocRow("PumpWatDelivered") = (Field1_Amt / Field1_Area) * 1000
                                        TempWaterAllocTableRow("PumpWatDelivered") = (Field1_Amt / Field1_Area) * 1000
                                    Else
                                        'TableOfFieldsWithWaterAllocRow("SurfWatDelivered") = (Field1_Amt / Field1_Area) * 1000
                                        TempWaterAllocTableRow("SurfWatDelivered") = (Field1_Amt / Field1_Area) * 1000
                                        'TableOfFieldsWithWaterAllocRow("PumpWatDelivered") = 0
                                        TempWaterAllocTableRow("PumpWatDelivered") = 0
                                    End If
                                    'TableOfFieldsWithWaterAllocRow("Runoff_Amt") = (((Field1_Amt / Field1_Area) * 1000) + TractInformation.Tables(1).Rows(i - 1)(9)) * Runoff_Fraction
                                    TempWaterAllocTableRow("Runoff_Amt") = (((Field1_Amt / Field1_Area) * 1000) + TractInformation.Tables(1).Rows(i - 1)(9)) * Runoff_Fraction
                                    RanNum1 = RandomGenerator.NextDouble()
                                    RanNum2 = RandomGenerator.NextDouble()
                                    While Not (RanNum1 <= 0.8 And RanNum2 <= 1 - 1.25 * RanNum1)
                                        RanNum1 = RandomGenerator.NextDouble()
                                        RanNum2 = RandomGenerator.NextDouble()
                                    End While
                                    'TableOfFieldsWithWaterAllocRow("DeepPerc_Amt") = (((Field1_Amt / Field1_Area) * 1000) + TractInformation.Tables(1).Rows(i - 1)(9)) * (1 - Runoff_Fraction) * RanNum1
                                    TempWaterAllocTableRow("DeepPerc_Amt") = (((Field1_Amt / Field1_Area) * 1000) + TractInformation.Tables(1).Rows(i - 1)(9)) * (1 - Runoff_Fraction) * RanNum1
                                ElseIf Math.Floor(TractInformation.Tables(1).Rows(i - 1)(3)) = Math.Floor(Field2_Area) Then
                                    If RanNum3 > 0.5 Then
                                        'TableOfFieldsWithWaterAllocRow("SurfWatDelivered") = Field2_Amt / Field2_Area
                                        TempWaterAllocTableRow("SurfWatDelivered") = Field2_Amt / Field2_Area
                                        'TableOfFieldsWithWaterAllocRow("PumpWatDelivered") = 0
                                        TempWaterAllocTableRow("PumpWatDelivered") = 0
                                    Else
                                        'TableOfFieldsWithWaterAllocRow("SurfWatDelivered") = 0
                                        TempWaterAllocTableRow("SurfWatDelivered") = 0
                                        'TableOfFieldsWithWaterAllocRow("PumpWatDelivered") = Field2_Amt / Field2_Area
                                        TempWaterAllocTableRow("PumpWatDelivered") = Field2_Amt / Field2_Area
                                    End If
                                    'TableOfFieldsWithWaterAllocRow("Runoff_Amt") = (((Field2_Amt / Field2_Area) * 1000) + TractInformation.Tables(1).Rows(i - 1)(9)) * Runoff_Fraction
                                    TempWaterAllocTableRow("Runoff_Amt") = (((Field2_Amt / Field2_Area) * 1000) + TractInformation.Tables(1).Rows(i - 1)(9)) * Runoff_Fraction
                                    RanNum1 = RandomGenerator.NextDouble()
                                    RanNum2 = RandomGenerator.NextDouble()
                                    While Not (RanNum1 <= 0.8 And RanNum2 <= 1 - 1.25 * RanNum1)
                                        RanNum1 = RandomGenerator.NextDouble()
                                        RanNum2 = RandomGenerator.NextDouble()
                                    End While
                                    'TableOfFieldsWithWaterAllocRow("DeepPerc_Amt") = (((Field2_Amt / Field2_Area) * 1000) + TractInformation.Tables(1).Rows(i - 1)(9)) * (1 - Runoff_Fraction) * RanNum1
                                    TempWaterAllocTableRow("DeepPerc_Amt") = (((Field2_Amt / Field2_Area) * 1000) + TractInformation.Tables(1).Rows(i - 1)(9)) * (1 - Runoff_Fraction) * RanNum1
                                Else
                                    'TableOfFieldsWithWaterAllocRow("SurfWatDelivered") = 0
                                    TempWaterAllocTableRow("SurfWatDelivered") = 0
                                    'TableOfFieldsWithWaterAllocRow("PumpWatDelivered") = 0
                                    TempWaterAllocTableRow("PumpWatDelivered") = 0
                                    If TractInformation.Tables(1).Rows(i - 1)(9) <= 50 Then
                                        'TableOfFieldsWithWaterAllocRow("Runoff_Amt") = TractInformation.Tables(1).Rows(i - 1)(9) * 0.3
                                        TempWaterAllocTableRow("Runoff_Amt") = TractInformation.Tables(1).Rows(i - 1)(9) * 0.3
                                        'The runoff from precip should be based solely upon soil capacity
                                        'TableOfFieldsWithWaterAllocRow("DeepPerc_Amt") = 0
                                        TempWaterAllocTableRow("DeepPerc_Amt") = 0
                                    ElseIf TractInformation.Tables(1).Rows(i - 1)(9) > 50 Then
                                        'TableOfFieldsWithWaterAllocRow("Runoff_Amt") = TractInformation.Tables(1).Rows(i - 1)(9) * 0.5
                                        TempWaterAllocTableRow("Runoff_Amt") = TractInformation.Tables(1).Rows(i - 1)(9) * 0.5
                                        'The runoff from precip should be based solely upon soil capacity
                                        'TableOfFieldsWithWaterAllocRow("DeepPerc_Amt") = 0
                                        TempWaterAllocTableRow("DeepPerc_Amt") = 0
                                    End If
                                End If
                                'TableOfFieldsWithWaterAllocRow("TAW") = TractInformation.Tables(1).Rows(i - 1)(7)
                                TempWaterAllocTableRow("TAW") = TractInformation.Tables(1).Rows(i - 1)(7)
                                'TableOfFieldsWithWaterAllocRow("RAW") = TractInformation.Tables(1).Rows(i - 1)(8)
                                TempWaterAllocTableRow("RAW") = TractInformation.Tables(1).Rows(i - 1)(8)
                                'TableOfFieldsWithWaterAlloc.Rows.Add(TableOfFieldsWithWaterAllocRow)
                                TempWaterAllocTable.Rows.Add(TempWaterAllocTableRow)
                            Next i
                        Else
                            Field1_Amt = Tract_Amt * (Field1_Area / Eligible_Area)
                            Field2_Amt = Tract_Amt * (Field2_Area / Eligible_Area)
                            'I can run Check_Depths here because I can start by shuffling around
                            'the water in Check_Depths and once this has sorted itself out then
                            'go ahead and arbitrarily add the small amount of pumped water to 
                            'which ever field ended up with the most amount of water to ensure
                            'it doesn't go to a field with no water 
                            Check_Depths(2, CurrentDate, Field1_Area, Field2_Area, , , , , , , , , _
                                        Field1_Type, Field2_Type, , , , , , , , , _
                                        Field1_Amt, Field2_Amt, , , , , , , , )
                            Dim zr As Single
                            Dim ETc As Single

                            If Field1_Amt >= Field2_Amt Then
                                Field1_Amt = Field1_Amt + Pumped_Amt
                                For i = 1 To TractInformation.Tables(1).Rows.Count()
                                    'TableOfFieldsWithWaterAllocRow = TableOfFieldsWithWaterAlloc.NewRow()
                                    TempWaterAllocTableRow = TempWaterAllocTable.NewRow()
                                    'TableOfFieldsWithWaterAllocRow("Tract") = TractInformation.Tables(1).Rows(i - 1)(0)
                                    TempWaterAllocTableRow("Tract") = TractInformation.Tables(1).Rows(i - 1)(0)
                                    'TableOfFieldsWithWaterAllocRow("Field_No") = TractInformation.Tables(1).Rows(i - 1)(2)
                                    TempWaterAllocTableRow("Field_No") = TractInformation.Tables(1).Rows(i - 1)(2)
                                    TempWaterAllocTableRow("Area") = TractInformation.Tables(1).Rows(i - 1)(3)
                                    'TableOfFieldsWithWaterAllocRow("Date_") = CurrentDate
                                    TempWaterAllocTableRow("Date_") = CurrentDate
                                    'TableOfFieldsWithWaterAllocRow("Precip_Amt") = TractInformation.Tables(1).Rows(i - 1)(9)
                                    TempWaterAllocTableRow("Precip_Amt") = TractInformation.Tables(1).Rows(i - 1)(9)
                                    ETc = TractInformation.Tables(1).Rows(i - 1)(10)
                                    'TableOfFieldsWithWaterAllocRow("ETc") = TractInformation.Tables(1).Rows(i - 1)(10)
                                    TempWaterAllocTableRow("ETc") = TractInformation.Tables(1).Rows(i - 1)(10)
                                    zr = TractInformation.Tables(1).Rows(i - 1)(11)
                                    'TableOfFieldsWithWaterAllocRow("Zr") = TractInformation.Tables(1).Rows(i - 1)(11)
                                    TempWaterAllocTableRow("Zr") = TractInformation.Tables(1).Rows(i - 1)(11)

                                    RanNum1 = RandomGenerator.NextDouble()
                                    Runoff_Fraction = (-1 * Math.Log(RanNum1)) / (1 / lambda)
                                    If Math.Floor(TractInformation.Tables(1).Rows(i - 1)(3)) = Math.Floor(Field1_Area) Then
                                        'TableOfFieldsWithWaterAllocRow("SurfWatDelivered") = ((Field1_Amt - Pumped_Amt) / Field1_Area) * 1000
                                        TempWaterAllocTableRow("SurfWatDelivered") = ((Field1_Amt - Pumped_Amt) / Field1_Area) * 1000
                                        'TableOfFieldsWithWaterAllocRow("PumpWatDelivered") = (Pumped_Amt / Field1_Area) * 1000
                                        TempWaterAllocTableRow("PumpWatDelivered") = (Pumped_Amt / Field1_Area) * 1000
                                        'TableOfFieldsWithWaterAllocRow("Runoff_Amt") = (((Field1_Amt / Field1_Area) * 1000) + TractInformation.Tables(1).Rows(i - 1)(9)) * Runoff_Fraction
                                        TempWaterAllocTableRow("Runoff_Amt") = (((Field1_Amt / Field1_Area) * 1000) + TractInformation.Tables(1).Rows(i - 1)(9)) * Runoff_Fraction
                                        RanNum1 = RandomGenerator.NextDouble()
                                        RanNum2 = RandomGenerator.NextDouble()
                                        While Not (RanNum1 <= 0.8 And RanNum2 <= 1 - 1.25 * RanNum1)
                                            RanNum1 = RandomGenerator.NextDouble()
                                            RanNum2 = RandomGenerator.NextDouble()
                                        End While
                                        'TableOfFieldsWithWaterAllocRow("DeepPerc_Amt") = (((Field1_Amt / Field1_Area) * 1000) + TractInformation.Tables(1).Rows(i - 1)(9)) * (1 - Runoff_Fraction) * RanNum1
                                        TempWaterAllocTableRow("DeepPerc_Amt") = (((Field1_Amt / Field1_Area) * 1000) + TractInformation.Tables(1).Rows(i - 1)(9)) * (1 - Runoff_Fraction) * RanNum1
                                    ElseIf Math.Floor(TractInformation.Tables(1).Rows(i - 1)(3)) = Math.Floor(Field2_Area) Then
                                        'TableOfFieldsWithWaterAllocRow("SurfWatDelivered") = (Field2_Amt / Field2_Area) * 1000
                                        TempWaterAllocTableRow("SurfWatDelivered") = (Field2_Amt / Field2_Area) * 1000
                                        'TableOfFieldsWithWaterAllocRow("PumpWatDelivered") = 0
                                        TempWaterAllocTableRow("PumpWatDelivered") = 0
                                        'TableOfFieldsWithWaterAllocRow("Runoff_Amt") = (((Field2_Amt / Field2_Area) * 1000) + TractInformation.Tables(1).Rows(i - 1)(9)) * Runoff_Fraction
                                        TempWaterAllocTableRow("Runoff_Amt") = (((Field2_Amt / Field2_Area) * 1000) + TractInformation.Tables(1).Rows(i - 1)(9)) * Runoff_Fraction
                                        RanNum1 = RandomGenerator.NextDouble()
                                        RanNum2 = RandomGenerator.NextDouble()
                                        While Not (RanNum1 <= 0.8 And RanNum2 <= 1 - 1.25 * RanNum1)
                                            RanNum1 = RandomGenerator.NextDouble()
                                            RanNum2 = RandomGenerator.NextDouble()
                                        End While
                                        'TableOfFieldsWithWaterAllocRow("DeepPerc_Amt") = (((Field2_Amt / Field2_Area) * 1000) + TractInformation.Tables(1).Rows(i - 1)(9)) * (1 - Runoff_Fraction) * RanNum1
                                        TempWaterAllocTableRow("DeepPerc_Amt") = (((Field2_Amt / Field2_Area) * 1000) + TractInformation.Tables(1).Rows(i - 1)(9)) * (1 - Runoff_Fraction) * RanNum1
                                    Else
                                        'TableOfFieldsWithWaterAllocRow("SurfWatDelivered") = 0
                                        TempWaterAllocTableRow("SurfWatDelivered") = 0
                                        'TableOfFieldsWithWaterAllocRow("PumpWatDelivered") = 0
                                        TempWaterAllocTableRow("PumpWatDelivered") = 0
                                        If TractInformation.Tables(1).Rows(i - 1)(9) <= 50 Then
                                            'TableOfFieldsWithWaterAllocRow("Runoff_Amt") = TractInformation.Tables(1).Rows(i - 1)(9) * 0.3
                                            TempWaterAllocTableRow("Runoff_Amt") = TractInformation.Tables(1).Rows(i - 1)(9) * 0.3
                                            'The runoff from precip should be based solely upon soil capacity
                                            'TableOfFieldsWithWaterAllocRow("DeepPerc_Amt") = 0
                                            TempWaterAllocTableRow("DeepPerc_Amt") = 0
                                        ElseIf TractInformation.Tables(1).Rows(i - 1)(9) > 50 Then
                                            'TableOfFieldsWithWaterAllocRow("Runoff_Amt") = TractInformation.Tables(1).Rows(i - 1)(9) * 0.5
                                            TempWaterAllocTableRow("Runoff_Amt") = TractInformation.Tables(1).Rows(i - 1)(9) * 0.5
                                            'The runoff from precip should be based solely upon soil capacity
                                            'TableOfFieldsWithWaterAllocRow("DeepPerc_Amt") = 0
                                            TempWaterAllocTableRow("DeepPerc_Amt") = 0
                                        End If
                                    End If
                                    TAW = TractInformation.Tables(1).Rows(i - 1)(7)
                                    'TableOfFieldsWithWaterAllocRow("TAW") = TractInformation.Tables(1).Rows(i - 1)(7)
                                    TempWaterAllocTableRow("TAW") = TractInformation.Tables(1).Rows(i - 1)(7)
                                    RAW = TractInformation.Tables(1).Rows(i - 1)(8)
                                    'TableOfFieldsWithWaterAllocRow("RAW") = TractInformation.Tables(1).Rows(i - 1)(8)
                                    TempWaterAllocTableRow("RAW") = TractInformation.Tables(1).Rows(i - 1)(8)
                                    'TableOfFieldsWithWaterAlloc.Rows.Add(TableOfFieldsWithWaterAllocRow)
                                    TempWaterAllocTable.Rows.Add(TempWaterAllocTableRow)
                                Next i
                            ElseIf Field2_Amt > Field1_Amt Then
                                Field2_Amt = Field2_Amt + Pumped_Amt
                                For i = 1 To TractInformation.Tables(1).Rows.Count()
                                    'TableOfFieldsWithWaterAllocRow = TableOfFieldsWithWaterAlloc.NewRow()
                                    TempWaterAllocTableRow = TempWaterAllocTable.NewRow()
                                    'TableOfFieldsWithWaterAllocRow("Tract") = TractInformation.Tables(1).Rows(i - 1)(0)
                                    TempWaterAllocTableRow("Tract") = TractInformation.Tables(1).Rows(i - 1)(0)
                                    'TableOfFieldsWithWaterAllocRow("Field_No") = TractInformation.Tables(1).Rows(i - 1)(2)
                                    TempWaterAllocTableRow("Field_No") = TractInformation.Tables(1).Rows(i - 1)(2)
                                    TempWaterAllocTableRow("Area") = TractInformation.Tables(1).Rows(i - 1)(3)
                                    'TableOfFieldsWithWaterAllocRow("Date_") = CurrentDate
                                    TempWaterAllocTableRow("Date_") = CurrentDate
                                    'TableOfFieldsWithWaterAllocRow("Precip_Amt") = TractInformation.Tables(1).Rows(i - 1)(9)
                                    TempWaterAllocTableRow("Precip_Amt") = TractInformation.Tables(1).Rows(i - 1)(9)
                                    'TableOfFieldsWithWaterAllocRow("ETc") = TractInformation.Tables(1).Rows(i - 1)(10)
                                    TempWaterAllocTableRow("ETc") = TractInformation.Tables(1).Rows(i - 1)(10)
                                    'TableOfFieldsWithWaterAllocRow("Zr") = TractInformation.Tables(1).Rows(i - 1)(11)
                                    TempWaterAllocTableRow("Zr") = TractInformation.Tables(1).Rows(i - 1)(11)

                                    RanNum1 = RandomGenerator.NextDouble()
                                    Runoff_Fraction = (-1 * Math.Log(RanNum1)) / (1 / lambda)
                                    If Math.Floor(TractInformation.Tables(1).Rows(i - 1)(3)) = Math.Floor(Field1_Area) Then
                                        'TableOfFieldsWithWaterAllocRow("SurfWatDelivered") = (Field1_Amt / Field1_Area) * 1000
                                        TempWaterAllocTableRow("SurfWatDelivered") = (Field1_Amt / Field1_Area) * 1000
                                        'TableOfFieldsWithWaterAllocRow("PumpWatDelivered") = 0
                                        TempWaterAllocTableRow("PumpWatDelivered") = 0
                                        'TableOfFieldsWithWaterAllocRow("Runoff_Amt") = (((Field1_Amt / Field2_Area) * 1000) + TractInformation.Tables(1).Rows(i - 1)(9)) * Runoff_Fraction
                                        TempWaterAllocTableRow("Runoff_Amt") = (((Field1_Amt / Field2_Area) * 1000) + TractInformation.Tables(1).Rows(i - 1)(9)) * Runoff_Fraction
                                        RanNum1 = RandomGenerator.NextDouble()
                                        RanNum2 = RandomGenerator.NextDouble()
                                        While Not (RanNum1 <= 0.8 And RanNum2 <= 1 - 1.25 * RanNum1)
                                            RanNum1 = RandomGenerator.NextDouble()
                                            RanNum2 = RandomGenerator.NextDouble()
                                        End While
                                        'TableOfFieldsWithWaterAllocRow("DeepPerc_Amt") = (((Field1_Amt / Field1_Area) * 1000) + TractInformation.Tables(1).Rows(i - 1)(9)) * (1 - Runoff_Fraction) * RanNum1
                                        TempWaterAllocTableRow("DeepPerc_Amt") = (((Field1_Amt / Field1_Area) * 1000) + TractInformation.Tables(1).Rows(i - 1)(9)) * (1 - Runoff_Fraction) * RanNum1
                                    ElseIf Math.Floor(TractInformation.Tables(1).Rows(i - 1)(3)) = Math.Floor(Field2_Area) Then
                                        'TableOfFieldsWithWaterAllocRow("SurfWatDelivered") = ((Field2_Amt - Pumped_Amt) / Field2_Area) * 1000
                                        TempWaterAllocTableRow("SurfWatDelivered") = ((Field2_Amt - Pumped_Amt) / Field2_Area) * 1000
                                        'TableOfFieldsWithWaterAllocRow("PumpWatDelivered") = (Pumped_Amt / Field2_Area) * 1000
                                        TempWaterAllocTableRow("PumpWatDelivered") = (Pumped_Amt / Field2_Area) * 1000
                                        'TableOfFieldsWithWaterAllocRow("Runoff_Amt") = (((Field2_Amt / Field2_Area) * 1000) + TractInformation.Tables(1).Rows(i - 1)(9)) * Runoff_Fraction
                                        TempWaterAllocTableRow("Runoff_Amt") = (((Field2_Amt / Field2_Area) * 1000) + TractInformation.Tables(1).Rows(i - 1)(9)) * Runoff_Fraction
                                        RanNum1 = RandomGenerator.NextDouble()
                                        RanNum2 = RandomGenerator.NextDouble()
                                        While Not (RanNum1 <= 0.8 And RanNum2 <= 1 - 1.25 * RanNum1)
                                            RanNum1 = RandomGenerator.NextDouble()
                                            RanNum2 = RandomGenerator.NextDouble()
                                        End While
                                        'TableOfFieldsWithWaterAllocRow("DeepPerc_Amt") = (((Field2_Amt / Field2_Area) * 1000) + TractInformation.Tables(1).Rows(i - 1)(9)) * (1 - Runoff_Fraction) * RanNum1
                                        TempWaterAllocTableRow("DeepPerc_Amt") = (((Field2_Amt / Field2_Area) * 1000) + TractInformation.Tables(1).Rows(i - 1)(9)) * (1 - Runoff_Fraction) * RanNum1
                                    Else
                                        'TableOfFieldsWithWaterAllocRow("SurfWatDelivered") = 0
                                        TempWaterAllocTableRow("SurfWatDelivered") = 0
                                        'TableOfFieldsWithWaterAllocRow("PumpWatDelivered") = 0
                                        TempWaterAllocTableRow("PumpWatDelivered") = 0
                                        If TractInformation.Tables(1).Rows(i - 1)(9) <= 50 Then
                                            'TableOfFieldsWithWaterAllocRow("Runoff_Amt") = TractInformation.Tables(1).Rows(i - 1)(9) * 0.3
                                            TempWaterAllocTableRow("Runoff_Amt") = TractInformation.Tables(1).Rows(i - 1)(9) * 0.3
                                            'The runoff from precip should be based solely upon soil capacity
                                            'TableOfFieldsWithWaterAllocRow("DeepPerc_Amt") = 0
                                            TempWaterAllocTableRow("DeepPerc_Amt") = 0
                                        ElseIf TractInformation.Tables(1).Rows(i - 1)(9) > 50 Then
                                            'TableOfFieldsWithWaterAllocRow("Runoff_Amt") = TractInformation.Tables(1).Rows(i - 1)(9) * 0.5
                                            TempWaterAllocTableRow("Runoff_Amt") = TractInformation.Tables(1).Rows(i - 1)(9) * 0.5
                                            'The runoff from precip should be based solely upon soil capacity
                                            'TableOfFieldsWithWaterAllocRow("DeepPerc_Amt") = 0
                                            TempWaterAllocTableRow("DeepPerc_Amt") = 0
                                        End If
                                    End If
                                    'TableOfFieldsWithWaterAllocRow("TAW") = TractInformation.Tables(1).Rows(i - 1)(7)
                                    TempWaterAllocTableRow("TAW") = TractInformation.Tables(1).Rows(i - 1)(7)
                                    'TableOfFieldsWithWaterAllocRow("RAW") = TractInformation.Tables(1).Rows(i - 1)(8)
                                    TempWaterAllocTableRow("RAW") = TractInformation.Tables(1).Rows(i - 1)(8)
                                    'TableOfFieldsWithWaterAlloc.Rows.Add(TableOfFieldsWithWaterAllocRow)
                                    TempWaterAllocTable.Rows.Add(TempWaterAllocTableRow)
                                Next i
                            End If
                        End If
                    Else
                        'The code should land here in the event of no pumped water for this tract for this time step
                        Field1_Amt = Tract_Amt * (Field1_Area / Eligible_Area)
                        Field2_Amt = Tract_Amt * (Field2_Area / Eligible_Area)
                        Check_Depths(2, CurrentDate, Field1_Area, Field2_Area, , , , , , , , , _
                                        Field1_Type, Field2_Type, , , , , , , , , _
                                        Field1_Amt, Field2_Amt, , , , , , , , )
                        If Field1_Amt / Field1_Area > 0.3 Or Field2_Amt / Field2_Area > 0.3 Then
                            GoTo 50
                        End If
                        For i = 1 To TractInformation.Tables(1).Rows.Count()
                            'TableOfFieldsWithWaterAllocRow = TableOfFieldsWithWaterAlloc.NewRow()
                            TempWaterAllocTableRow = TempWaterAllocTable.NewRow()
                            'TableOfFieldsWithWaterAllocRow("Tract") = TractInformation.Tables(1).Rows(i - 1)(0)
                            TempWaterAllocTableRow("Tract") = TractInformation.Tables(1).Rows(i - 1)(0)
                            'TableOfFieldsWithWaterAllocRow("Field_No") = TractInformation.Tables(1).Rows(i - 1)(2)
                            TempWaterAllocTableRow("Field_No") = TractInformation.Tables(1).Rows(i - 1)(2)
                            TempWaterAllocTableRow("Area") = TractInformation.Tables(1).Rows(i - 1)(3)
                            'TableOfFieldsWithWaterAllocRow("Date_") = CurrentDate
                            TempWaterAllocTableRow("Date_") = CurrentDate
                            'TableOfFieldsWithWaterAllocRow("Precip_Amt") = TractInformation.Tables(1).Rows(i - 1)(9)
                            TempWaterAllocTableRow("Precip_Amt") = TractInformation.Tables(1).Rows(i - 1)(9)
                            'TableOfFieldsWithWaterAllocRow("ETc") = TractInformation.Tables(1).Rows(i - 1)(10)
                            TempWaterAllocTableRow("ETc") = TractInformation.Tables(1).Rows(i - 1)(10)
                            'TableOfFieldsWithWaterAllocRow("Zr") = TractInformation.Tables(1).Rows(i - 1)(11)
                            TempWaterAllocTableRow("Zr") = TractInformation.Tables(1).Rows(i - 1)(11)

                            RanNum1 = RandomGenerator.NextDouble()
                            Runoff_Fraction = (-1 * Math.Log(RanNum1)) / (1 / lambda)
                            If Math.Floor(TractInformation.Tables(1).Rows(i - 1)(3)) = Math.Floor(Field1_Area) Then
                                'This next line incase "Check_Depths reallocated water and this field now receives no water
                                If Field1_Amt = 0 Then GoTo 1003
                                'TableOfFieldsWithWaterAllocRow("SurfWatDelivered") = (Field1_Amt / Field1_Area) * 1000
                                TempWaterAllocTableRow("SurfWatDelivered") = (Field1_Amt / Field1_Area) * 1000
                                'TableOfFieldsWithWaterAllocRow("PumpWatDelivered") = 0
                                TempWaterAllocTableRow("PumpWatDelivered") = 0
                                'TableOfFieldsWithWaterAllocRow("Runoff_Amt") = (((Field1_Amt / Field1_Area) * 1000) + TractInformation.Tables(1).Rows(i - 1)(9)) * Runoff_Fraction
                                TempWaterAllocTableRow("Runoff_Amt") = (((Field1_Amt / Field1_Area) * 1000) + TractInformation.Tables(1).Rows(i - 1)(9)) * Runoff_Fraction
                                RanNum1 = RandomGenerator.NextDouble()
                                RanNum2 = RandomGenerator.NextDouble()
                                While Not (RanNum1 <= 0.8 And RanNum2 <= 1 - 1.25 * RanNum1)
                                    RanNum1 = RandomGenerator.NextDouble()
                                    RanNum2 = RandomGenerator.NextDouble()
                                End While
                                'TableOfFieldsWithWaterAllocRow("DeepPerc_Amt") = (((Field1_Amt / Field1_Area) * 1000) + TractInformation.Tables(1).Rows(i - 1)(9)) * (1 - Runoff_Fraction) * RanNum1
                                TempWaterAllocTableRow("DeepPerc_Amt") = (((Field1_Amt / Field1_Area) * 1000) + TractInformation.Tables(1).Rows(i - 1)(9)) * (1 - Runoff_Fraction) * RanNum1
                            ElseIf Math.Floor(TractInformation.Tables(1).Rows(i - 1)(3)) = Math.Floor(Field2_Area) Then
                                'This next line incase "Check_Depths reallocated water and this field now receives no water
                                If Field2_Amt = 0 Then GoTo 1003
                                'TableOfFieldsWithWaterAllocRow("SurfWatDelivered") = (Field2_Amt / Field2_Area) * 1000
                                TempWaterAllocTableRow("SurfWatDelivered") = (Field2_Amt / Field2_Area) * 1000
                                'TableOfFieldsWithWaterAllocRow("PumpWatDelivered") = 0
                                TempWaterAllocTableRow("PumpWatDelivered") = 0
                                'TableOfFieldsWithWaterAllocRow("Runoff_Amt") = (((Field2_Amt / Field2_Area) * 1000) + TractInformation.Tables(1).Rows(i - 1)(9)) * Runoff_Fraction
                                TempWaterAllocTableRow("Runoff_Amt") = (((Field2_Amt / Field2_Area) * 1000) + TractInformation.Tables(1).Rows(i - 1)(9)) * Runoff_Fraction
                                RanNum1 = RandomGenerator.NextDouble()
                                RanNum2 = RandomGenerator.NextDouble()
                                While Not (RanNum1 <= 0.8 And RanNum2 <= 1 - 1.25 * RanNum1)
                                    RanNum1 = RandomGenerator.NextDouble()
                                    RanNum2 = RandomGenerator.NextDouble()
                                End While
                                'TableOfFieldsWithWaterAllocRow("DeepPerc_Amt") = (((Field2_Amt / Field2_Area) * 1000) + TractInformation.Tables(1).Rows(i - 1)(9)) * (1 - Runoff_Fraction) * RanNum1
                                TempWaterAllocTableRow("DeepPerc_Amt") = (((Field2_Amt / Field2_Area) * 1000) + TractInformation.Tables(1).Rows(i - 1)(9)) * (1 - Runoff_Fraction) * RanNum1
                            Else
                                '1003:  TableOfFieldsWithWaterAllocRow("SurfWatDelivered") = 0
1003:                           TempWaterAllocTableRow("SurfWatDelivered") = 0
                                'TableOfFieldsWithWaterAllocRow("PumpWatDelivered") = 0
                                TempWaterAllocTableRow("PumpWatDelivered") = 0
                                If TractInformation.Tables(1).Rows(i - 1)(9) <= 50 Then
                                    'TableOfFieldsWithWaterAllocRow("Runoff_Amt") = TractInformation.Tables(1).Rows(i - 1)(9) * 0.3
                                    TempWaterAllocTableRow("Runoff_Amt") = TractInformation.Tables(1).Rows(i - 1)(9) * 0.3
                                    'The runoff from precip should be based solely upon soil capacity
                                    'TableOfFieldsWithWaterAllocRow("DeepPerc_Amt") = 0
                                    TempWaterAllocTableRow("DeepPerc_Amt") = 0
                                ElseIf TractInformation.Tables(1).Rows(i - 1)(9) > 50 Then
                                    'TableOfFieldsWithWaterAllocRow("Runoff_Amt") = TractInformation.Tables(1).Rows(i - 1)(9) * 0.5
                                    TempWaterAllocTableRow("Runoff_Amt") = TractInformation.Tables(1).Rows(i - 1)(9) * 0.5
                                    'The runoff from precip should be based solely upon soil capacity
                                    'TableOfFieldsWithWaterAllocRow("DeepPerc_Amt") = 0
                                    TempWaterAllocTableRow("DeepPerc_Amt") = 0
                                End If
                            End If
                            TAW = TractInformation.Tables(1).Rows(i - 1)(7)
                            'TableOfFieldsWithWaterAllocRow("TAW") = TractInformation.Tables(1).Rows(i - 1)(7)
                            TempWaterAllocTableRow("TAW") = TractInformation.Tables(1).Rows(i - 1)(7)
                            'TableOfFieldsWithWaterAllocRow("RAW") = TractInformation.Tables(1).Rows(i - 1)(8)
                            RAW = TractInformation.Tables(1).Rows(i - 1)(8)
                            TempWaterAllocTableRow("RAW") = TractInformation.Tables(1).Rows(i - 1)(8)
                            'TableOfFieldsWithWaterAlloc.Rows.Add(TableOfFieldsWithWaterAllocRow)
                            TempWaterAllocTable.Rows.Add(TempWaterAllocTableRow)
                        Next i
                    End If
                Case 3
                    Field1_Area = TractInformation.Tables(1).Select("IRRIG_TIME_CODE" & Right(CStr(CurrentDate), 2) & " = " & TimingCodeActive(0) & " Or IRRIG_TIME_CODE" & Right(CStr(CurrentDate), 2) & " = " & TimingCodeActive(1) & " Or IRRIG_TIME_CODE" & Right(CStr(CurrentDate), 2) & " = " & TimingCodeActive(2))(ct - 3)(3)
                    Field2_Area = TractInformation.Tables(1).Select("IRRIG_TIME_CODE" & Right(CStr(CurrentDate), 2) & " = " & TimingCodeActive(0) & " Or IRRIG_TIME_CODE" & Right(CStr(CurrentDate), 2) & " = " & TimingCodeActive(1) & " Or IRRIG_TIME_CODE" & Right(CStr(CurrentDate), 2) & " = " & TimingCodeActive(2))(ct - 2)(3)
                    Field3_Area = TractInformation.Tables(1).Select("IRRIG_TIME_CODE" & Right(CStr(CurrentDate), 2) & " = " & TimingCodeActive(0) & " Or IRRIG_TIME_CODE" & Right(CStr(CurrentDate), 2) & " = " & TimingCodeActive(1) & " Or IRRIG_TIME_CODE" & Right(CStr(CurrentDate), 2) & " = " & TimingCodeActive(2))(ct - 1)(3)
                    Field1_Type = TractInformation.Tables(1).Select("IRRIG_TIME_CODE" & Right(CStr(CurrentDate), 2) & " = " & TimingCodeActive(0) & " Or IRRIG_TIME_CODE" & Right(CStr(CurrentDate), 2) & " = " & TimingCodeActive(1) & " Or IRRIG_TIME_CODE" & Right(CStr(CurrentDate), 2) & " = " & TimingCodeActive(2))(ct - 3)(4)
                    Field2_Type = TractInformation.Tables(1).Select("IRRIG_TIME_CODE" & Right(CStr(CurrentDate), 2) & " = " & TimingCodeActive(0) & " Or IRRIG_TIME_CODE" & Right(CStr(CurrentDate), 2) & " = " & TimingCodeActive(1) & " Or IRRIG_TIME_CODE" & Right(CStr(CurrentDate), 2) & " = " & TimingCodeActive(2))(ct - 2)(4)
                    Field3_Type = TractInformation.Tables(1).Select("IRRIG_TIME_CODE" & Right(CStr(CurrentDate), 2) & " = " & TimingCodeActive(0) & " Or IRRIG_TIME_CODE" & Right(CStr(CurrentDate), 2) & " = " & TimingCodeActive(1) & " Or IRRIG_TIME_CODE" & Right(CStr(CurrentDate), 2) & " = " & TimingCodeActive(2))(ct - 1)(4)
                    If Pumped_Amt > 0 Then
                        AvgFldSize = (Field1_Area + Field2_Area + Field3_Area) / 3
                        Reasonable = Check_Depths(1, CurrentDate, AvgFldSize, , , , , , , , , , _
                                        Field1_Type, , , , , , , , , , _
                                        Pumped_Amt, , , , , , , , , )
                        If Reasonable Then
                            RanNum3 = RandomGenerator.Next(1, 3)
                            If RanNum3 = 1 Then
                                Field1_Amt = Pumped_Amt
                                Field2_Amt = Tract_Amt * (Field2_Area / (Field2_Area + Field3_Area))
                                Field3_Amt = Tract_Amt * (Field3_Area / (Field2_Area + Field3_Area))
                            ElseIf RanNum3 = 2 Then
                                Field1_Amt = Tract_Amt * (Field1_Area / (Field1_Area + Field3_Area))
                                Field2_Amt = Pumped_Amt
                                Field3_Amt = Tract_Amt * (Field3_Area / (Field1_Area + Field3_Area))
                            ElseIf RanNum3 = 3 Then
                                Field1_Amt = Tract_Amt * (Field1_Area / (Field1_Area + Field2_Area))
                                Field2_Amt = Tract_Amt * (Field2_Area / (Field1_Area + Field2_Area))
                                Field3_Amt = Pumped_Amt
                            Else
                                MsgBox("Error in allocating pumped water!", MsgBoxStyle.Information)
                            End If
                            'I can't run Check_Depths because if water does get shuffled around
                            'I need to know exactly how it got shuffled around.  I may need to 
                            'come up with another function.
                            'Check_Depths(3, CurrentDate, Field1_Area, Field2_Area, Field3_Area, , , , , , , , _
                            '             Field1_Type, Field2_Type, Field3_Type, , , , , , , , _
                            '             Field1_Amt, Field2_Amt, Field3_Amt, , , , , , , )
                            For i = 1 To TractInformation.Tables(1).Rows.Count()
                                'TableOfFieldsWithWaterAllocRow = TableOfFieldsWithWaterAlloc.NewRow()
                                TempWaterAllocTableRow = TempWaterAllocTable.NewRow()
                                'TableOfFieldsWithWaterAllocRow("Tract") = TractInformation.Tables(1).Rows(i - 1)(0)
                                TempWaterAllocTableRow("Tract") = TractInformation.Tables(1).Rows(i - 1)(0)
                                'TableOfFieldsWithWaterAllocRow("Field_No") = TractInformation.Tables(1).Rows(i - 1)(2)
                                TempWaterAllocTableRow("Field_No") = TractInformation.Tables(1).Rows(i - 1)(2)
                                TempWaterAllocTableRow("Area") = TractInformation.Tables(1).Rows(i - 1)(3)
                                'TableOfFieldsWithWaterAllocRow("Date_") = CurrentDate
                                TempWaterAllocTableRow("Date_") = CurrentDate
                                'TableOfFieldsWithWaterAllocRow("Precip_Amt") = TractInformation.Tables(1).Rows(i - 1)(9)
                                TempWaterAllocTableRow("Precip_Amt") = TractInformation.Tables(1).Rows(i - 1)(9)
                                'TableOfFieldsWithWaterAllocRow("ETc") = TractInformation.Tables(1).Rows(i - 1)(10)
                                TempWaterAllocTableRow("ETc") = TractInformation.Tables(1).Rows(i - 1)(10)
                                'TableOfFieldsWithWaterAllocRow("Zr") = TractInformation.Tables(1).Rows(i - 1)(11)
                                TempWaterAllocTableRow("Zr") = TractInformation.Tables(1).Rows(i - 1)(11)

                                RanNum1 = RandomGenerator.NextDouble()
                                Runoff_Fraction = (-1 * Math.Log(RanNum1)) / (1 / lambda)
                                If Math.Floor(TractInformation.Tables(1).Rows(i - 1)(3)) = Math.Floor(Field1_Area) Then
                                    'This If statment attempts to route pumped water and store the result
                                    If RanNum3 = 1 Then
                                        'TableOfFieldsWithWaterAllocRow("SurfWatDelivered") = 0
                                        TempWaterAllocTableRow("SurfWatDelivered") = 0
                                        'TableOfFieldsWithWaterAllocRow("PumpWatDelivered") = (Field1_Amt / Field1_Area) * 1000
                                        TempWaterAllocTableRow("PumpWatDelivered") = (Field1_Amt / Field1_Area) * 1000
                                    ElseIf RanNum3 = 2 Or RanNum3 = 3 Then
                                        'TableOfFieldsWithWaterAllocRow("SurfWatDelivered") = (Field1_Amt / Field1_Area) * 1000
                                        TempWaterAllocTableRow("SurfWatDelivered") = (Field1_Amt / Field1_Area) * 1000
                                        'TableOfFieldsWithWaterAllocRow("PumpWatDelivered") = 0
                                        TempWaterAllocTableRow("PumpWatDelivered") = 0
                                    End If
                                    'TableOfFieldsWithWaterAllocRow("Runoff_Amt") = (((Field1_Amt / Field1_Area) * 1000) + TractInformation.Tables(1).Rows(i - 1)(9)) * Runoff_Fraction
                                    TempWaterAllocTableRow("Runoff_Amt") = (((Field1_Amt / Field1_Area) * 1000) + TractInformation.Tables(1).Rows(i - 1)(9)) * Runoff_Fraction
                                    RanNum1 = RandomGenerator.NextDouble()
                                    RanNum2 = RandomGenerator.NextDouble()
                                    While Not (RanNum1 <= 0.8 And RanNum2 <= 1 - 1.25 * RanNum1)
                                        RanNum1 = RandomGenerator.NextDouble()
                                        RanNum2 = RandomGenerator.NextDouble()
                                    End While
                                    'TableOfFieldsWithWaterAllocRow("DeepPerc_Amt") = (((Field1_Amt / Field1_Area) * 1000) + TractInformation.Tables(1).Rows(i - 1)(9)) * (1 - Runoff_Fraction) * RanNum1
                                    TempWaterAllocTableRow("DeepPerc_Amt") = (((Field1_Amt / Field1_Area) * 1000) + TractInformation.Tables(1).Rows(i - 1)(9)) * (1 - Runoff_Fraction) * RanNum1
                                ElseIf Math.Floor(TractInformation.Tables(1).Rows(i - 1)(3)) = Math.Floor(Field2_Area) Then
                                    If RanNum3 = 2 Then
                                        'TableOfFieldsWithWaterAllocRow("SurfWatDelivered") = 0
                                        TempWaterAllocTableRow("SurfWatDelivered") = 0
                                        'TableOfFieldsWithWaterAllocRow("PumpWatDelivered") = (Field2_Amt / Field2_Area) * 1000
                                        TempWaterAllocTableRow("PumpWatDelivered") = (Field2_Amt / Field2_Area) * 1000
                                    ElseIf RanNum3 = 1 Or RanNum3 = 3 Then
                                        'TableOfFieldsWithWaterAllocRow("SurfWatDelivered") = (Field2_Amt / Field2_Area) * 1000
                                        TempWaterAllocTableRow("SurfWatDelivered") = (Field2_Amt / Field2_Area) * 1000
                                        'TableOfFieldsWithWaterAllocRow("PumpWatDelivered") = 0
                                        TempWaterAllocTableRow("PumpWatDelivered") = 0
                                    End If
                                    'TableOfFieldsWithWaterAllocRow("Runoff_Amt") = (((Field2_Amt / Field2_Area) * 1000) + TractInformation.Tables(1).Rows(i - 1)(9)) * Runoff_Fraction
                                    TempWaterAllocTableRow("Runoff_Amt") = (((Field2_Amt / Field2_Area) * 1000) + TractInformation.Tables(1).Rows(i - 1)(9)) * Runoff_Fraction
                                    RanNum1 = RandomGenerator.NextDouble()
                                    RanNum2 = RandomGenerator.NextDouble()
                                    While Not (RanNum1 <= 0.8 And RanNum2 <= 1 - 1.25 * RanNum1)
                                        RanNum1 = RandomGenerator.NextDouble()
                                        RanNum2 = RandomGenerator.NextDouble()
                                    End While
                                    'TableOfFieldsWithWaterAllocRow("DeepPerc_Amt") = (((Field2_Amt / Field2_Area) * 1000) + TractInformation.Tables(1).Rows(i - 1)(9)) * (1 - Runoff_Fraction) * RanNum1
                                    TempWaterAllocTableRow("DeepPerc_Amt") = (((Field2_Amt / Field2_Area) * 1000) + TractInformation.Tables(1).Rows(i - 1)(9)) * (1 - Runoff_Fraction) * RanNum1
                                ElseIf Math.Floor(TractInformation.Tables(1).Rows(i - 1)(3)) = Math.Floor(Field3_Area) Then
                                    If RanNum3 = 3 Then
                                        'TableOfFieldsWithWaterAllocRow("SurfWatDelivered") = 0
                                        TempWaterAllocTableRow("SurfWatDelivered") = 0
                                        'TableOfFieldsWithWaterAllocRow("PumpWatDelivered") = (Field3_Amt / Field3_Area) * 1000
                                        TempWaterAllocTableRow("PumpWatDelivered") = (Field3_Amt / Field3_Area) * 1000
                                    ElseIf RanNum3 = 1 Or RanNum3 = 2 Then
                                        'TableOfFieldsWithWaterAllocRow("SurfWatDelivered") = (Field3_Amt / Field3_Area) * 1000
                                        TempWaterAllocTableRow("SurfWatDelivered") = (Field3_Amt / Field3_Area) * 1000
                                        'TableOfFieldsWithWaterAllocRow("PumpWatDelivered") = 0
                                        TempWaterAllocTableRow("PumpWatDelivered") = 0
                                    End If
                                    'TableOfFieldsWithWaterAllocRow("Runoff_Amt") = (((Field3_Amt / Field3_Area) * 1000) + TractInformation.Tables(1).Rows(i - 1)(9)) * Runoff_Fraction
                                    TempWaterAllocTableRow("Runoff_Amt") = (((Field3_Amt / Field3_Area) * 1000) + TractInformation.Tables(1).Rows(i - 1)(9)) * Runoff_Fraction
                                    RanNum1 = RandomGenerator.NextDouble()
                                    RanNum2 = RandomGenerator.NextDouble()
                                    While Not (RanNum1 <= 0.8 And RanNum2 <= 1 - 1.25 * RanNum1)
                                        RanNum1 = RandomGenerator.NextDouble()
                                        RanNum2 = RandomGenerator.NextDouble()
                                    End While
                                    'TableOfFieldsWithWaterAllocRow("DeepPerc_Amt") = (((Field3_Amt / Field3_Area) * 1000) + TractInformation.Tables(1).Rows(i - 1)(9)) * (1 - Runoff_Fraction) * RanNum1
                                    TempWaterAllocTableRow("DeepPerc_Amt") = (((Field3_Amt / Field3_Area) * 1000) + TractInformation.Tables(1).Rows(i - 1)(9)) * (1 - Runoff_Fraction) * RanNum1
                                Else
                                    'TableOfFieldsWithWaterAllocRow("SurfWatDelivered") = 0
                                    TempWaterAllocTableRow("SurfWatDelivered") = 0
                                    'TableOfFieldsWithWaterAllocRow("PumpWatDelivered") = 0
                                    TempWaterAllocTableRow("PumpWatDelivered") = 0
                                    If TractInformation.Tables(1).Rows(i - 1)(9) <= 50 Then
                                        'TableOfFieldsWithWaterAllocRow("Runoff_Amt") = TractInformation.Tables(1).Rows(i - 1)(9) * 0.3
                                        TempWaterAllocTableRow("Runoff_Amt") = TractInformation.Tables(1).Rows(i - 1)(9) * 0.3
                                        'The runoff from precip should be based solely upon soil capacity
                                        'TableOfFieldsWithWaterAllocRow("DeepPerc_Amt") = 0
                                        TempWaterAllocTableRow("DeepPerc_Amt") = 0
                                    ElseIf TractInformation.Tables(1).Rows(i - 1)(9) > 50 Then
                                        'TableOfFieldsWithWaterAllocRow("Runoff_Amt") = TractInformation.Tables(1).Rows(i - 1)(9) * 0.5
                                        TempWaterAllocTableRow("Runoff_Amt") = TractInformation.Tables(1).Rows(i - 1)(9) * 0.5
                                        'The runoff from precip should be based solely upon soil capacity
                                        'TableOfFieldsWithWaterAllocRow("DeepPerc_Amt") = 0
                                        TempWaterAllocTableRow("DeepPerc_Amt") = 0
                                    End If
                                End If
                                'TableOfFieldsWithWaterAllocRow("TAW") = TractInformation.Tables(1).Rows(i - 1)(7)
                                TempWaterAllocTableRow("TAW") = TractInformation.Tables(1).Rows(i - 1)(7)
                                'TableOfFieldsWithWaterAllocRow("RAW") = TractInformation.Tables(1).Rows(i - 1)(8)
                                TempWaterAllocTableRow("RAW") = TractInformation.Tables(1).Rows(i - 1)(8)
                                'TableOfFieldsWithWaterAlloc.Rows.Add(TableOfFieldsWithWaterAllocRow)
                                TempWaterAllocTable.Rows.Add(TempWaterAllocTableRow)
                            Next i
                        Else
                            'code should land here in the event an unreasonable amount of water is pumped
                            Field1_Amt = Tract_Amt * (Field1_Area / Eligible_Area)
                            Field2_Amt = Tract_Amt * (Field2_Area / Eligible_Area)
                            Field3_Amt = Tract_Amt * (Field3_Area / Eligible_Area)
                            'I can run Check_Depths here because I can start by shuffling around
                            'the water in Check_Depths and once this has sorted itself out then
                            'go ahead and arbitrarily add the small amount of pumped water to 
                            'which ever field ended up with the most amount of water to ensure
                            'it doesn't go to a field with no water 
                            Check_Depths(3, CurrentDate, Field1_Area, Field2_Area, Field3_Area, , , , , , , , _
                                        Field1_Type, Field2_Type, Field3_Type, , , , , , , , _
                                        Field1_Amt, Field2_Amt, Field3_Amt, , , , , , , )

                            If Field1_Amt >= Field2_Amt And Field1_Amt >= Field3_Amt Then
                                Field1_Amt = Field1_Amt + Pumped_Amt
                                For i = 1 To TractInformation.Tables(1).Rows.Count()
                                    'TableOfFieldsWithWaterAllocRow = TableOfFieldsWithWaterAlloc.NewRow()
                                    TempWaterAllocTableRow = TempWaterAllocTable.NewRow()
                                    'TableOfFieldsWithWaterAllocRow("Tract") = TractInformation.Tables(1).Rows(i - 1)(0)
                                    TempWaterAllocTableRow("Tract") = TractInformation.Tables(1).Rows(i - 1)(0)
                                    'TableOfFieldsWithWaterAllocRow("Field_No") = TractInformation.Tables(1).Rows(i - 1)(2)
                                    TempWaterAllocTableRow("Field_No") = TractInformation.Tables(1).Rows(i - 1)(2)
                                    TempWaterAllocTableRow("Area") = TractInformation.Tables(1).Rows(i - 1)(3)
                                    'TableOfFieldsWithWaterAllocRow("Date_") = CurrentDate
                                    TempWaterAllocTableRow("Date_") = CurrentDate
                                    'TableOfFieldsWithWaterAllocRow("Precip_Amt") = TractInformation.Tables(1).Rows(i - 1)(9)
                                    TempWaterAllocTableRow("Precip_Amt") = TractInformation.Tables(1).Rows(i - 1)(9)
                                    'TableOfFieldsWithWaterAllocRow("ETc") = TractInformation.Tables(1).Rows(i - 1)(10)
                                    TempWaterAllocTableRow("ETc") = TractInformation.Tables(1).Rows(i - 1)(10)
                                    'TableOfFieldsWithWaterAllocRow("Zr") = TractInformation.Tables(1).Rows(i - 1)(11)
                                    TempWaterAllocTableRow("Zr") = TractInformation.Tables(1).Rows(i - 1)(11)

                                    RanNum1 = RandomGenerator.NextDouble()
                                    Runoff_Fraction = (-1 * Math.Log(RanNum1)) / (1 / lambda)
                                    If Math.Floor(TractInformation.Tables(1).Rows(i - 1)(3)) = Math.Floor(Field1_Area) Then
                                        'TableOfFieldsWithWaterAllocRow("SurfWatDelivered") = ((Field1_Amt - Pumped_Amt) / Field1_Area) * 1000
                                        TempWaterAllocTableRow("SurfWatDelivered") = ((Field1_Amt - Pumped_Amt) / Field1_Area) * 1000
                                        'TableOfFieldsWithWaterAllocRow("PumpWatDelivered") = (Pumped_Amt / Field1_Area) * 1000
                                        TempWaterAllocTableRow("PumpWatDelivered") = (Pumped_Amt / Field1_Area) * 1000
                                        'TableOfFieldsWithWaterAllocRow("Runoff_Amt") = (((Field1_Amt / Field1_Area) * 1000) + TractInformation.Tables(1).Rows(i - 1)(9)) * Runoff_Fraction
                                        TempWaterAllocTableRow("Runoff_Amt") = (((Field1_Amt / Field1_Area) * 1000) + TractInformation.Tables(1).Rows(i - 1)(9)) * Runoff_Fraction
                                        RanNum1 = RandomGenerator.NextDouble()
                                        RanNum2 = RandomGenerator.NextDouble()
                                        While Not (RanNum1 <= 0.8 And RanNum2 <= 1 - 1.25 * RanNum1)
                                            RanNum1 = RandomGenerator.NextDouble()
                                            RanNum2 = RandomGenerator.NextDouble()
                                        End While
                                        'TableOfFieldsWithWaterAllocRow("DeepPerc_Amt") = (((Field1_Amt / Field1_Area) * 1000) + TractInformation.Tables(1).Rows(i - 1)(9)) * (1 - Runoff_Fraction) * RanNum1
                                        TempWaterAllocTableRow("DeepPerc_Amt") = (((Field1_Amt / Field1_Area) * 1000) + TractInformation.Tables(1).Rows(i - 1)(9)) * (1 - Runoff_Fraction) * RanNum1
                                    ElseIf Math.Floor(TractInformation.Tables(1).Rows(i - 1)(3)) = Math.Floor(Field2_Area) Then
                                        'TableOfFieldsWithWaterAllocRow("SurfWatDelivered") = (Field2_Amt / Field2_Area) * 1000
                                        TempWaterAllocTableRow("SurfWatDelivered") = (Field2_Amt / Field2_Area) * 1000
                                        'TableOfFieldsWithWaterAllocRow("PumpWatDelivered") = 0
                                        TempWaterAllocTableRow("PumpWatDelivered") = 0
                                        'TableOfFieldsWithWaterAllocRow("Runoff_Amt") = (((Field2_Amt / Field2_Area) * 1000) + TractInformation.Tables(1).Rows(i - 1)(9)) * Runoff_Fraction
                                        TempWaterAllocTableRow("Runoff_Amt") = (((Field2_Amt / Field2_Area) * 1000) + TractInformation.Tables(1).Rows(i - 1)(9)) * Runoff_Fraction
                                        RanNum1 = RandomGenerator.NextDouble()
                                        RanNum2 = RandomGenerator.NextDouble()
                                        While Not (RanNum1 <= 0.8 And RanNum2 <= 1 - 1.25 * RanNum1)
                                            RanNum1 = RandomGenerator.NextDouble()
                                            RanNum2 = RandomGenerator.NextDouble()
                                        End While
                                        'TableOfFieldsWithWaterAllocRow("DeepPerc_Amt") = (((Field2_Amt / Field2_Area) * 1000) + TractInformation.Tables(1).Rows(i - 1)(9)) * (1 - Runoff_Fraction) * RanNum1
                                        TempWaterAllocTableRow("DeepPerc_Amt") = (((Field2_Amt / Field2_Area) * 1000) + TractInformation.Tables(1).Rows(i - 1)(9)) * (1 - Runoff_Fraction) * RanNum1
                                    ElseIf Math.Floor(TractInformation.Tables(1).Rows(i - 1)(3)) = Math.Floor(Field3_Area) Then
                                        'TableOfFieldsWithWaterAllocRow("SurfWatDelivered") = (Field3_Amt / Field3_Area) * 1000
                                        TempWaterAllocTableRow("SurfWatDelivered") = (Field3_Amt / Field3_Area) * 1000
                                        'TableOfFieldsWithWaterAllocRow("PumpWatDelivered") = 0
                                        TempWaterAllocTableRow("PumpWatDelivered") = 0
                                        'TableOfFieldsWithWaterAllocRow("Runoff_Amt") = (((Field3_Amt / Field3_Area) * 1000) + TractInformation.Tables(1).Rows(i - 1)(9)) * Runoff_Fraction
                                        TempWaterAllocTableRow("Runoff_Amt") = (((Field3_Amt / Field3_Area) * 1000) + TractInformation.Tables(1).Rows(i - 1)(9)) * Runoff_Fraction
                                        RanNum1 = RandomGenerator.NextDouble()
                                        RanNum2 = RandomGenerator.NextDouble()
                                        While Not (RanNum1 <= 0.8 And RanNum2 <= 1 - 1.25 * RanNum1)
                                            RanNum1 = RandomGenerator.NextDouble()
                                            RanNum2 = RandomGenerator.NextDouble()
                                        End While
                                        'TableOfFieldsWithWaterAllocRow("DeepPerc_Amt") = (((Field3_Amt / Field3_Area) * 1000) + TractInformation.Tables(1).Rows(i - 1)(9)) * (1 - Runoff_Fraction) * RanNum1
                                        TempWaterAllocTableRow("DeepPerc_Amt") = (((Field3_Amt / Field3_Area) * 1000) + TractInformation.Tables(1).Rows(i - 1)(9)) * (1 - Runoff_Fraction) * RanNum1
                                    Else
                                        'TableOfFieldsWithWaterAllocRow("SurfWatDelivered") = 0
                                        TempWaterAllocTableRow("SurfWatDelivered") = 0
                                        'TableOfFieldsWithWaterAllocRow("PumpWatDelivered") = 0
                                        TempWaterAllocTableRow("PumpWatDelivered") = 0
                                        If TractInformation.Tables(1).Rows(i - 1)(9) <= 50 Then
                                            'TableOfFieldsWithWaterAllocRow("Runoff_Amt") = TractInformation.Tables(1).Rows(i - 1)(9) * 0.3
                                            TempWaterAllocTableRow("Runoff_Amt") = TractInformation.Tables(1).Rows(i - 1)(9) * 0.3
                                            'The runoff from precip should be based solely upon soil capacity
                                            'TableOfFieldsWithWaterAllocRow("DeepPerc_Amt") = 0
                                            TempWaterAllocTableRow("DeepPerc_Amt") = 0
                                        ElseIf TractInformation.Tables(1).Rows(i - 1)(9) > 50 Then
                                            'TableOfFieldsWithWaterAllocRow("Runoff_Amt") = TractInformation.Tables(1).Rows(i - 1)(9) * 0.5
                                            TempWaterAllocTableRow("Runoff_Amt") = TractInformation.Tables(1).Rows(i - 1)(9) * 0.5
                                            'The runoff from precip should be based solely upon soil capacity
                                            'TableOfFieldsWithWaterAllocRow("DeepPerc_Amt") = 0
                                            TempWaterAllocTableRow("DeepPerc_Amt") = 0
                                        End If
                                    End If
                                    'TableOfFieldsWithWaterAllocRow("TAW") = TractInformation.Tables(1).Rows(i - 1)(7)
                                    TempWaterAllocTableRow("TAW") = TractInformation.Tables(1).Rows(i - 1)(7)
                                    'TableOfFieldsWithWaterAllocRow("RAW") = TractInformation.Tables(1).Rows(i - 1)(8)
                                    TempWaterAllocTableRow("RAW") = TractInformation.Tables(1).Rows(i - 1)(8)
                                    'TableOfFieldsWithWaterAlloc.Rows.Add(TableOfFieldsWithWaterAllocRow)
                                    TempWaterAllocTable.Rows.Add(TempWaterAllocTableRow)
                                Next i
                            ElseIf Field2_Amt >= Field1_Amt And Field2_Amt >= Field3_Amt Then
                                Field2_Amt = Field2_Amt + Pumped_Amt
                                For i = 1 To TractInformation.Tables(1).Rows.Count()
                                    'TableOfFieldsWithWaterAllocRow = TableOfFieldsWithWaterAlloc.NewRow()
                                    TempWaterAllocTableRow = TempWaterAllocTable.NewRow()
                                    'TableOfFieldsWithWaterAllocRow("Tract") = TractInformation.Tables(1).Rows(i - 1)(0)
                                    TempWaterAllocTableRow("Tract") = TractInformation.Tables(1).Rows(i - 1)(0)
                                    'TableOfFieldsWithWaterAllocRow("Field_No") = TractInformation.Tables(1).Rows(i - 1)(2)
                                    TempWaterAllocTableRow("Field_No") = TractInformation.Tables(1).Rows(i - 1)(2)
                                    TempWaterAllocTableRow("Area") = TractInformation.Tables(1).Rows(i - 1)(3)
                                    'TableOfFieldsWithWaterAllocRow("Date_") = CurrentDate
                                    TempWaterAllocTableRow("Date_") = CurrentDate
                                    'TableOfFieldsWithWaterAllocRow("Precip_Amt") = TractInformation.Tables(1).Rows(i - 1)(9)
                                    TempWaterAllocTableRow("Precip_Amt") = TractInformation.Tables(1).Rows(i - 1)(9)
                                    'TableOfFieldsWithWaterAllocRow("ETc") = TractInformation.Tables(1).Rows(i - 1)(10)
                                    TempWaterAllocTableRow("ETc") = TractInformation.Tables(1).Rows(i - 1)(10)
                                    'TableOfFieldsWithWaterAllocRow("Zr") = TractInformation.Tables(1).Rows(i - 1)(11)
                                    TempWaterAllocTableRow("Zr") = TractInformation.Tables(1).Rows(i - 1)(11)

                                    RanNum1 = RandomGenerator.NextDouble()
                                    Runoff_Fraction = (-1 * Math.Log(RanNum1)) / (1 / lambda)
                                    If Math.Floor(TractInformation.Tables(1).Rows(i - 1)(3)) = Math.Floor(Field1_Area) Then
                                        'TableOfFieldsWithWaterAllocRow("SurfWatDelivered") = (Field1_Amt / Field1_Area) * 1000
                                        TempWaterAllocTableRow("SurfWatDelivered") = (Field1_Amt / Field1_Area) * 1000
                                        'TableOfFieldsWithWaterAllocRow("PumpWatDelivered") = 0
                                        TempWaterAllocTableRow("PumpWatDelivered") = 0
                                        'TableOfFieldsWithWaterAllocRow("Runoff_Amt") = (((Field1_Amt / Field1_Area) * 1000) + TractInformation.Tables(1).Rows(i - 1)(9)) * Runoff_Fraction
                                        TempWaterAllocTableRow("Runoff_Amt") = (((Field1_Amt / Field1_Area) * 1000) + TractInformation.Tables(1).Rows(i - 1)(9)) * Runoff_Fraction
                                        RanNum1 = RandomGenerator.NextDouble()
                                        RanNum2 = RandomGenerator.NextDouble()
                                        While Not (RanNum1 <= 0.8 And RanNum2 <= 1 - 1.25 * RanNum1)
                                            RanNum1 = RandomGenerator.NextDouble()
                                            RanNum2 = RandomGenerator.NextDouble()
                                        End While
                                        'TableOfFieldsWithWaterAllocRow("DeepPerc_Amt") = (((Field1_Amt / Field1_Area) * 1000) + TractInformation.Tables(1).Rows(i - 1)(9)) * (1 - Runoff_Fraction) * RanNum1
                                        TempWaterAllocTableRow("DeepPerc_Amt") = (((Field1_Amt / Field1_Area) * 1000) + TractInformation.Tables(1).Rows(i - 1)(9)) * (1 - Runoff_Fraction) * RanNum1
                                    ElseIf Math.Floor(TractInformation.Tables(1).Rows(i - 1)(3)) = Math.Floor(Field2_Area) Then
                                        'TableOfFieldsWithWaterAllocRow("SurfWatDelivered") = ((Field2_Amt - Pumped_Amt) / Field2_Area) * 1000
                                        TempWaterAllocTableRow("SurfWatDelivered") = ((Field2_Amt - Pumped_Amt) / Field2_Area) * 1000
                                        'TableOfFieldsWithWaterAllocRow("PumpWatDelivered") = (Pumped_Amt / Field2_Area) * 1000
                                        TempWaterAllocTableRow("PumpWatDelivered") = (Pumped_Amt / Field2_Area) * 1000
                                        'TableOfFieldsWithWaterAllocRow("Runoff_Amt") = (((Field2_Amt / Field2_Area) * 1000) + TractInformation.Tables(1).Rows(i - 1)(9)) * Runoff_Fraction
                                        TempWaterAllocTableRow("Runoff_Amt") = (((Field2_Amt / Field2_Area) * 1000) + TractInformation.Tables(1).Rows(i - 1)(9)) * Runoff_Fraction
                                        RanNum1 = RandomGenerator.NextDouble()
                                        RanNum2 = RandomGenerator.NextDouble()
                                        While Not (RanNum1 <= 0.8 And RanNum2 <= 1 - 1.25 * RanNum1)
                                            RanNum1 = RandomGenerator.NextDouble()
                                            RanNum2 = RandomGenerator.NextDouble()
                                        End While
                                        'TableOfFieldsWithWaterAllocRow("DeepPerc_Amt") = (((Field2_Amt / Field2_Area) * 1000) + TractInformation.Tables(1).Rows(i - 1)(9)) * (1 - Runoff_Fraction) * RanNum1
                                        TempWaterAllocTableRow("DeepPerc_Amt") = (((Field2_Amt / Field2_Area) * 1000) + TractInformation.Tables(1).Rows(i - 1)(9)) * (1 - Runoff_Fraction) * RanNum1
                                    ElseIf Math.Floor(TractInformation.Tables(1).Rows(i - 1)(3)) = Math.Floor(Field3_Area) Then
                                        'TableOfFieldsWithWaterAllocRow("SurfWatDelivered") = (Field3_Amt / Field3_Area) * 1000
                                        TempWaterAllocTableRow("SurfWatDelivered") = (Field3_Amt / Field3_Area) * 1000
                                        'TableOfFieldsWithWaterAllocRow("PumpWatDelivered") = 0
                                        TempWaterAllocTableRow("PumpWatDelivered") = 0
                                        'TableOfFieldsWithWaterAllocRow("Runoff_Amt") = (((Field3_Amt / Field3_Area) * 1000) + TractInformation.Tables(1).Rows(i - 1)(9)) * Runoff_Fraction
                                        TempWaterAllocTableRow("Runoff_Amt") = (((Field3_Amt / Field3_Area) * 1000) + TractInformation.Tables(1).Rows(i - 1)(9)) * Runoff_Fraction
                                        RanNum1 = RandomGenerator.NextDouble()
                                        RanNum2 = RandomGenerator.NextDouble()
                                        While Not (RanNum1 <= 0.8 And RanNum2 <= 1 - 1.25 * RanNum1)
                                            RanNum1 = RandomGenerator.NextDouble()
                                            RanNum2 = RandomGenerator.NextDouble()
                                        End While
                                        'TableOfFieldsWithWaterAllocRow("DeepPerc_Amt") = (((Field3_Amt / Field3_Area) * 1000) + TractInformation.Tables(1).Rows(i - 1)(9)) * (1 - Runoff_Fraction) * RanNum1
                                        TempWaterAllocTableRow("DeepPerc_Amt") = (((Field3_Amt / Field3_Area) * 1000) + TractInformation.Tables(1).Rows(i - 1)(9)) * (1 - Runoff_Fraction) * RanNum1
                                    Else
                                        'TableOfFieldsWithWaterAllocRow("SurfWatDelivered") = 0
                                        TempWaterAllocTableRow("SurfWatDelivered") = 0
                                        'TableOfFieldsWithWaterAllocRow("PumpWatDelivered") = 0
                                        TempWaterAllocTableRow("PumpWatDelivered") = 0
                                        If TractInformation.Tables(1).Rows(i - 1)(9) <= 50 Then
                                            'TableOfFieldsWithWaterAllocRow("Runoff_Amt") = TractInformation.Tables(1).Rows(i - 1)(9) * 0.3
                                            TempWaterAllocTableRow("Runoff_Amt") = TractInformation.Tables(1).Rows(i - 1)(9) * 0.3
                                            'The runoff from precip should be based solely upon soil capacity
                                            'TableOfFieldsWithWaterAllocRow("DeepPerc_Amt") = 0
                                            TempWaterAllocTableRow("DeepPerc_Amt") = 0
                                        ElseIf TractInformation.Tables(1).Rows(i - 1)(9) > 50 Then
                                            'TableOfFieldsWithWaterAllocRow("Runoff_Amt") = TractInformation.Tables(1).Rows(i - 1)(9) * 0.5
                                            TempWaterAllocTableRow("Runoff_Amt") = TractInformation.Tables(1).Rows(i - 1)(9) * 0.5
                                            'The runoff from precip should be based solely upon soil capacity
                                            'TableOfFieldsWithWaterAllocRow("DeepPerc_Amt") = 0
                                            TempWaterAllocTableRow("DeepPerc_Amt") = 0
                                        End If
                                    End If
                                    'TableOfFieldsWithWaterAllocRow("TAW") = TractInformation.Tables(1).Rows(i - 1)(7)
                                    TempWaterAllocTableRow("TAW") = TractInformation.Tables(1).Rows(i - 1)(7)
                                    'TableOfFieldsWithWaterAllocRow("RAW") = TractInformation.Tables(1).Rows(i - 1)(8)
                                    TempWaterAllocTableRow("RAW") = TractInformation.Tables(1).Rows(i - 1)(8)
                                    'TableOfFieldsWithWaterAlloc.Rows.Add(TableOfFieldsWithWaterAllocRow)
                                    TempWaterAllocTable.Rows.Add(TempWaterAllocTableRow)
                                Next i
                            ElseIf Field3_Amt >= Field1_Amt And Field3_Amt >= Field2_Amt Then
                                Field3_Amt = Field3_Amt + Pumped_Amt
                                For i = 1 To TractInformation.Tables(1).Rows.Count()
                                    'TableOfFieldsWithWaterAllocRow = TableOfFieldsWithWaterAlloc.NewRow()
                                    TempWaterAllocTableRow = TempWaterAllocTable.NewRow()
                                    'TableOfFieldsWithWaterAllocRow("Tract") = TractInformation.Tables(1).Rows(i - 1)(0)
                                    TempWaterAllocTableRow("Tract") = TractInformation.Tables(1).Rows(i - 1)(0)
                                    'TableOfFieldsWithWaterAllocRow("Field_No") = TractInformation.Tables(1).Rows(i - 1)(2)
                                    TempWaterAllocTableRow("Field_No") = TractInformation.Tables(1).Rows(i - 1)(2)
                                    TempWaterAllocTableRow("Area") = TractInformation.Tables(1).Rows(i - 1)(3)
                                    'TableOfFieldsWithWaterAllocRow("Date_") = CurrentDate
                                    TempWaterAllocTableRow("Date_") = CurrentDate
                                    'TableOfFieldsWithWaterAllocRow("Precip_Amt") = TractInformation.Tables(1).Rows(i - 1)(9)
                                    TempWaterAllocTableRow("Precip_Amt") = TractInformation.Tables(1).Rows(i - 1)(9)
                                    'TableOfFieldsWithWaterAllocRow("ETc") = TractInformation.Tables(1).Rows(i - 1)(10)
                                    TempWaterAllocTableRow("ETc") = TractInformation.Tables(1).Rows(i - 1)(10)
                                    'TableOfFieldsWithWaterAllocRow("Zr") = TractInformation.Tables(1).Rows(i - 1)(11)
                                    TempWaterAllocTableRow("Zr") = TractInformation.Tables(1).Rows(i - 1)(11)

                                    RanNum1 = RandomGenerator.NextDouble()
                                    Runoff_Fraction = (-1 * Math.Log(RanNum1)) / (1 / lambda)
                                    If Math.Floor(TractInformation.Tables(1).Rows(i - 1)(3)) = Math.Floor(Field1_Area) Then
                                        'TableOfFieldsWithWaterAllocRow("SurfWatDelivered") = (Field1_Amt / Field1_Area) * 1000
                                        TempWaterAllocTableRow("SurfWatDelivered") = (Field1_Amt / Field1_Area) * 1000
                                        'TableOfFieldsWithWaterAllocRow("PumpWatDelivered") = 0
                                        TempWaterAllocTableRow("PumpWatDelivered") = 0
                                        'TableOfFieldsWithWaterAllocRow("Runoff_Amt") = (((Field1_Amt / Field1_Area) * 1000) + TractInformation.Tables(1).Rows(i - 1)(9)) * Runoff_Fraction
                                        TempWaterAllocTableRow("Runoff_Amt") = (((Field1_Amt / Field1_Area) * 1000) + TractInformation.Tables(1).Rows(i - 1)(9)) * Runoff_Fraction
                                        RanNum1 = RandomGenerator.NextDouble()
                                        RanNum2 = RandomGenerator.NextDouble()
                                        While Not (RanNum1 <= 0.8 And RanNum2 <= 1 - 1.25 * RanNum1)
                                            RanNum1 = RandomGenerator.NextDouble()
                                            RanNum2 = RandomGenerator.NextDouble()
                                        End While
                                        'TableOfFieldsWithWaterAllocRow("DeepPerc_Amt") = (((Field1_Amt / Field1_Area) * 1000) + TractInformation.Tables(1).Rows(i - 1)(9)) * (1 - Runoff_Fraction) * RanNum1
                                        TempWaterAllocTableRow("DeepPerc_Amt") = (((Field1_Amt / Field1_Area) * 1000) + TractInformation.Tables(1).Rows(i - 1)(9)) * (1 - Runoff_Fraction) * RanNum1
                                    ElseIf Math.Floor(TractInformation.Tables(1).Rows(i - 1)(3)) = Math.Floor(Field2_Area) Then
                                        'TableOfFieldsWithWaterAllocRow("SurfWatDelivered") = (Field2_Amt / Field2_Area) * 1000
                                        TempWaterAllocTableRow("SurfWatDelivered") = (Field2_Amt / Field2_Area) * 1000
                                        'TableOfFieldsWithWaterAllocRow("PumpWatDelivered") = 0
                                        TempWaterAllocTableRow("PumpWatDelivered") = 0
                                        'TableOfFieldsWithWaterAllocRow("Runoff_Amt") = (((Field2_Amt / Field2_Area) * 1000) + TractInformation.Tables(1).Rows(i - 1)(9)) * Runoff_Fraction
                                        TempWaterAllocTableRow("Runoff_Amt") = (((Field2_Amt / Field2_Area) * 1000) + TractInformation.Tables(1).Rows(i - 1)(9)) * Runoff_Fraction
                                        RanNum1 = RandomGenerator.NextDouble()
                                        RanNum2 = RandomGenerator.NextDouble()
                                        While Not (RanNum1 <= 0.8 And RanNum2 <= 1 - 1.25 * RanNum1)
                                            RanNum1 = RandomGenerator.NextDouble()
                                            RanNum2 = RandomGenerator.NextDouble()
                                        End While
                                        'TableOfFieldsWithWaterAllocRow("DeepPerc_Amt") = (((Field2_Amt / Field2_Area) * 1000) + TractInformation.Tables(1).Rows(i - 1)(9)) * (1 - Runoff_Fraction) * RanNum1
                                        TempWaterAllocTableRow("DeepPerc_Amt") = (((Field2_Amt / Field2_Area) * 1000) + TractInformation.Tables(1).Rows(i - 1)(9)) * (1 - Runoff_Fraction) * RanNum1
                                    ElseIf Math.Floor(TractInformation.Tables(1).Rows(i - 1)(3)) = Math.Floor(Field3_Area) Then
                                        'TableOfFieldsWithWaterAllocRow("SurfWatDelivered") = ((Field3_Amt - Pumped_Amt) / Field3_Area) * 1000
                                        TempWaterAllocTableRow("SurfWatDelivered") = ((Field3_Amt - Pumped_Amt) / Field3_Area) * 1000
                                        'TableOfFieldsWithWaterAllocRow("PumpWatDelivered") = (Pumped_Amt / Field3_Area) * 1000
                                        TempWaterAllocTableRow("PumpWatDelivered") = (Pumped_Amt / Field3_Area) * 1000
                                        'TableOfFieldsWithWaterAllocRow("Runoff_Amt") = (((Field3_Amt / Field3_Area) * 1000) + TractInformation.Tables(1).Rows(i - 1)(9)) * Runoff_Fraction
                                        TempWaterAllocTableRow("Runoff_Amt") = (((Field3_Amt / Field3_Area) * 1000) + TractInformation.Tables(1).Rows(i - 1)(9)) * Runoff_Fraction
                                        RanNum1 = RandomGenerator.NextDouble()
                                        RanNum2 = RandomGenerator.NextDouble()
                                        While Not (RanNum1 <= 0.8 And RanNum2 <= 1 - 1.25 * RanNum1)
                                            RanNum1 = RandomGenerator.NextDouble()
                                            RanNum2 = RandomGenerator.NextDouble()
                                        End While
                                        'TableOfFieldsWithWaterAllocRow("DeepPerc_Amt") = (((Field3_Amt / Field3_Area) * 1000) + TractInformation.Tables(1).Rows(i - 1)(9)) * (1 - Runoff_Fraction) * RanNum1
                                        TempWaterAllocTableRow("DeepPerc_Amt") = (((Field3_Amt / Field3_Area) * 1000) + TractInformation.Tables(1).Rows(i - 1)(9)) * (1 - Runoff_Fraction) * RanNum1
                                    Else
                                        'TableOfFieldsWithWaterAllocRow("SurfWatDelivered") = 0
                                        TempWaterAllocTableRow("SurfWatDelivered") = 0
                                        'TableOfFieldsWithWaterAllocRow("PumpWatDelivered") = 0
                                        TempWaterAllocTableRow("PumpWatDelivered") = 0
                                        If TractInformation.Tables(1).Rows(i - 1)(9) <= 50 Then
                                            'TableOfFieldsWithWaterAllocRow("Runoff_Amt") = TractInformation.Tables(1).Rows(i - 1)(9) * 0.3
                                            TempWaterAllocTableRow("Runoff_Amt") = TractInformation.Tables(1).Rows(i - 1)(9) * 0.3
                                            'The runoff from precip should be based solely upon soil capacity
                                            'TableOfFieldsWithWaterAllocRow("DeepPerc_Amt") = 0
                                            TempWaterAllocTableRow("DeepPerc_Amt") = 0
                                        ElseIf TractInformation.Tables(1).Rows(i - 1)(9) > 50 Then
                                            'TableOfFieldsWithWaterAllocRow("Runoff_Amt") = TractInformation.Tables(1).Rows(i - 1)(9) * 0.5
                                            TempWaterAllocTableRow("Runoff_Amt") = TractInformation.Tables(1).Rows(i - 1)(9) * 0.5
                                            'The runoff from precip should be based solely upon soil capacity
                                            'TableOfFieldsWithWaterAllocRow("DeepPerc_Amt") = 0
                                            TempWaterAllocTableRow("DeepPerc_Amt") = 0
                                        End If
                                    End If
                                    'TableOfFieldsWithWaterAllocRow("TAW") = TractInformation.Tables(1).Rows(i - 1)(7)
                                    TempWaterAllocTableRow("TAW") = TractInformation.Tables(1).Rows(i - 1)(7)
                                    'TableOfFieldsWithWaterAllocRow("RAW") = TractInformation.Tables(1).Rows(i - 1)(8)
                                    TempWaterAllocTableRow("RAW") = TractInformation.Tables(1).Rows(i - 1)(8)
                                    'TableOfFieldsWithWaterAlloc.Rows.Add(TableOfFieldsWithWaterAllocRow)
                                    TempWaterAllocTable.Rows.Add(TempWaterAllocTableRow)
                                Next i
                            End If
                        End If
                    Else
                        'The code should land here in the event that there is no pumping taking place
                        Field1_Amt = Tract_Amt * (Field1_Area / Eligible_Area)
                        Field2_Amt = Tract_Amt * (Field2_Area / Eligible_Area)
                        Field3_Amt = Tract_Amt * (Field3_Area / Eligible_Area)
                        Check_Depths(3, CurrentDate, Field1_Area, Field2_Area, Field3_Area, , , , , , , , _
                                        Field1_Type, Field2_Type, Field3_Type, , , , , , , , _
                                        Field1_Amt, Field2_Amt, Field3_Amt, , , , , , , )
                        If Field1_Amt / Field1_Area > 0.3 Or Field2_Amt / Field2_Area > 0.3 Or Field3_Amt / Field3_Area > 0.3 Then
                            GoTo 50
                        End If

                        For i = 1 To TractInformation.Tables(1).Rows.Count()
                            'TableOfFieldsWithWaterAllocRow = TableOfFieldsWithWaterAlloc.NewRow()
                            TempWaterAllocTableRow = TempWaterAllocTable.NewRow()
                            'TableOfFieldsWithWaterAllocRow("Tract") = TractInformation.Tables(1).Rows(i - 1)(0)
                            TempWaterAllocTableRow("Tract") = TractInformation.Tables(1).Rows(i - 1)(0)
                            'TableOfFieldsWithWaterAllocRow("Field_No") = TractInformation.Tables(1).Rows(i - 1)(2)
                            TempWaterAllocTableRow("Field_No") = TractInformation.Tables(1).Rows(i - 1)(2)
                            TempWaterAllocTableRow("Area") = TractInformation.Tables(1).Rows(i - 1)(3)
                            'TableOfFieldsWithWaterAllocRow("Date_") = CurrentDate
                            TempWaterAllocTableRow("Date_") = CurrentDate
                            'TableOfFieldsWithWaterAllocRow("Precip_Amt") = TractInformation.Tables(1).Rows(i - 1)(9)
                            TempWaterAllocTableRow("Precip_Amt") = TractInformation.Tables(1).Rows(i - 1)(9)
                            'TableOfFieldsWithWaterAllocRow("ETc") = TractInformation.Tables(1).Rows(i - 1)(10)
                            TempWaterAllocTableRow("ETc") = TractInformation.Tables(1).Rows(i - 1)(10)
                            'TableOfFieldsWithWaterAllocRow("Zr") = TractInformation.Tables(1).Rows(i - 1)(11)
                            TempWaterAllocTableRow("Zr") = TractInformation.Tables(1).Rows(i - 1)(11)

                            RanNum1 = RandomGenerator.NextDouble()
                            Runoff_Fraction = (-1 * Math.Log(RanNum1)) / (1 / lambda)
                            If Math.Floor(TractInformation.Tables(1).Rows(i - 1)(3)) = Math.Floor(Field1_Area) Then
                                'This next line incase "Check_Depths reallocated water and this field now receives no water
                                If Field1_Amt = 0 Then GoTo 1001
                                'TableOfFieldsWithWaterAllocRow("SurfWatDelivered") = (Field1_Amt / Field1_Area) * 1000
                                TempWaterAllocTableRow("SurfWatDelivered") = (Field1_Amt / Field1_Area) * 1000
                                'TableOfFieldsWithWaterAllocRow("PumpWatDelivered") = 0
                                TempWaterAllocTableRow("PumpWatDelivered") = 0
                                'TableOfFieldsWithWaterAllocRow("Runoff_Amt") = (((Field1_Amt / Field1_Area) * 1000) + TractInformation.Tables(1).Rows(i - 1)(9)) * Runoff_Fraction
                                TempWaterAllocTableRow("Runoff_Amt") = (((Field1_Amt / Field1_Area) * 1000) + TractInformation.Tables(1).Rows(i - 1)(9)) * Runoff_Fraction
                                RanNum1 = RandomGenerator.NextDouble()
                                RanNum2 = RandomGenerator.NextDouble()
                                While Not (RanNum1 <= 0.8 And RanNum2 <= 1 - 1.25 * RanNum1)
                                    RanNum1 = RandomGenerator.NextDouble()
                                    RanNum2 = RandomGenerator.NextDouble()
                                End While
                                'TableOfFieldsWithWaterAllocRow("DeepPerc_Amt") = (((Field1_Amt / Field1_Area) * 1000) + TractInformation.Tables(1).Rows(i - 1)(9)) * (1 - Runoff_Fraction) * RanNum1
                                TempWaterAllocTableRow("DeepPerc_Amt") = (((Field1_Amt / Field1_Area) * 1000) + TractInformation.Tables(1).Rows(i - 1)(9)) * (1 - Runoff_Fraction) * RanNum1
                            ElseIf Math.Floor(TractInformation.Tables(1).Rows(i - 1)(3)) = Math.Floor(Field2_Area) Then
                                'This next line incase "Check_Depths reallocated water and this field now receives no water
                                If Field2_Amt = 0 Then GoTo 1001
                                'TableOfFieldsWithWaterAllocRow("SurfWatDelivered") = (Field2_Amt / Field2_Area) * 1000
                                TempWaterAllocTableRow("SurfWatDelivered") = (Field2_Amt / Field2_Area) * 1000
                                'TableOfFieldsWithWaterAllocRow("PumpWatDelivered") = 0
                                TempWaterAllocTableRow("PumpWatDelivered") = 0
                                'TableOfFieldsWithWaterAllocRow("Runoff_Amt") = (((Field2_Amt / Field2_Area) * 1000) + TractInformation.Tables(1).Rows(i - 1)(9)) * Runoff_Fraction
                                TempWaterAllocTableRow("Runoff_Amt") = (((Field2_Amt / Field2_Area) * 1000) + TractInformation.Tables(1).Rows(i - 1)(9)) * Runoff_Fraction
                                RanNum1 = RandomGenerator.NextDouble()
                                RanNum2 = RandomGenerator.NextDouble()
                                While Not (RanNum1 <= 0.8 And RanNum2 <= 1 - 1.25 * RanNum1)
                                    RanNum1 = RandomGenerator.NextDouble()
                                    RanNum2 = RandomGenerator.NextDouble()
                                End While
                                'TableOfFieldsWithWaterAllocRow("DeepPerc_Amt") = (((Field2_Amt / Field2_Area) * 1000) + TractInformation.Tables(1).Rows(i - 1)(9)) * (1 - Runoff_Fraction) * RanNum1
                                TempWaterAllocTableRow("DeepPerc_Amt") = (((Field2_Amt / Field2_Area) * 1000) + TractInformation.Tables(1).Rows(i - 1)(9)) * (1 - Runoff_Fraction) * RanNum1
                            ElseIf Math.Floor(TractInformation.Tables(1).Rows(i - 1)(3)) = Math.Floor(Field3_Area) Then
                                'This next line incase "Check_Depths reallocated water and this field now receives no water
                                If Field3_Amt = 0 Then GoTo 1001
                                'TableOfFieldsWithWaterAllocRow("SurfWatDelivered") = (Field3_Amt / Field3_Area) * 1000
                                TempWaterAllocTableRow("SurfWatDelivered") = (Field3_Amt / Field3_Area) * 1000
                                'TableOfFieldsWithWaterAllocRow("PumpWatDelivered") = 0
                                TempWaterAllocTableRow("PumpWatDelivered") = 0
                                'TableOfFieldsWithWaterAllocRow("Runoff_Amt") = (((Field3_Amt / Field3_Area) * 1000) + TractInformation.Tables(1).Rows(i - 1)(9)) * Runoff_Fraction
                                TempWaterAllocTableRow("Runoff_Amt") = (((Field3_Amt / Field3_Area) * 1000) + TractInformation.Tables(1).Rows(i - 1)(9)) * Runoff_Fraction
                                RanNum1 = RandomGenerator.NextDouble()
                                RanNum2 = RandomGenerator.NextDouble()
                                While Not (RanNum1 <= 0.8 And RanNum2 <= 1 - 1.25 * RanNum1)
                                    RanNum1 = RandomGenerator.NextDouble()
                                    RanNum2 = RandomGenerator.NextDouble()
                                End While
                                'TableOfFieldsWithWaterAllocRow("DeepPerc_Amt") = (((Field3_Amt / Field3_Area) * 1000) + TractInformation.Tables(1).Rows(i - 1)(9)) * (1 - Runoff_Fraction) * RanNum1
                                TempWaterAllocTableRow("DeepPerc_Amt") = (((Field3_Amt / Field3_Area) * 1000) + TractInformation.Tables(1).Rows(i - 1)(9)) * (1 - Runoff_Fraction) * RanNum1
                            Else
                                '1001:  TableOfFieldsWithWaterAllocRow("SurfWatDelivered") = 0
1001:                           TempWaterAllocTableRow("SurfWatDelivered") = 0
                                'TableOfFieldsWithWaterAllocRow("PumpWatDelivered") = 0
                                TempWaterAllocTableRow("PumpWatDelivered") = 0
                                If TractInformation.Tables(1).Rows(i - 1)(9) <= 50 Then
                                    'TableOfFieldsWithWaterAllocRow("Runoff_Amt") = TractInformation.Tables(1).Rows(i - 1)(9) * 0.3
                                    TempWaterAllocTableRow("Runoff_Amt") = TractInformation.Tables(1).Rows(i - 1)(9) * 0.3
                                    'The runoff from precip should be based solely upon soil capacity
                                    'TableOfFieldsWithWaterAllocRow("DeepPerc_Amt") = 0
                                    TempWaterAllocTableRow("DeepPerc_Amt") = 0
                                ElseIf TractInformation.Tables(1).Rows(i - 1)(9) > 50 Then
                                    'TableOfFieldsWithWaterAllocRow("Runoff_Amt") = TractInformation.Tables(1).Rows(i - 1)(9) * 0.5
                                    TempWaterAllocTableRow("Runoff_Amt") = TractInformation.Tables(1).Rows(i - 1)(9) * 0.5
                                    'The runoff from precip should be based solely upon soil capacity
                                    'TableOfFieldsWithWaterAllocRow("DeepPerc_Amt") = 0
                                    TempWaterAllocTableRow("DeepPerc_Amt") = 0
                                End If
                            End If
                            'TableOfFieldsWithWaterAllocRow("TAW") = TractInformation.Tables(1).Rows(i - 1)(7)
                            TempWaterAllocTableRow("TAW") = TractInformation.Tables(1).Rows(i - 1)(7)
                            'TableOfFieldsWithWaterAllocRow("RAW") = TractInformation.Tables(1).Rows(i - 1)(8)
                            TempWaterAllocTableRow("RAW") = TractInformation.Tables(1).Rows(i - 1)(8)
                            'TableOfFieldsWithWaterAlloc.Rows.Add(TableOfFieldsWithWaterAllocRow)
                            TempWaterAllocTable.Rows.Add(TempWaterAllocTableRow)
                        Next i
                    End If
                Case 4
                    Field1_Area = TractInformation.Tables(1).Select("IRRIG_TIME_CODE" & Right(CStr(CurrentDate), 2) & " = " & TimingCodeActive(0) & " Or IRRIG_TIME_CODE" & Right(CStr(CurrentDate), 2) & " = " & TimingCodeActive(1) & " Or IRRIG_TIME_CODE" & Right(CStr(CurrentDate), 2) & " = " & TimingCodeActive(2))(ct - 4)(3)
                    Field2_Area = TractInformation.Tables(1).Select("IRRIG_TIME_CODE" & Right(CStr(CurrentDate), 2) & " = " & TimingCodeActive(0) & " Or IRRIG_TIME_CODE" & Right(CStr(CurrentDate), 2) & " = " & TimingCodeActive(1) & " Or IRRIG_TIME_CODE" & Right(CStr(CurrentDate), 2) & " = " & TimingCodeActive(2))(ct - 3)(3)
                    Field3_Area = TractInformation.Tables(1).Select("IRRIG_TIME_CODE" & Right(CStr(CurrentDate), 2) & " = " & TimingCodeActive(0) & " Or IRRIG_TIME_CODE" & Right(CStr(CurrentDate), 2) & " = " & TimingCodeActive(1) & " Or IRRIG_TIME_CODE" & Right(CStr(CurrentDate), 2) & " = " & TimingCodeActive(2))(ct - 2)(3)
                    Field4_Area = TractInformation.Tables(1).Select("IRRIG_TIME_CODE" & Right(CStr(CurrentDate), 2) & " = " & TimingCodeActive(0) & " Or IRRIG_TIME_CODE" & Right(CStr(CurrentDate), 2) & " = " & TimingCodeActive(1) & " Or IRRIG_TIME_CODE" & Right(CStr(CurrentDate), 2) & " = " & TimingCodeActive(2))(ct - 1)(3)
                    Field1_Type = TractInformation.Tables(1).Select("IRRIG_TIME_CODE" & Right(CStr(CurrentDate), 2) & " = " & TimingCodeActive(0) & " Or IRRIG_TIME_CODE" & Right(CStr(CurrentDate), 2) & " = " & TimingCodeActive(1) & " Or IRRIG_TIME_CODE" & Right(CStr(CurrentDate), 2) & " = " & TimingCodeActive(2))(ct - 4)(4)
                    Field2_Type = TractInformation.Tables(1).Select("IRRIG_TIME_CODE" & Right(CStr(CurrentDate), 2) & " = " & TimingCodeActive(0) & " Or IRRIG_TIME_CODE" & Right(CStr(CurrentDate), 2) & " = " & TimingCodeActive(1) & " Or IRRIG_TIME_CODE" & Right(CStr(CurrentDate), 2) & " = " & TimingCodeActive(2))(ct - 3)(4)
                    Field3_Type = TractInformation.Tables(1).Select("IRRIG_TIME_CODE" & Right(CStr(CurrentDate), 2) & " = " & TimingCodeActive(0) & " Or IRRIG_TIME_CODE" & Right(CStr(CurrentDate), 2) & " = " & TimingCodeActive(1) & " Or IRRIG_TIME_CODE" & Right(CStr(CurrentDate), 2) & " = " & TimingCodeActive(2))(ct - 2)(4)
                    Field4_Type = TractInformation.Tables(1).Select("IRRIG_TIME_CODE" & Right(CStr(CurrentDate), 2) & " = " & TimingCodeActive(0) & " Or IRRIG_TIME_CODE" & Right(CStr(CurrentDate), 2) & " = " & TimingCodeActive(1) & " Or IRRIG_TIME_CODE" & Right(CStr(CurrentDate), 2) & " = " & TimingCodeActive(2))(ct - 1)(4)
                    If Pumped_Amt > 0 Then
                        AvgFldSize = (Field1_Area + Field2_Area + Field3_Area + Field4_Area) / 4
                        Reasonable = Check_Depths(1, CurrentDate, AvgFldSize, , , , , , , , , , _
                                        Field1_Type, , , , , , , , , , _
                                        Pumped_Amt, , , , , , , , , )
                        If Reasonable Then
                            RanNum3 = RandomGenerator.Next(1, 4)
                            If RanNum3 = 1 Then
                                Field1_Amt = Pumped_Amt
                                Field2_Amt = Tract_Amt * (Field2_Area / (Field2_Area + Field3_Area + Field4_Area))
                                Field3_Amt = Tract_Amt * (Field3_Area / (Field2_Area + Field3_Area + Field4_Area))
                                Field4_Amt = Tract_Amt * (Field4_Area / (Field2_Area + Field3_Area + Field4_Area))
                            ElseIf RanNum3 = 2 Then
                                Field1_Amt = Tract_Amt * (Field1_Area / (Field1_Area + Field3_Area + Field4_Area))
                                Field2_Amt = Pumped_Amt
                                Field3_Amt = Tract_Amt * (Field3_Area / (Field1_Area + Field3_Area + Field4_Area))
                                Field4_Amt = Tract_Amt * (Field4_Area / (Field1_Area + Field3_Area + Field4_Area))
                            ElseIf RanNum3 = 3 Then
                                Field1_Amt = Tract_Amt * (Field1_Area / (Field1_Area + Field2_Area + Field4_Area))
                                Field2_Amt = Tract_Amt * (Field2_Area / (Field1_Area + Field2_Area + Field4_Area))
                                Field3_Amt = Pumped_Amt
                                Field4_Amt = Tract_Amt * (Field4_Area / (Field1_Area + Field2_Area + Field4_Area))
                            ElseIf RanNum3 = 4 Then
                                Field1_Amt = Tract_Amt * (Field1_Area / (Field1_Area + Field2_Area + Field3_Area))
                                Field2_Amt = Tract_Amt * (Field2_Area / (Field1_Area + Field2_Area + Field3_Area))
                                Field3_Amt = Tract_Amt * (Field3_Area / (Field1_Area + Field2_Area + Field3_Area))
                                Field4_Amt = Pumped_Amt
                            Else
                                MsgBox("Error in allocating pumped water!", MsgBoxStyle.Information)
                            End If
                            'I can't run Check_Depths because if water does get shuffled around
                            'I need to know exactly how it got shuffled around.  I may need to 
                            'come up with another function.
                            'Check_Depths(4, CurrentDate, Field1_Area, Field2_Area, Field3_Area, Field4_Area, , , , , , , _
                            '             Field1_Type, Field2_Type, Field3_Type, Field4_Type, , , , , , , _
                            '             Field1_Amt, Field2_Amt, Field3_Amt, Field4_Amt, , , , , , )
                            For i = 1 To TractInformation.Tables(1).Rows.Count()
                                'TableOfFieldsWithWaterAllocRow = TableOfFieldsWithWaterAlloc.NewRow()
                                TempWaterAllocTableRow = TempWaterAllocTable.NewRow()
                                'TableOfFieldsWithWaterAllocRow("Tract") = TractInformation.Tables(1).Rows(i - 1)(0)
                                TempWaterAllocTableRow("Tract") = TractInformation.Tables(1).Rows(i - 1)(0)
                                'TableOfFieldsWithWaterAllocRow("Field_No") = TractInformation.Tables(1).Rows(i - 1)(2)
                                TempWaterAllocTableRow("Field_No") = TractInformation.Tables(1).Rows(i - 1)(2)
                                TempWaterAllocTableRow("Area") = TractInformation.Tables(1).Rows(i - 1)(3)
                                'TableOfFieldsWithWaterAllocRow("Date_") = CurrentDate
                                TempWaterAllocTableRow("Date_") = CurrentDate
                                'TableOfFieldsWithWaterAllocRow("Precip_Amt") = TractInformation.Tables(1).Rows(i - 1)(9)
                                TempWaterAllocTableRow("Precip_Amt") = TractInformation.Tables(1).Rows(i - 1)(9)
                                'TableOfFieldsWithWaterAllocRow("ETc") = TractInformation.Tables(1).Rows(i - 1)(10)
                                TempWaterAllocTableRow("ETc") = TractInformation.Tables(1).Rows(i - 1)(10)
                                'TableOfFieldsWithWaterAllocRow("Zr") = TractInformation.Tables(1).Rows(i - 1)(11)
                                TempWaterAllocTableRow("Zr") = TractInformation.Tables(1).Rows(i - 1)(11)

                                RanNum1 = RandomGenerator.NextDouble()
                                Runoff_Fraction = (-1 * Math.Log(RanNum1)) / (1 / lambda)
                                If Math.Floor(TractInformation.Tables(1).Rows(i - 1)(3)) = Math.Floor(Field1_Area) Then
                                    'This If statment attempts to route pumped water and store the result
                                    If RanNum3 = 1 Then
                                        'TableOfFieldsWithWaterAllocRow("SurfWatDelivered") = 0
                                        TempWaterAllocTableRow("SurfWatDelivered") = 0
                                        'TableOfFieldsWithWaterAllocRow("PumpWatDelivered") = (Field1_Amt / Field1_Area) * 1000
                                        TempWaterAllocTableRow("PumpWatDelivered") = (Field1_Amt / Field1_Area) * 1000
                                    ElseIf RanNum3 = 2 Or RanNum3 = 3 Or RanNum3 = 4 Then
                                        'TableOfFieldsWithWaterAllocRow("SurfWatDelivered") = (Field1_Amt / Field1_Area) * 1000
                                        TempWaterAllocTableRow("SurfWatDelivered") = (Field1_Amt / Field1_Area) * 1000
                                        'TableOfFieldsWithWaterAllocRow("PumpWatDelivered") = 0
                                        TempWaterAllocTableRow("PumpWatDelivered") = 0
                                    End If
                                    'TableOfFieldsWithWaterAllocRow("Runoff_Amt") = (((Field1_Amt / Field1_Area) * 1000) + TractInformation.Tables(1).Rows(i - 1)(9)) * Runoff_Fraction
                                    TempWaterAllocTableRow("Runoff_Amt") = (((Field1_Amt / Field1_Area) * 1000) + TractInformation.Tables(1).Rows(i - 1)(9)) * Runoff_Fraction
                                    RanNum1 = RandomGenerator.NextDouble()
                                    RanNum2 = RandomGenerator.NextDouble()
                                    While Not (RanNum1 <= 0.8 And RanNum2 <= 1 - 1.25 * RanNum1)
                                        RanNum1 = RandomGenerator.NextDouble()
                                        RanNum2 = RandomGenerator.NextDouble()
                                    End While
                                    'TableOfFieldsWithWaterAllocRow("DeepPerc_Amt") = (((Field1_Amt / Field1_Area) * 1000) + TractInformation.Tables(1).Rows(i - 1)(9)) * (1 - Runoff_Fraction) * RanNum1
                                    TempWaterAllocTableRow("DeepPerc_Amt") = (((Field1_Amt / Field1_Area) * 1000) + TractInformation.Tables(1).Rows(i - 1)(9)) * (1 - Runoff_Fraction) * RanNum1
                                ElseIf Math.Floor(TractInformation.Tables(1).Rows(i - 1)(3)) = Math.Floor(Field2_Area) Then
                                    If RanNum3 = 2 Then
                                        'TableOfFieldsWithWaterAllocRow("SurfWatDelivered") = 0
                                        TempWaterAllocTableRow("SurfWatDelivered") = 0
                                        'TableOfFieldsWithWaterAllocRow("PumpWatDelivered") = (Field2_Amt / Field2_Area) * 1000
                                        TempWaterAllocTableRow("PumpWatDelivered") = (Field2_Amt / Field2_Area) * 1000
                                    ElseIf RanNum3 = 1 Or RanNum3 = 3 Or RanNum3 = 4 Then
                                        'TableOfFieldsWithWaterAllocRow("SurfWatDelivered") = (Field2_Amt / Field2_Area) * 1000
                                        TempWaterAllocTableRow("SurfWatDelivered") = (Field2_Amt / Field2_Area) * 1000
                                        'TableOfFieldsWithWaterAllocRow("PumpWatDelivered") = 0
                                        TempWaterAllocTableRow("PumpWatDelivered") = 0
                                    End If
                                    'TableOfFieldsWithWaterAllocRow("Runoff_Amt") = (((Field2_Amt / Field2_Area) * 1000) + TractInformation.Tables(1).Rows(i - 1)(9)) * Runoff_Fraction
                                    TempWaterAllocTableRow("Runoff_Amt") = (((Field2_Amt / Field2_Area) * 1000) + TractInformation.Tables(1).Rows(i - 1)(9)) * Runoff_Fraction
                                    RanNum1 = RandomGenerator.NextDouble()
                                    RanNum2 = RandomGenerator.NextDouble()
                                    While Not (RanNum1 <= 0.8 And RanNum2 <= 1 - 1.25 * RanNum1)
                                        RanNum1 = RandomGenerator.NextDouble()
                                        RanNum2 = RandomGenerator.NextDouble()
                                    End While
                                    'TableOfFieldsWithWaterAllocRow("DeepPerc_Amt") = (((Field2_Amt / Field2_Area) * 1000) + TractInformation.Tables(1).Rows(i - 1)(9)) * (1 - Runoff_Fraction) * RanNum1
                                    TempWaterAllocTableRow("DeepPerc_Amt") = (((Field2_Amt / Field2_Area) * 1000) + TractInformation.Tables(1).Rows(i - 1)(9)) * (1 - Runoff_Fraction) * RanNum1
                                ElseIf Math.Floor(TractInformation.Tables(1).Rows(i - 1)(3)) = Math.Floor(Field3_Area) Then
                                    If RanNum3 = 3 Then
                                        'TableOfFieldsWithWaterAllocRow("SurfWatDelivered") = 0
                                        TempWaterAllocTableRow("SurfWatDelivered") = 0
                                        'TableOfFieldsWithWaterAllocRow("PumpWatDelivered") = (Field3_Amt / Field3_Area) * 1000
                                        TempWaterAllocTableRow("PumpWatDelivered") = (Field3_Amt / Field3_Area) * 1000
                                    ElseIf RanNum3 = 1 Or RanNum3 = 2 Or RanNum3 = 4 Then
                                        'TableOfFieldsWithWaterAllocRow("SurfWatDelivered") = (Field3_Amt / Field3_Area) * 1000
                                        TempWaterAllocTableRow("SurfWatDelivered") = (Field3_Amt / Field3_Area) * 1000
                                        'TableOfFieldsWithWaterAllocRow("PumpWatDelivered") = 0
                                        TempWaterAllocTableRow("PumpWatDelivered") = 0
                                    End If
                                    'TableOfFieldsWithWaterAllocRow("Runoff_Amt") = (((Field3_Amt / Field3_Area) * 1000) + TractInformation.Tables(1).Rows(i - 1)(9)) * Runoff_Fraction
                                    TempWaterAllocTableRow("Runoff_Amt") = (((Field3_Amt / Field3_Area) * 1000) + TractInformation.Tables(1).Rows(i - 1)(9)) * Runoff_Fraction
                                    RanNum1 = RandomGenerator.NextDouble()
                                    RanNum2 = RandomGenerator.NextDouble()
                                    While Not (RanNum1 <= 0.8 And RanNum2 <= 1 - 1.25 * RanNum1)
                                        RanNum1 = RandomGenerator.NextDouble()
                                        RanNum2 = RandomGenerator.NextDouble()
                                    End While
                                    'TableOfFieldsWithWaterAllocRow("DeepPerc_Amt") = (((Field3_Amt / Field3_Area) * 1000) + TractInformation.Tables(1).Rows(i - 1)(9)) * (1 - Runoff_Fraction) * RanNum1
                                    TempWaterAllocTableRow("DeepPerc_Amt") = (((Field3_Amt / Field3_Area) * 1000) + TractInformation.Tables(1).Rows(i - 1)(9)) * (1 - Runoff_Fraction) * RanNum1
                                Else
                                    'TableOfFieldsWithWaterAllocRow("SurfWatDelivered") = 0
                                    TempWaterAllocTableRow("SurfWatDelivered") = 0
                                    'TableOfFieldsWithWaterAllocRow("PumpWatDelivered") = 0
                                    TempWaterAllocTableRow("PumpWatDelivered") = 0
                                    If TractInformation.Tables(1).Rows(i - 1)(9) <= 50 Then
                                        'TableOfFieldsWithWaterAllocRow("Runoff_Amt") = TractInformation.Tables(1).Rows(i - 1)(9) * 0.3
                                        TempWaterAllocTableRow("Runoff_Amt") = TractInformation.Tables(1).Rows(i - 1)(9) * 0.3
                                        'The runoff from precip should be based solely upon soil capacity
                                        'TableOfFieldsWithWaterAllocRow("DeepPerc_Amt") = 0
                                        TempWaterAllocTableRow("DeepPerc_Amt") = 0
                                    ElseIf TractInformation.Tables(1).Rows(i - 1)(9) > 50 Then
                                        'TableOfFieldsWithWaterAllocRow("Runoff_Amt") = TractInformation.Tables(1).Rows(i - 1)(9) * 0.5
                                        TempWaterAllocTableRow("Runoff_Amt") = TractInformation.Tables(1).Rows(i - 1)(9) * 0.5
                                        'The runoff from precip should be based solely upon soil capacity
                                        'TableOfFieldsWithWaterAllocRow("DeepPerc_Amt") = 0
                                        TempWaterAllocTableRow("DeepPerc_Amt") = 0
                                    End If
                                End If
                                'TableOfFieldsWithWaterAllocRow("TAW") = TractInformation.Tables(1).Rows(i - 1)(7)
                                TempWaterAllocTableRow("TAW") = TractInformation.Tables(1).Rows(i - 1)(7)
                                'TableOfFieldsWithWaterAllocRow("RAW") = TractInformation.Tables(1).Rows(i - 1)(8)
                                TempWaterAllocTableRow("RAW") = TractInformation.Tables(1).Rows(i - 1)(8)
                                'TableOfFieldsWithWaterAlloc.Rows.Add(TableOfFieldsWithWaterAllocRow)
                                TempWaterAllocTable.Rows.Add(TempWaterAllocTableRow)
                            Next i
                        Else
                            'The code should land here if an unreasonable amount of water is pumped.
                            Field1_Amt = Tract_Amt * (Field1_Area / Eligible_Area)
                            Field2_Amt = Tract_Amt * (Field2_Area / Eligible_Area)
                            Field3_Amt = Tract_Amt * (Field3_Area / Eligible_Area)
                            Field4_Amt = Tract_Amt * (Field4_Area / Eligible_Area)
                            'I can run Check_Depths here because I can start by shuffling around
                            'the water in Check_Depths and once this has sorted itself out then
                            'go ahead and arbitrarily add the small amount of pumped water to 
                            'which ever field ended up with the most amount of water to ensure
                            'it doesn't go to a field with no water 
                            Check_Depths(4, CurrentDate, Field1_Area, Field2_Area, Field3_Area, Field4_Area, , , , , , , _
                                        Field1_Type, Field2_Type, Field3_Type, Field4_Type, , , , , , , _
                                        Field1_Amt, Field2_Amt, Field3_Amt, Field4_Amt, , , , , , )
                            'This next if statement only aims to allocate what little pumped water is 
                            'is available to the field with the most amount of surface water.  This
                            'is to ensure that some ridiculously small amount of groundwater doesn't go 
                            'to a field alone.  The form of the if statement should account for all 
                            'possible situations that could arise in the allocated amount.
                            If Field1_Amt >= Field2_Amt And Field1_Amt >= Field3_Amt And Field1_Amt >= Field4_Amt Then
                                Field1_Amt = Field1_Amt + Pumped_Amt
                                For i = 1 To TractInformation.Tables(1).Rows.Count()
                                    'TableOfFieldsWithWaterAllocRow = TableOfFieldsWithWaterAlloc.NewRow()
                                    TempWaterAllocTableRow = TempWaterAllocTable.NewRow()
                                    'TableOfFieldsWithWaterAllocRow("Tract") = TractInformation.Tables(1).Rows(i - 1)(0)
                                    TempWaterAllocTableRow("Tract") = TractInformation.Tables(1).Rows(i - 1)(0)
                                    'TableOfFieldsWithWaterAllocRow("Field_No") = TractInformation.Tables(1).Rows(i - 1)(2)
                                    TempWaterAllocTableRow("Field_No") = TractInformation.Tables(1).Rows(i - 1)(2)
                                    TempWaterAllocTableRow("Area") = TractInformation.Tables(1).Rows(i - 1)(3)
                                    'TableOfFieldsWithWaterAllocRow("Date_") = CurrentDate
                                    TempWaterAllocTableRow("Date_") = CurrentDate
                                    'TableOfFieldsWithWaterAllocRow("Precip_Amt") = TractInformation.Tables(1).Rows(i - 1)(9)
                                    TempWaterAllocTableRow("Precip_Amt") = TractInformation.Tables(1).Rows(i - 1)(9)
                                    'TableOfFieldsWithWaterAllocRow("ETc") = TractInformation.Tables(1).Rows(i - 1)(10)
                                    TempWaterAllocTableRow("ETc") = TractInformation.Tables(1).Rows(i - 1)(10)
                                    'TableOfFieldsWithWaterAllocRow("Zr") = TractInformation.Tables(1).Rows(i - 1)(11)
                                    TempWaterAllocTableRow("Zr") = TractInformation.Tables(1).Rows(i - 1)(11)

                                    RanNum1 = RandomGenerator.NextDouble()
                                    Runoff_Fraction = (-1 * Math.Log(RanNum1)) / (1 / lambda)
                                    If Math.Floor(TractInformation.Tables(1).Rows(i - 1)(3)) = Math.Floor(Field1_Area) Then
                                        'TableOfFieldsWithWaterAllocRow("SurfWatDelivered") = ((Field1_Amt - Pumped_Amt) / Field1_Area) * 1000
                                        TempWaterAllocTableRow("SurfWatDelivered") = ((Field1_Amt - Pumped_Amt) / Field1_Area) * 1000
                                        'TableOfFieldsWithWaterAllocRow("PumpWatDelivered") = (Pumped_Amt / Field1_Area) * 1000
                                        TempWaterAllocTableRow("PumpWatDelivered") = (Pumped_Amt / Field1_Area) * 1000
                                        'TableOfFieldsWithWaterAllocRow("Runoff_Amt") = (((Field1_Amt / Field1_Area) * 1000) + TractInformation.Tables(1).Rows(i - 1)(9)) * Runoff_Fraction
                                        TempWaterAllocTableRow("Runoff_Amt") = (((Field1_Amt / Field1_Area) * 1000) + TractInformation.Tables(1).Rows(i - 1)(9)) * Runoff_Fraction
                                        RanNum1 = RandomGenerator.NextDouble()
                                        RanNum2 = RandomGenerator.NextDouble()
                                        While Not (RanNum1 <= 0.8 And RanNum2 <= 1 - 1.25 * RanNum1)
                                            RanNum1 = RandomGenerator.NextDouble()
                                            RanNum2 = RandomGenerator.NextDouble()
                                        End While
                                        'TableOfFieldsWithWaterAllocRow("DeepPerc_Amt") = (((Field1_Amt / Field1_Area) * 1000) + TractInformation.Tables(1).Rows(i - 1)(9)) * (1 - Runoff_Fraction) * RanNum1
                                        TempWaterAllocTableRow("DeepPerc_Amt") = (((Field1_Amt / Field1_Area) * 1000) + TractInformation.Tables(1).Rows(i - 1)(9)) * (1 - Runoff_Fraction) * RanNum1
                                    ElseIf Math.Floor(TractInformation.Tables(1).Rows(i - 1)(3)) = Math.Floor(Field2_Area) Then
                                        'TableOfFieldsWithWaterAllocRow("SurfWatDelivered") = (Field2_Amt / Field2_Area) * 1000
                                        TempWaterAllocTableRow("SurfWatDelivered") = (Field2_Amt / Field2_Area) * 1000
                                        'TableOfFieldsWithWaterAllocRow("PumpWatDelivered") = 0
                                        TempWaterAllocTableRow("PumpWatDelivered") = 0
                                        'TableOfFieldsWithWaterAllocRow("Runoff_Amt") = (((Field2_Amt / Field2_Area) * 1000) + TractInformation.Tables(1).Rows(i - 1)(9)) * Runoff_Fraction
                                        TempWaterAllocTableRow("Runoff_Amt") = (((Field2_Amt / Field2_Area) * 1000) + TractInformation.Tables(1).Rows(i - 1)(9)) * Runoff_Fraction
                                        RanNum1 = RandomGenerator.NextDouble()
                                        RanNum2 = RandomGenerator.NextDouble()
                                        While Not (RanNum1 <= 0.8 And RanNum2 <= 1 - 1.25 * RanNum1)
                                            RanNum1 = RandomGenerator.NextDouble()
                                            RanNum2 = RandomGenerator.NextDouble()
                                        End While
                                        'TableOfFieldsWithWaterAllocRow("DeepPerc_Amt") = (((Field2_Amt / Field2_Area) * 1000) + TractInformation.Tables(1).Rows(i - 1)(9)) * (1 - Runoff_Fraction) * RanNum1
                                        TempWaterAllocTableRow("DeepPerc_Amt") = (((Field2_Amt / Field2_Area) * 1000) + TractInformation.Tables(1).Rows(i - 1)(9)) * (1 - Runoff_Fraction) * RanNum1
                                    ElseIf Math.Floor(TractInformation.Tables(1).Rows(i - 1)(3)) = Math.Floor(Field3_Area) Then
                                        'TableOfFieldsWithWaterAllocRow("SurfWatDelivered") = (Field3_Amt / Field3_Area) * 1000
                                        TempWaterAllocTableRow("SurfWatDelivered") = (Field3_Amt / Field3_Area) * 1000
                                        'TableOfFieldsWithWaterAllocRow("PumpWatDelivered") = 0
                                        TempWaterAllocTableRow("PumpWatDelivered") = 0
                                        'TableOfFieldsWithWaterAllocRow("Runoff_Amt") = (((Field3_Amt / Field3_Area) * 1000) + TractInformation.Tables(1).Rows(i - 1)(9)) * Runoff_Fraction
                                        TempWaterAllocTableRow("Runoff_Amt") = (((Field3_Amt / Field3_Area) * 1000) + TractInformation.Tables(1).Rows(i - 1)(9)) * Runoff_Fraction
                                        RanNum1 = RandomGenerator.NextDouble()
                                        RanNum2 = RandomGenerator.NextDouble()
                                        While Not (RanNum1 <= 0.8 And RanNum2 <= 1 - 1.25 * RanNum1)
                                            RanNum1 = RandomGenerator.NextDouble()
                                            RanNum2 = RandomGenerator.NextDouble()
                                        End While
                                        'TableOfFieldsWithWaterAllocRow("DeepPerc_Amt") = (((Field3_Amt / Field3_Area) * 1000) + TractInformation.Tables(1).Rows(i - 1)(9)) * (1 - Runoff_Fraction) * RanNum1
                                        TempWaterAllocTableRow("DeepPerc_Amt") = (((Field3_Amt / Field3_Area) * 1000) + TractInformation.Tables(1).Rows(i - 1)(9)) * (1 - Runoff_Fraction) * RanNum1
                                    ElseIf Math.Floor(TractInformation.Tables(1).Rows(i - 1)(3)) = Math.Floor(Field4_Area) Then
                                        'TableOfFieldsWithWaterAllocRow("SurfWatDelivered") = (Field4_Amt / Field4_Area) * 1000
                                        TempWaterAllocTableRow("SurfWatDelivered") = (Field4_Amt / Field4_Area) * 1000
                                        'TableOfFieldsWithWaterAllocRow("PumpWatDelivered") = 0
                                        TempWaterAllocTableRow("PumpWatDelivered") = 0
                                        'TableOfFieldsWithWaterAllocRow("Runoff_Amt") = (((Field4_Amt / Field4_Area) * 1000) + TractInformation.Tables(1).Rows(i - 1)(9)) * Runoff_Fraction
                                        TempWaterAllocTableRow("Runoff_Amt") = (((Field4_Amt / Field4_Area) * 1000) + TractInformation.Tables(1).Rows(i - 1)(9)) * Runoff_Fraction
                                        RanNum1 = RandomGenerator.NextDouble()
                                        RanNum2 = RandomGenerator.NextDouble()
                                        While Not (RanNum1 <= 0.8 And RanNum2 <= 1 - 1.25 * RanNum1)
                                            RanNum1 = RandomGenerator.NextDouble()
                                            RanNum2 = RandomGenerator.NextDouble()
                                        End While
                                        'TableOfFieldsWithWaterAllocRow("DeepPerc_Amt") = (((Field4_Amt / Field4_Area) * 1000) + TractInformation.Tables(1).Rows(i - 1)(9)) * (1 - Runoff_Fraction) * RanNum1
                                        TempWaterAllocTableRow("DeepPerc_Amt") = (((Field4_Amt / Field4_Area) * 1000) + TractInformation.Tables(1).Rows(i - 1)(9)) * (1 - Runoff_Fraction) * RanNum1
                                    Else
                                        'TableOfFieldsWithWaterAllocRow("SurfWatDelivered") = 0
                                        TempWaterAllocTableRow("SurfWatDelivered") = 0
                                        'TableOfFieldsWithWaterAllocRow("PumpWatDelivered") = 0
                                        TempWaterAllocTableRow("PumpWatDelivered") = 0
                                        If TractInformation.Tables(1).Rows(i - 1)(9) <= 50 Then
                                            'TableOfFieldsWithWaterAllocRow("Runoff_Amt") = TractInformation.Tables(1).Rows(i - 1)(9) * 0.3
                                            TempWaterAllocTableRow("Runoff_Amt") = TractInformation.Tables(1).Rows(i - 1)(9) * 0.3
                                            'The runoff from precip should be based solely upon soil capacity
                                            'TableOfFieldsWithWaterAllocRow("DeepPerc_Amt") = 0
                                            TempWaterAllocTableRow("DeepPerc_Amt") = 0
                                        ElseIf TractInformation.Tables(1).Rows(i - 1)(9) > 50 Then
                                            'TableOfFieldsWithWaterAllocRow("Runoff_Amt") = TractInformation.Tables(1).Rows(i - 1)(9) * 0.5
                                            TempWaterAllocTableRow("Runoff_Amt") = TractInformation.Tables(1).Rows(i - 1)(9) * 0.5
                                            'The runoff from precip should be based solely upon soil capacity
                                            'TableOfFieldsWithWaterAllocRow("DeepPerc_Amt") = 0
                                            TempWaterAllocTableRow("DeepPerc_Amt") = 0
                                        End If
                                    End If
                                    'TableOfFieldsWithWaterAllocRow("TAW") = TractInformation.Tables(1).Rows(i - 1)(7)
                                    TempWaterAllocTableRow("TAW") = TractInformation.Tables(1).Rows(i - 1)(7)
                                    'TableOfFieldsWithWaterAllocRow("RAW") = TractInformation.Tables(1).Rows(i - 1)(8)
                                    TempWaterAllocTableRow("RAW") = TractInformation.Tables(1).Rows(i - 1)(8)
                                    'TableOfFieldsWithWaterAlloc.Rows.Add(TableOfFieldsWithWaterAllocRow)
                                    TempWaterAllocTable.Rows.Add(TempWaterAllocTableRow)
                                Next i
                            ElseIf Field2_Amt >= Field1_Amt And Field2_Amt >= Field3_Amt And Field2_Amt >= Field4_Amt Then
                                Field2_Amt = Field2_Amt + Pumped_Amt
                                For i = 1 To TractInformation.Tables(1).Rows.Count()
                                    'TableOfFieldsWithWaterAllocRow = TableOfFieldsWithWaterAlloc.NewRow()
                                    TempWaterAllocTableRow = TempWaterAllocTable.NewRow()
                                    'TableOfFieldsWithWaterAllocRow("Tract") = TractInformation.Tables(1).Rows(i - 1)(0)
                                    TempWaterAllocTableRow("Tract") = TractInformation.Tables(1).Rows(i - 1)(0)
                                    'TableOfFieldsWithWaterAllocRow("Field_No") = TractInformation.Tables(1).Rows(i - 1)(2)
                                    TempWaterAllocTableRow("Field_No") = TractInformation.Tables(1).Rows(i - 1)(2)
                                    TempWaterAllocTableRow("Area") = TractInformation.Tables(1).Rows(i - 1)(3)
                                    'TableOfFieldsWithWaterAllocRow("Date_") = CurrentDate
                                    TempWaterAllocTableRow("Date_") = CurrentDate
                                    'TableOfFieldsWithWaterAllocRow("Precip_Amt") = TractInformation.Tables(1).Rows(i - 1)(9)
                                    TempWaterAllocTableRow("Precip_Amt") = TractInformation.Tables(1).Rows(i - 1)(9)
                                    'TableOfFieldsWithWaterAllocRow("ETc") = TractInformation.Tables(1).Rows(i - 1)(10)
                                    TempWaterAllocTableRow("ETc") = TractInformation.Tables(1).Rows(i - 1)(10)
                                    'TableOfFieldsWithWaterAllocRow("Zr") = TractInformation.Tables(1).Rows(i - 1)(11)
                                    TempWaterAllocTableRow("Zr") = TractInformation.Tables(1).Rows(i - 1)(11)

                                    RanNum1 = RandomGenerator.NextDouble()
                                    Runoff_Fraction = (-1 * Math.Log(RanNum1)) / (1 / lambda)
                                    If Math.Floor(TractInformation.Tables(1).Rows(i - 1)(3)) = Math.Floor(Field1_Area) Then
                                        'TableOfFieldsWithWaterAllocRow("SurfWatDelivered") = Field1_Amt
                                        TempWaterAllocTableRow("SurfWatDelivered") = Field1_Amt
                                        'TableOfFieldsWithWaterAllocRow("PumpWatDelivered") = 0
                                        TempWaterAllocTableRow("PumpWatDelivered") = 0
                                        'TableOfFieldsWithWaterAllocRow("Runoff_Amt") = (((Field1_Amt / Field1_Area) * 1000) + TractInformation.Tables(1).Rows(i - 1)(9)) * Runoff_Fraction
                                        TempWaterAllocTableRow("Runoff_Amt") = (((Field1_Amt / Field1_Area) * 1000) + TractInformation.Tables(1).Rows(i - 1)(9)) * Runoff_Fraction
                                        RanNum1 = RandomGenerator.NextDouble()
                                        RanNum2 = RandomGenerator.NextDouble()
                                        While Not (RanNum1 <= 0.8 And RanNum2 <= 1 - 1.25 * RanNum1)
                                            RanNum1 = RandomGenerator.NextDouble()
                                            RanNum2 = RandomGenerator.NextDouble()
                                        End While
                                        'TableOfFieldsWithWaterAllocRow("DeepPerc_Amt") = (((Field1_Amt / Field1_Area) * 1000) + TractInformation.Tables(1).Rows(i - 1)(9)) * (1 - Runoff_Fraction) * RanNum1
                                        TempWaterAllocTableRow("DeepPerc_Amt") = (((Field1_Amt / Field1_Area) * 1000) + TractInformation.Tables(1).Rows(i - 1)(9)) * (1 - Runoff_Fraction) * RanNum1
                                    ElseIf Math.Floor(TractInformation.Tables(1).Rows(i - 1)(3)) = Math.Floor(Field2_Area) Then
                                        'TableOfFieldsWithWaterAllocRow("SurfWatDelivered") = ((Field2_Amt - Pumped_Amt) / Field2_Area) * 1000
                                        TempWaterAllocTableRow("SurfWatDelivered") = ((Field2_Amt - Pumped_Amt) / Field2_Area) * 1000
                                        'TableOfFieldsWithWaterAllocRow("PumpWatDelivered") = (Pumped_Amt / Field2_Amt) * 1000
                                        TempWaterAllocTableRow("PumpWatDelivered") = (Pumped_Amt / Field2_Amt) * 1000
                                        'TableOfFieldsWithWaterAllocRow("Runoff_Amt") = (((Field2_Amt / Field2_Area) * 1000) + TractInformation.Tables(1).Rows(i - 1)(9)) * Runoff_Fraction
                                        TempWaterAllocTableRow("Runoff_Amt") = (((Field2_Amt / Field2_Area) * 1000) + TractInformation.Tables(1).Rows(i - 1)(9)) * Runoff_Fraction
                                        RanNum1 = RandomGenerator.NextDouble()
                                        RanNum2 = RandomGenerator.NextDouble()
                                        While Not (RanNum1 <= 0.8 And RanNum2 <= 1 - 1.25 * RanNum1)
                                            RanNum1 = RandomGenerator.NextDouble()
                                            RanNum2 = RandomGenerator.NextDouble()
                                        End While
                                        'TableOfFieldsWithWaterAllocRow("DeepPerc_Amt") = (((Field2_Amt / Field2_Area) * 1000) + TractInformation.Tables(1).Rows(i - 1)(9)) * (1 - Runoff_Fraction) * RanNum1
                                        TempWaterAllocTableRow("DeepPerc_Amt") = (((Field2_Amt / Field2_Area) * 1000) + TractInformation.Tables(1).Rows(i - 1)(9)) * (1 - Runoff_Fraction) * RanNum1
                                    ElseIf Math.Floor(TractInformation.Tables(1).Rows(i - 1)(3)) = Math.Floor(Field3_Area) Then
                                        'TableOfFieldsWithWaterAllocRow("SurfWatDelivered") = (Field3_Amt / Field3_Area) * 1000
                                        TempWaterAllocTableRow("SurfWatDelivered") = (Field3_Amt / Field3_Area) * 1000
                                        'TableOfFieldsWithWaterAllocRow("PumpWatDelivered") = 0
                                        TempWaterAllocTableRow("PumpWatDelivered") = 0
                                        'TableOfFieldsWithWaterAllocRow("Runoff_Amt") = (((Field3_Amt / Field3_Area) * 1000) + TractInformation.Tables(1).Rows(i - 1)(9)) * Runoff_Fraction
                                        TempWaterAllocTableRow("Runoff_Amt") = (((Field3_Amt / Field3_Area) * 1000) + TractInformation.Tables(1).Rows(i - 1)(9)) * Runoff_Fraction
                                        RanNum1 = RandomGenerator.NextDouble()
                                        RanNum2 = RandomGenerator.NextDouble()
                                        While Not (RanNum1 <= 0.8 And RanNum2 <= 1 - 1.25 * RanNum1)
                                            RanNum1 = RandomGenerator.NextDouble()
                                            RanNum2 = RandomGenerator.NextDouble()
                                        End While
                                        'TableOfFieldsWithWaterAllocRow("DeepPerc_Amt") = (((Field3_Amt / Field3_Area) * 1000) + TractInformation.Tables(1).Rows(i - 1)(9)) * (1 - Runoff_Fraction) * RanNum1
                                        TempWaterAllocTableRow("DeepPerc_Amt") = (((Field3_Amt / Field3_Area) * 1000) + TractInformation.Tables(1).Rows(i - 1)(9)) * (1 - Runoff_Fraction) * RanNum1
                                    ElseIf Math.Floor(TractInformation.Tables(1).Rows(i - 1)(3)) = Math.Floor(Field4_Area) Then
                                        'TableOfFieldsWithWaterAllocRow("SurfWatDelivered") = (Field4_Amt / Field4_Area) * 1000
                                        TempWaterAllocTableRow("SurfWatDelivered") = (Field4_Amt / Field4_Area) * 1000
                                        'TableOfFieldsWithWaterAllocRow("PumpWatDelivered") = 0
                                        TempWaterAllocTableRow("PumpWatDelivered") = 0
                                        'TableOfFieldsWithWaterAllocRow("Runoff_Amt") = (((Field4_Amt / Field4_Area) * 1000) + TractInformation.Tables(1).Rows(i - 1)(9)) * Runoff_Fraction
                                        TempWaterAllocTableRow("Runoff_Amt") = (((Field4_Amt / Field4_Area) * 1000) + TractInformation.Tables(1).Rows(i - 1)(9)) * Runoff_Fraction
                                        RanNum1 = RandomGenerator.NextDouble()
                                        RanNum2 = RandomGenerator.NextDouble()
                                        While Not (RanNum1 <= 0.8 And RanNum2 <= 1 - 1.25 * RanNum1)
                                            RanNum1 = RandomGenerator.NextDouble()
                                            RanNum2 = RandomGenerator.NextDouble()
                                        End While
                                        'TableOfFieldsWithWaterAllocRow("DeepPerc_Amt") = (((Field4_Amt / Field4_Area) * 1000) + TractInformation.Tables(1).Rows(i - 1)(9)) * (1 - Runoff_Fraction) * RanNum1
                                        TempWaterAllocTableRow("DeepPerc_Amt") = (((Field4_Amt / Field4_Area) * 1000) + TractInformation.Tables(1).Rows(i - 1)(9)) * (1 - Runoff_Fraction) * RanNum1
                                    Else
                                        'TableOfFieldsWithWaterAllocRow("SurfWatDelivered") = 0
                                        TempWaterAllocTableRow("SurfWatDelivered") = 0
                                        'TableOfFieldsWithWaterAllocRow("PumpWatDelivered") = 0
                                        TempWaterAllocTableRow("PumpWatDelivered") = 0
                                        If TractInformation.Tables(1).Rows(i - 1)(9) <= 50 Then
                                            'TableOfFieldsWithWaterAllocRow("Runoff_Amt") = TractInformation.Tables(1).Rows(i - 1)(9) * 0.3
                                            TempWaterAllocTableRow("Runoff_Amt") = TractInformation.Tables(1).Rows(i - 1)(9) * 0.3
                                            'The runoff from precip should be based solely upon soil capacity
                                            'TableOfFieldsWithWaterAllocRow("DeepPerc_Amt") = 0
                                            TempWaterAllocTableRow("DeepPerc_Amt") = 0
                                        ElseIf TractInformation.Tables(1).Rows(i - 1)(9) > 50 Then
                                            'TableOfFieldsWithWaterAllocRow("Runoff_Amt") = TractInformation.Tables(1).Rows(i - 1)(9) * 0.5
                                            TempWaterAllocTableRow("Runoff_Amt") = TractInformation.Tables(1).Rows(i - 1)(9) * 0.5
                                            'The runoff from precip should be based solely upon soil capacity
                                            'TableOfFieldsWithWaterAllocRow("DeepPerc_Amt") = 0
                                            TempWaterAllocTableRow("DeepPerc_Amt") = 0
                                        End If
                                    End If
                                    'TableOfFieldsWithWaterAllocRow("TAW") = TractInformation.Tables(1).Rows(i - 1)(7)
                                    TempWaterAllocTableRow("TAW") = TractInformation.Tables(1).Rows(i - 1)(7)
                                    'TableOfFieldsWithWaterAllocRow("RAW") = TractInformation.Tables(1).Rows(i - 1)(8)
                                    TempWaterAllocTableRow("RAW") = TractInformation.Tables(1).Rows(i - 1)(8)
                                    'TableOfFieldsWithWaterAlloc.Rows.Add(TableOfFieldsWithWaterAllocRow)
                                    TempWaterAllocTable.Rows.Add(TempWaterAllocTableRow)
                                Next i
                            ElseIf Field3_Amt >= Field1_Amt And Field3_Amt >= Field2_Amt And Field3_Amt >= Field4_Amt Then
                                Field3_Amt = Field3_Amt + Pumped_Amt
                                For i = 1 To TractInformation.Tables(1).Rows.Count()
                                    'TableOfFieldsWithWaterAllocRow = TableOfFieldsWithWaterAlloc.NewRow()
                                    TempWaterAllocTableRow = TempWaterAllocTable.NewRow()
                                    'TableOfFieldsWithWaterAllocRow("Tract") = TractInformation.Tables(1).Rows(i - 1)(0)
                                    TempWaterAllocTableRow("Tract") = TractInformation.Tables(1).Rows(i - 1)(0)
                                    'TableOfFieldsWithWaterAllocRow("Field_No") = TractInformation.Tables(1).Rows(i - 1)(2)
                                    TempWaterAllocTableRow("Field_No") = TractInformation.Tables(1).Rows(i - 1)(2)
                                    TempWaterAllocTableRow("Area") = TractInformation.Tables(1).Rows(i - 1)(3)
                                    'TableOfFieldsWithWaterAllocRow("Date_") = CurrentDate
                                    TempWaterAllocTableRow("Date_") = CurrentDate
                                    'TableOfFieldsWithWaterAllocRow("Precip_Amt") = TractInformation.Tables(1).Rows(i - 1)(9)
                                    TempWaterAllocTableRow("Precip_Amt") = TractInformation.Tables(1).Rows(i - 1)(9)
                                    'TableOfFieldsWithWaterAllocRow("ETc") = TractInformation.Tables(1).Rows(i - 1)(10)
                                    TempWaterAllocTableRow("ETc") = TractInformation.Tables(1).Rows(i - 1)(10)
                                    'TableOfFieldsWithWaterAllocRow("Zr") = TractInformation.Tables(1).Rows(i - 1)(11)
                                    TempWaterAllocTableRow("Zr") = TractInformation.Tables(1).Rows(i - 1)(11)

                                    RanNum1 = RandomGenerator.NextDouble()
                                    Runoff_Fraction = (-1 * Math.Log(RanNum1)) / (1 / lambda)
                                    If Math.Floor(TractInformation.Tables(1).Rows(i - 1)(3)) = Math.Floor(Field1_Area) Then
                                        'TableOfFieldsWithWaterAllocRow("SurfWatDelivered") = (Field1_Amt / Field1_Area) * 1000
                                        TempWaterAllocTableRow("SurfWatDelivered") = (Field1_Amt / Field1_Area) * 1000
                                        'TableOfFieldsWithWaterAllocRow("PumpWatDelivered") = 0
                                        TempWaterAllocTableRow("PumpWatDelivered") = 0
                                        'TableOfFieldsWithWaterAllocRow("Runoff_Amt") = (((Field1_Amt / Field1_Area) * 1000) + TractInformation.Tables(1).Rows(i - 1)(9)) * Runoff_Fraction
                                        TempWaterAllocTableRow("Runoff_Amt") = (((Field1_Amt / Field1_Area) * 1000) + TractInformation.Tables(1).Rows(i - 1)(9)) * Runoff_Fraction
                                        RanNum1 = RandomGenerator.NextDouble()
                                        RanNum2 = RandomGenerator.NextDouble()
                                        While Not (RanNum1 <= 0.8 And RanNum2 <= 1 - 1.25 * RanNum1)
                                            RanNum1 = RandomGenerator.NextDouble()
                                            RanNum2 = RandomGenerator.NextDouble()
                                        End While
                                        'TableOfFieldsWithWaterAllocRow("DeepPerc_Amt") = (((Field1_Amt / Field1_Area) * 1000) + TractInformation.Tables(1).Rows(i - 1)(9)) * (1 - Runoff_Fraction) * RanNum1
                                        TempWaterAllocTableRow("DeepPerc_Amt") = (((Field1_Amt / Field1_Area) * 1000) + TractInformation.Tables(1).Rows(i - 1)(9)) * (1 - Runoff_Fraction) * RanNum1
                                    ElseIf Math.Floor(TractInformation.Tables(1).Rows(i - 1)(3)) = Math.Floor(Field2_Area) Then
                                        'TableOfFieldsWithWaterAllocRow("SurfWatDelivered") = (Field2_Amt / Field2_Area) * 1000
                                        TempWaterAllocTableRow("SurfWatDelivered") = (Field2_Amt / Field2_Area) * 1000
                                        'TableOfFieldsWithWaterAllocRow("PumpWatDelivered") = 0
                                        TempWaterAllocTableRow("PumpWatDelivered") = 0
                                        'TableOfFieldsWithWaterAllocRow("Runoff_Amt") = (((Field2_Amt / Field2_Area) * 1000) + TractInformation.Tables(1).Rows(i - 1)(9)) * Runoff_Fraction
                                        TempWaterAllocTableRow("Runoff_Amt") = (((Field2_Amt / Field2_Area) * 1000) + TractInformation.Tables(1).Rows(i - 1)(9)) * Runoff_Fraction
                                        RanNum1 = RandomGenerator.NextDouble()
                                        RanNum2 = RandomGenerator.NextDouble()
                                        While Not (RanNum1 <= 0.8 And RanNum2 <= 1 - 1.25 * RanNum1)
                                            RanNum1 = RandomGenerator.NextDouble()
                                            RanNum2 = RandomGenerator.NextDouble()
                                        End While
                                        'TableOfFieldsWithWaterAllocRow("DeepPerc_Amt") = (((Field2_Amt / Field2_Area) * 1000) + TractInformation.Tables(1).Rows(i - 1)(9)) * (1 - Runoff_Fraction) * RanNum1
                                        TempWaterAllocTableRow("DeepPerc_Amt") = (((Field2_Amt / Field2_Area) * 1000) + TractInformation.Tables(1).Rows(i - 1)(9)) * (1 - Runoff_Fraction) * RanNum1
                                    ElseIf Math.Floor(TractInformation.Tables(1).Rows(i - 1)(3)) = Math.Floor(Field3_Area) Then
                                        'TableOfFieldsWithWaterAllocRow("SurfWatDelivered") = ((Field3_Amt - Pumped_Amt) / Field3_Area) * 1000
                                        TempWaterAllocTableRow("SurfWatDelivered") = ((Field3_Amt - Pumped_Amt) / Field3_Area) * 1000
                                        'TableOfFieldsWithWaterAllocRow("PumpWatDelivered") = (Pumped_Amt / Field3_Area) * 1000
                                        TempWaterAllocTableRow("PumpWatDelivered") = (Pumped_Amt / Field3_Area) * 1000
                                        'TableOfFieldsWithWaterAllocRow("Runoff_Amt") = (((Field3_Amt / Field3_Area) * 1000) + TractInformation.Tables(1).Rows(i - 1)(9)) * Runoff_Fraction
                                        TempWaterAllocTableRow("Runoff_Amt") = (((Field3_Amt / Field3_Area) * 1000) + TractInformation.Tables(1).Rows(i - 1)(9)) * Runoff_Fraction
                                        RanNum1 = RandomGenerator.NextDouble()
                                        RanNum2 = RandomGenerator.NextDouble()
                                        While Not (RanNum1 <= 0.8 And RanNum2 <= 1 - 1.25 * RanNum1)
                                            RanNum1 = RandomGenerator.NextDouble()
                                            RanNum2 = RandomGenerator.NextDouble()
                                        End While
                                        'TableOfFieldsWithWaterAllocRow("DeepPerc_Amt") = (((Field3_Amt / Field3_Area) * 1000) + TractInformation.Tables(1).Rows(i - 1)(9)) * (1 - Runoff_Fraction) * RanNum1
                                        TempWaterAllocTableRow("DeepPerc_Amt") = (((Field3_Amt / Field3_Area) * 1000) + TractInformation.Tables(1).Rows(i - 1)(9)) * (1 - Runoff_Fraction) * RanNum1
                                    ElseIf Math.Floor(TractInformation.Tables(1).Rows(i - 1)(3)) = Math.Floor(Field4_Area) Then
                                        'TableOfFieldsWithWaterAllocRow("SurfWatDelivered") = (Field4_Amt / Field4_Area) * 1000
                                        TempWaterAllocTableRow("SurfWatDelivered") = (Field4_Amt / Field4_Area) * 1000
                                        'TableOfFieldsWithWaterAllocRow("PumpWatDelivered") = 0
                                        TempWaterAllocTableRow("PumpWatDelivered") = 0
                                        'TableOfFieldsWithWaterAllocRow("Runoff_Amt") = (((Field4_Amt / Field4_Area) * 1000) + TractInformation.Tables(1).Rows(i - 1)(9)) * Runoff_Fraction
                                        TempWaterAllocTableRow("Runoff_Amt") = (((Field4_Amt / Field4_Area) * 1000) + TractInformation.Tables(1).Rows(i - 1)(9)) * Runoff_Fraction
                                        RanNum1 = RandomGenerator.NextDouble()
                                        RanNum2 = RandomGenerator.NextDouble()
                                        While Not (RanNum1 <= 0.8 And RanNum2 <= 1 - 1.25 * RanNum1)
                                            RanNum1 = RandomGenerator.NextDouble()
                                            RanNum2 = RandomGenerator.NextDouble()
                                        End While
                                        'TableOfFieldsWithWaterAllocRow("DeepPerc_Amt") = (((Field4_Amt / Field4_Area) * 1000) + TractInformation.Tables(1).Rows(i - 1)(9)) * (1 - Runoff_Fraction) * RanNum1
                                        TempWaterAllocTableRow("DeepPerc_Amt") = (((Field4_Amt / Field4_Area) * 1000) + TractInformation.Tables(1).Rows(i - 1)(9)) * (1 - Runoff_Fraction) * RanNum1
                                    Else
                                        'TableOfFieldsWithWaterAllocRow("SurfWatDelivered") = 0
                                        TempWaterAllocTableRow("SurfWatDelivered") = 0
                                        'TableOfFieldsWithWaterAllocRow("PumpWatDelivered") = 0
                                        TempWaterAllocTableRow("PumpWatDelivered") = 0
                                        If TractInformation.Tables(1).Rows(i - 1)(9) <= 50 Then
                                            'TableOfFieldsWithWaterAllocRow("Runoff_Amt") = TractInformation.Tables(1).Rows(i - 1)(9) * 0.3
                                            TempWaterAllocTableRow("Runoff_Amt") = TractInformation.Tables(1).Rows(i - 1)(9) * 0.3
                                            'The runoff from precip should be based solely upon soil capacity
                                            'TableOfFieldsWithWaterAllocRow("DeepPerc_Amt") = 0
                                            TempWaterAllocTableRow("DeepPerc_Amt") = 0
                                        ElseIf TractInformation.Tables(1).Rows(i - 1)(9) > 50 Then
                                            'TableOfFieldsWithWaterAllocRow("Runoff_Amt") = TractInformation.Tables(1).Rows(i - 1)(9) * 0.5
                                            TempWaterAllocTableRow("Runoff_Amt") = TractInformation.Tables(1).Rows(i - 1)(9) * 0.5
                                            'The runoff from precip should be based solely upon soil capacity
                                            'TableOfFieldsWithWaterAllocRow("DeepPerc_Amt") = 0
                                            TempWaterAllocTableRow("DeepPerc_Amt") = 0
                                        End If
                                    End If
                                    'TableOfFieldsWithWaterAllocRow("TAW") = TractInformation.Tables(1).Rows(i - 1)(7)
                                    TempWaterAllocTableRow("TAW") = TractInformation.Tables(1).Rows(i - 1)(7)
                                    'TableOfFieldsWithWaterAllocRow("RAW") = TractInformation.Tables(1).Rows(i - 1)(8)
                                    TempWaterAllocTableRow("RAW") = TractInformation.Tables(1).Rows(i - 1)(8)
                                    'TableOfFieldsWithWaterAlloc.Rows.Add(TableOfFieldsWithWaterAllocRow)
                                    TempWaterAllocTable.Rows.Add(TempWaterAllocTableRow)
                                Next i
                            ElseIf Field4_Amt >= Field1_Amt And Field4_Amt >= Field2_Amt And Field4_Amt >= Field3_Amt Then
                                Field4_Amt = Field4_Amt + Pumped_Amt
                                For i = 1 To TractInformation.Tables(1).Rows.Count()
                                    'TableOfFieldsWithWaterAllocRow = TableOfFieldsWithWaterAlloc.NewRow()
                                    TempWaterAllocTableRow = TempWaterAllocTable.NewRow()
                                    'TableOfFieldsWithWaterAllocRow("Tract") = TractInformation.Tables(1).Rows(i - 1)(0)
                                    TempWaterAllocTableRow("Tract") = TractInformation.Tables(1).Rows(i - 1)(0)
                                    'TableOfFieldsWithWaterAllocRow("Field_No") = TractInformation.Tables(1).Rows(i - 1)(2)
                                    TempWaterAllocTableRow("Field_No") = TractInformation.Tables(1).Rows(i - 1)(2)
                                    TempWaterAllocTableRow("Area") = TractInformation.Tables(1).Rows(i - 1)(3)
                                    'TableOfFieldsWithWaterAllocRow("Date_") = CurrentDate
                                    TempWaterAllocTableRow("Date_") = CurrentDate
                                    'TableOfFieldsWithWaterAllocRow("Precip_Amt") = TractInformation.Tables(1).Rows(i - 1)(9)
                                    TempWaterAllocTableRow("Precip_Amt") = TractInformation.Tables(1).Rows(i - 1)(9)
                                    'TableOfFieldsWithWaterAllocRow("ETc") = TractInformation.Tables(1).Rows(i - 1)(10)
                                    TempWaterAllocTableRow("ETc") = TractInformation.Tables(1).Rows(i - 1)(10)
                                    'TableOfFieldsWithWaterAllocRow("Zr") = TractInformation.Tables(1).Rows(i - 1)(11)
                                    TempWaterAllocTableRow("Zr") = TractInformation.Tables(1).Rows(i - 1)(11)

                                    RanNum1 = RandomGenerator.NextDouble()
                                    Runoff_Fraction = (-1 * Math.Log(RanNum1)) / (1 / lambda)
                                    If Math.Floor(TractInformation.Tables(1).Rows(i - 1)(3)) = Math.Floor(Field1_Area) Then
                                        'TableOfFieldsWithWaterAllocRow("SurfWatDelivered") = (Field1_Amt / Field1_Area) * 1000
                                        TempWaterAllocTableRow("SurfWatDelivered") = (Field1_Amt / Field1_Area) * 1000
                                        'TableOfFieldsWithWaterAllocRow("PumpWatDelivered") = 0
                                        TempWaterAllocTableRow("PumpWatDelivered") = 0
                                        'TableOfFieldsWithWaterAllocRow("Runoff_Amt") = (((Field1_Amt / Field1_Area) * 1000) + TractInformation.Tables(1).Rows(i - 1)(9)) * Runoff_Fraction
                                        TempWaterAllocTableRow("Runoff_Amt") = (((Field1_Amt / Field1_Area) * 1000) + TractInformation.Tables(1).Rows(i - 1)(9)) * Runoff_Fraction
                                        RanNum1 = RandomGenerator.NextDouble()
                                        RanNum2 = RandomGenerator.NextDouble()
                                        While Not (RanNum1 <= 0.8 And RanNum2 <= 1 - 1.25 * RanNum1)
                                            RanNum1 = RandomGenerator.NextDouble()
                                            RanNum2 = RandomGenerator.NextDouble()
                                        End While
                                        'TableOfFieldsWithWaterAllocRow("DeepPerc_Amt") = (((Field1_Amt / Field1_Area) * 1000) + TractInformation.Tables(1).Rows(i - 1)(9)) * (1 - Runoff_Fraction) * RanNum1
                                        TempWaterAllocTableRow("DeepPerc_Amt") = (((Field1_Amt / Field1_Area) * 1000) + TractInformation.Tables(1).Rows(i - 1)(9)) * (1 - Runoff_Fraction) * RanNum1
                                    ElseIf Math.Floor(TractInformation.Tables(1).Rows(i - 1)(3)) = Math.Floor(Field2_Area) Then
                                        'TableOfFieldsWithWaterAllocRow("SurfWatDelivered") = (Field2_Amt / Field2_Area) * 1000
                                        TempWaterAllocTableRow("SurfWatDelivered") = (Field2_Amt / Field2_Area) * 1000
                                        'TableOfFieldsWithWaterAllocRow("PumpWatDelivered") = 0
                                        TempWaterAllocTableRow("PumpWatDelivered") = 0
                                        'TableOfFieldsWithWaterAllocRow("Runoff_Amt") = (((Field2_Amt / Field2_Area) * 1000) + TractInformation.Tables(1).Rows(i - 1)(9)) * Runoff_Fraction
                                        TempWaterAllocTableRow("Runoff_Amt") = (((Field2_Amt / Field2_Area) * 1000) + TractInformation.Tables(1).Rows(i - 1)(9)) * Runoff_Fraction
                                        RanNum1 = RandomGenerator.NextDouble()
                                        RanNum2 = RandomGenerator.NextDouble()
                                        While Not (RanNum1 <= 0.8 And RanNum2 <= 1 - 1.25 * RanNum1)
                                            RanNum1 = RandomGenerator.NextDouble()
                                            RanNum2 = RandomGenerator.NextDouble()
                                        End While
                                        'TableOfFieldsWithWaterAllocRow("DeepPerc_Amt") = (((Field2_Amt / Field2_Area) * 1000) + TractInformation.Tables(1).Rows(i - 1)(9)) * (1 - Runoff_Fraction) * RanNum1
                                        TempWaterAllocTableRow("DeepPerc_Amt") = (((Field2_Amt / Field2_Area) * 1000) + TractInformation.Tables(1).Rows(i - 1)(9)) * (1 - Runoff_Fraction) * RanNum1
                                    ElseIf Math.Floor(TractInformation.Tables(1).Rows(i - 1)(3)) = Math.Floor(Field3_Area) Then
                                        'TableOfFieldsWithWaterAllocRow("SurfWatDelivered") = (Field3_Amt / Field3_Area) * 1000
                                        TempWaterAllocTableRow("SurfWatDelivered") = (Field3_Amt / Field3_Area) * 1000
                                        'TableOfFieldsWithWaterAllocRow("PumpWatDelivered") = 0
                                        TempWaterAllocTableRow("PumpWatDelivered") = 0
                                        'TableOfFieldsWithWaterAllocRow("Runoff_Amt") = (((Field3_Amt / Field3_Area) * 1000) + TractInformation.Tables(1).Rows(i - 1)(9)) * Runoff_Fraction
                                        TempWaterAllocTableRow("Runoff_Amt") = (((Field3_Amt / Field3_Area) * 1000) + TractInformation.Tables(1).Rows(i - 1)(9)) * Runoff_Fraction
                                        RanNum1 = RandomGenerator.NextDouble()
                                        RanNum2 = RandomGenerator.NextDouble()
                                        While Not (RanNum1 <= 0.8 And RanNum2 <= 1 - 1.25 * RanNum1)
                                            RanNum1 = RandomGenerator.NextDouble()
                                            RanNum2 = RandomGenerator.NextDouble()
                                        End While
                                        'TableOfFieldsWithWaterAllocRow("DeepPerc_Amt") = (((Field3_Amt / Field3_Area) * 1000) + TractInformation.Tables(1).Rows(i - 1)(9)) * (1 - Runoff_Fraction) * RanNum1
                                        TempWaterAllocTableRow("DeepPerc_Amt") = (((Field3_Amt / Field3_Area) * 1000) + TractInformation.Tables(1).Rows(i - 1)(9)) * (1 - Runoff_Fraction) * RanNum1
                                    ElseIf Math.Floor(TractInformation.Tables(1).Rows(i - 1)(3)) = Math.Floor(Field4_Area) Then
                                        'TableOfFieldsWithWaterAllocRow("SurfWatDelivered") = ((Field4_Amt - Pumped_Amt) / Field4_Area) * 1000
                                        TempWaterAllocTableRow("SurfWatDelivered") = ((Field4_Amt - Pumped_Amt) / Field4_Area) * 1000
                                        'TableOfFieldsWithWaterAllocRow("PumpWatDelivered") = (Pumped_Amt / Field4_Area) * 1000
                                        TempWaterAllocTableRow("PumpWatDelivered") = (Pumped_Amt / Field4_Area) * 1000
                                        'TableOfFieldsWithWaterAllocRow("Runoff_Amt") = (((Field4_Amt / Field4_Area) * 1000) + TractInformation.Tables(1).Rows(i - 1)(9)) * Runoff_Fraction
                                        TempWaterAllocTableRow("Runoff_Amt") = (((Field4_Amt / Field4_Area) * 1000) + TractInformation.Tables(1).Rows(i - 1)(9)) * Runoff_Fraction
                                        RanNum1 = RandomGenerator.NextDouble()
                                        RanNum2 = RandomGenerator.NextDouble()
                                        While Not (RanNum1 <= 0.8 And RanNum2 <= 1 - 1.25 * RanNum1)
                                            RanNum1 = RandomGenerator.NextDouble()
                                            RanNum2 = RandomGenerator.NextDouble()
                                        End While
                                        'TableOfFieldsWithWaterAllocRow("DeepPerc_Amt") = (((Field4_Amt / Field4_Area) * 1000) + TractInformation.Tables(1).Rows(i - 1)(9)) * (1 - Runoff_Fraction) * RanNum1
                                        TempWaterAllocTableRow("DeepPerc_Amt") = (((Field4_Amt / Field4_Area) * 1000) + TractInformation.Tables(1).Rows(i - 1)(9)) * (1 - Runoff_Fraction) * RanNum1
                                    Else
                                        'TableOfFieldsWithWaterAllocRow("SurfWatDelivered") = 0
                                        TempWaterAllocTableRow("SurfWatDelivered") = 0
                                        'TableOfFieldsWithWaterAllocRow("PumpWatDelivered") = 0
                                        TempWaterAllocTableRow("PumpWatDelivered") = 0
                                        If TractInformation.Tables(1).Rows(i - 1)(9) <= 50 Then
                                            'TableOfFieldsWithWaterAllocRow("Runoff_Amt") = TractInformation.Tables(1).Rows(i - 1)(9) * 0.3
                                            TempWaterAllocTableRow("Runoff_Amt") = TractInformation.Tables(1).Rows(i - 1)(9) * 0.3
                                            'The runoff from precip should be based solely upon soil capacity
                                            'TableOfFieldsWithWaterAllocRow("DeepPerc_Amt") = 0
                                            TempWaterAllocTableRow("DeepPerc_Amt") = 0
                                        ElseIf TractInformation.Tables(1).Rows(i - 1)(9) > 50 Then
                                            'TableOfFieldsWithWaterAllocRow("Runoff_Amt") = TractInformation.Tables(1).Rows(i - 1)(9) * 0.5
                                            TempWaterAllocTableRow("Runoff_Amt") = TractInformation.Tables(1).Rows(i - 1)(9) * 0.5
                                            'The runoff from precip should be based solely upon soil capacity
                                            'TableOfFieldsWithWaterAllocRow("DeepPerc_Amt") = 0
                                            TempWaterAllocTableRow("DeepPerc_Amt") = 0
                                        End If
                                    End If
                                    'TableOfFieldsWithWaterAllocRow("TAW") = TractInformation.Tables(1).Rows(i - 1)(7)
                                    TempWaterAllocTableRow("TAW") = TractInformation.Tables(1).Rows(i - 1)(7)
                                    'TableOfFieldsWithWaterAllocRow("RAW") = TractInformation.Tables(1).Rows(i - 1)(8)
                                    TempWaterAllocTableRow("RAW") = TractInformation.Tables(1).Rows(i - 1)(8)
                                    'TableOfFieldsWithWaterAlloc.Rows.Add(TableOfFieldsWithWaterAllocRow)
                                    TempWaterAllocTable.Rows.Add(TempWaterAllocTableRow)
                                Next i
                            End If
                        End If
                    Else
                        'The code should land here in the event that there is no pumping taking place
                        Field1_Amt = Tract_Amt * (Field1_Area / Eligible_Area)
                        Field2_Amt = Tract_Amt * (Field2_Area / Eligible_Area)
                        Field3_Amt = Tract_Amt * (Field3_Area / Eligible_Area)
                        Field4_Amt = Tract_Amt * (Field4_Area / Eligible_Area)
                        Check_Depths(4, CurrentDate, Field1_Area, Field2_Area, Field3_Area, Field4_Area, , , , , , , _
                                        Field1_Type, Field2_Type, Field3_Type, Field4_Type, , , , , , , _
                                        Field1_Amt, Field2_Amt, Field3_Amt, Field4_Amt, , , , , , )
                        'The if statement is meant to ensure that one field doesn't end up with too much water.
                        If Field1_Amt / Field1_Area > 0.3 Or Field2_Amt / Field2_Area > 0.3 Or Field3_Amt / Field3_Area > 0.3 Or Field4_Amt / Field4_Area > 0.3 Then
                            GoTo 50
                        End If
                        For i = 1 To TractInformation.Tables(1).Rows.Count()
                            'TableOfFieldsWithWaterAllocRow = TableOfFieldsWithWaterAlloc.NewRow()
                            TempWaterAllocTableRow = TempWaterAllocTable.NewRow()
                            'TableOfFieldsWithWaterAllocRow("Tract") = TractInformation.Tables(1).Rows(i - 1)(0)
                            TempWaterAllocTableRow("Tract") = TractInformation.Tables(1).Rows(i - 1)(0)
                            'TableOfFieldsWithWaterAllocRow("Field_No") = TractInformation.Tables(1).Rows(i - 1)(2)
                            TempWaterAllocTableRow("Field_No") = TractInformation.Tables(1).Rows(i - 1)(2)
                            TempWaterAllocTableRow("Area") = TractInformation.Tables(1).Rows(i - 1)(3)
                            'TableOfFieldsWithWaterAllocRow("Date_") = CurrentDate
                            TempWaterAllocTableRow("Date_") = CurrentDate
                            'TableOfFieldsWithWaterAllocRow("Precip_Amt") = TractInformation.Tables(1).Rows(i - 1)(9)
                            TempWaterAllocTableRow("Precip_Amt") = TractInformation.Tables(1).Rows(i - 1)(9)
                            'TableOfFieldsWithWaterAllocRow("ETc") = TractInformation.Tables(1).Rows(i - 1)(10)
                            TempWaterAllocTableRow("ETc") = TractInformation.Tables(1).Rows(i - 1)(10)
                            'TableOfFieldsWithWaterAllocRow("Zr") = TractInformation.Tables(1).Rows(i - 1)(11)
                            TempWaterAllocTableRow("Zr") = TractInformation.Tables(1).Rows(i - 1)(11)

                            RanNum1 = RandomGenerator.NextDouble()
                            Runoff_Fraction = (-1 * Math.Log(RanNum1)) / (1 / lambda)
                            If Math.Floor(TractInformation.Tables(1).Rows(i - 1)(3)) = Math.Floor(Field1_Area) Then
                                'This next line incase "Check_Depths reallocated water and this field now receives no water
                                If Field1_Amt = 0 Then GoTo 1002
                                'TableOfFieldsWithWaterAllocRow("SurfWatDelivered") = (Field1_Amt / Field1_Area) * 1000
                                TempWaterAllocTableRow("SurfWatDelivered") = (Field1_Amt / Field1_Area) * 1000
                                'TableOfFieldsWithWaterAllocRow("PumpWatDelivered") = 0
                                TempWaterAllocTableRow("PumpWatDelivered") = 0
                                'TableOfFieldsWithWaterAllocRow("Runoff_Amt") = (((Field1_Amt / Field1_Area) * 1000) + TractInformation.Tables(1).Rows(i - 1)(9)) * Runoff_Fraction
                                TempWaterAllocTableRow("Runoff_Amt") = (((Field1_Amt / Field1_Area) * 1000) + TractInformation.Tables(1).Rows(i - 1)(9)) * Runoff_Fraction
                                RanNum1 = RandomGenerator.NextDouble()
                                RanNum2 = RandomGenerator.NextDouble()
                                While Not (RanNum1 <= 0.8 And RanNum2 <= 1 - 1.25 * RanNum1)
                                    RanNum1 = RandomGenerator.NextDouble()
                                    RanNum2 = RandomGenerator.NextDouble()
                                End While
                                'TableOfFieldsWithWaterAllocRow("DeepPerc_Amt") = (((Field1_Amt / Field1_Area) * 1000) + TractInformation.Tables(1).Rows(i - 1)(9)) * (1 - Runoff_Fraction) * RanNum1
                                TempWaterAllocTableRow("DeepPerc_Amt") = (((Field1_Amt / Field1_Area) * 1000) + TractInformation.Tables(1).Rows(i - 1)(9)) * (1 - Runoff_Fraction) * RanNum1
                            ElseIf Math.Floor(TractInformation.Tables(1).Rows(i - 1)(3)) = Math.Floor(Field2_Area) Then
                                'This next line incase "Check_Depths reallocated water and this field now receives no water
                                If Field2_Amt = 0 Then GoTo 1002
                                'TableOfFieldsWithWaterAllocRow("SurfWatDelivered") = (Field2_Amt / Field2_Area) * 1000
                                TempWaterAllocTableRow("SurfWatDelivered") = (Field2_Amt / Field2_Area) * 1000
                                'TableOfFieldsWithWaterAllocRow("PumpWatDelivered") = 0
                                TempWaterAllocTableRow("PumpWatDelivered") = 0
                                'TableOfFieldsWithWaterAllocRow("Runoff_Amt") = (((Field2_Amt / Field2_Area) * 1000) + TractInformation.Tables(1).Rows(i - 1)(9)) * Runoff_Fraction
                                TempWaterAllocTableRow("Runoff_Amt") = (((Field2_Amt / Field2_Area) * 1000) + TractInformation.Tables(1).Rows(i - 1)(9)) * Runoff_Fraction
                                RanNum1 = RandomGenerator.NextDouble()
                                RanNum2 = RandomGenerator.NextDouble()
                                While Not (RanNum1 <= 0.8 And RanNum2 <= 1 - 1.25 * RanNum1)
                                    RanNum1 = RandomGenerator.NextDouble()
                                    RanNum2 = RandomGenerator.NextDouble()
                                End While
                                'TableOfFieldsWithWaterAllocRow("DeepPerc_Amt") = (((Field2_Amt / Field2_Area) * 1000) + TractInformation.Tables(1).Rows(i - 1)(9)) * (1 - Runoff_Fraction) * RanNum1
                                TempWaterAllocTableRow("DeepPerc_Amt") = (((Field2_Amt / Field2_Area) * 1000) + TractInformation.Tables(1).Rows(i - 1)(9)) * (1 - Runoff_Fraction) * RanNum1
                            ElseIf Math.Floor(TractInformation.Tables(1).Rows(i - 1)(3)) = Math.Floor(Field3_Area) Then
                                'This next line incase "Check_Depths reallocated water and this field now receives no water
                                If Field3_Amt = 0 Then GoTo 1002
                                'TableOfFieldsWithWaterAllocRow("SurfWatDelivered") = (Field3_Amt / Field3_Area) * 1000
                                TempWaterAllocTableRow("SurfWatDelivered") = (Field3_Amt / Field3_Area) * 1000
                                'TableOfFieldsWithWaterAllocRow("PumpWatDelivered") = 0
                                TempWaterAllocTableRow("PumpWatDelivered") = 0
                                'TableOfFieldsWithWaterAllocRow("Runoff_Amt") = (((Field3_Amt / Field3_Area) * 1000) + TractInformation.Tables(1).Rows(i - 1)(9)) * Runoff_Fraction
                                TempWaterAllocTableRow("Runoff_Amt") = (((Field3_Amt / Field3_Area) * 1000) + TractInformation.Tables(1).Rows(i - 1)(9)) * Runoff_Fraction
                                RanNum1 = RandomGenerator.NextDouble()
                                RanNum2 = RandomGenerator.NextDouble()
                                While Not (RanNum1 <= 0.8 And RanNum2 <= 1 - 1.25 * RanNum1)
                                    RanNum1 = RandomGenerator.NextDouble()
                                    RanNum2 = RandomGenerator.NextDouble()
                                End While
                                'TableOfFieldsWithWaterAllocRow("DeepPerc_Amt") = (((Field3_Amt / Field3_Area) * 1000) + TractInformation.Tables(1).Rows(i - 1)(9)) * (1 - Runoff_Fraction) * RanNum1
                                TempWaterAllocTableRow("DeepPerc_Amt") = (((Field3_Amt / Field3_Area) * 1000) + TractInformation.Tables(1).Rows(i - 1)(9)) * (1 - Runoff_Fraction) * RanNum1
                            ElseIf Math.Floor(TractInformation.Tables(1).Rows(i - 1)(3)) = Math.Floor(Field4_Area) Then
                                'This next line incase "Check_Depths reallocated water and this field now receives no water
                                If Field4_Amt = 0 Then GoTo 1002
                                'TableOfFieldsWithWaterAllocRow("SurfWatDelivered") = (Field4_Amt / Field4_Area) * 1000
                                TempWaterAllocTableRow("SurfWatDelivered") = (Field4_Amt / Field4_Area) * 1000
                                'TableOfFieldsWithWaterAllocRow("PumpWatDelivered") = 0
                                TempWaterAllocTableRow("PumpWatDelivered") = 0
                                'TableOfFieldsWithWaterAllocRow("Runoff_Amt") = (((Field4_Amt / Field4_Area) * 1000) + TractInformation.Tables(1).Rows(i - 1)(9)) * Runoff_Fraction
                                TempWaterAllocTableRow("Runoff_Amt") = (((Field4_Amt / Field4_Area) * 1000) + TractInformation.Tables(1).Rows(i - 1)(9)) * Runoff_Fraction
                                RanNum1 = RandomGenerator.NextDouble()
                                RanNum2 = RandomGenerator.NextDouble()
                                While Not (RanNum1 <= 0.8 And RanNum2 <= 1 - 1.25 * RanNum1)
                                    RanNum1 = RandomGenerator.NextDouble()
                                    RanNum2 = RandomGenerator.NextDouble()
                                End While
                                'TableOfFieldsWithWaterAllocRow("DeepPerc_Amt") = (((Field4_Amt / Field4_Area) * 1000) + TractInformation.Tables(1).Rows(i - 1)(9)) * (1 - Runoff_Fraction) * RanNum1
                                TempWaterAllocTableRow("DeepPerc_Amt") = (((Field4_Amt / Field4_Area) * 1000) + TractInformation.Tables(1).Rows(i - 1)(9)) * (1 - Runoff_Fraction) * RanNum1
                            Else
                                '1002:  TableOfFieldsWithWaterAllocRow("SurfWatDelivered") = 0
1002:                           TempWaterAllocTableRow("SurfWatDelivered") = 0
                                'TableOfFieldsWithWaterAllocRow("PumpWatDelivered") = 0
                                TempWaterAllocTableRow("PumpWatDelivered") = 0
                                If TractInformation.Tables(1).Rows(i - 1)(9) <= 50 Then
                                    'TableOfFieldsWithWaterAllocRow("Runoff_Amt") = TractInformation.Tables(1).Rows(i - 1)(9) * 0.3
                                    TempWaterAllocTableRow("Runoff_Amt") = TractInformation.Tables(1).Rows(i - 1)(9) * 0.3
                                    'The runoff from precip should be based solely upon soil capacity
                                    'TableOfFieldsWithWaterAllocRow("DeepPerc_Amt") = 0
                                    TempWaterAllocTableRow("DeepPerc_Amt") = 0
                                ElseIf TractInformation.Tables(1).Rows(i - 1)(9) > 50 Then
                                    'TableOfFieldsWithWaterAllocRow("Runoff_Amt") = TractInformation.Tables(1).Rows(i - 1)(9) * 0.5
                                    TempWaterAllocTableRow("Runoff_Amt") = TractInformation.Tables(1).Rows(i - 1)(9) * 0.5
                                    'The runoff from precip should be based solely upon soil capacity
                                    'TableOfFieldsWithWaterAllocRow("DeepPerc_Amt") = 0
                                    TempWaterAllocTableRow("DeepPerc_Amt") = 0
                                End If
                            End If
                            'TableOfFieldsWithWaterAllocRow("TAW") = TractInformation.Tables(1).Rows(i - 1)(7)
                            TempWaterAllocTableRow("TAW") = TractInformation.Tables(1).Rows(i - 1)(7)
                            'TableOfFieldsWithWaterAllocRow("RAW") = TractInformation.Tables(1).Rows(i - 1)(8)
                            TempWaterAllocTableRow("RAW") = TractInformation.Tables(1).Rows(i - 1)(8)
                            'TableOfFieldsWithWaterAlloc.Rows.Add(TableOfFieldsWithWaterAllocRow)
                            TempWaterAllocTable.Rows.Add(TempWaterAllocTableRow)
                        Next i
                    End If
                Case Else
                    'The code should end up here for 5 or more fields
                    Dim j As Integer
                    Dim SmallFld As Single = 10000000
                    Dim FldWithPumpedWat() As Boolean
                    Dim FldWithSurfWat() As Boolean
                    Dim area As Single  'a debug variable, can get rid of
                    'these next variables are for generating values from a normal distribution
                    Dim x1 As Single
                    Dim x2 As Single
                    Dim w As Single
                    Dim y1 As Single
                    Dim y2 As Single
                    Dim Choose As Single
                    Dim Target_Depth As Single
                    Dim IsVolAvail As Boolean
                    Dim IsRemainVolGood As Boolean
                    Dim std_dev As Single
                    Dim mean As Single
                    Dim PumpingFlag As Integer = 0

                    dv = New DataView(TractInformation.Tables.Item(1)) 'TractInformation.Tables(1).Select("IRRIG_TIME_CODE" & Right(CStr(CurrentDate), 2) & " = " & TimingCodeActive(0) & " Or IRRIG_TIME_CODE" & Right(CStr(CurrentDate), 2) & " = " & TimingCodeActive(1) & " Or IRRIG_TIME_CODE" & Right(CStr(CurrentDate), 2) & " = " & TimingCodeActive(2))
                    With dv
                        .AllowEdit = True
                        '.RowFilter() = "IRRIG_TIME_CODE" & Right(StringDate, 2) & " = " & TimingCodeActive(0) & " Or IRRIG_TIME_CODE" & Right(StringDate, 2) & " = " & TimingCodeActive(1) & " Or IRRIG_TIME_CODE" & Right(StringDate, 2) & " = " & TimingCodeActive(2)
                        '.RowStateFilter = DataViewRowState.ModifiedCurrent
                        .Sort() = "Expr1 ASC"
                    End With
                    ct = dv.Count()
                    'Dim m As New tableDebugForm1
                    'm.DataGrid1.DataSource = dv
                    'm.ShowDialog()

                    OKToReceivePumpWat = 0
                    Array.Clear(HighLowArray, 0, 60)    'Arbitrarily chose a high number, like 60
                    For i = 0 To ct - 1
                        'The PumpingFlag variable has a unique purpose.  That is it goes negative if all fields
                        'have an unrealistically low depth if the pumped water were applied to it.  However,
                        'if there is some quantity of water that was pumped then we need to unload it.
                        If Pumped_Amt / dv.Item(i)(3) * 39.37 > 2 And Pumped_Amt / dv.Item(i)(3) * 39.37 < 8 Then
                            HighLowArray(i) = 1
                            OKToReceivePumpWat += 1
                            PumpingFlag += 100
                        ElseIf Pumped_Amt / dv.Item(i)(3) * 39.37 < 2 Then
                            HighLowArray(i) = -1
                            PumpingFlag -= 1
                        Else
                            HighLowArray(i) = 0
                            PumpingFlag += 100
                        End If
                    Next i
                    i = 0
                    OKToReceiveSurfWat = 0
                    For i = 0 To ct - 1
                        If Tract_Amt / dv.Item(i)(3) * 39.37 >= 2 Then
                            OKToReceiveSurfWat += 1
                        End If
                    Next i

                    If OKToReceivePumpWat >= 0 And OKToReceiveSurfWat >= 1 Then 'Variable "OKTo.." can only be positive if there is water available
                        'Original code was "OKToReceivePumpWat >= 0", I may need to change back if small amount of water being allocated.
                        For i = 0 To ct - 1
                            area = dv.Item(i)(3)
                            TargetValues(dv.Item(i)(4), mean, std_dev)

100:                        Do
                                RanNum1 = RandomGenerator.NextDouble()
                                RanNum2 = RandomGenerator.NextDouble()
                                x1 = 2 * RanNum1 - 1
                                x2 = 2 * RanNum2 - 1
                                w = Math.Pow(x1, 2) + Math.Pow(x2, 2)
                            Loop Until w < 1

                            w = Math.Sqrt((-2 * Math.Log(w)) / w)
                            y1 = x1 * w
                            y2 = x2 * w

                            Choose = RandomGenerator.NextDouble()
                            If Choose < 0.5 Then
                                Target_Depth = y1 * (std_dev) + (mean)  'Target Depth is in meters
                            Else
                                Target_Depth = y2 * (std_dev) + (mean)
                            End If
                            Target_Depth = Math.Exp(Target_Depth)   'this is because the std_dev and mean are from normal distributions but I'm trying to sample from a log normal distribution, hence the exp()
                            Target_Depth = Target_Depth / 39.37

                            If Target_Depth <= 0 Then GoTo 100 'Label 100 just a few lines up
                            If Target_Depth > 0.508 Then GoTo 100

                            If (dv.Item(i)(6) = TimingCodeActive(0) Or _
                                dv.Item(i)(6) = TimingCodeActive(1) Or _
                                dv.Item(i)(6) = TimingCodeActive(2)) And _
                                Tract_Amt > 0 Then
                                'This next line used to be two lines up, just before "Tract_Amt > 0 Then "
                                'Not (HighLowArray(i) = 1) And _

                                'code lands here for surface water allocation

                                'Even though a timing code of 1 should recieve water every week 
                                'this seems a bit excessive.  Therefore these next few lines of code are
                                'meant to throw a randomness factor into this.  By doing so, this will
                                'also help some of the lower priority fields recieve more water.  
                                'If some of the lower priority fields recieve more water
                                'by this change (change made on 4-16-09) then more water will be taken
                                'up into storage and lost to ET.  This could help reduce the simulated
                                'return flows, as they are much higher than "observed."  See write-up
                                '"c:\eric\phd stuff\File For Final Writeup - Observation Input Files.doc"
                                'for detials on how observed return flows were calculated.

                                Choose = RandomGenerator.NextDouble()
                                If dv.Item(i)(6) = TimingCodeActive(0) Then
                                    If Choose < 0.5 Then 'a 50%/50% chance of allocating or not.
                                        Choose = Choose + 0.00001  'Basically, this does nothing
                                    Else
                                        GoTo 200
                                    End If
                                End If

                                'Check available volume
                                'The "Try" are for when the i'th + 1 row doesn't exist
                                Try
                                    If (dv.Item(i)(3) * Target_Depth) < Tract_Amt Or _
                                        dv.Item(i + 1)(6) = 0 Then
                                        IsVolAvail = True
                                    Else
                                        IsVolAvail = False
                                    End If
                                Catch ex As Exception
                                    IsVolAvail = True
                                End Try
                                'Do an approximate check of the remaining volume for the next field in line
                                'Using the variable "Target_Vol" below presents some problems, but as an
                                'approximate check it should be OK
                                'The "Try" are for when the i'th + 1 row doesn't exist
                                Try
                                    area = dv.Item(i + 1)(3)
                                    If (dv.Item(i + 1)(3) * Target_Depth) < (Tract_Amt - (dv.Item(i)(3) * Target_Depth)) And _
                                        Not (dv.Item(i + 1)(6) = 0) Then
                                        IsRemainVolGood = True
                                    Else
                                        IsRemainVolGood = False
                                    End If
                                Catch ex As Exception
                                    IsRemainVolGood = False
                                End Try
                                If IsVolAvail Then
                                    If IsRemainVolGood Then
                                        'allocate the target depth
                                        'TableOfFieldsWithWaterAllocRow = TableOfFieldsWithWaterAlloc.NewRow()
                                        TempWaterAllocTableRow = TempWaterAllocTable.NewRow()
                                        'TableOfFieldsWithWaterAllocRow("Tract") = dv.Item(i)(0)
                                        TempWaterAllocTableRow("Tract") = dv.Item(i)(0)
                                        'TableOfFieldsWithWaterAllocRow("Field_No") = dv.Item(i)(2)
                                        TempWaterAllocTableRow("Field_No") = dv.Item(i)(2)
                                        TempWaterAllocTableRow("Area") = dv.Item(i)(3)
                                        'TableOfFieldsWithWaterAllocRow("Date_") = CurrentDate
                                        TempWaterAllocTableRow("Date_") = CurrentDate
                                        'TableOfFieldsWithWaterAllocRow("Precip_Amt") = dv.Item(i)(9)
                                        TempWaterAllocTableRow("Precip_Amt") = dv.Item(i)(9)
                                        'TableOfFieldsWithWaterAllocRow("ETc") = dv.Item(i)(10)
                                        TempWaterAllocTableRow("ETc") = dv.Item(i)(10)
                                        'TableOfFieldsWithWaterAllocRow("Zr") = dv.Item(i)(11)
                                        TempWaterAllocTableRow("Zr") = dv.Item(i)(11)

                                        RanNum1 = RandomGenerator.NextDouble()
                                        Runoff_Fraction = (-1 * Math.Log(RanNum1)) / (1 / lambda)
                                        'TableOfFieldsWithWaterAllocRow("SurfWatDelivered") = Target_Depth * 1000
                                        TempWaterAllocTableRow("SurfWatDelivered") = Target_Depth * 1000

                                        'The reason for the following bit of code being constructed the way it is
                                        'is because on occasion there is a very small amount of pumped water
                                        'available and needs to be put somewhere.  this code won't be found
                                        'anywhere else
                                        RanNum1 = RandomGenerator.NextDouble()
                                        RanNum2 = RandomGenerator.NextDouble()
                                        While Not (RanNum1 <= 0.8 And RanNum2 <= 1 - 1.25 * RanNum1)
                                            RanNum1 = RandomGenerator.NextDouble()
                                            RanNum2 = RandomGenerator.NextDouble()
                                        End While
                                        If PumpingFlag < 0 And Pumped_Amt > 0 Then
                                            'TableOfFieldsWithWaterAllocRow("PumpWatDelivered") = (Pumped_Amt / dv.Item(i)(3)) * 1000
                                            TempWaterAllocTableRow("PumpWatDelivered") = (Pumped_Amt / dv.Item(i)(3)) * 1000
                                            'TableOfFieldsWithWaterAllocRow("Runoff_Amt") = ((1000 * Target_Depth) + ((Pumped_Amt / dv.Item(i)(3)) * 1000) + dv.Item(i)(9)) * Runoff_Fraction
                                            TempWaterAllocTableRow("Runoff_Amt") = ((1000 * Target_Depth) + ((Pumped_Amt / dv.Item(i)(3)) * 1000) + dv.Item(i)(9)) * Runoff_Fraction
                                            'TableOfFieldsWithWaterAllocRow("DeepPerc_Amt") = ((1000 * Target_Depth) + ((Pumped_Amt / dv.Item(i)(3)) * 1000) + dv.Item(i)(9)) * (1 - Runoff_Fraction) * RanNum1
                                            TempWaterAllocTableRow("DeepPerc_Amt") = ((1000 * Target_Depth) + ((Pumped_Amt / dv.Item(i)(3)) * 1000) + dv.Item(i)(9)) * (1 - Runoff_Fraction) * RanNum1
                                            Pumped_Amt = Pumped_Amt - Pumped_Amt
                                        Else
                                            'TableOfFieldsWithWaterAllocRow("PumpWatDelivered") = 0
                                            TempWaterAllocTableRow("PumpWatDelivered") = 0
                                            'TableOfFieldsWithWaterAllocRow("Runoff_Amt") = ((1000 * Target_Depth) + dv.Item(i)(9)) * Runoff_Fraction
                                            TempWaterAllocTableRow("Runoff_Amt") = ((1000 * Target_Depth) + dv.Item(i)(9)) * Runoff_Fraction
                                            'TableOfFieldsWithWaterAllocRow("DeepPerc_Amt") = ((1000 * Target_Depth) + dv.Item(i)(9)) * (1 - Runoff_Fraction) * RanNum1
                                            TempWaterAllocTableRow("DeepPerc_Amt") = ((1000 * Target_Depth) + dv.Item(i)(9)) * (1 - Runoff_Fraction) * RanNum1
                                        End If
                                        'TableOfFieldsWithWaterAllocRow("TAW") = dv.Item(i)(7)
                                        TempWaterAllocTableRow("TAW") = dv.Item(i)(7)
                                        'TableOfFieldsWithWaterAllocRow("RAW") = dv.Item(i)(8)
                                        TempWaterAllocTableRow("RAW") = dv.Item(i)(8)
                                        Tract_Amt = Tract_Amt - (dv.Item(i)(3) * Target_Depth)
                                    ElseIf Not IsRemainVolGood Then
                                        'allocate all remaing water (however depending on the sizes of the remaining fields, this part of the code
                                        'could be a big time mistake, but if the all the remaing fields in dv are approx. equal, I can
                                        'probably assume this step OK to keep the code simple
                                        'TableOfFieldsWithWaterAllocRow = TableOfFieldsWithWaterAlloc.NewRow()
                                        TempWaterAllocTableRow = TempWaterAllocTable.NewRow()
                                        'TableOfFieldsWithWaterAllocRow("Tract") = dv.Item(i)(0)
                                        TempWaterAllocTableRow("Tract") = dv.Item(i)(0)
                                        'TableOfFieldsWithWaterAllocRow("Field_No") = dv.Item(i)(2)
                                        TempWaterAllocTableRow("Field_No") = dv.Item(i)(2)
                                        TempWaterAllocTableRow("Area") = dv.Item(i)(3)
                                        'TableOfFieldsWithWaterAllocRow("Date_") = CurrentDate
                                        TempWaterAllocTableRow("Date_") = CurrentDate
                                        'TableOfFieldsWithWaterAllocRow("Precip_Amt") = dv.Item(i)(9)
                                        TempWaterAllocTableRow("Precip_Amt") = dv.Item(i)(9)
                                        'TableOfFieldsWithWaterAllocRow("ETc") = dv.Item(i)(10)
                                        TempWaterAllocTableRow("ETc") = dv.Item(i)(10)
                                        'TableOfFieldsWithWaterAllocRow("Zr") = dv.Item(i)(11)
                                        TempWaterAllocTableRow("Zr") = dv.Item(i)(11)

                                        RanNum1 = RandomGenerator.NextDouble()
                                        Runoff_Fraction = (-1 * Math.Log(RanNum1)) / (1 / lambda)
                                        'TableOfFieldsWithWaterAllocRow("SurfWatDelivered") = (Tract_Amt / dv.Item(i)(3)) * 1000
                                        TempWaterAllocTableRow("SurfWatDelivered") = (Tract_Amt / dv.Item(i)(3)) * 1000
                                        'TableOfFieldsWithWaterAllocRow("PumpWatDelivered") = 0
                                        TempWaterAllocTableRow("PumpWatDelivered") = 0
                                        'TableOfFieldsWithWaterAllocRow("Runoff_Amt") = (((Tract_Amt / dv.Item(i)(3)) * 1000) + dv.Item(i)(9)) * Runoff_Fraction
                                        TempWaterAllocTableRow("Runoff_Amt") = (((Tract_Amt / dv.Item(i)(3)) * 1000) + dv.Item(i)(9)) * Runoff_Fraction
                                        RanNum1 = RandomGenerator.NextDouble()
                                        RanNum2 = RandomGenerator.NextDouble()
                                        While Not (RanNum1 <= 0.8 And RanNum2 <= 1 - 1.25 * RanNum1)
                                            RanNum1 = RandomGenerator.NextDouble()
                                            RanNum2 = RandomGenerator.NextDouble()
                                        End While
                                        'TableOfFieldsWithWaterAllocRow("DeepPerc_Amt") = (((Tract_Amt / dv.Item(i)(3)) * 1000) + dv.Item(i)(9)) * (1 - Runoff_Fraction) * RanNum1
                                        TempWaterAllocTableRow("DeepPerc_Amt") = (((Tract_Amt / dv.Item(i)(3)) * 1000) + dv.Item(i)(9)) * (1 - Runoff_Fraction) * RanNum1
                                        'TableOfFieldsWithWaterAllocRow("TAW") = dv.Item(i)(7)
                                        TempWaterAllocTableRow("TAW") = dv.Item(i)(7)
                                        'TableOfFieldsWithWaterAllocRow("RAW") = dv.Item(i)(8)
                                        TempWaterAllocTableRow("RAW") = dv.Item(i)(8)
                                        Tract_Amt = Tract_Amt - Tract_Amt
                                    End If
                                ElseIf Not IsVolAvail Then
                                    GoTo 200 'This will allocate no water to the field
                                End If
                            ElseIf (dv.Item(i)(6) = TimingCodeActive(0) Or _
                                    dv.Item(i)(6) = TimingCodeActive(1) Or _
                                    dv.Item(i)(6) = TimingCodeActive(2)) And _
                                    (HighLowArray(i) = 1 Or HighLowArray(i) = 0) And _
                                    Pumped_Amt > 0 Then

                                'Check available volume
                                'If (dv.Item(i)(3) * Target_Depth) < Pumped_Amt Then
                                IsVolAvail = True
                                'Else
                                'IsVolAvail = False
                                'End If
                                'Do an approximate check of the remaining pumped volume to see if it is an
                                'appropriate amount of water for the next field in line that is eligible 
                                'for pumping water.  Using the variable "Target_Vol" below presents some 
                                'problems, but as an approximate check it should be OK
                                j = i + 1
                                While j < ct
                                    If HighLowArray(j) = 1 Then
                                        Exit While
                                    End If
                                    j += 1
                                End While
                                If j = ct Then
                                    IsRemainVolGood = False
                                    GoTo 300
                                End If
                                If (dv.Item(i + 1)(3) * Target_Depth) < (Pumped_Amt - (dv.Item(j)(3) * Target_Depth)) Then
                                    IsRemainVolGood = True
                                Else
                                    IsRemainVolGood = False
                                End If

300:                            If IsVolAvail Then
                                    If IsRemainVolGood Then
                                        'allocate the target depth worth of pumped water to the current field
                                        'TableOfFieldsWithWaterAllocRow = TableOfFieldsWithWaterAlloc.NewRow()
                                        TempWaterAllocTableRow = TempWaterAllocTable.NewRow()
                                        'TableOfFieldsWithWaterAllocRow("Tract") = dv.Item(i)(0)
                                        TempWaterAllocTableRow("Tract") = dv.Item(i)(0)
                                        'TableOfFieldsWithWaterAllocRow("Field_No") = dv.Item(i)(2)
                                        TempWaterAllocTableRow("Field_No") = dv.Item(i)(2)
                                        TempWaterAllocTableRow("Area") = dv.Item(i)(3)
                                        'TableOfFieldsWithWaterAllocRow("Date_") = CurrentDate
                                        TempWaterAllocTableRow("Date_") = CurrentDate
                                        'TableOfFieldsWithWaterAllocRow("Precip_Amt") = dv.Item(i)(9)
                                        TempWaterAllocTableRow("Precip_Amt") = dv.Item(i)(9)
                                        'TableOfFieldsWithWaterAllocRow("ETc") = dv.Item(i)(10)
                                        TempWaterAllocTableRow("ETc") = dv.Item(i)(10)
                                        'TableOfFieldsWithWaterAllocRow("Zr") = dv.Item(i)(11)
                                        TempWaterAllocTableRow("Zr") = dv.Item(i)(11)

                                        RanNum1 = RandomGenerator.NextDouble()
                                        Runoff_Fraction = (-1 * Math.Log(RanNum1)) / (1 / lambda)
                                        'TableOfFieldsWithWaterAllocRow("SurfWatDelivered") = 0
                                        TempWaterAllocTableRow("SurfWatDelivered") = 0
                                        'TableOfFieldsWithWaterAllocRow("PumpWatDelivered") = (Target_Depth * 1000)
                                        TempWaterAllocTableRow("PumpWatDelivered") = (Target_Depth * 1000)
                                        'TableOfFieldsWithWaterAllocRow("Runoff_Amt") = ((Target_Depth * 1000) + dv.Item(i)(9)) * Runoff_Fraction
                                        TempWaterAllocTableRow("Runoff_Amt") = ((Target_Depth * 1000) + dv.Item(i)(9)) * Runoff_Fraction
                                        RanNum1 = RandomGenerator.NextDouble()
                                        RanNum2 = RandomGenerator.NextDouble()
                                        While Not (RanNum1 <= 0.8 And RanNum2 <= 1 - 1.25 * RanNum1)
                                            RanNum1 = RandomGenerator.NextDouble()
                                            RanNum2 = RandomGenerator.NextDouble()
                                        End While
                                        'TableOfFieldsWithWaterAllocRow("DeepPerc_Amt") = ((Target_Depth * 1000) + dv.Item(i)(9)) * (1 - Runoff_Fraction) * RanNum1
                                        TempWaterAllocTableRow("DeepPerc_Amt") = ((Target_Depth * 1000) + dv.Item(i)(9)) * (1 - Runoff_Fraction) * RanNum1
                                        'TableOfFieldsWithWaterAllocRow("TAW") = dv.Item(i)(7)
                                        TempWaterAllocTableRow("TAW") = dv.Item(i)(7)
                                        'TableOfFieldsWithWaterAllocRow("RAW") = dv.Item(i)(8)
                                        TempWaterAllocTableRow("RAW") = dv.Item(i)(8)
                                        Pumped_Amt = Pumped_Amt - (Target_Depth * dv.Item(i)(3))
                                    ElseIf Not IsRemainVolGood Then
                                        'alloate all the remaining pumped water to the current field
                                        'TableOfFieldsWithWaterAllocRow = TableOfFieldsWithWaterAlloc.NewRow()
                                        TempWaterAllocTableRow = TempWaterAllocTable.NewRow()
                                        'TableOfFieldsWithWaterAllocRow("Tract") = dv.Item(i)(0)
                                        TempWaterAllocTableRow("Tract") = dv.Item(i)(0)
                                        'TableOfFieldsWithWaterAllocRow("Field_No") = dv.Item(i)(2)
                                        TempWaterAllocTableRow("Field_No") = dv.Item(i)(2)
                                        TempWaterAllocTableRow("Area") = dv.Item(i)(3)
                                        'TableOfFieldsWithWaterAllocRow("Date_") = CurrentDate
                                        TempWaterAllocTableRow("Date_") = CurrentDate
                                        'TableOfFieldsWithWaterAllocRow("Precip_Amt") = dv.Item(i)(9)
                                        TempWaterAllocTableRow("Precip_Amt") = dv.Item(i)(9)
                                        'TableOfFieldsWithWaterAllocRow("ETc") = dv.Item(i)(10)
                                        TempWaterAllocTableRow("ETc") = dv.Item(i)(10)
                                        'TableOfFieldsWithWaterAllocRow("Zr") = dv.Item(i)(11)
                                        TempWaterAllocTableRow("Zr") = dv.Item(i)(11)

                                        RanNum1 = RandomGenerator.NextDouble()
                                        Runoff_Fraction = (-1 * Math.Log(RanNum1)) / (1 / lambda)
                                        'TableOfFieldsWithWaterAllocRow("SurfWatDelivered") = 0
                                        TempWaterAllocTableRow("SurfWatDelivered") = 0
                                        'TableOfFieldsWithWaterAllocRow("PumpWatDelivered") = (Pumped_Amt / dv.Item(i)(3)) * 1000
                                        TempWaterAllocTableRow("PumpWatDelivered") = (Pumped_Amt / dv.Item(i)(3)) * 1000
                                        'TableOfFieldsWithWaterAllocRow("Runoff_Amt") = (((Pumped_Amt / dv.Item(i)(3)) * 1000) + dv.Item(i)(9)) * Runoff_Fraction
                                        TempWaterAllocTableRow("Runoff_Amt") = (((Pumped_Amt / dv.Item(i)(3)) * 1000) + dv.Item(i)(9)) * Runoff_Fraction
                                        RanNum1 = RandomGenerator.NextDouble()
                                        RanNum2 = RandomGenerator.NextDouble()
                                        While Not (RanNum1 <= 0.8 And RanNum2 <= 1 - 1.25 * RanNum1)
                                            RanNum1 = RandomGenerator.NextDouble()
                                            RanNum2 = RandomGenerator.NextDouble()
                                        End While
                                        'TableOfFieldsWithWaterAllocRow("DeepPerc_Amt") = (((Pumped_Amt / dv.Item(i)(3)) * 1000) + dv.Item(i)(9)) * (1 - Runoff_Fraction) * RanNum1
                                        TempWaterAllocTableRow("DeepPerc_Amt") = (((Pumped_Amt / dv.Item(i)(3)) * 1000) + dv.Item(i)(9)) * (1 - Runoff_Fraction) * RanNum1
                                        'TableOfFieldsWithWaterAllocRow("TAW") = dv.Item(i)(7)
                                        TempWaterAllocTableRow("TAW") = dv.Item(i)(7)
                                        'TableOfFieldsWithWaterAllocRow("RAW") = dv.Item(i)(8)
                                        TempWaterAllocTableRow("RAW") = dv.Item(i)(8)
                                        Pumped_Amt = Pumped_Amt - Pumped_Amt
                                    End If
                                ElseIf Not IsVolAvail Then
                                    GoTo 200
                                End If

                            ElseIf (Not (dv.Item(i)(6) = TimingCodeActive(0) And _
                                        dv.Item(i)(6) = TimingCodeActive(1) And _
                                        dv.Item(i)(6) = TimingCodeActive(2))) Or _
                                        (Tract_Amt = 0 And Pumped_Amt = 0) Then

                                '200:  TableOfFieldsWithWaterAllocRow = TableOfFieldsWithWaterAlloc.NewRow()
200:                            TempWaterAllocTableRow = TempWaterAllocTable.NewRow()
                                'TableOfFieldsWithWaterAllocRow("Tract") = dv.Item(i)(0)
                                TempWaterAllocTableRow("Tract") = dv.Item(i)(0)
                                'TableOfFieldsWithWaterAllocRow("Field_No") = dv.Item(i)(2)
                                TempWaterAllocTableRow("Field_No") = dv.Item(i)(2)
                                TempWaterAllocTableRow("Area") = dv.Item(i)(3)
                                'TableOfFieldsWithWaterAllocRow("Date_") = CurrentDate
                                TempWaterAllocTableRow("Date_") = CurrentDate
                                'TableOfFieldsWithWaterAllocRow("Precip_Amt") = dv.Item(i)(9)
                                TempWaterAllocTableRow("Precip_Amt") = dv.Item(i)(9)
                                'TableOfFieldsWithWaterAllocRow("ETc") = dv.Item(i)(10)
                                TempWaterAllocTableRow("ETc") = dv.Item(i)(10)
                                'TableOfFieldsWithWaterAllocRow("Zr") = dv.Item(i)(11)
                                TempWaterAllocTableRow("Zr") = dv.Item(i)(11)

                                RanNum1 = RandomGenerator.NextDouble()
                                Runoff_Fraction = (-1 * Math.Log(RanNum1)) / (1 / lambda)
                                'TableOfFieldsWithWaterAllocRow("SurfWatDelivered") = 0
                                TempWaterAllocTableRow("SurfWatDelivered") = 0
                                'TableOfFieldsWithWaterAllocRow("PumpWatDelivered") = 0
                                TempWaterAllocTableRow("PumpWatDelivered") = 0
                                If dv.Item(i)(9) <= 50 Then
                                    'TableOfFieldsWithWaterAllocRow("Runoff_Amt") = dv.Item(i)(9) * 0.3
                                    TempWaterAllocTableRow("Runoff_Amt") = dv.Item(i)(9) * 0.3
                                    'The runoff from precip should be based solely upon soil capacity
                                    'TableOfFieldsWithWaterAllocRow("DeepPerc_Amt") = 0
                                    TempWaterAllocTableRow("DeepPerc_Amt") = 0
                                ElseIf dv.Item(i)(9) > 50 Then
                                    'TableOfFieldsWithWaterAllocRow("Runoff_Amt") = dv.Item(i)(9) * 0.5
                                    TempWaterAllocTableRow("Runoff_Amt") = dv.Item(i)(9) * 0.5
                                    'The runoff from precip should be based solely upon soil capacity
                                    'TableOfFieldsWithWaterAllocRow("DeepPerc_Amt") = 0
                                    TempWaterAllocTableRow("DeepPerc_Amt") = 0
                                End If
                                'TableOfFieldsWithWaterAllocRow("TAW") = dv.Item(i)(7)
                                TempWaterAllocTableRow("TAW") = dv.Item(i)(7)
                                'TableOfFieldsWithWaterAllocRow("RAW") = dv.Item(i)(8)
                                TempWaterAllocTableRow("RAW") = dv.Item(i)(8)
                            End If
                            'TableOfFieldsWithWaterAlloc.Rows.Add(TableOfFieldsWithWaterAllocRow)
                            TempWaterAllocTable.Rows.Add(TempWaterAllocTableRow)
                        Next i
                        If Tract_Amt > 0 Then
                            'I need to fix the reasons for getting this error
                            'MsgBox("Error! Not all surface water allocated.", MsgBoxStyle.Exclamation, "Fix this!")
                            Select Case Canal
                                Case "Catlin Canal"
                                    CatlinBanked_Amt = CatlinBanked_Amt + Tract_Amt
                                Case "Fort Lyon Canal US"
                                    FortLyonBanked_Amt = FortLyonBanked_Amt + Tract_Amt
                                Case "Holbrook Canal"
                                    HolbrookBanked_Amt = HolbrookBanked_Amt + Tract_Amt
                                Case "Otero Canal"
                                    OteroBanked_Amt = OteroBanked_Amt + Tract_Amt
                                Case "Rocky Ford Ditch"
                                    RockyFordBanked_Amt = RockyFordBanked_Amt + Tract_Amt
                                Case "Rocky Ford Highline"
                                    HighlineBanked_Amt = HighlineBanked_Amt + Tract_Amt
                                Case "Amity Canal"
                                    AmityBanked_Amt = AmityBanked_Amt + Tract_Amt
                                Case "Buffalo Canal"
                                    BuffaloBanked_Amt = BuffaloBanked_Amt + Tract_Amt
                                Case "Fort Bent Canal"
                                    FortBentBanked_Amt = FortBentBanked_Amt + Tract_Amt
                                Case "Fort Lyon Canal DS"
                                    FortLyonDSBanked_Amt = FortLyonDSBanked_Amt + Tract_Amt
                                Case "Hyde Ditch"
                                    HydeBanked_Amt = HydeBanked_Amt + Tract_Amt
                                Case "Lamar Canal"
                                    LamarBanked_Amt = LamarBanked_Amt + Tract_Amt
                            End Select
                        End If
                        If Pumped_Amt > 0 Then
                            'I need to fix the reasons for getting this error
                            'MsgBox("Error! Not all pumped water allocated.", MsgBoxStyle.Exclamation, "Fix this!")
                            Select Case Canal
                                Case "Catlin Canal"
                                    CatlinBankedPumped_Amt = CatlinBankedPumped_Amt + Pumped_Amt
                                Case "Fort Lyon Canal US"
                                    FortLyonBankedPumped_Amt = FortLyonBankedPumped_Amt + Pumped_Amt
                                Case "Holbrook Canal"
                                    HolbrookBankedPumped_Amt = HolbrookBankedPumped_Amt + Pumped_Amt
                                Case "Otero Canal"
                                    OteroBankedPumped_Amt = OteroBankedPumped_Amt + Pumped_Amt
                                Case "Rocky Ford Ditch"
                                    RockyFordBankedPumped_Amt = RockyFordBankedPumped_Amt + Pumped_Amt
                                Case "Rocky Ford Highline"
                                    HighlineBankedPumped_Amt = HighlineBankedPumped_Amt + Pumped_Amt
                                Case "Amity Canal"
                                    AmityBankedPumped_Amt = AmityBankedPumped_Amt + Pumped_Amt
                                Case "Buffalo Canal"
                                    BuffaloBankedPumped_Amt = BuffaloBankedPumped_Amt + Pumped_Amt
                                Case "Fort Bent Canal"
                                    FortBentBankedPumped_Amt = FortBentBankedPumped_Amt + Pumped_Amt
                                Case "Fort Lyon Canal DS"
                                    FortLyonDSBankedPumped_Amt = FortLyonDSBankedPumped_Amt + Pumped_Amt
                                Case "Hyde Ditch"
                                    HydeBankedPumped_Amt = HydeBankedPumped_Amt + Pumped_Amt
                                Case "Lamar Canal"
                                    LamarBankedPumped_Amt = LamarBankedPumped_Amt + Pumped_Amt
                            End Select
                        End If
                    ElseIf OKToReceivePumpWat >= 1 And OKToReceiveSurfWat = 0 Then
                        'code should land here when no surface water available but pumped water is.

                        Dim whaaa As Object
                        For i = 0 To ct - 1

                            'Added some new code on 1/1/2010 to account for field data
                            TargetValues(dv.Item(i)(4), mean, std_dev)
400:                        Do
                                RanNum1 = RandomGenerator.NextDouble()
                                RanNum2 = RandomGenerator.NextDouble()
                                x1 = 2 * RanNum1 - 1
                                x2 = 2 * RanNum2 - 1
                                w = Math.Pow(x1, 2) + Math.Pow(x2, 2)
                            Loop Until w < 1

                            w = Math.Sqrt((-2 * Math.Log(w)) / w)
                            y1 = x1 * w
                            y2 = x2 * w

                            Choose = RandomGenerator.NextDouble()
                            If Choose < 0.5 Then
                                Target_Depth = y1 * (std_dev) + (mean)  'Target Depth is in meters
                            Else
                                Target_Depth = y2 * (std_dev) + (mean)
                            End If

                            Target_Depth = Math.Exp(Target_Depth)   'this is because the std_dev and mean are from normal distributions but I'm trying to sample from a log normal distribution, hence the exp()
                            Target_Depth = Target_Depth / 39.37
                            If Target_Depth <= 0 Then GoTo 400 'Label 400 just a few lines up
                            If Target_Depth > 20 Then GoTo 400

                            Try
                                If (dv.Item(i)(3) * Target_Depth) < Pumped_Amt Or _
                                    dv.Item(i + 1)(6) = 0 Then
                                    whaaa = dv.Item(i + 1)(6)
                                    IsVolAvail = True
                                    'area = dv.Item(i + 1)(3)
                                Else
                                    IsVolAvail = False
                                End If
                            Catch ex As Exception
                                IsVolAvail = True
                            End Try
                            Try
                                If (dv.Item(i + 1)(3) * Target_Depth) < (Tract_Amt - (dv.Item(i)(3) * Target_Depth)) And _
                                    Not (dv.Item(i + 1)(6) = 0) Then
                                    IsRemainVolGood = True
                                Else
                                    IsRemainVolGood = False
                                End If
                            Catch ex As Exception
                                IsRemainVolGood = False
                            End Try

                            If HighLowArray(i) = 1 And Pumped_Amt > 0 And IsVolAvail And Not IsRemainVolGood Then
                                'TableOfFieldsWithWaterAllocRow = TableOfFieldsWithWaterAlloc.NewRow()
                                TempWaterAllocTableRow = TempWaterAllocTable.NewRow()
                                'TableOfFieldsWithWaterAllocRow("Tract") = dv.Item(i)(0)
                                TempWaterAllocTableRow("Tract") = dv.Item(i)(0)
                                'TableOfFieldsWithWaterAllocRow("Field_No") = dv.Item(i)(2)
                                TempWaterAllocTableRow("Field_No") = dv.Item(i)(2)
                                TempWaterAllocTableRow("Area") = dv.Item(i)(3)
                                'TableOfFieldsWithWaterAllocRow("Date_") = CurrentDate
                                TempWaterAllocTableRow("Date_") = CurrentDate
                                'TableOfFieldsWithWaterAllocRow("Precip_Amt") = dv.Item(i)(9)
                                TempWaterAllocTableRow("Precip_Amt") = dv.Item(i)(9)
                                'TableOfFieldsWithWaterAllocRow("ETc") = dv.Item(i)(10)
                                TempWaterAllocTableRow("ETc") = dv.Item(i)(10)
                                'TableOfFieldsWithWaterAllocRow("Zr") = dv.Item(i)(11)
                                TempWaterAllocTableRow("Zr") = dv.Item(i)(11)

                                RanNum1 = RandomGenerator.NextDouble()
                                Runoff_Fraction = (-1 * Math.Log(RanNum1)) / (1 / lambda)
                                'TableOfFieldsWithWaterAllocRow("SurfWatDelivered") = 0
                                TempWaterAllocTableRow("SurfWatDelivered") = 0
                                'TableOfFieldsWithWaterAllocRow("PumpWatDelivered") = (Pumped_Amt / dv.Item(i)(3)) * 1000
                                TempWaterAllocTableRow("PumpWatDelivered") = (Pumped_Amt / dv.Item(i)(3)) * 1000
                                'TableOfFieldsWithWaterAllocRow("Runoff_Amt") = (((Pumped_Amt / dv.Item(i)(3)) * 1000) + dv.Item(i)(9)) * Runoff_Fraction
                                TempWaterAllocTableRow("Runoff_Amt") = (((Pumped_Amt / dv.Item(i)(3)) * 1000) + dv.Item(i)(9)) * Runoff_Fraction
                                RanNum1 = RandomGenerator.NextDouble()
                                RanNum2 = RandomGenerator.NextDouble()
                                While Not (RanNum1 <= 0.8 And RanNum2 <= 1 - 1.25 * RanNum1)
                                    RanNum1 = RandomGenerator.NextDouble()
                                    RanNum2 = RandomGenerator.NextDouble()
                                End While
                                'TableOfFieldsWithWaterAllocRow("DeepPerc_Amt") = (((Pumped_Amt / dv.Item(i)(3)) * 1000) + dv.Item(i)(9)) * (1 - Runoff_Fraction) * RanNum1
                                TempWaterAllocTableRow("DeepPerc_Amt") = (((Pumped_Amt / dv.Item(i)(3)) * 1000) + dv.Item(i)(9)) * (1 - Runoff_Fraction) * RanNum1
                                'TableOfFieldsWithWaterAllocRow("TAW") = dv.Item(i)(7)
                                TempWaterAllocTableRow("TAW") = dv.Item(i)(7)
                                'TableOfFieldsWithWaterAllocRow("RAW") = dv.Item(i)(8)
                                TempWaterAllocTableRow("RAW") = dv.Item(i)(8)
                                Pumped_Amt = Pumped_Amt - Pumped_Amt
                            ElseIf IsVolAvail And IsRemainVolGood Then
                                'TableOfFieldsWithWaterAllocRow = TableOfFieldsWithWaterAlloc.NewRow()
                                TempWaterAllocTableRow = TempWaterAllocTable.NewRow()
                                'TableOfFieldsWithWaterAllocRow("Tract") = dv.Item(i)(0)
                                TempWaterAllocTableRow("Tract") = dv.Item(i)(0)
                                'TableOfFieldsWithWaterAllocRow("Field_No") = dv.Item(i)(2)
                                TempWaterAllocTableRow("Field_No") = dv.Item(i)(2)
                                TempWaterAllocTableRow("Area") = dv.Item(i)(3)
                                'TableOfFieldsWithWaterAllocRow("Date_") = CurrentDate
                                TempWaterAllocTableRow("Date_") = CurrentDate
                                'TableOfFieldsWithWaterAllocRow("Precip_Amt") = dv.Item(i)(9)
                                TempWaterAllocTableRow("Precip_Amt") = dv.Item(i)(9)
                                'TableOfFieldsWithWaterAllocRow("ETc") = dv.Item(i)(10)
                                TempWaterAllocTableRow("ETc") = dv.Item(i)(10)
                                'TableOfFieldsWithWaterAllocRow("Zr") = dv.Item(i)(11)
                                TempWaterAllocTableRow("Zr") = dv.Item(i)(11)

                                RanNum1 = RandomGenerator.NextDouble()
                                Runoff_Fraction = (-1 * Math.Log(RanNum1)) / (1 / lambda)
                                'TableOfFieldsWithWaterAllocRow("SurfWatDelivered") = 0
                                TempWaterAllocTableRow("SurfWatDelivered") = 0
                                'TableOfFieldsWithWaterAllocRow("PumpWatDelivered") = (Pumped_Amt / dv.Item(i)(3)) * 1000
                                TempWaterAllocTableRow("PumpWatDelivered") = Target_Depth * 1000
                                'TableOfFieldsWithWaterAllocRow("Runoff_Amt") = (((Pumped_Amt / dv.Item(i)(3)) * 1000) + dv.Item(i)(9)) * Runoff_Fraction
                                TempWaterAllocTableRow("Runoff_Amt") = ((Target_Depth * 1000) + dv.Item(i)(9)) * Runoff_Fraction
                                RanNum1 = RandomGenerator.NextDouble()
                                RanNum2 = RandomGenerator.NextDouble()
                                While Not (RanNum1 <= 0.8 And RanNum2 <= 1 - 1.25 * RanNum1)
                                    RanNum1 = RandomGenerator.NextDouble()
                                    RanNum2 = RandomGenerator.NextDouble()
                                End While
                                'TableOfFieldsWithWaterAllocRow("DeepPerc_Amt") = (((Pumped_Amt / dv.Item(i)(3)) * 1000) + dv.Item(i)(9)) * (1 - Runoff_Fraction) * RanNum1
                                TempWaterAllocTableRow("DeepPerc_Amt") = ((Target_Depth * 1000) + dv.Item(i)(9)) * (1 - Runoff_Fraction) * RanNum1
                                'TableOfFieldsWithWaterAllocRow("TAW") = dv.Item(i)(7)
                                TempWaterAllocTableRow("TAW") = dv.Item(i)(7)
                                'TableOfFieldsWithWaterAllocRow("RAW") = dv.Item(i)(8)
                                TempWaterAllocTableRow("RAW") = dv.Item(i)(8)
                                Pumped_Amt = Pumped_Amt - (Target_Depth * 1000) * dv.Item(i)(3)
                            Else
                                'TableOfFieldsWithWaterAllocRow = TableOfFieldsWithWaterAlloc.NewRow()
                                TempWaterAllocTableRow = TempWaterAllocTable.NewRow()
                                'TableOfFieldsWithWaterAllocRow("Tract") = dv.Item(i)(0)
                                TempWaterAllocTableRow("Tract") = dv.Item(i)(0)
                                'TableOfFieldsWithWaterAllocRow("Field_No") = dv.Item(i)(2)
                                TempWaterAllocTableRow("Field_No") = dv.Item(i)(2)
                                TempWaterAllocTableRow("Area") = dv.Item(i)(3)
                                'TableOfFieldsWithWaterAllocRow("Date_") = CurrentDate
                                TempWaterAllocTableRow("Date_") = CurrentDate
                                'TableOfFieldsWithWaterAllocRow("Precip_Amt") = dv.Item(i)(9)
                                TempWaterAllocTableRow("Precip_Amt") = dv.Item(i)(9)
                                'TableOfFieldsWithWaterAllocRow("ETc") = dv.Item(i)(10)
                                TempWaterAllocTableRow("ETc") = dv.Item(i)(10)
                                'TableOfFieldsWithWaterAllocRow("Zr") = dv.Item(i)(11)
                                TempWaterAllocTableRow("Zr") = dv.Item(i)(11)

                                RanNum1 = RandomGenerator.NextDouble()
                                Runoff_Fraction = (-1 * Math.Log(RanNum1)) / (1 / lambda)
                                'TableOfFieldsWithWaterAllocRow("SurfWatDelivered") = 0
                                TempWaterAllocTableRow("SurfWatDelivered") = 0
                                'TableOfFieldsWithWaterAllocRow("PumpWatDelivered") = 0
                                TempWaterAllocTableRow("PumpWatDelivered") = 0
                                If dv.Item(i)(9) <= 50 Then
                                    'TableOfFieldsWithWaterAllocRow("Runoff_Amt") = dv.Item(i)(9) * 0.3
                                    TempWaterAllocTableRow("Runoff_Amt") = dv.Item(i)(9) * 0.3
                                    'The runoff from precip should be based solely upon soil capacity
                                    'TableOfFieldsWithWaterAllocRow("DeepPerc_Amt") = 0
                                    TempWaterAllocTableRow("DeepPerc_Amt") = 0
                                ElseIf dv.Item(i)(9) > 50 Then
                                    'TableOfFieldsWithWaterAllocRow("Runoff_Amt") = dv.Item(i)(9) * 0.5
                                    TempWaterAllocTableRow("Runoff_Amt") = dv.Item(i)(9) * 0.5
                                    'The runoff from precip should be based solely upon soil capacity
                                    'TableOfFieldsWithWaterAllocRow("DeepPerc_Amt") = 0
                                    TempWaterAllocTableRow("DeepPerc_Amt") = 0
                                End If
                                'TableOfFieldsWithWaterAllocRow("TAW") = dv.Item(i)(7)
                                TempWaterAllocTableRow("TAW") = dv.Item(i)(7)
                                'TableOfFieldsWithWaterAllocRow("RAW") = dv.Item(i)(8)
                                TempWaterAllocTableRow("RAW") = dv.Item(i)(8)
                            End If
                            'TableOfFieldsWithWaterAlloc.Rows.Add(TableOfFieldsWithWaterAllocRow)
                            TempWaterAllocTable.Rows.Add(TempWaterAllocTableRow)
                        Next i
                        If Pumped_Amt > 0 Then
                            'I need to fix the reasons for getting this error
                            'MsgBox("Error! Not all pumped water allocated while no surface water to allocate", MsgBoxStyle.Critical)
                        End If
                    Else
                        'code should land here in the event only a small amount of pumped water is available
                        'allocate what water is available (both surface and pumped water) to the smallest field\

                        For i = 0 To ct - 1
                            If dv.Item(i)(3) < SmallFld Then
                                Array.Clear(SmallestField, 0, 30)
                                SmallFld = dv.Item(i)(3)
                                SmallestField(i) = True
                            End If
                        Next i

                        For i = 0 To ct - 1
                            'TableOfFieldsWithWaterAllocRow = TableOfFieldsWithWaterAlloc.NewRow()
                            TempWaterAllocTableRow = TempWaterAllocTable.NewRow()
                            'TableOfFieldsWithWaterAllocRow("Tract") = dv.Item(i)(0)
                            TempWaterAllocTableRow("Tract") = dv.Item(i)(0)
                            'TableOfFieldsWithWaterAllocRow("Field_No") = dv.Item(i)(2)
                            TempWaterAllocTableRow("Field_No") = dv.Item(i)(2)
                            TempWaterAllocTableRow("Area") = dv.Item(i)(3)
                            'TableOfFieldsWithWaterAllocRow("Date_") = CurrentDate
                            TempWaterAllocTableRow("Date_") = CurrentDate
                            'TableOfFieldsWithWaterAllocRow("Precip_Amt") = dv.Item(i)(9)
                            TempWaterAllocTableRow("Precip_Amt") = dv.Item(i)(9)
                            'TableOfFieldsWithWaterAllocRow("ETc") = dv.Item(i)(10)
                            TempWaterAllocTableRow("ETc") = dv.Item(i)(10)
                            'TableOfFieldsWithWaterAllocRow("Zr") = dv.Item(i)(11)
                            TempWaterAllocTableRow("Zr") = dv.Item(i)(11)

                            RanNum1 = RandomGenerator.NextDouble()
                            Runoff_Fraction = (-1 * Math.Log(RanNum1)) / (1 / lambda)

                            If SmallestField(i) Then
                                'TableOfFieldsWithWaterAllocRow("SurfWatDelivered") = (Tract_Amt / dv.Item(i)(3)) * 1000
                                TempWaterAllocTableRow("SurfWatDelivered") = (Tract_Amt / dv.Item(i)(3)) * 1000
                                'TableOfFieldsWithWaterAllocRow("PumpWatDelivered") = (Pumped_Amt / dv.Item(i)(3)) * 1000
                                TempWaterAllocTableRow("PumpWatDelivered") = (Pumped_Amt / dv.Item(i)(3)) * 1000
                                'TableOfFieldsWithWaterAllocRow("Runoff_Amt") = (((Tract_Amt / dv.Item(i)(3)) * 1000) + ((Pumped_Amt / dv.Item(i)(3)) * 1000) + dv.Item(i)(9)) * Runoff_Fraction
                                TempWaterAllocTableRow("Runoff_Amt") = (((Tract_Amt / dv.Item(i)(3)) * 1000) + ((Pumped_Amt / dv.Item(i)(3)) * 1000) + dv.Item(i)(9)) * Runoff_Fraction
                                RanNum1 = RandomGenerator.NextDouble()
                                RanNum2 = RandomGenerator.NextDouble()
                                While Not (RanNum1 <= 0.8 And RanNum2 <= 1 - 1.25 * RanNum1)
                                    RanNum1 = RandomGenerator.NextDouble()
                                    RanNum2 = RandomGenerator.NextDouble()
                                End While
                                'TableOfFieldsWithWaterAllocRow("DeepPerc_Amt") = (((Tract_Amt / dv.Item(i)(3)) * 1000) + ((Pumped_Amt / dv.Item(i)(3)) * 1000) + dv.Item(i)(9)) * (1 - Runoff_Fraction) * RanNum1
                                TempWaterAllocTableRow("DeepPerc_Amt") = (((Tract_Amt / dv.Item(i)(3)) * 1000) + ((Pumped_Amt / dv.Item(i)(3)) * 1000) + dv.Item(i)(9)) * (1 - Runoff_Fraction) * RanNum1
                                Tract_Amt = Tract_Amt - Tract_Amt
                                Pumped_Amt = Pumped_Amt - Pumped_Amt
                            Else
                                'TableOfFieldsWithWaterAllocRow("SurfWatDelivered") = 0
                                TempWaterAllocTableRow("SurfWatDelivered") = 0
                                'TableOfFieldsWithWaterAllocRow("PumpWatDelivered") = 0
                                TempWaterAllocTableRow("PumpWatDelivered") = 0
                                If dv.Item(i)(9) <= 50 Then
                                    'TableOfFieldsWithWaterAllocRow("Runoff_Amt") = dv.Item(i)(9) * 0.3
                                    TempWaterAllocTableRow("Runoff_Amt") = dv.Item(i)(9) * 0.3
                                    'The runoff from precip should be based solely upon soil capacity
                                    'TableOfFieldsWithWaterAllocRow("DeepPerc_Amt") = 0
                                    TempWaterAllocTableRow("DeepPerc_Amt") = 0
                                ElseIf dv.Item(i)(9) > 50 Then
                                    'TableOfFieldsWithWaterAllocRow("Runoff_Amt") = dv.Item(i)(9) * 0.5
                                    TempWaterAllocTableRow("Runoff_Amt") = dv.Item(i)(9) * 0.5
                                    'The runoff from precip should be based solely upon soil capacity
                                    'TableOfFieldsWithWaterAllocRow("DeepPerc_Amt") = 0
                                    TempWaterAllocTableRow("DeepPerc_Amt") = 0
                                End If
                            End If
                            'TableOfFieldsWithWaterAllocRow("TAW") = dv.Item(i)(7)
                            TempWaterAllocTableRow("TAW") = dv.Item(i)(7)
                            'TableOfFieldsWithWaterAllocRow("RAW") = dv.Item(i)(8)
                            TempWaterAllocTableRow("RAW") = dv.Item(i)(8)
                            'TableOfFieldsWithWaterAlloc.Rows.Add(TableOfFieldsWithWaterAllocRow)
                            TempWaterAllocTable.Rows.Add(TempWaterAllocTableRow)
                        Next i
                    End If
            End Select

            'This code added on 10-24-2008 because I am still getting some water allocations that are huge
            'I can't have this because it causes the UZF package to be unstable, therefore I'm going to add
            'some quick code that should resolve the issue, but isn't necessarily a good way to do it and 
            'may need revision in the future.

            'AllocationInExceedanceOfMax = CheckAndAdjustHighValuesIfNecessary(TempWaterAllocTable)
            If AllocationInExceedanceOfMax = True Then GoTo 50

            'Need to dump 'TempWaterAllocTable' into 'TableOfFieldsWithWaterAlloc'
            For i = 0 To TempWaterAllocTable.Rows.Count() - 1
                TempWaterAllocTableRow2 = TableOfFieldsWithWaterAlloc.NewRow()
                TempWaterAllocTableRow2(0) = TempWaterAllocTable.Rows(i)(0)
                TempWaterAllocTableRow2(1) = TempWaterAllocTable.Rows(i)(1)
                TempWaterAllocTableRow2(2) = TempWaterAllocTable.Rows(i)(2)
                TempWaterAllocTableRow2(3) = TempWaterAllocTable.Rows(i)(3)
                TempWaterAllocTableRow2(4) = TempWaterAllocTable.Rows(i)(4)
                TempWaterAllocTableRow2(5) = TempWaterAllocTable.Rows(i)(5)
                TempWaterAllocTableRow2(6) = TempWaterAllocTable.Rows(i)(6)
                TempWaterAllocTableRow2(7) = TempWaterAllocTable.Rows(i)(7)
                TempWaterAllocTableRow2(8) = TempWaterAllocTable.Rows(i)(8)
                TempWaterAllocTableRow2(9) = TempWaterAllocTable.Rows(i)(9)
                TempWaterAllocTableRow2(10) = TempWaterAllocTable.Rows(i)(10)
                TempWaterAllocTableRow2(11) = TempWaterAllocTable.Rows(i)(11)
                TempWaterAllocTableRow2(12) = TempWaterAllocTable.Rows(i)("Area")
                TableOfFieldsWithWaterAlloc.Rows.Add(TempWaterAllocTableRow2)
            Next i

            'Clear the datatable that is about to be reused
            TractInformation.Tables(1).Clear()
            TempWaterAllocTable.Clear()
        End While

        'Rename the table to store (with a unique name based on the date) this time step's water allocation results
        Dim DateString As String
        DateString = QueryDateString(CurrentDate)
        TableOfFieldsWithWaterAlloc.TableName() = "WaterAllocation" & DateString

        Dim DataDump As MyDBUtils
        If Upstream_or_not1 Then
            DataDump = New MyDBUtils(myPath & "Arkansas River Valley\Entire_Basin\GIS\RegionalModelOutput.mdb")
        Else
            DataDump = New MyDBUtils(myPath & "Arkansas River Valley\Downstream\GIS\RegionalModelOutput_DS.mdb")
        End If
        Try
            DataDump.DeleteExistingTables(TableOfFieldsWithWaterAlloc.TableName())
        Catch ex As Exception
            MsgBox(ex.message)
        End Try

        DataDump.CreateTableInDB(TableOfFieldsWithWaterAlloc)
        DataDump.InsertValuesInDBTable(TableOfFieldsWithWaterAlloc)

        connToAVDb.Close()
        connToAVDb_Copy.Close()
        sw_bug.Close()

        'TableOfFieldsWithWaterAlloc.Dispose()

    End Function
    Public Function FinalizeWaterAllocation4_OLD(ByVal connToAVDb As System.Data.OleDb.OleDbConnection, ByVal connToAVDb_Copy As System.Data.OleDb.OleDbConnection, _
                                             ByRef WaterAllocationBufferTable As DataSet, ByVal CurrentDate As Date, ByVal Canal1DivertedAmt_m3perWk As Single, _
                                             ByVal Canal2DivertedAmt_m3perWk As Single, ByVal Canal3DivertedAmt_m3perWk As Single, ByVal Canal4DivertedAmt_m3perWk As Single, _
                                             ByVal Canal5DivertedAmt_m3perWk As Single, ByVal Canal6DivertedAmt_m3perWk As Single, ByVal ActiveWells() As Object, _
                                             ByVal QueriedDate() As Object, ByVal MonthlyPumpedAcreFt() As Object, ByVal connToOutputDb As System.Data.OleDb.OleDbConnection, _
                                             ByVal SQL_inserter As MySQLUtils, ByRef sw_leftoverH2O As StreamWriter)
        '1-14-09: I have found what appears to be mass balance errors in FinalizeWaterAllocation3.
        'Therefore, I going to try and write another version of the allocation algorithm.
        'My goal is to make it short and sweet.  I'm going to try and eliminate the "tract_area" 
        'component from the allocation.  In other words, diverted water will be distributed to fields 
        'within the command area and tract delineation will have no bearing upon how this goes.

        'This code was retired by John Cox when he extended the DSR MODFLOW Model. If you are going to make BMPs / the 292 SP model, or the USR Model, Use this one.

        Dim TableOfFieldsWithWaterAlloc As DataTable = New DataTable
        TableOfFieldsWithWaterAlloc = BuildDataTable(TableOfFieldsWithWaterAlloc)
        'Columns in this table are:
        'Tract | Field_No | Date_ | Precip_Amt | ETc | Zr | SurfWatDelivered | PumpWatDelivered | Runoff_Amt | DeepPerc_Amt | TAW | RAW | Area

        Dim TableOfFieldsWithWaterAllocRow As DataRow

        'Keep in mind connToAVDb has been passed in as either upstream or downstream
        connToAVDb.Open()
        connToAVDb_Copy.Open()

        Dim TS As Integer
        Dim ct As Integer
        Dim ct_2 As Integer
        Dim i As Integer
        Dim j As Integer
        Dim k As Integer
        Dim n As Integer
        Dim Target_Depth As Single
        Dim QueryString As String
        Dim QueryString2 As String
        Dim Tract As Integer
        Dim RandomGenerator As Random
        RandomGenerator = New Random
        Dim RanNum1 As Single
        Dim Canal As String
        Dim Areas_Table As DataTable
        Dim TimingCodeActive() As Integer = {1, 0, 0}
        Dim Canal_Area() As DataRow
        Dim Total_Area As Single
        Dim Within_Area As Single
        Dim Diverted_Amt As Single
        Dim NonSeeped_Amt As Single
        Dim ModeledCommandArea_Amt As Single
        Dim Runoff_Fraction As Single
        Dim lambda As Single = 0.084
        Dim NumOfDaysLeftInCurrentMonth As Integer
        Dim NumOfTotalDaysInCurrentMonth As Integer
        Dim NumOfDaysInNextMonth As Integer
        Dim NumOfTotalDaysInNextMonth As Integer
        Dim FieldsTable As DataTable
        Dim FieldsByCanal() As DataRow
        Dim m_col As DataColumn
        Dim PumpFields As DataTable
        Dim choose_fld As Double
        Dim check_depth As Single
        Dim check_area As Single
        Dim Select_Canal As String
        Dim stuck_in_loop As Integer
        Dim stuck_in_loop2 As Integer
        Dim DateStr As String
        Dim Prec_holdover As Single
        Dim ET_holdover As Single
        Dim Zr_holdover As Single
        Dim cumulative_ActiveArea As Single
        Dim additional_depth As Single

        'This following string should work just fine for both upstream and downstream situations.
        QueryString2 = "SELECT CommandAreaAcreage_wNumTracts.* "
        QueryString2 += "FROM CommandAreaAcreage_wNumTracts;"
        Areas_Table = GetTableFromDB(QueryString2, "CommandAreaAcreage_wNumTracts", connToAVDb)

        'The following bit of code determines which Timing codes to include in the subsequent query
        TS = CurrentTS(CurrentDate)
        If TS Mod 2 = 1 Then
            TimingCodeActive(1) = 3
        Else
            TimingCodeActive(1) = 2
        End If
        If ((TS + 4) Mod 4) = 1 Then
            TimingCodeActive(2) = 4
        ElseIf ((TS + 4) Mod 4) = 2 Then
            TimingCodeActive(2) = 5
        ElseIf ((TS + 4) Mod 4) = 3 Then
            TimingCodeActive(2) = 6
        ElseIf ((TS + 4) Mod 4) = 0 Then
            TimingCodeActive(2) = 7
        End If

        'this query will need to be also be adapted for the downstream and '02 & '03 in the upstream
        If Me.Upstream_or_not1 = True Then
            If CurrentDate < #1/1/2002# Or CurrentDate > #12/31/2003# Then
                QueryString = "SELECT Combined.FIELD_NO, fields_99.TRACT, Combined.CANAL, Combined.CROPS" & Right(CStr(CurrentDate), 2) & ", Combined.IRRIG_TIME_CODE" & Right(CStr(CurrentDate), 2) & ", Combined.Shape_Area "
                QueryString += "FROM Combined INNER JOIN fields_99 ON Combined.FIELD_NO = fields_99.FIELD_NUMB "
                QueryString += "WHERE Combined.PHIL_FLD = 1;"
            Else
                QueryString = "SELECT Combined.FIELD_NO, DWR_USFlds.TRACT, Combined.CANAL, Combined.CROPS" & Right(CStr(CurrentDate), 2) & ", Combined.IRRIG_TIME_CODE" & Right(CStr(CurrentDate), 2) & ", Combined.Shape_Area "
                QueryString += "FROM Combined INNER JOIN DWR_USFlds ON Combined.FIELD_NO = DWR_USFlds.GEOLOC "
                QueryString += "WHERE Combined.PHIL_FLD = 0;"
            End If
        Else
            If CurrentDate > #12/31/2003# Then
                QueryString = "SELECT Combined_DS.FIELD_NO, fields_04.TRACT, Combined_DS.CANAL, Combined_DS.CROPS" & Right(CStr(CurrentDate), 2) & ", Combined_DS.IRRIG_TIME_CODE" & Right(CStr(CurrentDate), 2) & ", Combined_DS.Shape_Area "
                QueryString += "FROM Combined_DS INNER JOIN fields_04 ON Combined_DS.FIELD_NO = fields_04.FIELD_NUMB "
                QueryString += "WHERE((Combined_DS.Eric_FLD) = 1)"
            Else
                QueryString = "SELECT Combined_DS.FIELD_NO, DWR_BasinFields_DS.TRACT, Combined_DS.CANAL, Combined_DS.CROPS" & Right(CStr(CurrentDate), 2) & ", Combined_DS.IRRIG_TIME_CODE" & Right(CStr(CurrentDate), 2) & ", Combined_DS.Shape_Area "
                QueryString += "FROM Combined_DS INNER JOIN DWR_BasinFields_DS ON Combined_DS.FIELD_NO = DWR_BasinFields_DS.GEOLOC "
                QueryString += "WHERE (((Combined_DS.Eric_Fld)=0));"
            End If
        End If
        'add a new column to the table that will be filled with semi-random values
        'that will be used for selecting fields to irrigate.
        'The columns are: FIELD_NO | TRACT | CANAL | CROPSxx | IRRIG_TIME_CODExx | Shape_Area | SortByValue
        FieldsTable = GetTableFromDB(QueryString, "All_Flds", connToAVDb)
        m_col = New DataColumn
        With m_col
            .ColumnName = "SortByValue"
            .DataType = GetType(System.Double)
        End With
        FieldsTable.Columns.Add(m_col)
        'Next, fill the column that was just added.
        For i = 1 To FieldsTable.Rows.Count()
            RanNum1 = RandomGenerator.NextDouble()
            FieldsTable.Rows(i - 1)("SortByValue") = CSng(FieldsTable.Rows(i - 1)("IRRIG_TIME_CODE" & Right(CStr(CurrentDate), 2))) + RanNum1
        Next i

        'Deal with all of the pumped water before allocating the surface water.
        i = 0
        Dim pump_wTract As DataTable = New DataTable("pump_wTract")
        m_col = New DataColumn
        With m_col
            .ColumnName = "Tract"
            .DataType = GetType(System.Int32)
        End With
        pump_wTract.Columns.Add(m_col)
        m_col = New DataColumn
        With m_col
            .ColumnName = "PumpedAmt"
            .DataType = GetType(System.Single)
        End With
        pump_wTract.Columns.Add(m_col)

        'because the pumped amounts are stored by well I need to sum up all the pumped
        'amount for a given tract number for later use.
        Dim temp_table As DataTable
        Dim pump_wTract_rows() As DataRow
        Dim entryRow As DataRow
        i = 0
        'calculate some variables need to correct the monthly pumped amount for the week's amount
        NumOfDaysLeftInCurrentMonth = CalculateNumOfDaysLeftInCurrTS(CurrentDate)
        NumOfDaysInNextMonth = 7 - NumOfDaysLeftInCurrentMonth
        NumOfTotalDaysInCurrentMonth = CurrentDate.DaysInMonth(Year(CurrentDate), Month(CurrentDate))
        NumOfTotalDaysInNextMonth = CurrentDate.DaysInMonth(Year(CurrentDate.AddDays(7)), Month(CurrentDate.AddDays(7)))

        'Store the precip, ET, and Zr data in memory
        Dim Prec_table As DataTable
        Dim ET_table As DataTable
        Dim Zr_table As DataTable
        DateStr = QueryDateString(CurrentDate)
        QueryString = "SELECT Field_No, Prec" & DateStr & " FROM Prec_Coll_Table"
        Prec_table = SQL_inserter.GetTableFromDB(QueryString, "Prec_table")
        QueryString = "SELECT Field_No, ETc" & DateStr & " FROM ET_Coll_Table"
        ET_table = SQL_inserter.GetTableFromDB(QueryString, "ET_table")
        QueryString = "SELECT Field_No, Zr" & DateStr & " FROM Zr_Coll_Table"
        Zr_table = SQL_inserter.GetTableFromDB(QueryString, "Zr_table")

        While Not ActiveWells(TS)(i) = 0
            'find the amount of pumped water in the current well in the next time step
            'incase the current time step is in two different months
            ct_2 = 0
            Try
                While Not (ActiveWells(TS + 1)(ct_2) = ActiveWells(TS)(i) Or ActiveWells(TS + 1)(ct_2) = 0)
                    ct_2 += 1
                End While
            Catch ex As Exception
            End Try

            'The next query should work in either database
            QueryString = "SELECT Wells_wTractNum.IDENT, Wells_wTractNum.TRACT, Wells_wTractNum.USE "
            QueryString += "FROM Wells_wTractNum "
            QueryString += "WHERE (Wells_wTractNum.IDENT=""" & CStr(ActiveWells(TS)(i)) & """);"
            temp_table = GetTableFromDB(QueryString, "pump_wTract", connToAVDb)

            'check to see if the queried well already has an existing tract in the final holding table.
            'also check to make that use = "I" (irrigation)
            pump_wTract_rows = pump_wTract.Select("Tract = " & temp_table.Rows(0)("TRACT"))
            If pump_wTract_rows.Length() = 0 And temp_table.Rows(0)("USE") = "I" Then
                entryRow = pump_wTract.NewRow()
                entryRow(0) = temp_table.Rows(0)(1)
                Try
                    entryRow(1) = ((MonthlyPumpedAcreFt(TS)(i) * 1233.48677) * NumOfDaysLeftInCurrentMonth / NumOfTotalDaysInCurrentMonth) + ((MonthlyPumpedAcreFt(TS + 1)(ct_2) * 1233.48677) * NumOfDaysInNextMonth / NumOfTotalDaysInNextMonth)
                Catch ex As Exception
                    entryRow(1) = ((MonthlyPumpedAcreFt(TS)(i) * 1233.48677) * NumOfDaysLeftInCurrentMonth / NumOfTotalDaysInCurrentMonth)
                End Try
                pump_wTract.Rows.Add(entryRow)
            ElseIf pump_wTract_rows.Length() > 0 And temp_table.Rows(0)("USE") = "I" Then 'code should land here if a well with the current tract number has already been entered.
                j = 0
                While Not pump_wTract.Rows(j)(0) = temp_table.Rows(0)("TRACT")
                    j += 1
                End While

                Try
                    pump_wTract.Rows(j)(1) = pump_wTract.Rows(j)(1) + ((MonthlyPumpedAcreFt(TS)(i) * 1233.48677) * NumOfDaysLeftInCurrentMonth / NumOfTotalDaysInCurrentMonth) + ((MonthlyPumpedAcreFt(TS + 1)(ct_2) * 1233.48677) * NumOfDaysInNextMonth / NumOfTotalDaysInNextMonth)
                Catch ex As Exception
                    pump_wTract.Rows(j)(1) = pump_wTract.Rows(j)(1) + ((MonthlyPumpedAcreFt(TS)(i) * 1233.48677) * NumOfDaysLeftInCurrentMonth / NumOfTotalDaysInCurrentMonth)
                End Try
            End If
            i += 1
        End While

        'allocate the pumped water, do it track by track
        For i = 1 To pump_wTract.Rows.Count()
            Tract = pump_wTract.Rows(i - 1)(0)
            'The columns in the following query are: TRACT | FIELD_NUMB | Shape_Area
            'the # of rows in the query will = the # fields in that tract
            'The query depends on the time and region
            If Me.Upstream_or_not1 = True Then
                If CurrentDate < #1/1/2002# Or CurrentDate > #12/31/2003# Then
                    QueryString = "SELECT fields_99.TRACT, fields_99.FIELD_NUMB, Combined.Shape_Area "
                    QueryString += "FROM fields_99 INNER JOIN Combined ON fields_99.FIELD_NUMB = Combined.FIELD_NO "
                    QueryString += "WHERE fields_99.TRACT = " & CStr(Tract) & ";"
                Else
                    QueryString = "SELECT DWR_USFlds.TRACT, Combined.FIELD_NO AS FIELD_NUMB, Combined.Shape_Area "
                    QueryString += "FROM Combined INNER JOIN DWR_USFlds ON Combined.FIELD_NO = DWR_USFlds.GEOLOC "
                    QueryString += "WHERE DWR_USFlds.TRACT = " & CStr(Tract) & ";"
                End If
            Else
                If CurrentDate > #12/31/2003# Then
                    QueryString = "SELECT fields_04.Tract, fields_04.FIELD_NUMB, Combined_DS.Shape_Area "
                    QueryString += "FROM Combined_DS INNER JOIN fields_04 ON Combined_DS.FIELD_NO = fields_04.FIELD_NUMB "
                    QueryString += "WHERE fields_04.Tract = " & CStr(Tract) & ";"
                Else
                    QueryString = "SELECT DWR_BasinFields_DS.TRACT, Combined_DS.FIELD_NO AS FIELD_NUMB, Combined_DS.Shape_Area "
                    QueryString += "FROM Combined_DS INNER JOIN DWR_BasinFields_DS ON Combined_DS.FIELD_NO = DWR_BasinFields_DS.GEOLOC "
                    QueryString += "WHERE DWR_BasinFields_DS.TRACT = " & CStr(Tract) & ";"
                End If
            End If

            PumpFields = GetTableFromDB(QueryString, "pump_withAssoc_fields", connToAVDb)
            'if PumpFields.length equals zero then either all the wells have a use other than
            '"I" (Irrigation) or no associated fields, skip it
            If PumpFields.Rows.Count() = 0 Then GoTo 45

            'as a quick check, see if the collective area of all fields for the Tract in question
            'can accept the total pumped volume at a depth less than specified.
            check_area = 0
            For j = 1 To PumpFields.Rows.Count()
                check_area += PumpFields.Rows(j - 1)("Shape_Area")
            Next j
            If pump_wTract.Rows(i - 1)(1) / check_area > 0.2286 Then
                '0.2286 m = 9 in.  If the code lands here need to figure out what to do
                'MsgBox("More pumped water than the entire Tract can reasonable accept")
            End If
            Dim Latent_fld(50) As Integer
            stuck_in_loop = 0
            k = 0
            Do
                'pick a random field to start allocating water to

47:             choose_fld = Math.Floor(RandomGenerator.NextDouble() * PumpFields.Rows.Count())
                For stuck_in_loop = 1 To k
                    stuck_in_loop2 += 1
                    If choose_fld = Latent_fld(stuck_in_loop) Then
                        If stuck_in_loop2 > 50 Then
                            'MsgBox("Stuck in pumping allocation loop, some water may not be allocated")
                            Exit Do
                        End If
                        GoTo 47
                    End If
                Next
                k += 1
                Latent_fld(k) = choose_fld

                'check to see if all the water can be reasonably applied to the randomly selected field
                FieldsByCanal = FieldsTable.Select("FIELD_NO = " & CStr(PumpFields.Rows(choose_fld)("FIELD_NUMB")))
                check_depth = pump_wTract.Rows(i - 1)(1) / FieldsByCanal(0)("Shape_Area")
                If check_depth < 0.3048 Then 'if all pumped water amounts to < 1ft for selected field, alloc all of it, other wise skip to else statement
46:                 TableOfFieldsWithWaterAllocRow = TableOfFieldsWithWaterAlloc.NewRow()
                    TableOfFieldsWithWaterAllocRow("Tract") = FieldsByCanal(0)("TRACT")
                    TableOfFieldsWithWaterAllocRow("Field_No") = FieldsByCanal(0)("FIELD_NO")
                    TableOfFieldsWithWaterAllocRow("Canal") = FieldsByCanal(0)("CANAL")
                    TableOfFieldsWithWaterAllocRow("Area") = FieldsByCanal(0)("Shape_Area")
                    TableOfFieldsWithWaterAllocRow("Date_") = CurrentDate
                    TableOfFieldsWithWaterAllocRow("Precip_Amt") = Prec_table.Select("Field_No = " & CStr(PumpFields.Rows(choose_fld)("FIELD_NUMB"))).GetValue(0)(1)
                    TableOfFieldsWithWaterAllocRow("ETc") = ET_table.Select("Field_No = " & CStr(PumpFields.Rows(choose_fld)("FIELD_NUMB"))).GetValue(0)(1)
                    TableOfFieldsWithWaterAllocRow("Zr") = Zr_table.Select("Field_No = " & CStr(PumpFields.Rows(choose_fld)("FIELD_NUMB"))).GetValue(0)(1)
                    TableOfFieldsWithWaterAllocRow("SurfWatDelivered") = 0
                    TableOfFieldsWithWaterAllocRow("PumpWatDelivered") = pump_wTract.Rows(i - 1)(1) / FieldsByCanal(0)("Shape_Area") * 1000 'convert to mm for the table
                    'If Pump Water Delivered < 5in. then do zero runoff.
                    'see C:\Eric\Arkansas River Valley\Entire_Basin\Application Depth\Justification_For_Simulating_0_Runoff_In_Code_When_Applied_Amt_Less_Than_5in.xls
                    'for support.
                    If pump_wTract.Rows(i - 1)(1) / FieldsByCanal(0)("Shape_Area") + TableOfFieldsWithWaterAllocRow("Precip_Amt") / 1000 < 0.127 Then
                        '0.127 m = 5 in.
                        TableOfFieldsWithWaterAllocRow("Runoff_Amt") = 0
                    Else
                        RanNum1 = RandomGenerator.NextDouble()
                        Runoff_Fraction = (-1 * Math.Log(RanNum1)) / (1 / lambda)
                        TableOfFieldsWithWaterAllocRow("Runoff_Amt") = ((pump_wTract.Rows(i - 1)(1) / FieldsByCanal(0)("Shape_Area") * 1000) + TableOfFieldsWithWaterAllocRow("Precip_Amt")) * Runoff_Fraction
                    End If
                    TableOfFieldsWithWaterAlloc.Rows.Add(TableOfFieldsWithWaterAllocRow)
                    'at this point, the row in the original table should be deleted via
                    'the returned row, but I need to verify how this happens.
                    'the original table is "FieldsTable"
                    FieldsByCanal(0).Delete()
                    'the next for loop was for debug puposes
                    'For j = 1 To FieldsTable.Rows.Count()
                    '    If FieldsTable.Rows(j - 1).RowState() = DataRowState.Deleted Then
                    '        Dim debug_var As String
                    '        debug_var = "Whaaa?"
                    '    End If

                    'Next
                    'the next line is meant to be explicit, the result is of course that all the 
                    'available pumped water was allocated.
                    pump_wTract.Rows(i - 1)(1) = pump_wTract.Rows(i - 1)(1) - pump_wTract.Rows(i - 1)(1)
                Else
                    'call the function that samples a target depth from a log normal distribution
                    Target_Depth = Sample_A_TargetDepth(FieldsByCanal(0)("CROPS" & Right(CStr(CurrentDate), 2)))
                    'if by chance the target depth exceeds 12 in, then I can simply direct the code to
                    'the code in the first part of the if statement.
                    If Target_Depth * FieldsByCanal(0)("Shape_Area") > pump_wTract.Rows(i - 1)(1) Then GoTo 46
                    If MonthlyPumpedAcreFt(TS)(i) > 0 Then
                        TableOfFieldsWithWaterAllocRow = TableOfFieldsWithWaterAlloc.NewRow()
                        TableOfFieldsWithWaterAllocRow("Tract") = FieldsByCanal(0)("TRACT")
                        TableOfFieldsWithWaterAllocRow("Field_No") = FieldsByCanal(0)("FIELD_NO")
                        TableOfFieldsWithWaterAllocRow("Canal") = FieldsByCanal(0)("CANAL")
                        TableOfFieldsWithWaterAllocRow("Area") = FieldsByCanal(0)("Shape_Area")
                        TableOfFieldsWithWaterAllocRow("Date_") = CurrentDate
                        TableOfFieldsWithWaterAllocRow("Precip_Amt") = Prec_table.Select("Field_No = " & CStr(PumpFields.Rows(choose_fld)("FIELD_NUMB"))).GetValue(0)(1)
                        TableOfFieldsWithWaterAllocRow("ETc") = ET_table.Select("Field_No = " & CStr(PumpFields.Rows(choose_fld)("FIELD_NUMB"))).GetValue(0)(1)
                        TableOfFieldsWithWaterAllocRow("Zr") = Zr_table.Select("Field_No = " & CStr(PumpFields.Rows(choose_fld)("FIELD_NUMB"))).GetValue(0)(1)
                        TableOfFieldsWithWaterAllocRow("SurfWatDelivered") = 0
                        TableOfFieldsWithWaterAllocRow("PumpWatDelivered") = Target_Depth * 1000
                        'If Pump Water Delivered < 5in. then do zero runoff.
                        'see C:\Eric\Arkansas River Valley\Entire_Basin\Application Depth\Justification_For_Simulating_0_Runoff_In_Code_When_Applied_Amt_Less_Than_5in.xls
                        'for support.
                        If Target_Depth + TableOfFieldsWithWaterAllocRow("Precip_Amt") / 1000 < 0.127 Then
                            '0.127 m = 5 in.
                            TableOfFieldsWithWaterAllocRow("Runoff_Amt") = 0
                        Else
                            RanNum1 = RandomGenerator.NextDouble()
                            Runoff_Fraction = (-1 * Math.Log(RanNum1)) / (1 / lambda)
                            TableOfFieldsWithWaterAllocRow("Runoff_Amt") = ((Target_Depth * 1000) + TableOfFieldsWithWaterAllocRow("Precip_Amt")) * Runoff_Fraction
                        End If
                        'deduct the allocated amount from the original pumped volume to find remaining volume
                        pump_wTract.Rows(i - 1)(1) = pump_wTract.Rows(i - 1)(1) - (Target_Depth * FieldsByCanal(0)("Shape_Area"))
                        'add the row to the table
                        TableOfFieldsWithWaterAlloc.Rows.Add(TableOfFieldsWithWaterAllocRow)
                        'delete the row and check to see how this is handled in the parent table
                        FieldsByCanal(0).Delete()
                    End If
                End If

            Loop Until pump_wTract.Rows(i - 1)(1) = 0 'this loop will end once all the pumped water has been allocated
45:     Next i

        'Allocation of the surface water begins here
        For i = 1 To 6

            If Upstream_or_not1 Then
                Select Case i
                    Case 1 ' "Catlin Canal"
                        Diverted_Amt = Canal1DivertedAmt_m3perWk
                        Select_Canal = "Catlin Canal"
                    Case 2 '"Fort Lyon Canal US"
                        Diverted_Amt = Canal2DivertedAmt_m3perWk
                        'FieldsByCanal = FieldsTable.Select("CANAL = 'Fort Lyon Canal US' AND (IRRIG_TIME_CODE" & Right(CStr(CurrentDate), 2) & " = " & CStr(TimingCodeActive(0)) & " OR IRRIG_TIME_CODE" & Right(CStr(CurrentDate), 2) & " = " & CStr(TimingCodeActive(1)) & " OR IRRIG_TIME_CODE" & Right(CStr(CurrentDate), 2) & " = " & CStr(TimingCodeActive(2)) & ")", "SortByValue ASC")
                        Select_Canal = "Fort Lyon Canal US"
                    Case 3 '"Holbrook Canal"
                        Diverted_Amt = Canal3DivertedAmt_m3perWk
                        'FieldsByCanal = FieldsTable.Select("CANAL = 'Holbrook Canal' AND (IRRIG_TIME_CODE" & Right(CStr(CurrentDate), 2) & " = " & CStr(TimingCodeActive(0)) & " OR IRRIG_TIME_CODE" & Right(CStr(CurrentDate), 2) & " = " & CStr(TimingCodeActive(1)) & " OR IRRIG_TIME_CODE" & Right(CStr(CurrentDate), 2) & " = " & CStr(TimingCodeActive(2)) & ")", "SortByValue ASC")
                        Select_Canal = "Holbrook Canal"
                    Case 4 '"Otero Canal"
                        Diverted_Amt = Canal4DivertedAmt_m3perWk
                        'FieldsByCanal = FieldsTable.Select("CANAL = 'Otero Canal' AND (IRRIG_TIME_CODE" & Right(CStr(CurrentDate), 2) & " = " & CStr(TimingCodeActive(0)) & " OR IRRIG_TIME_CODE" & Right(CStr(CurrentDate), 2) & " = " & CStr(TimingCodeActive(1)) & " OR IRRIG_TIME_CODE" & Right(CStr(CurrentDate), 2) & " = " & CStr(TimingCodeActive(2)) & ")", "SortByValue ASC")
                        Select_Canal = "Otero Canal"
                    Case 5 '"Rocky Ford Ditch"
                        Diverted_Amt = Canal5DivertedAmt_m3perWk
                        'FieldsByCanal = FieldsTable.Select("CANAL = 'Rocky Ford Ditch' AND (IRRIG_TIME_CODE" & Right(CStr(CurrentDate), 2) & " = " & CStr(TimingCodeActive(0)) & " OR IRRIG_TIME_CODE" & Right(CStr(CurrentDate), 2) & " = " & CStr(TimingCodeActive(1)) & " OR IRRIG_TIME_CODE" & Right(CStr(CurrentDate), 2) & " = " & CStr(TimingCodeActive(2)) & ")", "SortByValue ASC")
                        Select_Canal = "Rocky Ford Ditch"
                    Case 6 '"Rocky Ford Highline"
                        Diverted_Amt = Canal6DivertedAmt_m3perWk
                        'FieldsByCanal = FieldsTable.Select("CANAL = 'Rocky Ford Highline' AND (IRRIG_TIME_CODE" & Right(CStr(CurrentDate), 2) & " = " & CStr(TimingCodeActive(0)) & " OR IRRIG_TIME_CODE" & Right(CStr(CurrentDate), 2) & " = " & CStr(TimingCodeActive(1)) & " OR IRRIG_TIME_CODE" & Right(CStr(CurrentDate), 2) & " = " & CStr(TimingCodeActive(2)) & ")", "SortByValue ASC")
                        Select_Canal = "Rocky Ford Highline"
                    Case Else
                        Diverted_Amt = 0
                End Select
            Else
                Select Case i
                    Case 1 '"Amity Canal"
                        Diverted_Amt = Canal1DivertedAmt_m3perWk
                        'FieldsByCanal = FieldsTable.Select("CANAL = 'Amity Canal' AND (IRRIG_TIME_CODE" & Right(CStr(CurrentDate), 2) & " = " & CStr(TimingCodeActive(0)) & " OR IRRIG_TIME_CODE" & Right(CStr(CurrentDate), 2) & " = " & CStr(TimingCodeActive(1)) & " OR IRRIG_TIME_CODE" & Right(CStr(CurrentDate), 2) & " = " & CStr(TimingCodeActive(2)) & ")", "SortByValue ASC")
                        Select_Canal = "Amity Canal"
                    Case 2 '"Buffalo Canal"
                        Diverted_Amt = Canal2DivertedAmt_m3perWk
                        'FieldsByCanal = FieldsTable.Select("CANAL = 'Buffalo  Canal' AND (IRRIG_TIME_CODE" & Right(CStr(CurrentDate), 2) & " = " & CStr(TimingCodeActive(0)) & " OR IRRIG_TIME_CODE" & Right(CStr(CurrentDate), 2) & " = " & CStr(TimingCodeActive(1)) & " OR IRRIG_TIME_CODE" & Right(CStr(CurrentDate), 2) & " = " & CStr(TimingCodeActive(2)) & ")", "SortByValue ASC")
                        Select_Canal = "Buffalo Canal"
                    Case 3 '"Fort Bent Canal"
                        Diverted_Amt = Canal3DivertedAmt_m3perWk
                        'FieldsByCanal = FieldsTable.Select("CANAL = 'Fort Bent Canal' AND (IRRIG_TIME_CODE" & Right(CStr(CurrentDate), 2) & " = " & CStr(TimingCodeActive(0)) & " OR IRRIG_TIME_CODE" & Right(CStr(CurrentDate), 2) & " = " & CStr(TimingCodeActive(1)) & " OR IRRIG_TIME_CODE" & Right(CStr(CurrentDate), 2) & " = " & CStr(TimingCodeActive(2)) & ")", "SortByValue ASC")
                        Select_Canal = "Fort Bent Canal"
                    Case 4 '"Fort Lyon Canal DS"
                        Diverted_Amt = Canal4DivertedAmt_m3perWk
                        'FieldsByCanal = FieldsTable.Select("CANAL = 'Fort Lyon Canal DS' AND (IRRIG_TIME_CODE" & Right(CStr(CurrentDate), 2) & " = " & CStr(TimingCodeActive(0)) & " OR IRRIG_TIME_CODE" & Right(CStr(CurrentDate), 2) & " = " & CStr(TimingCodeActive(1)) & " OR IRRIG_TIME_CODE" & Right(CStr(CurrentDate), 2) & " = " & CStr(TimingCodeActive(2)) & ")", "SortByValue ASC")
                        Select_Canal = "Fort Lyon Canal DS"
                    Case 5 '"Hyde Ditch"
                        Diverted_Amt = Canal5DivertedAmt_m3perWk
                        'FieldsByCanal = FieldsTable.Select("CANAL = 'Hyde Ditch' AND (IRRIG_TIME_CODE" & Right(CStr(CurrentDate), 2) & " = " & CStr(TimingCodeActive(0)) & " OR IRRIG_TIME_CODE" & Right(CStr(CurrentDate), 2) & " = " & CStr(TimingCodeActive(1)) & " OR IRRIG_TIME_CODE" & Right(CStr(CurrentDate), 2) & " = " & CStr(TimingCodeActive(2)) & ")", "SortByValue ASC")
                        Select_Canal = "Hyde Ditch"
                    Case 6 '"Lamar Canal"
                        Diverted_Amt = Canal6DivertedAmt_m3perWk
                        'FieldsByCanal = FieldsTable.Select("CANAL = 'Lamar Canal' AND (IRRIG_TIME_CODE" & Right(CStr(CurrentDate), 2) & " = " & CStr(TimingCodeActive(0)) & " OR IRRIG_TIME_CODE" & Right(CStr(CurrentDate), 2) & " = " & CStr(TimingCodeActive(1)) & " OR IRRIG_TIME_CODE" & Right(CStr(CurrentDate), 2) & " = " & CStr(TimingCodeActive(2)) & ")", "SortByValue ASC")
                        Select_Canal = "Lamar Canal" '& XY Graham
                    Case Else
                        Diverted_Amt = 0
                End Select
            End If

            Canal_Area = Areas_Table.Select("CANAL = '" & Select_Canal & "'")
            Total_Area = Canal_Area.GetValue(0)(1)
            Within_Area = Canal_Area.GetValue(0)(2)
            Diverted_Amt = Diverted_Amt * 1.0          'If running a scenario, apply correction here.

            If Upstream_or_not1 Then
                If Select_Canal = "Fort Lyon Canal US" Then
                    ModeledCommandArea_Amt = 0.1776 * Diverted_Amt '0.0888 is the proportion of the modeled region within Fort Lyon Canal US, but shares are double counted.
                Else
                    ModeledCommandArea_Amt = (Within_Area / Total_Area) * Diverted_Amt   'Correct for portion of Command area that lies within the modeled region
                End If
            Else
                If Canal = "Fort Lyon Canal DS" Then
                    'Added on 6-25-09: After looking at the calculated "Observed" ground water return flow, they seem too low.
                    'In an effort to look at where too much water might coming from, it seems that too much
                    'water has been simulated as making its way east of May Valley Road (County Road 8).  After
                    'speaking with Manny Torrez on 6-25-09 it sounds like there are (ballpark) 7,000 shares of 
                    'water east of the May Valley drain out of 93,000 total under the Fort Lyon.  Therefore,
                    '7,000/93,000 = 7.50%

                    'ModeledCommandArea_Amt = 0.2055 * NonSeeped_Amt '0.2055 is the proportion of the modeled region within Fort Lyon Canal DS
                    ModeledCommandArea_Amt = 0.0752 * Diverted_Amt '0.0752 is the new proportion of actual water making its into the 
                    'modeled region within Fort Lyon Canal DS
                Else
                    ModeledCommandArea_Amt = (Within_Area / Total_Area) * Diverted_Amt
                End If
            End If

            'Deduct seepage
            If Upstream_or_not1 Then
                Select Case i
                    Case 1 ' "Catlin Canal"
                        NonSeeped_Amt = ModeledCommandArea_Amt * 0.906 '0.83 'Commented Out are Eric's old values for seepage.
                    Case 2 '"Fort Lyon Canal US"                             'I calculated different values for a seepage more
                        NonSeeped_Amt = ModeledCommandArea_Amt * 0.916 '0.915'recently so I changed the values for the model run
                    Case 3 '"Holbrook Canal"                                 'to the new seepage percentages.
                        NonSeeped_Amt = ModeledCommandArea_Amt * 0.955 '0.935   'Chris Shultz 9/1/16
                    Case 4 '"Otero Canal"
                        NonSeeped_Amt = ModeledCommandArea_Amt * 0.754 '0.79
                    Case 5 '"Rocky Ford Ditch"
                        NonSeeped_Amt = ModeledCommandArea_Amt * 0.798 '0.68
                    Case 6 '"Rocky Ford Highline"
                        NonSeeped_Amt = ModeledCommandArea_Amt * 0.978 '0.96
                    Case Else
                        NonSeeped_Amt = 0
                End Select
            Else
                Select Case i
                    Case 1 '"Amity Canal"
                        NonSeeped_Amt = ModeledCommandArea_Amt * 0.665
                    Case 2 '"Buffalo Canal"
                        NonSeeped_Amt = ModeledCommandArea_Amt * 0.99
                    Case 3 '"Fort Bent Canal"
                        NonSeeped_Amt = ModeledCommandArea_Amt * 0.8
                    Case 4 '"Fort Lyon Canal DS"
                        NonSeeped_Amt = ModeledCommandArea_Amt * 0.88
                    Case 5 '"Hyde Ditch"
                        NonSeeped_Amt = ModeledCommandArea_Amt * 0.99
                    Case 6 '"Lamar Canal"
                        NonSeeped_Amt = ModeledCommandArea_Amt * 0.93
                    Case Else
                        NonSeeped_Amt = 0
                End Select
            End If
            ModeledCommandArea_Amt = NonSeeped_Amt

            'Start allocating water until all of the "ModeledCommandArea_Amt" is gone
            'j = 0   'need an indexing term
            n = 0   'This is to rotate through crop rotation categories, meant to help spread the water out 
            'a little more evenly
            cumulative_ActiveArea = 0
            While Not ModeledCommandArea_Amt = 0
                'because I was running into a problem with either 1) water always being allocated to the higher
                'priority crops and therefore never making it to the lower value crops (those with monthly
                'rotation, or 2) not allocating all of the diverted water before running through the 
                'queried fields, I had to change up the approach.  Now I rotate through the timing codes to
                'ensure each category is having some of its fields allocated to.  I use the timing code to do this.
44:             FieldsByCanal = FieldsTable.Select("CANAL = '" & Select_Canal & "' AND IRRIG_TIME_CODE" & Right(CStr(CurrentDate), 2) & " = " & CStr(TimingCodeActive(n)), "SortByValue ASC") '& " OR IRRIG_TIME_CODE" & Right(CStr(CurrentDate), 2) & " = " & CStr(TimingCodeActive(1)) & " OR IRRIG_TIME_CODE" & Right(CStr(CurrentDate), 2) & " = " & CStr(TimingCodeActive(2)) & ")", "SortByValue ASC")
                'the next line is a bit of error handling.  If all the fields calling for water 
                '(based on timing code) have received water, then allocated water to fields
                'with an 'off' timing code, preferrably fields with a monthly rotation. This is
                'accomplished by sorting in descending order
                If FieldsByCanal.Length() = 0 Then
                    If FieldsTable.Select("CANAL = '" & Select_Canal & "' AND (IRRIG_TIME_CODE" & Right(CStr(CurrentDate), 2) & " = " & CStr(TimingCodeActive(0)) & " OR IRRIG_TIME_CODE" & Right(CStr(CurrentDate), 2) & " = " & CStr(TimingCodeActive(1)) & " OR IRRIG_TIME_CODE" & Right(CStr(CurrentDate), 2) & " = " & CStr(TimingCodeActive(2)) & ")", Nothing).Length() = 0 Then
                        FieldsByCanal = FieldsTable.Select("CANAL = '" & Select_Canal & "' AND (IRRIG_TIME_CODE" & Right(CStr(CurrentDate), 2) & " = 4 OR IRRIG_TIME_CODE" & Right(CStr(CurrentDate), 2) & " = 5 OR IRRIG_TIME_CODE" & Right(CStr(CurrentDate), 2) & " = 6 OR IRRIG_TIME_CODE" & Right(CStr(CurrentDate), 2) & "=7)", Nothing)
                    End If
                    If FieldsTable.Select("Canal = '" & Select_Canal & "' AND (IRRIG_TIME_CODE" & Right(CStr(CurrentDate), 2) & " = 4 OR IRRIG_TIME_CODE" & Right(CStr(CurrentDate), 2) & " = 5 OR IRRIG_TIME_CODE" & Right(CStr(CurrentDate), 2) & " = 6 OR IRRIG_TIME_CODE" & Right(CStr(CurrentDate), 2) & "=7)", Nothing).Length() = 0 Then
                        FieldsByCanal = FieldsTable.Select("CANAL = '" & Select_Canal & "' AND (IRRIG_TIME_CODE" & Right(CStr(CurrentDate), 2) & " = 2 Or Irrig_TIME_CODE" & Right(CStr(CurrentDate), 2) & " = 3)", Nothing)
                    End If
                    If FieldsTable.Select("Canal = '" & Select_Canal & "' AND (IRRIG_TIME_CODE" & Right(CStr(CurrentDate), 2) & " = 2 OR IRRIG_TIME_CODE" & Right(CStr(CurrentDate), 2) & " = 3 OR IRRIG_TIME_CODE" & Right(CStr(CurrentDate), 2) & " = 4 OR IRRIG_TIME_CODE" & Right(CStr(CurrentDate), 2) & " = 5 OR IRRIG_TIME_CODE" & Right(CStr(CurrentDate), 2) & " = 6 OR IRRIG_TIME_CODE" & Right(CStr(CurrentDate), 2) & " = 7)", Nothing).Length() = 0 Then
                        'if the code falls here, then I've got some left over water.  Therefore, up the water
                        'allocation to those field that have already recieved water.
                        k = 0
                        additional_depth = ModeledCommandArea_Amt / cumulative_ActiveArea
                        sw_leftoverH2O.WriteLine(Select_Canal & vbTab & CurrentDate.ToShortDateString & vbTab & Format(ModeledCommandArea_Amt, "0.00") & vbTab & Format(cumulative_ActiveArea, "0.00") & vbTab & Format(ModeledCommandArea_Amt / cumulative_ActiveArea, "0.00"))
                        sw_leftoverH2O.Flush()
                        For k = 0 To TableOfFieldsWithWaterAlloc.Rows.Count() - 1
                            'allocate the additional depth to all fields to ensure all water is used up
                            If TableOfFieldsWithWaterAlloc.Rows(k)("Canal") = Select_Canal And TableOfFieldsWithWaterAlloc.Rows(k)("PumpWatDelivered") = 0 Then
                                TableOfFieldsWithWaterAlloc.Rows(k)("SurfWatDelivered") = TableOfFieldsWithWaterAlloc.Rows(k)("SurfWatDelivered") + (additional_depth * 1000)
                                If TableOfFieldsWithWaterAlloc.Rows(k)("SurfWatDelivered") + TableOfFieldsWithWaterAllocRow("Precip_Amt") / 1000 < 0.127 Then
                                    '0.127 m = 5 in.
                                    TableOfFieldsWithWaterAllocRow("Runoff_Amt") = 0
                                Else
                                    RanNum1 = RandomGenerator.NextDouble()
                                    Runoff_Fraction = (-1 * Math.Log(RanNum1)) / (1 / lambda)
                                    TableOfFieldsWithWaterAllocRow("Runoff_Amt") = (TableOfFieldsWithWaterAlloc.Rows(k)("SurfWatDelivered") + TableOfFieldsWithWaterAllocRow("Precip_Amt")) * Runoff_Fraction
                                End If
                                ModeledCommandArea_Amt = ModeledCommandArea_Amt - (additional_depth * TableOfFieldsWithWaterAlloc.Rows(k)("Area"))
                                If ModeledCommandArea_Amt < 10 Then
                                    ModeledCommandArea_Amt = 0
                                    Exit While
                                End If
                            End If
                        Next k
                    End If
                End If
                If FieldsByCanal.Length() = 0 Then
                    n += 1
                    If n >= 3 Then n = 0
                    GoTo 44
                End If
                n += 1
                If n >= 3 Then n = 0
                check_depth = ModeledCommandArea_Amt / FieldsByCanal(0)("Shape_Area")
                If check_depth < 0.4064 Then '0.4064 m = 16 in.
                    TableOfFieldsWithWaterAllocRow = TableOfFieldsWithWaterAlloc.NewRow()
                    TableOfFieldsWithWaterAllocRow("Tract") = FieldsByCanal(0)("TRACT")
                    TableOfFieldsWithWaterAllocRow("Field_No") = FieldsByCanal(0)("FIELD_NO")
                    TableOfFieldsWithWaterAllocRow("Canal") = FieldsByCanal(0)("CANAL")
                    TableOfFieldsWithWaterAllocRow("Area") = FieldsByCanal(0)("Shape_Area")
                    TableOfFieldsWithWaterAllocRow("Date_") = CurrentDate
                    Try
                        TableOfFieldsWithWaterAllocRow("Precip_Amt") = Prec_table.Select("Field_No = " & CStr(FieldsByCanal(0)("Field_No"))).GetValue(0)(1)
                        Prec_holdover = Prec_table.Select("Field_No = " & CStr(FieldsByCanal(0)("Field_No"))).GetValue(0)(1)
                        TableOfFieldsWithWaterAllocRow("ETc") = ET_table.Select("Field_No = " & CStr(FieldsByCanal(0)("Field_No"))).GetValue(0)(1)
                        ET_holdover = ET_table.Select("Field_No = " & CStr(FieldsByCanal(0)("Field_No"))).GetValue(0)(1)
                        TableOfFieldsWithWaterAllocRow("Zr") = Zr_table.Select("Field_No = " & CStr(FieldsByCanal(0)("Field_No"))).GetValue(0)(1)
                        Zr_holdover = Zr_table.Select("Field_No = " & CStr(FieldsByCanal(0)("Field_No"))).GetValue(0)(1)
                    Catch ex As Exception
                        TableOfFieldsWithWaterAllocRow("Precip_Amt") = Prec_holdover
                        TableOfFieldsWithWaterAllocRow("ETc") = ET_holdover
                        TableOfFieldsWithWaterAllocRow("Zr") = Zr_holdover
                    End Try

                    TableOfFieldsWithWaterAllocRow("SurfWatDelivered") = ModeledCommandArea_Amt / FieldsByCanal(0)("Shape_Area") * 1000 'convert to mm for the table
                    TableOfFieldsWithWaterAllocRow("PumpWatDelivered") = 0
                    'If Pump Water Delivered < 5in. then do zero runoff.
                    'see C:\Eric\Arkansas River Valley\Entire_Basin\Application Depth\Justification_For_Simulating_0_Runoff_In_Code_When_Applied_Amt_Less_Than_5in.xls
                    'for support.
                    If (ModeledCommandArea_Amt / FieldsByCanal(0)("Shape_Area") + TableOfFieldsWithWaterAllocRow("Precip_Amt") / 1000) < 0.127 Then
                        '0.127 m = 5 in.
                        TableOfFieldsWithWaterAllocRow("Runoff_Amt") = 0
                    Else
                        RanNum1 = RandomGenerator.NextDouble()
                        Runoff_Fraction = (-1 * Math.Log(RanNum1)) / (1 / lambda)
                        TableOfFieldsWithWaterAllocRow("Runoff_Amt") = ((ModeledCommandArea_Amt / FieldsByCanal(0)("Shape_Area") * 1000) + TableOfFieldsWithWaterAllocRow("Precip_Amt")) * Runoff_Fraction
                    End If
                    TableOfFieldsWithWaterAlloc.Rows.Add(TableOfFieldsWithWaterAllocRow)
                    ModeledCommandArea_Amt = ModeledCommandArea_Amt - ModeledCommandArea_Amt
                Else
                    'more than enough water for the current field in the Queue, therefore sample
                    'a target depth and allocated that amount of water and deduct it from the 
                    'ModeledCommandArea_Amt
                    Target_Depth = Sample_A_TargetDepth(FieldsByCanal(0)("CROPS" & Right(CStr(CurrentDate), 2)))
                    'in order to ensure more of the lower priority crop types get water, the 
                    'probabilistic statement that follows is meant to skip over the occasional
                    'high value crop so that they don't always recieve water every single week.

                    '**********************************************************************************
                    'After changing up how was is allocated using the TimingCodeActive variable
                    'the next two if statements are not needed
                    'RanNum1 = RandomGenerator.NextDouble()
                    'If RanNum1 < 0.3 And FieldsByCanal(j)("IRRIG_TIME_CODE" & Right(CStr(CurrentDate), 2)) = 1 Then
                    '    'This is giving a 45% chance that the high priority crop doesn't recieve water
                    '    Target_Depth = 0
                    'End If
                    'If RanNum1 < 0.35 And (FieldsByCanal(j)("IRRIG_TIME_CODE" & Right(CStr(CurrentDate), 2)) = 2 Or FieldsByCanal(j)("IRRIG_TIME_CODE" & Right(CStr(CurrentDate), 2)) = 3) Then
                    '    'This is giving a 30% chance that the high priority crop doesn't recieve water
                    '    Target_Depth = 0
                    'End If
                    '**********************************************************************************

                    TableOfFieldsWithWaterAllocRow = TableOfFieldsWithWaterAlloc.NewRow()
                    TableOfFieldsWithWaterAllocRow("Tract") = FieldsByCanal(0)("TRACT")
                    TableOfFieldsWithWaterAllocRow("Field_No") = FieldsByCanal(0)("FIELD_NO")
                    TableOfFieldsWithWaterAllocRow("Canal") = FieldsByCanal(0)("CANAL")
                    TableOfFieldsWithWaterAllocRow("Area") = FieldsByCanal(0)("Shape_Area")
                    TableOfFieldsWithWaterAllocRow("Date_") = CurrentDate
                    Try
                        TableOfFieldsWithWaterAllocRow("Precip_Amt") = Prec_table.Select("Field_No = " & CStr(FieldsByCanal(0)("Field_No"))).GetValue(0)(1)
                        Prec_holdover = Prec_table.Select("Field_No = " & CStr(FieldsByCanal(0)("Field_No"))).GetValue(0)(1)
                        TableOfFieldsWithWaterAllocRow("ETc") = ET_table.Select("Field_No = " & CStr(FieldsByCanal(0)("Field_No"))).GetValue(0)(1)
                        ET_holdover = ET_table.Select("Field_No = " & CStr(FieldsByCanal(0)("Field_No"))).GetValue(0)(1)
                        TableOfFieldsWithWaterAllocRow("Zr") = Zr_table.Select("Field_No = " & CStr(FieldsByCanal(0)("Field_No"))).GetValue(0)(1)
                        Zr_holdover = Zr_table.Select("Field_No = " & CStr(FieldsByCanal(0)("Field_No"))).GetValue(0)(1)
                    Catch ex As Exception
                        TableOfFieldsWithWaterAllocRow("Precip_Amt") = Prec_holdover
                        TableOfFieldsWithWaterAllocRow("ETc") = ET_holdover
                        TableOfFieldsWithWaterAllocRow("Zr") = Zr_holdover
                    End Try
                    'TableOfFieldsWithWaterAllocRow("Precip_Amt") = Prec_table.Select("Field_No = " & CStr(FieldsByCanal(0)("Field_No"))).GetValue(0)(1)
                    'TableOfFieldsWithWaterAllocRow("ETc") = ET_table.Select("Field_No = " & CStr(FieldsByCanal(0)("Field_No"))).GetValue(0)(1)
                    'TableOfFieldsWithWaterAllocRow("Zr") = Zr_table.Select("Field_No = " & CStr(FieldsByCanal(0)("Field_No"))).GetValue(0)(1)
                    TableOfFieldsWithWaterAllocRow("SurfWatDelivered") = Target_Depth * 1000
                    TableOfFieldsWithWaterAllocRow("PumpWatDelivered") = 0
                    'If Pump Water Delivered < 5in. then do zero runoff.
                    'see C:\Eric\Arkansas River Valley\Entire_Basin\Application Depth\Justification_For_Simulating_0_Runoff_In_Code_When_Applied_Amt_Less_Than_5in.xls
                    'for support.
                    If Target_Depth + TableOfFieldsWithWaterAllocRow("Precip_Amt") / 1000 < 0.127 Then
                        '0.127 m = 5 in.
                        TableOfFieldsWithWaterAllocRow("Runoff_Amt") = 0
                    Else
                        RanNum1 = RandomGenerator.NextDouble()
                        Runoff_Fraction = (-1 * Math.Log(RanNum1)) / (1 / lambda)
                        TableOfFieldsWithWaterAllocRow("Runoff_Amt") = ((Target_Depth * 1000) + TableOfFieldsWithWaterAllocRow("Precip_Amt")) * Runoff_Fraction
                    End If
                    TableOfFieldsWithWaterAlloc.Rows.Add(TableOfFieldsWithWaterAllocRow)
                    ModeledCommandArea_Amt = ModeledCommandArea_Amt - (Target_Depth * FieldsByCanal(0)("Shape_Area"))
                End If
                cumulative_ActiveArea += FieldsByCanal(0)("Shape_Area")
                FieldsByCanal(0).Delete()
                'j += 1
            End While

        Next i

        'at this point all of the pumped and surface water should have been allocated.
        'So, cycle through all remaining undeleted fields and add them to the
        'WaterAllocation Table accounting for ET and precip and the like.  Should be 
        'able to use the "RowState" member to accomplish this.

        'Also, because I may have skipped the occasional high value crop, some rows in 
        'the surface water allocation should not have been deleted.
        For i = 0 To FieldsTable.Rows.Count() - 1
            If Not FieldsTable.Rows(i).RowState() = DataRowState.Deleted Then
                TableOfFieldsWithWaterAllocRow = TableOfFieldsWithWaterAlloc.NewRow()
                TableOfFieldsWithWaterAllocRow("Tract") = FieldsTable.Rows(i)("TRACT")
                TableOfFieldsWithWaterAllocRow("Field_No") = FieldsTable.Rows(i)("FIELD_NO")
                'TableOfFieldsWithWaterAllocRow("Canal") = FieldsByCanal(i)("CANAL")
                TableOfFieldsWithWaterAllocRow("Area") = FieldsTable.Rows(i)("Shape_Area")
                TableOfFieldsWithWaterAllocRow("Date_") = CurrentDate
                Try
                    TableOfFieldsWithWaterAllocRow("Precip_Amt") = Prec_table.Select("Field_No = " & CStr(FieldsTable.Rows(i)("Field_No"))).GetValue(0)(1)
                    Prec_holdover = Prec_table.Select("Field_No = " & CStr(FieldsTable.Rows(i)("Field_No"))).GetValue(0)(1)
                    TableOfFieldsWithWaterAllocRow("ETc") = ET_table.Select("Field_No = " & CStr(FieldsTable.Rows(i)("Field_No"))).GetValue(0)(1)
                    ET_holdover = ET_table.Select("Field_No = " & CStr(FieldsTable.Rows(i)("Field_No"))).GetValue(0)(1)
                    TableOfFieldsWithWaterAllocRow("Zr") = Zr_table.Select("Field_No = " & CStr(FieldsTable.Rows(i)("Field_No"))).GetValue(0)(1)
                    Zr_holdover = Zr_table.Select("Field_No = " & CStr(FieldsTable.Rows(i)("Field_No"))).GetValue(0)(1)
                Catch ex As Exception
                    TableOfFieldsWithWaterAllocRow("Precip_Amt") = Prec_holdover
                    TableOfFieldsWithWaterAllocRow("ETc") = ET_holdover
                    TableOfFieldsWithWaterAllocRow("Zr") = Zr_holdover
                End Try
                TableOfFieldsWithWaterAllocRow("SurfWatDelivered") = 0
                TableOfFieldsWithWaterAllocRow("PumpWatDelivered") = 0
                If TableOfFieldsWithWaterAllocRow("Precip_Amt") / 1000 < 0.05 Then
                    '0.05 m = 1.96 (~2) in.
                    TableOfFieldsWithWaterAllocRow("Runoff_Amt") = 0
                Else
                    TableOfFieldsWithWaterAllocRow("Runoff_Amt") = TableOfFieldsWithWaterAllocRow("Precip_Amt") * 0.3 'need to check that using "Precip_Amt" in this for of the variable works
                End If
                TableOfFieldsWithWaterAlloc.Rows.Add(TableOfFieldsWithWaterAllocRow)
            End If
        Next i
        'this next for loop is to avoid problems I was having in the "InsertValuesInDBTable" Command
        'I'm thinking that if I clear out the problem column (since at this point I don't need it anymore)
        'then everything will work OK.
        For i = 0 To TableOfFieldsWithWaterAlloc.Rows.Count() - 1
            TableOfFieldsWithWaterAlloc.Rows(i)("Canal") = Nothing
        Next i

        TableOfFieldsWithWaterAlloc.TableName = "WaterAllocation" & DateStr
        SQL_inserter.DeleteExistingTable(TableOfFieldsWithWaterAlloc.TableName())
        SQL_inserter.CreateTableInDB(TableOfFieldsWithWaterAlloc)
        SQL_inserter.InsertValuesInDBTable(TableOfFieldsWithWaterAlloc)

        connToAVDb.Close()
        connToAVDb_Copy.Close()

    End Function

    Public Function ReadCSVIntoDataTable(ByVal filePath As String, Optional ByVal isFirstRowHeader As Boolean = True) As DataTable
        Using connection As OleDbConnection = New OleDbConnection("Provider=Microsoft.ACE.OLEDB.12.0;Data Source=" & System.IO.Path.GetDirectoryName(filePath) & ";Extended Properties=""Text;Readonly=False;HDR=" & (If(isFirstRowHeader, "Yes", "No")) & """")
            Using command As OleDbCommand = New OleDbCommand("SELECT * FROM [" & System.IO.Path.GetFileName(filePath) & "]", connection)
                Using adapter As OleDbDataAdapter = New OleDbDataAdapter(command)
                    Dim dataTable As DataTable = New DataTable With {
                        .Locale = CultureInfo.CurrentCulture
                    }
                    adapter.Fill(dataTable)
                    dataTable.TableName = System.IO.Path.GetFileNameWithoutExtension(filePath)
                    Return dataTable
                End Using
            End Using
        End Using
    End Function


    Public Function FinalizeWaterAllocation4(ByVal connToAVDb As System.Data.OleDb.OleDbConnection, ByVal connToAVDb_Copy As System.Data.OleDb.OleDbConnection, _
                                         ByRef WaterAllocationBufferTable As DataSet, ByVal CurrentDate As Date, ByVal Canal1DivertedAmt_m3perWk As Single, _
                                         ByVal Canal2DivertedAmt_m3perWk As Single, ByVal Canal3DivertedAmt_m3perWk As Single, ByVal Canal4DivertedAmt_m3perWk As Single, _
                                         ByVal Canal5DivertedAmt_m3perWk As Single, ByVal Canal6DivertedAmt_m3perWk As Single, ByVal ActiveWells() As Object, _
                                         ByVal QueriedDate() As Object, ByVal MonthlyPumpedAcreFt() As Object, ByVal connToOutputDb As System.Data.OleDb.OleDbConnection, _
                                         ByVal SQL_inserter As MySQLUtils, ByRef sw_leftoverH2O As StreamWriter)

        ' This is a version of WaterAllocation4 updated by John Cox. Eric Morway wrote the original version, which was used by Chris Shultz / modified,
        ' and now I'm using it in the DSR Model extension. All comments below are from Eric unless otherwise noted. - JC

        ' If you are attempting to make files for the DSR 292 stress period model, or for USR model, don't use this - JC

        ' I didn't want to append my data to Eric's. So we will use this function to read in canal dicersion data and well pumping data for the extended period -JC
        'Dim newDataTable As DataTable = ReadCSVIntoDataTable("C:\\TablePractice.csv") 'This is the template line of code

        'This is the weekly canal diversion for the extended period (11/1/2007 - 10/20/2016)
        Dim WeeklyCanalDivTable As DataTable = ReadCSVIntoDataTable("C:\\Eric\Arkansas River Valley\Downstream\GIS\Weekly_CanalDiversions.csv")
        'This is the monthly well pumping for the extended period (11/1/2007 - 10/20/2016)
        Dim WeeklyWellPumpTable As DataTable = ReadCSVIntoDataTable("C:\\Eric\Arkansas River Valley\Downstream\GIS\Weekly_WellPumping.csv")


        Dim TableOfFieldsWithWaterAlloc As DataTable = New DataTable
        TableOfFieldsWithWaterAlloc = BuildDataTable(TableOfFieldsWithWaterAlloc)
        'Columns in this table are:
        'Tract | Field_No | Date_ | Precip_Amt | ETc | Zr | SurfWatDelivered | PumpWatDelivered | Runoff_Amt | DeepPerc_Amt | TAW | RAW | Area

        Dim TableOfFieldsWithWaterAllocRow As DataRow

        'Keep in mind connToAVDb has been passed in as either upstream or downstream
        connToAVDb.Open()
        connToAVDb_Copy.Open()

        Dim TS As Integer
        Dim ct As Integer
        Dim ct_2 As Integer
        Dim i As Integer
        Dim j As Integer
        Dim k As Integer
        Dim n As Integer
        Dim Target_Depth As Single
        Dim QueryString As String
        Dim QueryString2 As String
        Dim Tract As Integer
        Dim RandomGenerator As Random
        RandomGenerator = New Random
        Dim RanNum1 As Single
        Dim Canal As String
        Dim Areas_Table As DataTable
        Dim TimingCodeActive() As Integer = {1, 0, 0}
        Dim Canal_Area() As DataRow
        Dim Total_Area As Single
        Dim Within_Area As Single
        Dim Diverted_Amt As Single
        Dim NonSeeped_Amt As Single
        Dim ModeledCommandArea_Amt As Single
        Dim Runoff_Fraction As Single
        Dim lambda As Single = 0.084
        Dim NumOfDaysLeftInCurrentMonth As Integer
        Dim NumOfTotalDaysInCurrentMonth As Integer
        Dim NumOfDaysInNextMonth As Integer
        Dim NumOfTotalDaysInNextMonth As Integer
        Dim FieldsTable As DataTable
        Dim FieldsByCanal() As DataRow
        Dim m_col As DataColumn
        Dim PumpFields As DataTable
        Dim choose_fld As Double
        Dim check_depth As Single
        Dim check_area As Single
        Dim Select_Canal As String
        Dim stuck_in_loop As Integer
        Dim stuck_in_loop2 As Integer
        Dim DateStr As String
        Dim Prec_holdover As Single
        Dim ET_holdover As Single
        Dim Zr_holdover As Single
        Dim cumulative_ActiveArea As Single
        Dim additional_depth As Single

        Dim weeklypumpvol As Double

        'This following string should work just fine for both upstream and downstream situations.
        'This was modified because the DSR now has to vary year by year, so now this query is different for the DSR now - JC

        If Me.Upstream_or_not1 = True Then
            QueryString2 = "SELECT CommandAreaAcreage_wNumTracts.* "
            QueryString2 += "FROM CommandAreaAcreage_wNumTracts;"
        Else 'Updated for DSR to allow command area acreages in 2008-2016 period to change by year - JC
            QueryString2 = "SELECT CommandAreaAcreage_wNumTracts.* "
            QueryString2 += "FROM CommandAreaAcreage_wNumTracts"
            If CurrentDate > #10/31/2007# Then
                If CurrentDate < #1/1/2009# Then
                    QueryString2 += " WHERE((CommandAreaAcreage_wNumTracts.AreaYear) = 2008);"
                ElseIf CurrentDate < #1/7/2010# And CurrentDate > #12/31/2008# Then
                    QueryString2 += " WHERE((CommandAreaAcreage_wNumTracts.AreaYear) = 2009);"
                ElseIf CurrentDate < #1/6/2011# And CurrentDate > #1/6/2010# Then
                    QueryString2 += " WHERE((CommandAreaAcreage_wNumTracts.AreaYear) = 2010);"
                ElseIf CurrentDate < #1/5/2012# And CurrentDate > #1/5/2011# Then
                    QueryString2 += " WHERE((CommandAreaAcreage_wNumTracts.AreaYear) = 2011);"
                ElseIf CurrentDate < #1/3/2013# And CurrentDate > #1/4/2012# Then
                    QueryString2 += " WHERE((CommandAreaAcreage_wNumTracts.AreaYear) = 2012);"
                ElseIf CurrentDate < #1/2/2014# And CurrentDate > #1/2/2013# Then
                    QueryString2 += " WHERE((CommandAreaAcreage_wNumTracts.AreaYear) = 2013);"
                ElseIf CurrentDate < #1/1/2015# And CurrentDate > #1/1/2014# Then
                    QueryString2 += " WHERE((CommandAreaAcreage_wNumTracts.AreaYear) = 2014);"
                ElseIf CurrentDate < #1/7/2016# And CurrentDate > #12/31/2014# Then
                    QueryString2 += " WHERE((CommandAreaAcreage_wNumTracts.AreaYear) = 2015);"
                ElseIf CurrentDate > #1/6/2016# Then
                    QueryString2 += " WHERE((CommandAreaAcreage_wNumTracts.AreaYear) = 2016);"
                End If
            Else
                QueryString2 += " WHERE((CommandAreaAcreage_wNumTracts.AreaYear) = 2003);"
            End If
        End If
        Areas_Table = GetTableFromDB(QueryString2, "CommandAreaAcreage_wNumTracts", connToAVDb)

        'The following bit of code determines which Timing codes to include in the subsequent query
        TS = CurrentTS(CurrentDate)
        If TS Mod 2 = 1 Then
            TimingCodeActive(1) = 3
        Else
            TimingCodeActive(1) = 2
        End If
        If ((TS + 4) Mod 4) = 1 Then
            TimingCodeActive(2) = 4
        ElseIf ((TS + 4) Mod 4) = 2 Then
            TimingCodeActive(2) = 5
        ElseIf ((TS + 4) Mod 4) = 3 Then
            TimingCodeActive(2) = 6
        ElseIf ((TS + 4) Mod 4) = 0 Then
            TimingCodeActive(2) = 7
        End If

        'this query will need to be also be adapted for the downstream and '02 & '03 in the upstream
        If Me.Upstream_or_not1 = True Then
            If CurrentDate < #1/1/2002# Or CurrentDate > #12/31/2003# Then
                QueryString = "SELECT Combined.FIELD_NO, fields_99.TRACT, Combined.CANAL, Combined.CROPS" & Right(CStr(CurrentDate), 2) & ", Combined.IRRIG_TIME_CODE" & Right(CStr(CurrentDate), 2) & ", Combined.Shape_Area "
                QueryString += "FROM Combined INNER JOIN fields_99 ON Combined.FIELD_NO = fields_99.FIELD_NUMB "
                QueryString += "WHERE Combined.PHIL_FLD = 1;"
            Else
                QueryString = "SELECT Combined.FIELD_NO, DWR_USFlds.TRACT, Combined.CANAL, Combined.CROPS" & Right(CStr(CurrentDate), 2) & ", Combined.IRRIG_TIME_CODE" & Right(CStr(CurrentDate), 2) & ", Combined.Shape_Area "
                QueryString += "FROM Combined INNER JOIN DWR_USFlds ON Combined.FIELD_NO = DWR_USFlds.GEOLOC "
                QueryString += "WHERE Combined.PHIL_FLD = 0;"
            End If
        Else 'Updated for DSR to allow fields in 2008-2016 period to change by year - JC
            If CurrentDate > #10/31/2007# Then
                'QueryString = "SELECT Combined_DS.FIELD_NO, fields_04.TRACT, Combined_DS.CANAL, Combined_DS.CROPS" & Right(CStr(CurrentDate), 2) & ", Combined_DS.IRRIG_TIME_CODE" & Right(CStr(CurrentDate), 2) & ", Combined_DS.Shape_Area " ' OLD

                ' The dates used in this IF statement correspond to the stress periods for a given year -- not first day of year b/c stress periods don't align perfectly with calendar year - JC
                If CurrentDate < #1/1/2009# Then '2008
                    QueryString = "SELECT DSfields08.FIELD_NO, DSfields08.TRACT, DSfields08.CANAL, DSfields08.CROPS" & Right(CStr(CurrentDate), 2) & ", DSfields08.IRRIG_TIME_CODE" & Right(CStr(CurrentDate), 2) & ", DSfields08.Shape_Area, DSfields08.IRRIG_TYPE " 'JC
                    QueryString += "FROM DSfields08 "
                    QueryString += "WHERE((DSfields08.Eric_FLD) = 8);"
                ElseIf CurrentDate < #1/7/2010# And CurrentDate > #12/31/2008# Then ' 2009
                    QueryString = "SELECT DSfields09.FIELD_NO, DSfields09.TRACT, DSfields09.CANAL, DSfields09.CROPS" & Right(CStr(CurrentDate), 2) & ", DSfields09.IRRIG_TIME_CODE" & Right(CStr(CurrentDate), 2) & ", DSfields09.Shape_Area, DSfields09.IRRIG_TYPE " 'JC
                    QueryString += "FROM DSfields09 "
                    QueryString += "WHERE((DSfields09.Eric_FLD) = 9);"
                ElseIf CurrentDate < #1/6/2011# And CurrentDate > #1/6/2010# Then ' 2010
                    QueryString = "SELECT DSfields10.FIELD_NO, DSfields10.TRACT, DSfields10.CANAL, DSfields10.CROPS" & Right(CStr(CurrentDate), 2) & ", DSfields10.IRRIG_TIME_CODE" & Right(CStr(CurrentDate), 2) & ", DSfields10.Shape_Area, DSfields10.IRRIG_TYPE " 'JC
                    QueryString += "FROM DSfields10 "
                    QueryString += "WHERE((DSfields10.Eric_FLD) = 10);"
                ElseIf CurrentDate < #1/5/2012# And CurrentDate > #1/5/2011# Then ' 2011
                    QueryString = "SELECT DSfields11.FIELD_NO, DSfields11.TRACT, DSfields11.CANAL, DSfields11.CROPS" & Right(CStr(CurrentDate), 2) & ", DSfields11.IRRIG_TIME_CODE" & Right(CStr(CurrentDate), 2) & ", DSfields11.Shape_Area, DSfields11.IRRIG_TYPE " 'JC
                    QueryString += "FROM DSfields11 "
                    QueryString += "WHERE((DSfields11.Eric_FLD) = 11);"
                ElseIf CurrentDate < #1/3/2013# And CurrentDate > #1/4/2012# Then ' 2012
                    QueryString = "SELECT DSfields12.FIELD_NO, DSfields12.TRACT, DSfields12.CANAL, DSfields12.CROPS" & Right(CStr(CurrentDate), 2) & ", DSfields12.IRRIG_TIME_CODE" & Right(CStr(CurrentDate), 2) & ", DSfields12.Shape_Area, DSfields12.IRRIG_TYPE " 'JC
                    QueryString += "FROM DSfields12 "
                    QueryString += "WHERE((DSfields12.Eric_FLD) = 12);"
                ElseIf CurrentDate < #1/2/2014# And CurrentDate > #1/2/2013# Then ' 2013
                    QueryString = "SELECT DSfields13.FIELD_NO, DSfields13.TRACT, DSfields13.CANAL, DSfields13.CROPS" & Right(CStr(CurrentDate), 2) & ", DSfields13.IRRIG_TIME_CODE" & Right(CStr(CurrentDate), 2) & ", DSfields13.Shape_Area, DSfields13.IRRIG_TYPE " 'JC
                    QueryString += "FROM DSfields13 "
                    QueryString += "WHERE((DSfields13.Eric_FLD) = 13);"
                ElseIf CurrentDate < #1/1/2015# And CurrentDate > #1/1/2014# Then ' 2014
                    QueryString = "SELECT DSfields14.FIELD_NO, DSfields14.TRACT, DSfields14.CANAL, DSfields14.CROPS" & Right(CStr(CurrentDate), 2) & ", DSfields14.IRRIG_TIME_CODE" & Right(CStr(CurrentDate), 2) & ", DSfields14.Shape_Area, DSfields14.IRRIG_TYPE " 'JC
                    QueryString += "FROM DSfields14 "
                    QueryString += "WHERE((DSfields14.Eric_FLD) = 14);"
                ElseIf CurrentDate < #1/7/2016# And CurrentDate > #12/31/2014# Then ' 2015
                    QueryString = "SELECT DSfields15.FIELD_NO, DSfields15.TRACT, DSfields15.CANAL, DSfields15.CROPS" & Right(CStr(CurrentDate), 2) & ", DSfields15.IRRIG_TIME_CODE" & Right(CStr(CurrentDate), 2) & ", DSfields15.Shape_Area, DSfields15.IRRIG_TYPE " 'JC
                    QueryString += "FROM DSfields15 "
                    QueryString += "WHERE((DSfields15.Eric_FLD) = 15);"
                ElseIf CurrentDate > #1/6/2016# Then ' 2016
                    QueryString = "SELECT DSfields16.FIELD_NO, DSfields16.TRACT, DSfields16.CANAL, DSfields16.CROPS" & Right(CStr(CurrentDate), 2) & ", DSfields16.IRRIG_TIME_CODE" & Right(CStr(CurrentDate), 2) & ", DSfields16.Shape_Area, DSfields16.IRRIG_TYPE " 'JC
                    QueryString += "FROM DSfields16 "
                    QueryString += "WHERE((DSfields16.Eric_FLD) = 16);"
                End If
            ElseIf CurrentDate < #11/1/2007# And CurrentDate > #12/31/2003# Then ' JOHN Add in fields in this query (IRRG_TYPE)
                'QueryString = "SELECT Combined_DS.FIELD_NO, fields_04.TRACT, Combined_DS.CANAL, Combined_DS.CROPS" & Right(CStr(CurrentDate), 2) & ", Combined_DS.IRRIG_TIME_CODE" & Right(CStr(CurrentDate), 2) & ", Combined_DS.Shape_Area " 'OLD
                QueryString = "SELECT Combined_DS.FIELD_NO, fields_04.TRACT, Combined_DS.CANAL, Combined_DS.CROPS" & Right(CStr(CurrentDate), 2) & ", Combined_DS.IRRIG_TIME_CODE" & Right(CStr(CurrentDate), 2) & ", Combined_DS.Shape_Area, Combined_DS.IRRG_TYPE " 'JC
                QueryString += "FROM Combined_DS INNER JOIN fields_04 ON Combined_DS.FIELD_NO = fields_04.FIELD_NUMB "
                QueryString += "WHERE((Combined_DS.Eric_FLD) = 1);"
            Else
                'QueryString = "SELECT Combined_DS.FIELD_NO, DWR_BasinFields_DS.TRACT, Combined_DS.CANAL, Combined_DS.CROPS" & Right(CStr(CurrentDate), 2) & ", Combined_DS.IRRIG_TIME_CODE" & Right(CStr(CurrentDate), 2) & ", Combined_DS.Shape_Area "
                QueryString = "SELECT Combined_DS.FIELD_NO, DWR_BasinFields_DS.TRACT, Combined_DS.CANAL, Combined_DS.CROPS" & Right(CStr(CurrentDate), 2) & ", Combined_DS.IRRIG_TIME_CODE" & Right(CStr(CurrentDate), 2) & ", Combined_DS.Shape_Area, Combined_DS.IRRG_TYPE " 'JC
                QueryString += "FROM Combined_DS INNER JOIN DWR_BasinFields_DS ON Combined_DS.FIELD_NO = DWR_BasinFields_DS.GEOLOC "
                QueryString += "WHERE (((Combined_DS.Eric_Fld)=0));"
            End If
        End If
        'add a new column to the table that will be filled with semi-random values
        'that will be used for selecting fields to irrigate.
        'The columns are (were): FIELD_NO | TRACT | CANAL | CROPSxx | IRRIG_TIME_CODExx | Shape_Area | SortByValue
        'The columns in this table now are: FIELD_NO | TRACT | CANAL | CROPSxx | IRRIG_TIME_CODExx | Shape_Area | IRRG_TYPE | SortByValue - JC
        FieldsTable = GetTableFromDB(QueryString, "All_Flds", connToAVDb)
        m_col = New DataColumn
        With m_col
            .ColumnName = "SortByValue"
            .DataType = GetType(System.Double)
        End With
        FieldsTable.Columns.Add(m_col)
        'Next, fill the column that was just added.
        For i = 1 To FieldsTable.Rows.Count()
            RanNum1 = RandomGenerator.NextDouble()
            FieldsTable.Rows(i - 1)("SortByValue") = CSng(FieldsTable.Rows(i - 1)("IRRIG_TIME_CODE" & Right(CStr(CurrentDate), 2))) + RanNum1
        Next i

        'Deal with all of the pumped water before allocating the surface water.
        i = 0
        Dim pump_wTract As DataTable = New DataTable("pump_wTract")
        m_col = New DataColumn
        With m_col
            .ColumnName = "Tract"
            .DataType = GetType(System.Int32)
        End With
        pump_wTract.Columns.Add(m_col)
        m_col = New DataColumn
        With m_col
            .ColumnName = "PumpedAmt"
            .DataType = GetType(System.Single)
        End With
        pump_wTract.Columns.Add(m_col)

        'because the pumped amounts are stored by well I need to sum up all the pumped
        'amount for a given tract number for later use.
        Dim temp_table As DataTable
        Dim pump_wTract_rows() As DataRow
        Dim entryRow As DataRow
        i = 0
        'calculate some variables need to correct the monthly pumped amount for the week's amount
        NumOfDaysLeftInCurrentMonth = CalculateNumOfDaysLeftInCurrTS(CurrentDate)
        NumOfDaysInNextMonth = 7 - NumOfDaysLeftInCurrentMonth
        NumOfTotalDaysInCurrentMonth = CurrentDate.DaysInMonth(Year(CurrentDate), Month(CurrentDate))
        NumOfTotalDaysInNextMonth = CurrentDate.DaysInMonth(Year(CurrentDate.AddDays(7)), Month(CurrentDate.AddDays(7)))

        'Store the precip, ET, and Zr data in memory
        Dim Prec_table As DataTable
        Dim ET_table As DataTable
        Dim Zr_table As DataTable
        DateStr = QueryDateString(CurrentDate)
        QueryString = "SELECT Field_No, Prec" & DateStr & " FROM Prec_Coll_Table"
        Prec_table = SQL_inserter.GetTableFromDB(QueryString, "Prec_table")
        QueryString = "SELECT Field_No, ETc" & DateStr & " FROM ET_Coll_Table"
        ET_table = SQL_inserter.GetTableFromDB(QueryString, "ET_table")
        QueryString = "SELECT Field_No, Zr" & DateStr & " FROM Zr_Coll_Table"
        Zr_table = SQL_inserter.GetTableFromDB(QueryString, "Zr_table")

        If CurrentDate < #11/1/2007# Then
            While Not ActiveWells(TS)(i) = 0
                'find the amount of pumped water in the current well in the next time step
                'incase the current time step is in two different months
                ct_2 = 0
                Try
                    While Not (ActiveWells(TS + 1)(ct_2) = ActiveWells(TS)(i) Or ActiveWells(TS + 1)(ct_2) = 0)
                        ct_2 += 1
                    End While
                Catch ex As Exception
                End Try

                'The next query should work in either database
                QueryString = "SELECT Wells_wTractNum.IDENT, Wells_wTractNum.TRACT, Wells_wTractNum.USE "
                QueryString += "FROM Wells_wTractNum "
                QueryString += "WHERE (Wells_wTractNum.IDENT=""" & CStr(ActiveWells(TS)(i)) & """);"
                temp_table = GetTableFromDB(QueryString, "pump_wTract", connToAVDb)

                'check to see if the queried well already has an existing tract in the final holding table.
                'also check to make that use = "I" (irrigation)
                pump_wTract_rows = pump_wTract.Select("Tract = " & temp_table.Rows(0)("TRACT"))
                If pump_wTract_rows.Length() = 0 And temp_table.Rows(0)("USE") = "I" Then
                    entryRow = pump_wTract.NewRow()
                    entryRow(0) = temp_table.Rows(0)(1)
                    Try
                        entryRow(1) = ((MonthlyPumpedAcreFt(TS)(i) * 1233.48677) * NumOfDaysLeftInCurrentMonth / NumOfTotalDaysInCurrentMonth) + ((MonthlyPumpedAcreFt(TS + 1)(ct_2) * 1233.48677) * NumOfDaysInNextMonth / NumOfTotalDaysInNextMonth)
                    Catch ex As Exception
                        entryRow(1) = ((MonthlyPumpedAcreFt(TS)(i) * 1233.48677) * NumOfDaysLeftInCurrentMonth / NumOfTotalDaysInCurrentMonth)
                    End Try
                    pump_wTract.Rows.Add(entryRow)
                ElseIf pump_wTract_rows.Length() > 0 And temp_table.Rows(0)("USE") = "I" Then 'code should land here if a well with the current tract number has already been entered.
                    j = 0
                    While Not pump_wTract.Rows(j)(0) = temp_table.Rows(0)("TRACT")
                        j += 1
                    End While

                    Try
                        pump_wTract.Rows(j)(1) = pump_wTract.Rows(j)(1) + ((MonthlyPumpedAcreFt(TS)(i) * 1233.48677) * NumOfDaysLeftInCurrentMonth / NumOfTotalDaysInCurrentMonth) + ((MonthlyPumpedAcreFt(TS + 1)(ct_2) * 1233.48677) * NumOfDaysInNextMonth / NumOfTotalDaysInNextMonth)
                    Catch ex As Exception
                        pump_wTract.Rows(j)(1) = pump_wTract.Rows(j)(1) + ((MonthlyPumpedAcreFt(TS)(i) * 1233.48677) * NumOfDaysLeftInCurrentMonth / NumOfTotalDaysInCurrentMonth)
                    End Try
                End If
                i += 1
            End While
        Else

            'This if statment exists because there are too many columns for the MDB
            If CurrentDate < #1/5/2012# Then
                'NOTE: THIS WILL NEED TO BE UPDATED FOR THE USR IF IT IS EXTENDED, SIMILARLY TO ABOVE
                QueryString = "SELECT DSWells_wTractNum.IDENT, DSWells_wTractNum.TRACT, DSWells_wTractNum.USE, DSActiveWells0811.OnOff" & DateStr & " " 'JC
                QueryString += "FROM DSWells_wTractNum INNER JOIN DSActiveWells0811 ON DSWells_wTractNum.IDENT = DSActiveWells0811.Well_Num "
                QueryString += "WHERE (((DSActiveWells0811.OnOff" & DateStr & ")=1));"
                temp_table = GetTableFromDB(QueryString, "pump_wTract", connToAVDb)
            Else
                'NOTE: THIS WILL NEED TO BE UPDATED FOR THE USR IF IT IS EXTENDED, SIMILARLY TO ABOVE
                QueryString = "SELECT DSWells_wTractNum.IDENT, DSWells_wTractNum.TRACT, DSWells_wTractNum.USE, DSActiveWells1216.OnOff" & DateStr & " " 'JC
                QueryString += "FROM DSWells_wTractNum INNER JOIN DSActiveWells1216 ON DSWells_wTractNum.IDENT = DSActiveWells1216.Well_Num "
                QueryString += "WHERE (((DSActiveWells1216.OnOff" & DateStr & ")=1));"
                temp_table = GetTableFromDB(QueryString, "pump_wTract", connToAVDb)
            End If

            Dim activewellcount As Integer
            activewellcount = temp_table.Rows.Count()

            i = 0

            For i = 0 To activewellcount

                pump_wTract_rows = pump_wTract.Select("Tract = " & temp_table.Rows(i)("TRACT"))
                If pump_wTract_rows.Length() = 0 And temp_table.Rows(0)("USE") = "I" Then
                    entryRow = pump_wTract.NewRow()
                    entryRow(0) = temp_table.Rows(0)(1)
                    Try
                        entryRow(1) = WeeklyWellPumpTable.Select("Well = " & CStr(temp_table.Rows(i)("IDENT"))).GetValue(0)(1)
                    Catch ex As Exception
                        entryRow(1) = WeeklyWellPumpTable.Select("Well = " & CStr(temp_table.Rows(i)("IDENT"))).GetValue(0)(1)
                    End Try
                    pump_wTract.Rows.Add(entryRow)
                ElseIf pump_wTract_rows.Length() > 0 And temp_table.Rows(0)("USE") = "I" Then 'code should land here if a well with the current tract number has already been entered.
                    j = 0
                    While Not pump_wTract.Rows(j)(0) = temp_table.Rows(0)("TRACT")
                        j += 1
                    End While

                    Try
                        pump_wTract.Rows(j)(1) = pump_wTract.Rows(j)(1) + WeeklyWellPumpTable.Select("Well = " & CStr(temp_table.Rows(i)("IDENT"))).GetValue(0)(1)
                    Catch ex As Exception
                        pump_wTract.Rows(j)(1) = pump_wTract.Rows(j)(1) + WeeklyWellPumpTable.Select("Well = " & CStr(temp_table.Rows(i)("IDENT"))).GetValue(0)(1)
                    End Try
                End If

            Next

        End If

        'allocate the pumped water, do it track by track
        For i = 1 To pump_wTract.Rows.Count()
            Tract = pump_wTract.Rows(i - 1)(0)
            'The columns in the following query are: TRACT | FIELD_NUMB | Shape_Area
            'the # of rows in the query will = the # fields in that tract
            'The query depends on the time and region
            If Me.Upstream_or_not1 = True Then
                If CurrentDate < #1/1/2002# Or CurrentDate > #12/31/2003# Then
                    QueryString = "SELECT fields_99.TRACT, fields_99.FIELD_NUMB, Combined.Shape_Area "
                    QueryString += "FROM fields_99 INNER JOIN Combined ON fields_99.FIELD_NUMB = Combined.FIELD_NO "
                    QueryString += "WHERE fields_99.TRACT = " & CStr(Tract) & ";"
                Else
                    QueryString = "SELECT DWR_USFlds.TRACT, Combined.FIELD_NO AS FIELD_NUMB, Combined.Shape_Area "
                    QueryString += "FROM Combined INNER JOIN DWR_USFlds ON Combined.FIELD_NO = DWR_USFlds.GEOLOC "
                    QueryString += "WHERE DWR_USFlds.TRACT = " & CStr(Tract) & ";"
                End If
            Else
                If CurrentDate > #10/31/2007# Then
                    ' The dates used in this IF statement correspond to the stress periods for a given year -- not first day of year b/c stress periods don't align perfectly with calendar year - JC
                    If CurrentDate < #1/1/2009# Then '2008
                        QueryString = "SELECT DSfields08.Tract, DSfields08.FIELD_NO, DSfields08.Shape_Area, DSfields08.IRRIG_TYPE "
                        QueryString += "FROM DSfields08 "
                        QueryString += "WHERE DSfields08.Tract = " & CStr(Tract) & ";"
                    ElseIf CurrentDate < #1/7/2010# And CurrentDate > #12/31/2008# Then ' 2009
                        QueryString = "SELECT DSfields09.Tract, DSfields09.FIELD_NO, DSfields09.Shape_Area, DSfields09.IRRIG_TYPE "
                        QueryString += "FROM DSfields09 "
                        QueryString += "WHERE DSfields09.Tract = " & CStr(Tract) & ";"
                    ElseIf CurrentDate < #1/6/2011# And CurrentDate > #1/6/2010# Then ' 2010
                        QueryString = "SELECT DSfields10.Tract, DSfields10.FIELD_NO, DSfields10.Shape_Area, DSfields10.IRRIG_TYPE "
                        QueryString += "FROM DSfields10 "
                        QueryString += "WHERE DSfields10.Tract = " & CStr(Tract) & ";"
                    ElseIf CurrentDate < #1/5/2012# And CurrentDate > #1/5/2011# Then ' 2011
                        QueryString = "SELECT DSfields11.Tract, DSfields11.FIELD_NO, DSfields11.Shape_Area, DSfields11.IRRIG_TYPE "
                        QueryString += "FROM DSfields11 "
                        QueryString += "WHERE DSfields11.Tract = " & CStr(Tract) & ";"
                    ElseIf CurrentDate < #1/3/2013# And CurrentDate > #1/4/2012# Then ' 2012
                        QueryString = "SELECT DSfields12.Tract, DSfields12.FIELD_NO, DSfields12.Shape_Area, DSfields12.IRRIG_TYPE "
                        QueryString += "FROM DSfields12 "
                        QueryString += "WHERE DSfields12.Tract = " & CStr(Tract) & ";"
                    ElseIf CurrentDate < #1/2/2014# And CurrentDate > #1/2/2013# Then ' 2013
                        QueryString = "SELECT DSfields13.Tract, DSfields13.FIELD_NO, DSfields13.Shape_Area, DSfields13.IRRIG_TYPE "
                        QueryString += "FROM DSfields13 "
                        QueryString += "WHERE DSfields13.Tract = " & CStr(Tract) & ";"
                    ElseIf CurrentDate < #1/1/2015# And CurrentDate > #1/1/2014# Then ' 2014
                        QueryString = "SELECT DSfields14.Tract, DSfields14.FIELD_NO, DSfields14.Shape_Area, DSfields14.IRRIG_TYPE "
                        QueryString += "FROM DSfields14 "
                        QueryString += "WHERE DSfields14.Tract = " & CStr(Tract) & ";"
                    ElseIf CurrentDate < #1/7/2016# And CurrentDate > #12/31/2014# Then ' 2015
                        QueryString = "SELECT DSfields15.Tract, DSfields15.FIELD_NO, DSfields15.Shape_Area, DSfields15.IRRIG_TYPE "
                        QueryString += "FROM DSfields15 "
                        QueryString += "WHERE DSfields15.Tract = " & CStr(Tract) & ";"
                    ElseIf CurrentDate > #1/6/2016# Then ' 2016
                        QueryString = "SELECT DSfields16.Tract, DSfields16.FIELD_NO, DSfields16.Shape_Area, DSfields16.IRRIG_TYPE "
                        QueryString += "FROM DSfields16 "
                        QueryString += "WHERE DSfields16.Tract = " & CStr(Tract) & ";"
                    End If
                ElseIf CurrentDate < #11/1/2007# And CurrentDate > #12/31/2003# Then
                    QueryString = "SELECT fields_04.Tract, fields_04.FIELD_NUMB, Combined_DS.Shape_Area, Combined_DS.IRRIG_TYPE "
                    QueryString += "FROM Combined_DS INNER JOIN fields_04 ON Combined_DS.FIELD_NO = fields_04.FIELD_NUMB "
                    QueryString += "WHERE fields_04.Tract = " & CStr(Tract) & ";"
                Else
                    QueryString = "SELECT DWR_BasinFields_DS.TRACT, Combined_DS.FIELD_NO AS FIELD_NUMB, Combined_DS.Shape_Area, Combined_DS.IRRIG_TYPE "
                    QueryString += "FROM Combined_DS INNER JOIN DWR_BasinFields_DS ON Combined_DS.FIELD_NO = DWR_BasinFields_DS.GEOLOC "
                    QueryString += "WHERE DWR_BasinFields_DS.TRACT = " & CStr(Tract) & ";"
                End If

                'OLD -JC
                'If CurrentDate > #12/31/2003# Then
                'QueryString = "SELECT fields_04.Tract, fields_04.FIELD_NUMB, Combined_DS.Shape_Area "
                'QueryString += "FROM Combined_DS INNER JOIN fields_04 ON Combined_DS.FIELD_NO = fields_04.FIELD_NUMB "
                'QueryString += "WHERE fields_04.Tract = " & CStr(Tract) & ";"
                'Else
                'QueryString = "SELECT DWR_BasinFields_DS.TRACT, Combined_DS.FIELD_NO AS FIELD_NUMB, Combined_DS.Shape_Area "
                'QueryString += "FROM Combined_DS INNER JOIN DWR_BasinFields_DS ON Combined_DS.FIELD_NO = DWR_BasinFields_DS.GEOLOC "
                'QueryString += "WHERE DWR_BasinFields_DS.TRACT = " & CStr(Tract) & ";"
                'End If

            End If
            PumpFields = GetTableFromDB(QueryString, "pump_withAssoc_fields", connToAVDb)

            'if PumpFields.length equals zero then either all the wells have a use other than
            '"I" (Irrigation) or no associated fields, skip it
            If PumpFields.Rows.Count() = 0 Then GoTo 45

            'as a quick check, see if the collective area of all fields for the Tract in question
            'can accept the total pumped volume at a depth less than specified.
            check_area = 0
            For j = 1 To PumpFields.Rows.Count()
                check_area += PumpFields.Rows(j - 1)("Shape_Area")
            Next j
            If pump_wTract.Rows(i - 1)(1) / check_area > 0.2286 Then
                '0.2286 m = 9 in.  If the code lands here need to figure out what to do
                'MsgBox("More pumped water than the entire Tract can reasonable accept")
            End If
            Dim Latent_fld(50) As Integer
            stuck_in_loop = 0
            k = 0
            Do
                'pick a random field to start allocating water to

47:             choose_fld = Math.Floor(RandomGenerator.NextDouble() * PumpFields.Rows.Count())
                For stuck_in_loop = 1 To k
                    stuck_in_loop2 += 1
                    If choose_fld = Latent_fld(stuck_in_loop) Then
                        If stuck_in_loop2 > 50 Then
                            'MsgBox("Stuck in pumping allocation loop, some water may not be allocated")
                            Exit Do
                        End If
                        GoTo 47
                    End If
                Next
                k += 1
                Latent_fld(k) = choose_fld

                'check to see if all the water can be reasonably applied to the randomly selected field
                FieldsByCanal = FieldsTable.Select("FIELD_NO = " & CStr(PumpFields.Rows(choose_fld)("FIELD_NUMB")))
                check_depth = pump_wTract.Rows(i - 1)(1) / FieldsByCanal(0)("Shape_Area")
                If check_depth < 0.3048 Then 'if all pumped water amounts to < 1ft for selected field, alloc all of it, other wise skip to else statement
46:                 TableOfFieldsWithWaterAllocRow = TableOfFieldsWithWaterAlloc.NewRow()
                    TableOfFieldsWithWaterAllocRow("Tract") = FieldsByCanal(0)("TRACT")
                    TableOfFieldsWithWaterAllocRow("Field_No") = FieldsByCanal(0)("FIELD_NO")
                    TableOfFieldsWithWaterAllocRow("Canal") = FieldsByCanal(0)("CANAL")
                    TableOfFieldsWithWaterAllocRow("Area") = FieldsByCanal(0)("Shape_Area")
                    TableOfFieldsWithWaterAllocRow("Date_") = CurrentDate
                    TableOfFieldsWithWaterAllocRow("Precip_Amt") = Prec_table.Select("Field_No = " & CStr(PumpFields.Rows(choose_fld)("FIELD_NUMB"))).GetValue(0)(1)
                    TableOfFieldsWithWaterAllocRow("ETc") = ET_table.Select("Field_No = " & CStr(PumpFields.Rows(choose_fld)("FIELD_NUMB"))).GetValue(0)(1)
                    TableOfFieldsWithWaterAllocRow("Zr") = Zr_table.Select("Field_No = " & CStr(PumpFields.Rows(choose_fld)("FIELD_NUMB"))).GetValue(0)(1)
                    TableOfFieldsWithWaterAllocRow("SurfWatDelivered") = 0
                    TableOfFieldsWithWaterAllocRow("PumpWatDelivered") = pump_wTract.Rows(i - 1)(1) / FieldsByCanal(0)("Shape_Area") * 1000 'convert to mm for the table
                    'If Pump Water Delivered < 5in. then do zero runoff.
                    'see C:\Eric\Arkansas River Valley\Entire_Basin\Application Depth\Justification_For_Simulating_0_Runoff_In_Code_When_Applied_Amt_Less_Than_5in.xls
                    'for support.
                    If pump_wTract.Rows(i - 1)(1) / FieldsByCanal(0)("Shape_Area") + TableOfFieldsWithWaterAllocRow("Precip_Amt") / 1000 < 0.127 Then
                        '0.127 m = 5 in.
                        TableOfFieldsWithWaterAllocRow("Runoff_Amt") = 0
                    Else
                        'Adjust runoff ammount for different irrigaiton types - JC
                        If FieldsByCanal(0)("IRRG_TYPE") = "Sprinkler" Then
                            TableOfFieldsWithWaterAllocRow("Runoff_Amt") = 0
                        Else
                            RanNum1 = RandomGenerator.NextDouble()
                            Runoff_Fraction = (-1 * Math.Log(RanNum1)) / (1 / lambda)
                            TableOfFieldsWithWaterAllocRow("Runoff_Amt") = ((pump_wTract.Rows(i - 1)(1) / FieldsByCanal(0)("Shape_Area") * 1000) + TableOfFieldsWithWaterAllocRow("Precip_Amt")) * Runoff_Fraction
                        End If
                    End If
                    TableOfFieldsWithWaterAlloc.Rows.Add(TableOfFieldsWithWaterAllocRow)
                    'at this point, the row in the original table should be deleted via
                    'the returned row, but I need to verify how this happens.
                    'the original table is "FieldsTable"
                    FieldsByCanal(0).Delete()
                    'the next for loop was for debug puposes
                    'For j = 1 To FieldsTable.Rows.Count()
                    '    If FieldsTable.Rows(j - 1).RowState() = DataRowState.Deleted Then
                    '        Dim debug_var As String
                    '        debug_var = "Whaaa?"
                    '    End If

                    'Next
                    'the next line is meant to be explicit, the result is of course that all the 
                    'available pumped water was allocated.
                    pump_wTract.Rows(i - 1)(1) = pump_wTract.Rows(i - 1)(1) - pump_wTract.Rows(i - 1)(1)
                Else
                    'call the function that samples a target depth from a log normal distribution
                    Target_Depth = Sample_A_TargetDepth(FieldsByCanal(0)("CROPS" & Right(CStr(CurrentDate), 2)))
                    'if by chance the target depth exceeds 12 in, then I can simply direct the code to
                    'the code in the first part of the if statement.
                    If Target_Depth * FieldsByCanal(0)("Shape_Area") > pump_wTract.Rows(i - 1)(1) Then GoTo 46
                    If MonthlyPumpedAcreFt(TS)(i) > 0 Then
                        TableOfFieldsWithWaterAllocRow = TableOfFieldsWithWaterAlloc.NewRow()
                        TableOfFieldsWithWaterAllocRow("Tract") = FieldsByCanal(0)("TRACT")
                        TableOfFieldsWithWaterAllocRow("Field_No") = FieldsByCanal(0)("FIELD_NO")
                        TableOfFieldsWithWaterAllocRow("Canal") = FieldsByCanal(0)("CANAL")
                        TableOfFieldsWithWaterAllocRow("Area") = FieldsByCanal(0)("Shape_Area")
                        TableOfFieldsWithWaterAllocRow("Date_") = CurrentDate
                        TableOfFieldsWithWaterAllocRow("Precip_Amt") = Prec_table.Select("Field_No = " & CStr(PumpFields.Rows(choose_fld)("FIELD_NUMB"))).GetValue(0)(1)
                        TableOfFieldsWithWaterAllocRow("ETc") = ET_table.Select("Field_No = " & CStr(PumpFields.Rows(choose_fld)("FIELD_NUMB"))).GetValue(0)(1)
                        TableOfFieldsWithWaterAllocRow("Zr") = Zr_table.Select("Field_No = " & CStr(PumpFields.Rows(choose_fld)("FIELD_NUMB"))).GetValue(0)(1)
                        TableOfFieldsWithWaterAllocRow("SurfWatDelivered") = 0
                        TableOfFieldsWithWaterAllocRow("PumpWatDelivered") = Target_Depth * 1000
                        'If Pump Water Delivered < 5in. then do zero runoff.
                        'see C:\Eric\Arkansas River Valley\Entire_Basin\Application Depth\Justification_For_Simulating_0_Runoff_In_Code_When_Applied_Amt_Less_Than_5in.xls
                        'for support.
                        If Target_Depth + TableOfFieldsWithWaterAllocRow("Precip_Amt") / 1000 < 0.127 Then
                            '0.127 m = 5 in.
                            TableOfFieldsWithWaterAllocRow("Runoff_Amt") = 0
                        Else
                            'Adjust runoff ammount for different irrigaiton types - JC
                            If FieldsByCanal(0)("IRRG_TYPE") = "Sprinkler" Then
                                TableOfFieldsWithWaterAllocRow("Runoff_Amt") = 0
                            Else
                                RanNum1 = RandomGenerator.NextDouble()
                                Runoff_Fraction = (-1 * Math.Log(RanNum1)) / (1 / lambda)
                                TableOfFieldsWithWaterAllocRow("Runoff_Amt") = ((Target_Depth * 1000) + TableOfFieldsWithWaterAllocRow("Precip_Amt")) * Runoff_Fraction
                            End If
                        End If
                        'deduct the allocated amount from the original pumped volume to find remaining volume
                        pump_wTract.Rows(i - 1)(1) = pump_wTract.Rows(i - 1)(1) - (Target_Depth * FieldsByCanal(0)("Shape_Area"))
                        'add the row to the table
                        TableOfFieldsWithWaterAlloc.Rows.Add(TableOfFieldsWithWaterAllocRow)
                        'delete the row and check to see how this is handled in the parent table
                        FieldsByCanal(0).Delete()
                    End If
                End If

            Loop Until pump_wTract.Rows(i - 1)(1) = 0 'this loop will end once all the pumped water has been allocated
45:     Next i

        'Allocation of the surface water begins here
        For i = 1 To 6

            If Upstream_or_not1 Then
                Select Case i
                    Case 1 ' "Catlin Canal"
                        Diverted_Amt = Canal1DivertedAmt_m3perWk
                        Select_Canal = "Catlin Canal"
                    Case 2 '"Fort Lyon Canal US"
                        Diverted_Amt = Canal2DivertedAmt_m3perWk
                        'FieldsByCanal = FieldsTable.Select("CANAL = 'Fort Lyon Canal US' AND (IRRIG_TIME_CODE" & Right(CStr(CurrentDate), 2) & " = " & CStr(TimingCodeActive(0)) & " OR IRRIG_TIME_CODE" & Right(CStr(CurrentDate), 2) & " = " & CStr(TimingCodeActive(1)) & " OR IRRIG_TIME_CODE" & Right(CStr(CurrentDate), 2) & " = " & CStr(TimingCodeActive(2)) & ")", "SortByValue ASC")
                        Select_Canal = "Fort Lyon Canal US"
                    Case 3 '"Holbrook Canal"
                        Diverted_Amt = Canal3DivertedAmt_m3perWk
                        'FieldsByCanal = FieldsTable.Select("CANAL = 'Holbrook Canal' AND (IRRIG_TIME_CODE" & Right(CStr(CurrentDate), 2) & " = " & CStr(TimingCodeActive(0)) & " OR IRRIG_TIME_CODE" & Right(CStr(CurrentDate), 2) & " = " & CStr(TimingCodeActive(1)) & " OR IRRIG_TIME_CODE" & Right(CStr(CurrentDate), 2) & " = " & CStr(TimingCodeActive(2)) & ")", "SortByValue ASC")
                        Select_Canal = "Holbrook Canal"
                    Case 4 '"Otero Canal"
                        Diverted_Amt = Canal4DivertedAmt_m3perWk
                        'FieldsByCanal = FieldsTable.Select("CANAL = 'Otero Canal' AND (IRRIG_TIME_CODE" & Right(CStr(CurrentDate), 2) & " = " & CStr(TimingCodeActive(0)) & " OR IRRIG_TIME_CODE" & Right(CStr(CurrentDate), 2) & " = " & CStr(TimingCodeActive(1)) & " OR IRRIG_TIME_CODE" & Right(CStr(CurrentDate), 2) & " = " & CStr(TimingCodeActive(2)) & ")", "SortByValue ASC")
                        Select_Canal = "Otero Canal"
                    Case 5 '"Rocky Ford Ditch"
                        Diverted_Amt = Canal5DivertedAmt_m3perWk
                        'FieldsByCanal = FieldsTable.Select("CANAL = 'Rocky Ford Ditch' AND (IRRIG_TIME_CODE" & Right(CStr(CurrentDate), 2) & " = " & CStr(TimingCodeActive(0)) & " OR IRRIG_TIME_CODE" & Right(CStr(CurrentDate), 2) & " = " & CStr(TimingCodeActive(1)) & " OR IRRIG_TIME_CODE" & Right(CStr(CurrentDate), 2) & " = " & CStr(TimingCodeActive(2)) & ")", "SortByValue ASC")
                        Select_Canal = "Rocky Ford Ditch"
                    Case 6 '"Rocky Ford Highline"
                        Diverted_Amt = Canal6DivertedAmt_m3perWk
                        'FieldsByCanal = FieldsTable.Select("CANAL = 'Rocky Ford Highline' AND (IRRIG_TIME_CODE" & Right(CStr(CurrentDate), 2) & " = " & CStr(TimingCodeActive(0)) & " OR IRRIG_TIME_CODE" & Right(CStr(CurrentDate), 2) & " = " & CStr(TimingCodeActive(1)) & " OR IRRIG_TIME_CODE" & Right(CStr(CurrentDate), 2) & " = " & CStr(TimingCodeActive(2)) & ")", "SortByValue ASC")
                        Select_Canal = "Rocky Ford Highline"
                    Case Else
                        Diverted_Amt = 0
                End Select
            Else
                If CurrentDate < #11/1/2007# Then
                    Select Case i
                        Case 1 '"Amity Canal"
                            Diverted_Amt = Canal1DivertedAmt_m3perWk
                            'FieldsByCanal = FieldsTable.Select("CANAL = 'Amity Canal' AND (IRRIG_TIME_CODE" & Right(CStr(CurrentDate), 2) & " = " & CStr(TimingCodeActive(0)) & " OR IRRIG_TIME_CODE" & Right(CStr(CurrentDate), 2) & " = " & CStr(TimingCodeActive(1)) & " OR IRRIG_TIME_CODE" & Right(CStr(CurrentDate), 2) & " = " & CStr(TimingCodeActive(2)) & ")", "SortByValue ASC")
                            Select_Canal = "Amity Canal"
                        Case 2 '"Buffalo Canal"
                            Diverted_Amt = Canal2DivertedAmt_m3perWk
                            'FieldsByCanal = FieldsTable.Select("CANAL = 'Buffalo  Canal' AND (IRRIG_TIME_CODE" & Right(CStr(CurrentDate), 2) & " = " & CStr(TimingCodeActive(0)) & " OR IRRIG_TIME_CODE" & Right(CStr(CurrentDate), 2) & " = " & CStr(TimingCodeActive(1)) & " OR IRRIG_TIME_CODE" & Right(CStr(CurrentDate), 2) & " = " & CStr(TimingCodeActive(2)) & ")", "SortByValue ASC")
                            Select_Canal = "Buffalo Canal"
                        Case 3 '"Fort Bent Canal"
                            Diverted_Amt = Canal3DivertedAmt_m3perWk
                            'FieldsByCanal = FieldsTable.Select("CANAL = 'Fort Bent Canal' AND (IRRIG_TIME_CODE" & Right(CStr(CurrentDate), 2) & " = " & CStr(TimingCodeActive(0)) & " OR IRRIG_TIME_CODE" & Right(CStr(CurrentDate), 2) & " = " & CStr(TimingCodeActive(1)) & " OR IRRIG_TIME_CODE" & Right(CStr(CurrentDate), 2) & " = " & CStr(TimingCodeActive(2)) & ")", "SortByValue ASC")
                            Select_Canal = "Fort Bent Canal"
                        Case 4 '"Fort Lyon Canal DS"
                            Diverted_Amt = Canal4DivertedAmt_m3perWk
                            'FieldsByCanal = FieldsTable.Select("CANAL = 'Fort Lyon Canal DS' AND (IRRIG_TIME_CODE" & Right(CStr(CurrentDate), 2) & " = " & CStr(TimingCodeActive(0)) & " OR IRRIG_TIME_CODE" & Right(CStr(CurrentDate), 2) & " = " & CStr(TimingCodeActive(1)) & " OR IRRIG_TIME_CODE" & Right(CStr(CurrentDate), 2) & " = " & CStr(TimingCodeActive(2)) & ")", "SortByValue ASC")
                            Select_Canal = "Fort Lyon Canal DS"
                        Case 5 '"Hyde Ditch"
                            Diverted_Amt = Canal5DivertedAmt_m3perWk
                            'FieldsByCanal = FieldsTable.Select("CANAL = 'Hyde Ditch' AND (IRRIG_TIME_CODE" & Right(CStr(CurrentDate), 2) & " = " & CStr(TimingCodeActive(0)) & " OR IRRIG_TIME_CODE" & Right(CStr(CurrentDate), 2) & " = " & CStr(TimingCodeActive(1)) & " OR IRRIG_TIME_CODE" & Right(CStr(CurrentDate), 2) & " = " & CStr(TimingCodeActive(2)) & ")", "SortByValue ASC")
                            Select_Canal = "Hyde Ditch"
                        Case 6 '"Lamar Canal"
                            Diverted_Amt = Canal6DivertedAmt_m3perWk
                            'FieldsByCanal = FieldsTable.Select("CANAL = 'Lamar Canal' AND (IRRIG_TIME_CODE" & Right(CStr(CurrentDate), 2) & " = " & CStr(TimingCodeActive(0)) & " OR IRRIG_TIME_CODE" & Right(CStr(CurrentDate), 2) & " = " & CStr(TimingCodeActive(1)) & " OR IRRIG_TIME_CODE" & Right(CStr(CurrentDate), 2) & " = " & CStr(TimingCodeActive(2)) & ")", "SortByValue ASC")
                            Select_Canal = "Lamar Canal" '& XY Graham
                        Case Else
                            Diverted_Amt = 0
                    End Select
                Else ' For the Extended Time Period - JC
                    Select Case i
                        Case 1 '"Amity Canal"
                            Diverted_Amt = (WeeklyCanalDivTable.Select("Date = " & CurrentDate & ""))(0)(2)
                            Select_Canal = "Amity Canal"
                        Case 2 '"Buffalo Canal"
                            Diverted_Amt = (WeeklyCanalDivTable.Select("Date = " & CurrentDate & ""))(0)(3)
                            Select_Canal = "Buffalo Canal"
                        Case 3 '"Fort Bent Canal"
                            Diverted_Amt = (WeeklyCanalDivTable.Select("Date = " & CurrentDate & ""))(0)(4)
                            Select_Canal = "Fort Bent Canal"
                        Case 4 '"Fort Lyon Canal DS"
                            Diverted_Amt = (WeeklyCanalDivTable.Select("Date = " & CurrentDate & ""))(0)(5)
                            Select_Canal = "Fort Lyon Canal DS"
                        Case 5 '"Hyde Ditch"
                            Diverted_Amt = (WeeklyCanalDivTable.Select("Date = " & CurrentDate & ""))(0)(6)
                            Select_Canal = "Hyde Ditch"
                        Case 6 '"Lamar Canal"
                            Diverted_Amt = (WeeklyCanalDivTable.Select("Date = " & CurrentDate & ""))(0)(7)
                            Select_Canal = "Lamar Canal"
                        Case Else
                            Diverted_Amt = 0
                    End Select
                End If
            End If

            Canal_Area = Areas_Table.Select("CANAL = '" & Select_Canal & "'") ' JOHN If making IF statement above (line 6406) need to make same adjustment here? -- I think its OK, Past John - JC
            Total_Area = Canal_Area.GetValue(0)(1)
            Within_Area = Canal_Area.GetValue(0)(2)
            Diverted_Amt = Diverted_Amt * 1.0          'If running a scenario, apply correction here. Don't do that big fella - JC

            If Upstream_or_not1 Then
                If Select_Canal = "Fort Lyon Canal US" Then
                    ModeledCommandArea_Amt = 0.1776 * Diverted_Amt '0.0888 is the proportion of the modeled region within Fort Lyon Canal US, but shares are double counted.
                Else
                    ModeledCommandArea_Amt = (Within_Area / Total_Area) * Diverted_Amt   'Correct for portion of Command area that lies within the modeled region
                End If
            Else
                If Canal = "Fort Lyon Canal DS" Then
                    'Added on 6-25-09: After looking at the calculated "Observed" ground water return flow, they seem too low.
                    'In an effort to look at where too much water might coming from, it seems that too much
                    'water has been simulated as making its way east of May Valley Road (County Road 8).  After
                    'speaking with Manny Torrez on 6-25-09 it sounds like there are (ballpark) 7,000 shares of 
                    'water east of the May Valley drain out of 93,000 total under the Fort Lyon.  Therefore,
                    '7,000/93,000 = 7.50%

                    'ModeledCommandArea_Amt = 0.2055 * NonSeeped_Amt '0.2055 is the proportion of the modeled region within Fort Lyon Canal DS
                    ModeledCommandArea_Amt = 0.0752 * Diverted_Amt '0.0752 is the new proportion of actual water making its into the 
                    'modeled region within Fort Lyon Canal DS
                Else
                    ModeledCommandArea_Amt = (Within_Area / Total_Area) * Diverted_Amt
                End If
            End If

            'Deduct seepage
            If Upstream_or_not1 Then
                Select Case i
                    Case 1 ' "Catlin Canal"
                        NonSeeped_Amt = ModeledCommandArea_Amt * 0.906 '0.83 'Commented Out are Eric's old values for seepage.
                    Case 2 '"Fort Lyon Canal US"                             'I calculated different values for a seepage more
                        NonSeeped_Amt = ModeledCommandArea_Amt * 0.916 '0.915'recently so I changed the values for the model run
                    Case 3 '"Holbrook Canal"                                 'to the new seepage percentages.
                        NonSeeped_Amt = ModeledCommandArea_Amt * 0.955 '0.935   'Chris Shultz 9/1/16
                    Case 4 '"Otero Canal"
                        NonSeeped_Amt = ModeledCommandArea_Amt * 0.754 '0.79
                    Case 5 '"Rocky Ford Ditch"
                        NonSeeped_Amt = ModeledCommandArea_Amt * 0.798 '0.68
                    Case 6 '"Rocky Ford Highline"
                        NonSeeped_Amt = ModeledCommandArea_Amt * 0.978 '0.96
                    Case Else
                        NonSeeped_Amt = 0
                End Select
            Else
                Select Case i
                    Case 1 '"Amity Canal"
                        NonSeeped_Amt = ModeledCommandArea_Amt * 0.665 'John wasn't as fancy as Chris so I stuck with what Eric did yo -JC
                    Case 2 '"Buffalo Canal"
                        NonSeeped_Amt = ModeledCommandArea_Amt * 0.99
                    Case 3 '"Fort Bent Canal"
                        NonSeeped_Amt = ModeledCommandArea_Amt * 0.8
                    Case 4 '"Fort Lyon Canal DS"
                        NonSeeped_Amt = ModeledCommandArea_Amt * 0.88
                    Case 5 '"Hyde Ditch"
                        NonSeeped_Amt = ModeledCommandArea_Amt * 0.99
                    Case 6 '"Lamar Canal"
                        NonSeeped_Amt = ModeledCommandArea_Amt * 0.93
                    Case Else
                        NonSeeped_Amt = 0
                End Select
            End If
            ModeledCommandArea_Amt = NonSeeped_Amt

            'Start allocating water until all of the "ModeledCommandArea_Amt" is gone
            'j = 0   'need an indexing term
            n = 0   'This is to rotate through crop rotation categories, meant to help spread the water out 
            'a little more evenly
            cumulative_ActiveArea = 0
            While Not ModeledCommandArea_Amt = 0
                'because I was running into a problem with either 1) water always being allocated to the higher
                'priority crops and therefore never making it to the lower value crops (those with monthly
                'rotation, or 2) not allocating all of the diverted water before running through the 
                'queried fields, I had to change up the approach.  Now I rotate through the timing codes to
                'ensure each category is having some of its fields allocated to.  I use the timing code to do this.
44:             FieldsByCanal = FieldsTable.Select("CANAL = '" & Select_Canal & "' AND IRRIG_TIME_CODE" & Right(CStr(CurrentDate), 2) & " = " & CStr(TimingCodeActive(n)), "SortByValue ASC") '& " OR IRRIG_TIME_CODE" & Right(CStr(CurrentDate), 2) & " = " & CStr(TimingCodeActive(1)) & " OR IRRIG_TIME_CODE" & Right(CStr(CurrentDate), 2) & " = " & CStr(TimingCodeActive(2)) & ")", "SortByValue ASC")
                'the next line is a bit of error handling.  If all the fields calling for water 
                '(based on timing code) have received water, then allocated water to fields
                'with an 'off' timing code, preferrably fields with a monthly rotation. This is
                'accomplished by sorting in descending order
                If FieldsByCanal.Length() = 0 Then
                    If FieldsTable.Select("CANAL = '" & Select_Canal & "' AND (IRRIG_TIME_CODE" & Right(CStr(CurrentDate), 2) & " = " & CStr(TimingCodeActive(0)) & " OR IRRIG_TIME_CODE" & Right(CStr(CurrentDate), 2) & " = " & CStr(TimingCodeActive(1)) & " OR IRRIG_TIME_CODE" & Right(CStr(CurrentDate), 2) & " = " & CStr(TimingCodeActive(2)) & ")", Nothing).Length() = 0 Then
                        FieldsByCanal = FieldsTable.Select("CANAL = '" & Select_Canal & "' AND (IRRIG_TIME_CODE" & Right(CStr(CurrentDate), 2) & " = 4 OR IRRIG_TIME_CODE" & Right(CStr(CurrentDate), 2) & " = 5 OR IRRIG_TIME_CODE" & Right(CStr(CurrentDate), 2) & " = 6 OR IRRIG_TIME_CODE" & Right(CStr(CurrentDate), 2) & "=7)", Nothing)
                    End If
                    If FieldsTable.Select("Canal = '" & Select_Canal & "' AND (IRRIG_TIME_CODE" & Right(CStr(CurrentDate), 2) & " = 4 OR IRRIG_TIME_CODE" & Right(CStr(CurrentDate), 2) & " = 5 OR IRRIG_TIME_CODE" & Right(CStr(CurrentDate), 2) & " = 6 OR IRRIG_TIME_CODE" & Right(CStr(CurrentDate), 2) & "=7)", Nothing).Length() = 0 Then
                        FieldsByCanal = FieldsTable.Select("CANAL = '" & Select_Canal & "' AND (IRRIG_TIME_CODE" & Right(CStr(CurrentDate), 2) & " = 2 Or Irrig_TIME_CODE" & Right(CStr(CurrentDate), 2) & " = 3)", Nothing)
                    End If
                    If FieldsTable.Select("Canal = '" & Select_Canal & "' AND (IRRIG_TIME_CODE" & Right(CStr(CurrentDate), 2) & " = 2 OR IRRIG_TIME_CODE" & Right(CStr(CurrentDate), 2) & " = 3 OR IRRIG_TIME_CODE" & Right(CStr(CurrentDate), 2) & " = 4 OR IRRIG_TIME_CODE" & Right(CStr(CurrentDate), 2) & " = 5 OR IRRIG_TIME_CODE" & Right(CStr(CurrentDate), 2) & " = 6 OR IRRIG_TIME_CODE" & Right(CStr(CurrentDate), 2) & " = 7)", Nothing).Length() = 0 Then
                        'if the code falls here, then I've got some left over water.  Therefore, up the water
                        'allocation to those field that have already recieved water.
                        k = 0
                        additional_depth = ModeledCommandArea_Amt / cumulative_ActiveArea
                        sw_leftoverH2O.WriteLine(Select_Canal & vbTab & CurrentDate.ToShortDateString & vbTab & Format(ModeledCommandArea_Amt, "0.00") & vbTab & Format(cumulative_ActiveArea, "0.00") & vbTab & Format(ModeledCommandArea_Amt / cumulative_ActiveArea, "0.00"))
                        sw_leftoverH2O.Flush()
                        For k = 0 To TableOfFieldsWithWaterAlloc.Rows.Count() - 1
                            'allocate the additional depth to all fields to ensure all water is used up
                            If TableOfFieldsWithWaterAlloc.Rows(k)("Canal") = Select_Canal And TableOfFieldsWithWaterAlloc.Rows(k)("PumpWatDelivered") = 0 Then
                                TableOfFieldsWithWaterAlloc.Rows(k)("SurfWatDelivered") = TableOfFieldsWithWaterAlloc.Rows(k)("SurfWatDelivered") + (additional_depth * 1000)
                                If TableOfFieldsWithWaterAlloc.Rows(k)("SurfWatDelivered") + TableOfFieldsWithWaterAllocRow("Precip_Amt") / 1000 < 0.127 Then
                                    '0.127 m = 5 in.
                                    TableOfFieldsWithWaterAllocRow("Runoff_Amt") = 0
                                Else
                                    ' Adjust runoff for different irrigation types - JC
                                    If FieldsByCanal(0)("IRRG_TYPE") = "Sprinkler" Then
                                        TableOfFieldsWithWaterAllocRow("Runoff_Amt") = 0
                                    Else
                                        RanNum1 = RandomGenerator.NextDouble()
                                        Runoff_Fraction = (-1 * Math.Log(RanNum1)) / (1 / lambda)
                                        TableOfFieldsWithWaterAllocRow("Runoff_Amt") = (TableOfFieldsWithWaterAlloc.Rows(k)("SurfWatDelivered") + TableOfFieldsWithWaterAllocRow("Precip_Amt")) * Runoff_Fraction
                                    End If
                                End If
                                ModeledCommandArea_Amt = ModeledCommandArea_Amt - (additional_depth * TableOfFieldsWithWaterAlloc.Rows(k)("Area"))
                                If ModeledCommandArea_Amt < 10 Then
                                    ModeledCommandArea_Amt = 0
                                    Exit While
                                End If
                            End If
                        Next k
                    End If
                End If
                If FieldsByCanal.Length() = 0 Then
                    n += 1
                    If n >= 3 Then n = 0
                    GoTo 44
                End If
                n += 1
                If n >= 3 Then n = 0
                check_depth = ModeledCommandArea_Amt / FieldsByCanal(0)("Shape_Area")
                If check_depth < 0.4064 Then '0.4064 m = 16 in.
                    TableOfFieldsWithWaterAllocRow = TableOfFieldsWithWaterAlloc.NewRow()
                    TableOfFieldsWithWaterAllocRow("Tract") = FieldsByCanal(0)("TRACT")
                    TableOfFieldsWithWaterAllocRow("Field_No") = FieldsByCanal(0)("FIELD_NO")
                    TableOfFieldsWithWaterAllocRow("Canal") = FieldsByCanal(0)("CANAL")
                    TableOfFieldsWithWaterAllocRow("Area") = FieldsByCanal(0)("Shape_Area")
                    TableOfFieldsWithWaterAllocRow("Date_") = CurrentDate
                    Try
                        TableOfFieldsWithWaterAllocRow("Precip_Amt") = Prec_table.Select("Field_No = " & CStr(FieldsByCanal(0)("Field_No"))).GetValue(0)(1)
                        Prec_holdover = Prec_table.Select("Field_No = " & CStr(FieldsByCanal(0)("Field_No"))).GetValue(0)(1)
                        TableOfFieldsWithWaterAllocRow("ETc") = ET_table.Select("Field_No = " & CStr(FieldsByCanal(0)("Field_No"))).GetValue(0)(1)
                        ET_holdover = ET_table.Select("Field_No = " & CStr(FieldsByCanal(0)("Field_No"))).GetValue(0)(1)
                        TableOfFieldsWithWaterAllocRow("Zr") = Zr_table.Select("Field_No = " & CStr(FieldsByCanal(0)("Field_No"))).GetValue(0)(1)
                        Zr_holdover = Zr_table.Select("Field_No = " & CStr(FieldsByCanal(0)("Field_No"))).GetValue(0)(1)
                    Catch ex As Exception
                        TableOfFieldsWithWaterAllocRow("Precip_Amt") = Prec_holdover
                        TableOfFieldsWithWaterAllocRow("ETc") = ET_holdover
                        TableOfFieldsWithWaterAllocRow("Zr") = Zr_holdover
                    End Try

                    TableOfFieldsWithWaterAllocRow("SurfWatDelivered") = ModeledCommandArea_Amt / FieldsByCanal(0)("Shape_Area") * 1000 'convert to mm for the table
                    TableOfFieldsWithWaterAllocRow("PumpWatDelivered") = 0
                    'If Pump Water Delivered < 5in. then do zero runoff.
                    'see C:\Eric\Arkansas River Valley\Entire_Basin\Application Depth\Justification_For_Simulating_0_Runoff_In_Code_When_Applied_Amt_Less_Than_5in.xls
                    'for support.
                    If (ModeledCommandArea_Amt / FieldsByCanal(0)("Shape_Area") + TableOfFieldsWithWaterAllocRow("Precip_Amt") / 1000) < 0.127 Then
                        '0.127 m = 5 in.
                        TableOfFieldsWithWaterAllocRow("Runoff_Amt") = 0
                    Else
                        ' Adjust runoff for different irrigation types - JC
                        If FieldsByCanal(0)("IRRG_TYPE") = "Sprinkler" Then
                            TableOfFieldsWithWaterAllocRow("Runoff_Amt") = 0
                        Else
                            RanNum1 = RandomGenerator.NextDouble()
                            Runoff_Fraction = (-1 * Math.Log(RanNum1)) / (1 / lambda)
                            TableOfFieldsWithWaterAllocRow("Runoff_Amt") = ((ModeledCommandArea_Amt / FieldsByCanal(0)("Shape_Area") * 1000) + TableOfFieldsWithWaterAllocRow("Precip_Amt")) * Runoff_Fraction
                        End If
                    End If
                    TableOfFieldsWithWaterAlloc.Rows.Add(TableOfFieldsWithWaterAllocRow)
                    ModeledCommandArea_Amt = ModeledCommandArea_Amt - ModeledCommandArea_Amt
                Else
                    'more than enough water for the current field in the Queue, therefore sample
                    'a target depth and allocated that amount of water and deduct it from the 
                    'ModeledCommandArea_Amt
                    Target_Depth = Sample_A_TargetDepth(FieldsByCanal(0)("CROPS" & Right(CStr(CurrentDate), 2)))
                    'in order to ensure more of the lower priority crop types get water, the 
                    'probabilistic statement that follows is meant to skip over the occasional
                    'high value crop so that they don't always recieve water every single week.

                    '**********************************************************************************
                    'After changing up how was is allocated using the TimingCodeActive variable
                    'the next two if statements are not needed
                    'RanNum1 = RandomGenerator.NextDouble()
                    'If RanNum1 < 0.3 And FieldsByCanal(j)("IRRIG_TIME_CODE" & Right(CStr(CurrentDate), 2)) = 1 Then
                    '    'This is giving a 45% chance that the high priority crop doesn't recieve water
                    '    Target_Depth = 0
                    'End If
                    'If RanNum1 < 0.35 And (FieldsByCanal(j)("IRRIG_TIME_CODE" & Right(CStr(CurrentDate), 2)) = 2 Or FieldsByCanal(j)("IRRIG_TIME_CODE" & Right(CStr(CurrentDate), 2)) = 3) Then
                    '    'This is giving a 30% chance that the high priority crop doesn't recieve water
                    '    Target_Depth = 0
                    'End If
                    '**********************************************************************************

                    TableOfFieldsWithWaterAllocRow = TableOfFieldsWithWaterAlloc.NewRow()
                    TableOfFieldsWithWaterAllocRow("Tract") = FieldsByCanal(0)("TRACT")
                    TableOfFieldsWithWaterAllocRow("Field_No") = FieldsByCanal(0)("FIELD_NO")
                    TableOfFieldsWithWaterAllocRow("Canal") = FieldsByCanal(0)("CANAL")
                    TableOfFieldsWithWaterAllocRow("Area") = FieldsByCanal(0)("Shape_Area")
                    TableOfFieldsWithWaterAllocRow("Date_") = CurrentDate
                    Try
                        TableOfFieldsWithWaterAllocRow("Precip_Amt") = Prec_table.Select("Field_No = " & CStr(FieldsByCanal(0)("Field_No"))).GetValue(0)(1)
                        Prec_holdover = Prec_table.Select("Field_No = " & CStr(FieldsByCanal(0)("Field_No"))).GetValue(0)(1)
                        TableOfFieldsWithWaterAllocRow("ETc") = ET_table.Select("Field_No = " & CStr(FieldsByCanal(0)("Field_No"))).GetValue(0)(1)
                        ET_holdover = ET_table.Select("Field_No = " & CStr(FieldsByCanal(0)("Field_No"))).GetValue(0)(1)
                        TableOfFieldsWithWaterAllocRow("Zr") = Zr_table.Select("Field_No = " & CStr(FieldsByCanal(0)("Field_No"))).GetValue(0)(1)
                        Zr_holdover = Zr_table.Select("Field_No = " & CStr(FieldsByCanal(0)("Field_No"))).GetValue(0)(1)
                    Catch ex As Exception
                        TableOfFieldsWithWaterAllocRow("Precip_Amt") = Prec_holdover
                        TableOfFieldsWithWaterAllocRow("ETc") = ET_holdover
                        TableOfFieldsWithWaterAllocRow("Zr") = Zr_holdover
                    End Try
                    'TableOfFieldsWithWaterAllocRow("Precip_Amt") = Prec_table.Select("Field_No = " & CStr(FieldsByCanal(0)("Field_No"))).GetValue(0)(1)
                    'TableOfFieldsWithWaterAllocRow("ETc") = ET_table.Select("Field_No = " & CStr(FieldsByCanal(0)("Field_No"))).GetValue(0)(1)
                    'TableOfFieldsWithWaterAllocRow("Zr") = Zr_table.Select("Field_No = " & CStr(FieldsByCanal(0)("Field_No"))).GetValue(0)(1)
                    TableOfFieldsWithWaterAllocRow("SurfWatDelivered") = Target_Depth * 1000
                    TableOfFieldsWithWaterAllocRow("PumpWatDelivered") = 0
                    'If Pump Water Delivered < 5in. then do zero runoff.
                    'see C:\Eric\Arkansas River Valley\Entire_Basin\Application Depth\Justification_For_Simulating_0_Runoff_In_Code_When_Applied_Amt_Less_Than_5in.xls
                    'for support.
                    If Target_Depth + TableOfFieldsWithWaterAllocRow("Precip_Amt") / 1000 < 0.127 Then
                        '0.127 m = 5 in.
                        TableOfFieldsWithWaterAllocRow("Runoff_Amt") = 0
                    Else
                        ' Adjust runoff for different irrigation types - JC
                        If FieldsByCanal(0)("IRRG_TYPE") = "Sprinkler" Then
                            TableOfFieldsWithWaterAllocRow("Runoff_Amt") = 0
                        Else
                            RanNum1 = RandomGenerator.NextDouble()
                            Runoff_Fraction = (-1 * Math.Log(RanNum1)) / (1 / lambda)
                            TableOfFieldsWithWaterAllocRow("Runoff_Amt") = ((Target_Depth * 1000) + TableOfFieldsWithWaterAllocRow("Precip_Amt")) * Runoff_Fraction
                        End If
                    End If
                    TableOfFieldsWithWaterAlloc.Rows.Add(TableOfFieldsWithWaterAllocRow)
                    ModeledCommandArea_Amt = ModeledCommandArea_Amt - (Target_Depth * FieldsByCanal(0)("Shape_Area"))
                End If
                cumulative_ActiveArea += FieldsByCanal(0)("Shape_Area")
                FieldsByCanal(0).Delete()
                'j += 1
            End While

        Next i

        'at this point all of the pumped and surface water should have been allocated.
        'So, cycle through all remaining undeleted fields and add them to the
        'WaterAllocation Table accounting for ET and precip and the like.  Should be 
        'able to use the "RowState" member to accomplish this.

        'Also, because I may have skipped the occasional high value crop, some rows in 
        'the surface water allocation should not have been deleted.
        For i = 0 To FieldsTable.Rows.Count() - 1
            If Not FieldsTable.Rows(i).RowState() = DataRowState.Deleted Then
                TableOfFieldsWithWaterAllocRow = TableOfFieldsWithWaterAlloc.NewRow()
                TableOfFieldsWithWaterAllocRow("Tract") = FieldsTable.Rows(i)("TRACT")
                TableOfFieldsWithWaterAllocRow("Field_No") = FieldsTable.Rows(i)("FIELD_NO")
                'TableOfFieldsWithWaterAllocRow("Canal") = FieldsByCanal(i)("CANAL")
                TableOfFieldsWithWaterAllocRow("Area") = FieldsTable.Rows(i)("Shape_Area")
                TableOfFieldsWithWaterAllocRow("Date_") = CurrentDate
                Try
                    TableOfFieldsWithWaterAllocRow("Precip_Amt") = Prec_table.Select("Field_No = " & CStr(FieldsTable.Rows(i)("Field_No"))).GetValue(0)(1)
                    Prec_holdover = Prec_table.Select("Field_No = " & CStr(FieldsTable.Rows(i)("Field_No"))).GetValue(0)(1)
                    TableOfFieldsWithWaterAllocRow("ETc") = ET_table.Select("Field_No = " & CStr(FieldsTable.Rows(i)("Field_No"))).GetValue(0)(1)
                    ET_holdover = ET_table.Select("Field_No = " & CStr(FieldsTable.Rows(i)("Field_No"))).GetValue(0)(1)
                    TableOfFieldsWithWaterAllocRow("Zr") = Zr_table.Select("Field_No = " & CStr(FieldsTable.Rows(i)("Field_No"))).GetValue(0)(1)
                    Zr_holdover = Zr_table.Select("Field_No = " & CStr(FieldsTable.Rows(i)("Field_No"))).GetValue(0)(1)
                Catch ex As Exception
                    TableOfFieldsWithWaterAllocRow("Precip_Amt") = Prec_holdover
                    TableOfFieldsWithWaterAllocRow("ETc") = ET_holdover
                    TableOfFieldsWithWaterAllocRow("Zr") = Zr_holdover
                End Try
                TableOfFieldsWithWaterAllocRow("SurfWatDelivered") = 0
                TableOfFieldsWithWaterAllocRow("PumpWatDelivered") = 0
                If TableOfFieldsWithWaterAllocRow("Precip_Amt") / 1000 < 0.05 Then
                    '0.05 m = 1.96 (~2) in.
                    TableOfFieldsWithWaterAllocRow("Runoff_Amt") = 0
                Else
                    TableOfFieldsWithWaterAllocRow("Runoff_Amt") = TableOfFieldsWithWaterAllocRow("Precip_Amt") * 0.3 'need to check that using "Precip_Amt" in this for of the variable works
                End If
                TableOfFieldsWithWaterAlloc.Rows.Add(TableOfFieldsWithWaterAllocRow)
            End If
        Next i
        'this next for loop is to avoid problems I was having in the "InsertValuesInDBTable" Command
        'I'm thinking that if I clear out the problem column (since at this point I don't need it anymore)
        'then everything will work OK.
        For i = 0 To TableOfFieldsWithWaterAlloc.Rows.Count() - 1
            TableOfFieldsWithWaterAlloc.Rows(i)("Canal") = Nothing
        Next i

        TableOfFieldsWithWaterAlloc.TableName = "WaterAllocation" & DateStr
        SQL_inserter.DeleteExistingTable(TableOfFieldsWithWaterAlloc.TableName())
        SQL_inserter.CreateTableInDB(TableOfFieldsWithWaterAlloc)
        SQL_inserter.InsertValuesInDBTable(TableOfFieldsWithWaterAlloc)

        connToAVDb.Close()
        connToAVDb_Copy.Close()

    End Function
    Private Function Sample_A_TargetDepth(ByVal CurrentCrop As String) As Single
        Dim mean As Single
        Dim std_dev As Single
        Dim RanNum1 As Single
        Dim RanNum2 As Single
        Dim x1 As Single
        Dim x2 As Single
        Dim w As Single
        Dim y1 As Single
        Dim y2 As Single
        Dim choose As Single
        Dim Target_Depth As Single
        Dim RandomGenerator2 As Random
        RandomGenerator2 = New Random

        'Choose a target Depth
        'Added some new code on 1/1/2010 to account for field data
        TargetValues(CurrentCrop, mean, std_dev)
410:    Do
            RanNum1 = RandomGenerator2.NextDouble()
            RanNum2 = RandomGenerator2.NextDouble()
            x1 = 2 * RanNum1 - 1
            x2 = 2 * RanNum2 - 1
            w = Math.Pow(x1, 2) + Math.Pow(x2, 2)
        Loop Until w < 1

        w = Math.Sqrt((-2 * Math.Log(w)) / w)
        y1 = x1 * w
        y2 = x2 * w

        choose = RandomGenerator2.NextDouble()
        If choose < 0.5 Then
            Target_Depth = y1 * (std_dev) + (mean)  'Target Depth is in meters
        Else
            Target_Depth = y2 * (std_dev) + (mean)
        End If

        Target_Depth = Math.Exp(Target_Depth)   'this is because the std_dev and mean are from normal distributions but I'm trying to sample from a log normal distribution, hence the exp()
        'Return Target Depth in meters
        Target_Depth = Target_Depth / 39.37
        If Target_Depth <= 0 Then GoTo 410 'Label 410 just a few lines up
        If Target_Depth > 0.508 Then GoTo 410
        Return Target_Depth
    End Function

    Private Function CheckAndAdjustHighValuesIfNecessary(ByRef m_Table As DataTable) As Boolean
        If m_Table.Rows.Count() = 1 Then Exit Function
        Dim i As Integer
        Dim ct As Integer
        Dim index As Integer
        index = m_Table.Rows.Count()
        Dim FieldsArray(index) As Boolean
        Dim Num_Different_Fields_Involved As Integer = 0
        Dim IsThereAProblem As Boolean = False
        Dim RanNum1 As Double
        Dim RanNum2 As Double
        Dim lambda As Double = 0.084
        Dim RandomGenerator As Random
        RandomGenerator = New Random
        Dim ReallocateAmt_m3 As Double
        Dim Runoff_Fraction As Double
        Dim RanNumInt1 As Integer
        Dim RanNumInt2 As Integer

        For i = 0 To m_Table.Rows.Count() - 1
            'If m_Table.Rows(i)(6) > 2000 Then MsgBox("Unusually large allocation amount, Tract " & m_Table.Rows(i)("Tract") & " Field " & m_Table.Rows(i)("Field_No"), MsgBoxStyle.Exclamation, "Error")
            If m_Table.Rows(i)(6) > 350 Then
                FieldsArray(i) = True
                Num_Different_Fields_Involved += 1
                IsThereAProblem = True
            Else
                FieldsArray(i) = False
            End If
        Next i
        'If no fields are in violation then safe to exit the function.
        If Not IsThereAProblem Then Exit Function

        Dim k As Integer
        k = 0
        For i = 1 To Num_Different_Fields_Involved

            While FieldsArray(k) = False
                k += 1
            End While

            'Check to make sure the pumped_Amt is also equal to zero since I will be
            'adjusting the Runoff_amt and DeepPerc_Amt which likely received some of their
            'volume from the pumped amount.  When a pumped volume is present I will 
            'need to come up with a way to deal with the overallocated surface water amount.
            If m_Table.Rows(k)("PumpWatDelivered") < 100 Then
                'Limit the amount of water that can go to this field such that the applied depth does not exceed 
                '350mm.  Once the surface water has been limited to 350 I need to recalculate new surface water 
                'runoff and deep percolation amounts.
                ReallocateAmt_m3 = ((m_Table.Rows(k)("SurfWatDelivered") - 350) / 1000) * m_Table.Rows(k)("Area")
                m_Table.Rows(k)("SurfWatDelivered") = 350
                RanNum1 = RandomGenerator.NextDouble()
                Runoff_Fraction = (-1 * Math.Log(RanNum1)) / (1 / lambda)
                RanNum1 = RandomGenerator.NextDouble()
                RanNum2 = RandomGenerator.NextDouble()
                While Not (RanNum1 <= 0.8 And RanNum2 <= 1 - 1.25 * RanNum1)
                    RanNum1 = RandomGenerator.NextDouble()
                    RanNum2 = RandomGenerator.NextDouble()
                End While
                m_Table.Rows(k)("Runoff_Amt") = (((m_Table.Rows(k)("SurfWatDelivered") / m_Table.Rows(k)("Area")) * 1000) + m_Table.Rows(k)("Precip_Amt") + m_Table.Rows(k)("PumpWatDelivered")) * Runoff_Fraction
                m_Table.Rows(k)("DeepPerc_Amt") = ((((m_Table.Rows(k)("SurfWatDelivered") / m_Table.Rows(k)("Area")) * 1000) + m_Table.Rows(k)("Precip_Amt") + m_Table.Rows(k)("PumpWatDelivered")) - ((((m_Table.Rows(k)("SurfWatDelivered") / m_Table.Rows(k)("Area")) * 1000) + m_Table.Rows(k)("Precip_Amt") + m_Table.Rows(k)("PumpWatDelivered")) * Runoff_Fraction)) * RanNum1

                RanNumInt1 = RandomGenerator.Next(0, m_Table.Rows.Count())
                ct = 0
                While Not (m_Table.Rows(RanNumInt1)("SurfWatDelivered") = 0 And m_Table.Rows(RanNumInt1)("PumpWatDelivered") = 0) Or RanNumInt1 = k
                    RanNumInt1 = RandomGenerator.Next(0, m_Table.Rows.Count())
                    ct += 1
                    If ct >= 20 Then Exit While
                End While

                'Check to see if all of the Reallocate_Amt can go to the randomly selected field
                If ReallocateAmt_m3 / m_Table.Rows(RanNumInt1)("Area") < 0.35 Then
                    RanNum1 = RandomGenerator.NextDouble()
                    Runoff_Fraction = (-1 * Math.Log(RanNum1)) / (1 / lambda)
                    RanNum1 = RandomGenerator.NextDouble()
                    RanNum2 = RandomGenerator.NextDouble()
                    While Not (RanNum1 <= 0.8 And RanNum2 <= 1 - 1.25 * RanNum1)
                        RanNum1 = RandomGenerator.NextDouble()
                        RanNum2 = RandomGenerator.NextDouble()
                    End While
                    m_Table.Rows(RanNumInt1)("SurfWatDelivered") = ReallocateAmt_m3 / m_Table.Rows(RanNumInt1)("Area") * 1000
                    m_Table.Rows(RanNumInt1)("Runoff_Amt") = (((ReallocateAmt_m3 / m_Table.Rows(RanNumInt1)("Area")) * 1000) + m_Table.Rows(RanNumInt1)("Precip_Amt")) * Runoff_Fraction
                    m_Table.Rows(RanNumInt1)("DeepPerc_Amt") = ((((ReallocateAmt_m3 / m_Table.Rows(RanNumInt1)("Area")) * 1000) + m_Table.Rows(RanNumInt1)("Precip_Amt")) - ((((ReallocateAmt_m3 / m_Table.Rows(RanNumInt1)("Area")) * 1000) + m_Table.Rows(RanNumInt1)("Precip_Amt")) * Runoff_Fraction)) * RanNum1
                Else
                    'if not all the water can go on one field, then try to parse it between two
                    RanNumInt2 = RandomGenerator.Next(0, m_Table.Rows.Count())
                    ct = 0
                    While (RanNumInt2 = RanNumInt1) Or (Not m_Table.Rows(RanNumInt2)("SurfWatDelivered") = 0 And Not m_Table.Rows(RanNumInt2)("PumpWatDelivered") = 0) Or RanNumInt2 = k
                        RanNumInt2 = RandomGenerator.Next(0, m_Table.Rows.Count())
                        ct += 1
                        If ct >= 20 Then Exit While
                    End While

                    'if the water cannot fit on two fields, then spread it among all fields
                    'this can be accomplished by going to specified line 50: in the calling
                    'function
                    If ((ReallocateAmt_m3 * (m_Table.Rows(RanNumInt1)("Area") / (m_Table.Rows(RanNumInt1)("Area") + m_Table.Rows(RanNumInt2)("Area")))) / m_Table.Rows(RanNumInt1)("Area") * 1000) > 350 Then
                        'Set the passed in flag equal to true and exit the funcion
                        CheckAndAdjustHighValuesIfNecessary = True
                        Exit Function
                    End If

                    'Deal with Field 1
                    RanNum1 = RandomGenerator.NextDouble()
                    Runoff_Fraction = (-1 * Math.Log(RanNum1)) / (1 / lambda)
                    RanNum1 = RandomGenerator.NextDouble()
                    RanNum2 = RandomGenerator.NextDouble()
                    While Not (RanNum1 <= 0.8 And RanNum2 <= 1 - 1.25 * RanNum1)
                        RanNum1 = RandomGenerator.NextDouble()
                        RanNum2 = RandomGenerator.NextDouble()
                    End While
                    m_Table.Rows(RanNumInt1)("SurfWatDelivered") = (ReallocateAmt_m3 * (m_Table.Rows(RanNumInt1)("Area") / (m_Table.Rows(RanNumInt1)("Area") + m_Table.Rows(RanNumInt2)("Area")))) / m_Table.Rows(RanNumInt1)("Area") * 1000
                    m_Table.Rows(RanNumInt1)("Runoff_Amt") = ((((ReallocateAmt_m3 * (m_Table.Rows(RanNumInt1)("Area") / (m_Table.Rows(RanNumInt1)("Area") + m_Table.Rows(RanNumInt2)("Area")))) / m_Table.Rows(RanNumInt1)("Area")) * 1000) + m_Table.Rows(RanNumInt1)("Precip_Amt")) * Runoff_Fraction
                    m_Table.Rows(RanNumInt1)("DeepPerc_Amt") = (((((ReallocateAmt_m3 * (m_Table.Rows(RanNumInt1)("Area") / (m_Table.Rows(RanNumInt1)("Area") + m_Table.Rows(RanNumInt2)("Area")))) / m_Table.Rows(RanNumInt1)("Area")) * 1000) + m_Table.Rows(RanNumInt1)("Precip_Amt")) - (((((ReallocateAmt_m3 * (m_Table.Rows(RanNumInt1)("Area") / (m_Table.Rows(RanNumInt1)("Area") + m_Table.Rows(RanNumInt2)("Area")))) / m_Table.Rows(RanNumInt1)("Area")) * 1000) + m_Table.Rows(RanNumInt1)("Precip_Amt")) * Runoff_Fraction)) * RanNum1

                    'Deal with Field 2
                    RanNum1 = RandomGenerator.NextDouble()
                    Runoff_Fraction = (-1 * Math.Log(RanNum1)) / (1 / lambda)
                    RanNum1 = RandomGenerator.NextDouble()
                    RanNum2 = RandomGenerator.NextDouble()
                    While Not (RanNum1 <= 0.8 And RanNum2 <= 1 - 1.25 * RanNum1)
                        RanNum1 = RandomGenerator.NextDouble()
                        RanNum2 = RandomGenerator.NextDouble()
                    End While
                    m_Table.Rows(RanNumInt2)("SurfWatDelivered") = (ReallocateAmt_m3 * (m_Table.Rows(RanNumInt2)("Area") / (m_Table.Rows(RanNumInt1)("Area") + m_Table.Rows(RanNumInt2)("Area")))) / m_Table.Rows(RanNumInt2)("Area") * 1000
                    m_Table.Rows(RanNumInt2)("Runoff_Amt") = ((((ReallocateAmt_m3 * (m_Table.Rows(RanNumInt2)("Area") / (m_Table.Rows(RanNumInt1)("Area") + m_Table.Rows(RanNumInt2)("Area")))) / m_Table.Rows(RanNumInt2)("Area")) * 1000) + m_Table.Rows(RanNumInt2)("Precip_Amt")) * Runoff_Fraction
                    m_Table.Rows(RanNumInt2)("DeepPerc_Amt") = (((((ReallocateAmt_m3 * (m_Table.Rows(RanNumInt2)("Area") / (m_Table.Rows(RanNumInt1)("Area") + m_Table.Rows(RanNumInt2)("Area")))) / m_Table.Rows(RanNumInt2)("Area")) * 1000) + m_Table.Rows(RanNumInt2)("Precip_Amt")) - (((((ReallocateAmt_m3 * (m_Table.Rows(RanNumInt2)("Area") / (m_Table.Rows(RanNumInt1)("Area") + m_Table.Rows(RanNumInt2)("Area")))) / m_Table.Rows(RanNumInt2)("Area")) * 1000) + m_Table.Rows(RanNumInt2)("Precip_Amt")) * Runoff_Fraction)) * RanNum1

                End If
            ElseIf m_Table.Rows(k)("PumpWatDelivered") >= 100 Then
                'Limit the amount of water that can go to this field such that the applied depth does not exceed 
                '350mm.  Once the surface water has been limited to 350 I need to recalculate new surface water 
                'runoff and deep percolation amounts.
                ReallocateAmt_m3 = (m_Table.Rows(k)("SurfWatDelivered") / 1000) * m_Table.Rows(k)("Area")
                m_Table.Rows(k)("SurfWatDelivered") = 0
                RanNum1 = RandomGenerator.NextDouble()
                Runoff_Fraction = (-1 * Math.Log(RanNum1)) / (1 / lambda)
                RanNum1 = RandomGenerator.NextDouble()
                RanNum2 = RandomGenerator.NextDouble()
                While Not (RanNum1 <= 0.8 And RanNum2 <= 1 - 1.25 * RanNum1)
                    RanNum1 = RandomGenerator.NextDouble()
                    RanNum2 = RandomGenerator.NextDouble()
                End While
                m_Table.Rows(k)("Runoff_Amt") = (((m_Table.Rows(k)("PumpWatDelivered") / m_Table.Rows(k)("Area")) * 1000) + m_Table.Rows(k)("Precip_Amt")) * Runoff_Fraction
                m_Table.Rows(k)("DeepPerc_Amt") = ((((m_Table.Rows(k)("PumpWatDelivered") / m_Table.Rows(k)("Area")) * 1000) + m_Table.Rows(k)("Precip_Amt")) - ((((m_Table.Rows(k)("PumpWatDelivered") / m_Table.Rows(k)("Area")) * 1000) + m_Table.Rows(k)("Precip_Amt")) * Runoff_Fraction)) * RanNum1

                RanNumInt1 = RandomGenerator.Next(0, m_Table.Rows.Count())
                ct = 0
                While Not (m_Table.Rows(RanNumInt1)("SurfWatDelivered") = 0 And m_Table.Rows(RanNumInt1)("PumpWatDelivered") = 0) Or RanNumInt1 = k
                    RanNumInt1 = RandomGenerator.Next(0, m_Table.Rows.Count())
                    ct += 1
                    If ct >= 20 Then Exit While
                End While

                'Check to see if all of the Reallocate_Amt can go to the randomly selected field
                If ReallocateAmt_m3 / m_Table.Rows(RanNumInt1)("Area") < 0.35 And m_Table.Rows(RanNumInt1)("PumpWatDelivered") = 0 Then
                    RanNum1 = RandomGenerator.NextDouble()
                    Runoff_Fraction = (-1 * Math.Log(RanNum1)) / (1 / lambda)
                    RanNum1 = RandomGenerator.NextDouble()
                    RanNum2 = RandomGenerator.NextDouble()
                    While Not (RanNum1 <= 0.8 And RanNum2 <= 1 - 1.25 * RanNum1)
                        RanNum1 = RandomGenerator.NextDouble()
                        RanNum2 = RandomGenerator.NextDouble()
                    End While
                    m_Table.Rows(RanNumInt1)("SurfWatDelivered") = ReallocateAmt_m3 / m_Table.Rows(RanNumInt1)("Area") * 1000
                    m_Table.Rows(RanNumInt1)("Runoff_Amt") = (((ReallocateAmt_m3 / m_Table.Rows(RanNumInt1)("Area")) * 1000) + m_Table.Rows(RanNumInt1)("Precip_Amt")) * Runoff_Fraction
                    m_Table.Rows(RanNumInt1)("DeepPerc_Amt") = ((((ReallocateAmt_m3 / m_Table.Rows(RanNumInt1)("Area")) * 1000) + m_Table.Rows(RanNumInt1)("Precip_Amt")) - ((((ReallocateAmt_m3 / m_Table.Rows(RanNumInt1)("Area")) * 1000) + m_Table.Rows(RanNumInt1)("Precip_Amt")) * Runoff_Fraction)) * RanNum1
                Else
                    'if not all the water can go on one field, then try to parse it between two
                    RanNumInt2 = RandomGenerator.Next(0, m_Table.Rows.Count())
                    ct = 0
                    While (RanNumInt2 = RanNumInt1) Or (Not m_Table.Rows(RanNumInt2)("SurfWatDelivered") = 0 And Not m_Table.Rows(RanNumInt2)("PumpWatDelivered") = 0) Or RanNumInt2 = k
                        RanNumInt2 = RandomGenerator.Next(0, m_Table.Rows.Count())
                        ct += 1
                        If ct >= 20 Then Exit While
                    End While

                    'Deal with Field 1
                    RanNum1 = RandomGenerator.NextDouble()
                    Runoff_Fraction = (-1 * Math.Log(RanNum1)) / (1 / lambda)
                    RanNum1 = RandomGenerator.NextDouble()
                    RanNum2 = RandomGenerator.NextDouble()
                    While Not (RanNum1 <= 0.8 And RanNum2 <= 1 - 1.25 * RanNum1)
                        RanNum1 = RandomGenerator.NextDouble()
                        RanNum2 = RandomGenerator.NextDouble()
                    End While
                    m_Table.Rows(RanNumInt1)("SurfWatDelivered") = (ReallocateAmt_m3 * (m_Table.Rows(RanNumInt1)("Area") / (m_Table.Rows(RanNumInt1)("Area") + m_Table.Rows(RanNumInt2)("Area")))) / m_Table.Rows(RanNumInt1)("Area") * 1000
                    m_Table.Rows(RanNumInt1)("Runoff_Amt") = ((((ReallocateAmt_m3 * (m_Table.Rows(RanNumInt1)("Area") / (m_Table.Rows(RanNumInt1)("Area") + m_Table.Rows(RanNumInt2)("Area")))) / m_Table.Rows(RanNumInt1)("Area")) * 1000) + m_Table.Rows(RanNumInt1)("Precip_Amt")) * Runoff_Fraction
                    m_Table.Rows(RanNumInt1)("DeepPerc_Amt") = (((((ReallocateAmt_m3 * (m_Table.Rows(RanNumInt1)("Area") / (m_Table.Rows(RanNumInt1)("Area") + m_Table.Rows(RanNumInt2)("Area")))) / m_Table.Rows(RanNumInt1)("Area")) * 1000) + m_Table.Rows(RanNumInt1)("Precip_Amt")) - (((((ReallocateAmt_m3 * (m_Table.Rows(RanNumInt1)("Area") / (m_Table.Rows(RanNumInt1)("Area") + m_Table.Rows(RanNumInt2)("Area")))) / m_Table.Rows(RanNumInt1)("Area")) * 1000) + m_Table.Rows(RanNumInt1)("Precip_Amt")) * Runoff_Fraction)) * RanNum1

                    'Deal with Field 2
                    RanNum1 = RandomGenerator.NextDouble()
                    Runoff_Fraction = (-1 * Math.Log(RanNum1)) / (1 / lambda)
                    RanNum1 = RandomGenerator.NextDouble()
                    RanNum2 = RandomGenerator.NextDouble()
                    While Not (RanNum1 <= 0.8 And RanNum2 <= 1 - 1.25 * RanNum1)
                        RanNum1 = RandomGenerator.NextDouble()
                        RanNum2 = RandomGenerator.NextDouble()
                    End While
                    m_Table.Rows(RanNumInt2)("SurfWatDelivered") = (ReallocateAmt_m3 * (m_Table.Rows(RanNumInt2)("Area") / (m_Table.Rows(RanNumInt1)("Area") + m_Table.Rows(RanNumInt2)("Area")))) / m_Table.Rows(RanNumInt2)("Area") * 1000
                    m_Table.Rows(RanNumInt2)("Runoff_Amt") = ((((ReallocateAmt_m3 * (m_Table.Rows(RanNumInt2)("Area") / (m_Table.Rows(RanNumInt1)("Area") + m_Table.Rows(RanNumInt2)("Area")))) / m_Table.Rows(RanNumInt2)("Area")) * 1000) + m_Table.Rows(RanNumInt2)("Precip_Amt")) * Runoff_Fraction
                    m_Table.Rows(RanNumInt2)("DeepPerc_Amt") = (((((ReallocateAmt_m3 * (m_Table.Rows(RanNumInt2)("Area") / (m_Table.Rows(RanNumInt1)("Area") + m_Table.Rows(RanNumInt2)("Area")))) / m_Table.Rows(RanNumInt2)("Area")) * 1000) + m_Table.Rows(RanNumInt2)("Precip_Amt")) - (((((ReallocateAmt_m3 * (m_Table.Rows(RanNumInt2)("Area") / (m_Table.Rows(RanNumInt1)("Area") + m_Table.Rows(RanNumInt2)("Area")))) / m_Table.Rows(RanNumInt2)("Area")) * 1000) + m_Table.Rows(RanNumInt2)("Precip_Amt")) * Runoff_Fraction)) * RanNum1

                End If
            End If
        Next i
        CheckAndAdjustHighValuesIfNecessary = False
    End Function
    Private Function TargetValues(ByVal Crop As String, ByRef mean As Single, ByRef std_dev As Single)
        Crop = FilterCropType(Crop)
        'adjust the means and std_dev to match farmer input
        'Note (added 1/1/2010:  all the mean and std_dev values have been adjusted to reflect
        '      that the normal distrution to be sampled from will eventually be transformed to 
        '      a log normal distribution that has desired statistics.  The worksheet in support
        '      of this change can be found in c:\..\Eric\Arkansas River Valley\Entire_Basin\Application Depth\
        If Crop = "ONION" Then
            mean = 1.1741
            std_dev = 0.6656
        ElseIf Crop = "PEPPERS" Then
            mean = 1.1741
            std_dev = 0.6656
        ElseIf Crop = "TOMATO" Then
            mean = 1.1741
            std_dev = 0.6656
        ElseIf Crop = "ASPARAGUS" Then
            mean = 1.3832
            std_dev = 0.6522
        ElseIf Crop = "MELONS" Then
            mean = 1.1741
            std_dev = 0.6656
        ElseIf Crop = "CANTALOUPE" Then
            mean = 1.1741
            std_dev = 0.6656
        ElseIf Crop = "PUMPKINS" Then
            mean = 1.5646
            std_dev = 0.6625
        ElseIf Crop = "SQUASH" Then
            mean = 1.5646
            std_dev = 0.6625
            'Note: These mean and stdev's are for the normal distribution to be 
            '      sampled from, simply taking the exp(mean) or exp(stdev) will 
            '      not lead back mean and std dev of the original log-normal distribution.
        ElseIf Crop = "ALFALFA" Then
            mean = 1.9656
            std_dev = 0.7269
        ElseIf Crop = "CORN" Then
            mean = 1.9656
            std_dev = 0.7269
        ElseIf Crop = "BARLEY" Then
            mean = 1.1741
            std_dev = 0.6656
        ElseIf Crop = "BEANS" Then
            mean = 1.1741
            std_dev = 0.6656
        ElseIf Crop = "OATS" Then
            mean = 1.1741
            std_dev = 0.6656
        ElseIf Crop = "SORGHUM" Then
            mean = 1.5646
            std_dev = 0.6625
        ElseIf Crop = "WHEAT" Then
            mean = 1.3832
            std_dev = 0.652
        ElseIf Crop = "GRASS/PASTURE" Then
            mean = 1.9656
            std_dev = 0.7269
        ElseIf Crop = "MIXFG" Then
            mean = 1.9656
            std_dev = 0.7269
        End If
    End Function
    Private Function Check_Depths(ByVal num_fields As Integer, ByVal CurrentDate As Date, ByVal Field1_Area As Single, Optional ByVal Field2_Area As Single = 0, Optional ByVal Field3_Area As Single = 0, Optional ByVal Field4_Area As Single = 0, Optional ByVal Field5_Area As Single = 0, Optional ByVal Field6_Area As Single = 0, Optional ByVal Field7_Area As Single = 0, Optional ByVal Field8_Area As Single = 0, Optional ByVal Field9_Area As Single = 0, Optional ByVal Field10_Area As Single = 0, _
                                  Optional ByVal Field1_Type As String = "", Optional ByVal Field2_Type As String = "", Optional ByVal Field3_Type As String = "", Optional ByVal Field4_Type As String = "", Optional ByVal Field5_Type As String = "", Optional ByVal Field6_Type As String = "", Optional ByVal Field7_Type As String = "", Optional ByVal Field8_Type As String = "", Optional ByVal Field9_Type As String = "", Optional ByVal Field10_Type As String = "", _
                                  Optional ByRef Field1_Amt As Single = 0, Optional ByRef Field2_Amt As Single = 0, Optional ByRef Field3_Amt As Single = 0, Optional ByRef Field4_Amt As Single = 0, Optional ByRef Field5_Amt As Single = 0, Optional ByRef Field6_Amt As Single = 0, Optional ByRef Field7_Amt As Single = 0, Optional ByRef Field8_Amt As Single = 0, Optional ByRef Field9_Amt As Single = 0, Optional ByRef Field10_Amt As Single = 0) As Boolean
        Dim OK As Boolean = False
        Dim PriorityDay As Integer
        Dim RanNum As Integer
        Dim RanNum2 As Double
        Dim Depth1 As Single
        Dim Depth2 As Single
        Dim Depth3 As Single
        Dim Depth4 As Single
        Dim Depth5 As Single
        Dim Depth6 As Single
        Dim Depth7 As Single
        Dim Depth8 As Single
        Dim Depth9 As Single
        Dim Depth10 As Single
        Dim Field1_Level As Integer
        Dim Field2_Level As Integer
        Dim Field3_Level As Integer
        Dim Field4_Level As Integer
        Dim Field5_Level As Integer
        Dim Field6_Level As Integer
        Dim Field7_Level As Integer
        Dim Field8_Level As Integer
        Dim Field9_Level As Integer
        Dim Field10_Level As Integer
        Dim Reallocate_Amt As Single
        Dim RandomGenerator As Random
        RandomGenerator = New Random
        Dim NumIterations As Integer = 0

        Select Case num_fields
            Case 1
                Depth1 = Field1_Amt / Field1_Area
                If (Depth1 * 39.37) < 10 And (Depth1 * 39.37) > 2 Then  'Converted to inches, checking to see if the depth is not more than 10 inches
                    Return True
                ElseIf (Depth1 * 39.37) > 10 Or (Depth1 * 39.37) < 2 Then
                    Return False
                End If

            Case 2
                Depth1 = Field1_Amt / Field1_Area
                Depth2 = Field2_Amt / Field2_Area
                If Depth1 = 0 And Depth2 = 0 Then Exit Function
                While Not OK
                    If ((Depth1 * 39.37) < 10 And (Depth2 * 39.37) < 10) And ((Depth1 * 39.37) > 2 And (Depth2 * 39.37) > 2) Or _
                       ((Depth1 * 39.37) < 10 And (Depth2 * 39.37) = 0) And ((Depth1 * 39.37) > 2 And (Depth2 * 39.37) = 0) Or _
                       ((Depth1 * 39.37) = 0 And (Depth2 * 39.37) < 10) And ((Depth1 * 39.37) = 0 And (Depth2 * 39.37) > 2) Then
                        OK = True
                    ElseIf NumIterations > 5 Then
                        GoTo 20
                    Else
                        NumIterations += 1
                        Reallocate_Amt = Field1_Amt + Field2_Amt
                        'Code up the priority sheet! Do it here! Check the following code when I return for "case 2"  Then start constructing the "case 3" code
                        Field1_Type = FilterCropType(Field1_Type)
                        Field2_Type = FilterCropType(Field2_Type)
                        If Field1_Type = "ONION" Or Field2_Type = "ONION" Then
                            If Field1_Type = "ONION" And Field2_Type = "ONION" Then
                                RanNum = RandomGenerator.Next(1, 2)
                                Select Case RanNum
                                    Case 1
                                        Depth1 = Reallocate_Amt / Field1_Area
                                        Depth2 = 0
                                    Case 2
                                        Depth1 = 0
                                        Depth2 = Reallocate_Amt / Field2_Area
                                End Select
                            ElseIf Field1_Type = "ONION" Then
                                Depth1 = Reallocate_Amt / Field1_Area
                                Depth2 = 0
                            ElseIf Field2_Type = "ONION" Then
                                Depth1 = 0
                                Depth2 = Reallocate_Amt / Field2_Area
                            End If
                        ElseIf Field1_Type = "PEPPERS" Or Field2_Type = "PEPPERS" Or _
                               Field1_Type = "TOMATO" Or Field2_Type = "TOMATO" Or _
                               Field1_Type = "ASPARAGUS" Or Field2_Type = "ASPARAGUS" Then
                            If Field1_Type = "PEPPERS" And Field2_Type = "PEPPERS" Or _
                               Field1_Type = "TOMATO" And Field2_Type = "TOMATO" Or _
                               Field1_Type = "ASPARAGUS" And Field2_Type = "ASPARAGUS" Then
                                RanNum = RandomGenerator.Next(1, 2)
                                Select Case RanNum
                                    Case 1
                                        Depth1 = Reallocate_Amt / Field1_Area
                                        Depth2 = 0
                                    Case 2
                                        Depth1 = 0
                                        Depth2 = Reallocate_Amt / Field2_Area
                                End Select
                            ElseIf Field1_Type = "PEPPERS" Or _
                                   Field1_Type = "TOMATO" Or _
                                   Field1_Type = "ASPARAGUS" Then
                                Depth1 = Reallocate_Amt / Field1_Area
                                Depth2 = 0
                            ElseIf Field2_Type = "PEPPERS" Or _
                                   Field2_Type = "TOMATO" Or _
                                   Field2_Type = "ASPARAGUS" Then
                                Depth1 = 0
                                Depth2 = Reallocate_Amt / Field2_Area
                            End If
                        ElseIf Field1_Type = "MELONS" Or Field2_Type = "MELONS" Or _
                               Field1_Type = "CANTALOUPE" Or Field2_Type = "CANTALOUPE" Then
                            If Field1_Type = "MELONS" And Field2_Type = "MELONS" Or _
                               Field1_Type = "CANTALOUPE" And Field2_Type = "CANTALOUPE" Then
                                RanNum = RandomGenerator.Next(1, 2)
                                Select Case RanNum
                                    Case 1
                                        Depth1 = Reallocate_Amt / Field1_Area
                                        Depth2 = 0
                                    Case 2
                                        Depth1 = 0
                                        Depth2 = Reallocate_Amt / Field2_Area
                                End Select
                            ElseIf Field1_Type = "MELONS" Or _
                                   Field1_Type = "CANTALOUPE" Then
                                Depth1 = Reallocate_Amt / Field1_Area
                                Depth2 = 0
                            ElseIf Field2_Type = "MELONS" Or _
                                   Field2_Type = "CANTALOUPE" Then
                                Depth1 = 0
                                Depth2 = Reallocate_Amt / Field2_Area
                            End If
                        ElseIf Field1_Type = "PUMPKINS" Or Field2_Type = "PUMPKINS" Or _
                               Field1_Type = "SQUASH" Or Field2_Type = "SQUASH" Then
                            If Field1_Type = "PUMPKINS" And Field2_Type = "PUMPKINS" Or _
                               Field1_Type = "SQUASH" And Field2_Type = "SQUASH" Then
                                RanNum = RandomGenerator.Next(1, 2)
                                Select Case RanNum
                                    Case 1
                                        Depth1 = Reallocate_Amt / Field1_Area
                                        Depth2 = 0
                                    Case 2
                                        Depth1 = 0
                                        Depth2 = Reallocate_Amt / Field2_Area
                                End Select
                            ElseIf Field1_Type = "PUMPKINS" Or _
                                   Field1_Type = "SQUASH" Then
                                Depth1 = Reallocate_Amt / Field1_Area
                                Depth2 = 0
                            ElseIf Field2_Type = "PUMPKINS" Or _
                                   Field2_Type = "SQUASH" Then
                                Depth1 = 0
                                Depth2 = Reallocate_Amt / Field2_Area
                            End If
                        ElseIf Field1_Type = "ALFALFA" Or Field2_Type = "ALFALFA" Or _
                               Field1_Type = "CORN" Or Field2_Type = "CORN" Then
                            If Field1_Type = "ALFALFA" And Field2_Type = "ALFALFA" Or _
                               Field1_Type = "CORN" And Field2_Type = "CORN" Then
                                RanNum = RandomGenerator.Next(1, 2)
                                Select Case RanNum
                                    Case 1
                                        Depth1 = Reallocate_Amt / Field1_Area
                                        Depth2 = 0
                                    Case 2
                                        Depth1 = 0
                                        Depth2 = Reallocate_Amt / Field2_Area
                                End Select
                            ElseIf Field1_Type = "ALFALFA" And Field2_Type = "CORN" Or _
                                   Field1_Type = "CORN" And Field2_Type = "ALFALFA" Then
                                PriorityDay = CurrentDate.DayOfYear()
                                If PriorityDay > 145 And PriorityDay < 243 Then 'Corn has higher priority in this case
                                    If Field1_Type = "CORN" Then
                                        Depth1 = Reallocate_Amt / Field1_Area
                                        Depth2 = 0
                                    ElseIf Field2_Type = "CORN" Then
                                        Depth1 = 0
                                        Depth2 = Reallocate_Amt / Field2_Area
                                    End If
                                Else
                                    If Field1_Type = "ALFALFA" Then
                                        Depth1 = Reallocate_Amt / Field1_Area
                                        Depth2 = 0
                                    ElseIf Field2_Type = "ALFALFA" Then
                                        Depth1 = 0
                                        Depth2 = Reallocate_Amt / Field2_Area
                                    End If
                                End If
                            ElseIf Field1_Type = "ALFALFA" Or _
                                   Field1_Type = "CORN" Then
                                Depth1 = Reallocate_Amt / Field1_Area
                                Depth2 = 0
                            ElseIf Field2_Type = "ALFALFA" Or _
                                   Field2_Type = "CORN" Then
                                Depth1 = 0
                                Depth2 = Reallocate_Amt / Field2_Area
                            End If
                        ElseIf Field1_Type = "BARLEY" Or Field2_Type = "BARLEY" Or _
                               Field1_Type = "BEANS" Or Field2_Type = "BEANS" Or _
                               Field1_Type = "OATS" Or Field2_Type = "OATS" Then
                            If Field1_Type = "BARLEY" And Field2_Type = "BARLEY" Or _
                               Field1_Type = "BEANS" And Field2_Type = "BEANS" Or _
                               Field1_Type = "OATS" And Field2_Type = "OATS" Then
                                RanNum = RandomGenerator.Next(1, 2)
                                Select Case RanNum
                                    Case 1
                                        Depth1 = Reallocate_Amt / Field1_Area
                                        Depth2 = 0
                                    Case 2
                                        Depth1 = 0
                                        Depth2 = Reallocate_Amt / Field2_Area
                                End Select
                            ElseIf Field1_Type = "BARLEY" Or _
                                   Field1_Type = "BEANS" Or _
                                   Field1_Type = "OATS" Then
                                Depth1 = Reallocate_Amt / Field1_Area
                                Depth2 = 0
                            ElseIf Field2_Type = "BARLEY" Or _
                                   Field2_Type = "BEANS" Or _
                                   Field2_Type = "OATS" Then
                                Depth1 = 0
                                Depth2 = Reallocate_Amt / Field2_Area
                            End If
                        ElseIf Field1_Type = "SORGHUM" Or Field2_Type = "SORGHUM" Then
                            If Field1_Type = "SORGHUM" And Field2_Type = "SORGHUM" Then
                                RanNum = RandomGenerator.Next(1, 2)
                                Select Case RanNum
                                    Case 1
                                        Depth1 = Reallocate_Amt / Field1_Area
                                        Depth2 = 0
                                    Case 2
                                        Depth1 = 0
                                        Depth2 = Reallocate_Amt / Field2_Area
                                End Select
                            ElseIf Field1_Type = "SORGHUM" Then
                                Depth1 = Reallocate_Amt / Field1_Area
                                Depth2 = 0
                            ElseIf Field2_Type = "SORGHUM" Then
                                Depth1 = 0
                                Depth2 = Reallocate_Amt / Field2_Area
                            End If
                        ElseIf Field1_Type = "WHEAT" Or Field2_Type = "WHEAT" Then
                            If Field1_Type = "WHEAT" And Field2_Type = "WHEAT" Then
                                RanNum = RandomGenerator.Next(1, 2)
                                Select Case RanNum
                                    Case 1
                                        Depth1 = Reallocate_Amt / Field1_Area
                                        Depth2 = 0
                                    Case 2
                                        Depth1 = 0
                                        Depth2 = Reallocate_Amt / Field2_Area
                                End Select
                            ElseIf Field1_Type = "WHEAT" Then
                                Depth1 = Reallocate_Amt / Field1_Area
                                Depth2 = 0
                            ElseIf Field2_Type = "WHEAT" Then
                                Depth1 = 0
                                Depth2 = Reallocate_Amt / Field2_Area
                            End If
                        End If
                    End If
                End While
20:             If NumIterations > 5 Then
                    If (Depth1 * 39.37 > 10) Or (Depth2 * 39.37 > 10) Then
                        Depth1 = Reallocate_Amt * (Field1_Area / (Field1_Area + Field2_Area)) / Field1_Area
                        Depth2 = Reallocate_Amt * (Field2_Area / (Field1_Area + Field2_Area)) / Field2_Area
                        GoTo 40
                    End If
                    RanNum2 = RandomGenerator.NextDouble()
                    If RanNum2 < 0.5 Then
                        Depth1 = Reallocate_Amt / Field1_Area
                        Depth2 = 0
                    Else
                        Depth1 = 0
                        Depth2 = Reallocate_Amt / Field2_Area
                    End If
                End If
40:             Field1_Amt = Depth1 * Field1_Area
                Field2_Amt = Depth2 * Field2_Area
            Case 3
                Dim Temp_Flag1 As Boolean = False
                Dim Temp_Flag2 As Boolean = False
                Depth1 = Field1_Amt / Field1_Area
                Depth2 = Field2_Amt / Field2_Area
                Depth3 = Field3_Amt / Field3_Area
                If Depth1 = 0 And Depth2 = 0 And Depth3 = 0 Then Exit Function
                While Not OK
                    If ((Depth1 * 39.37) < 10 And (Depth2 * 39.37) < 10 And (Depth3 * 39.37) < 10) And ((Depth1 * 39.37) > 2 And (Depth2 * 39.37) > 2 And (Depth3 * 39.37) > 2) Or _
                       ((Depth1 * 39.37) < 10 And (Depth2 * 39.37) < 10 And (Depth3 * 39.37) = 0) And ((Depth1 * 39.37) > 2 And (Depth2 * 39.37) > 2 And (Depth3 * 39.37) = 0) Or _
                       ((Depth1 * 39.37) < 10 And (Depth2 * 39.37) = 0 And (Depth3 * 39.37) < 10) And ((Depth1 * 39.37) > 2 And (Depth2 * 39.37) = 0 And (Depth3 * 39.37) > 2) Or _
                       ((Depth1 * 39.37) = 0 And (Depth2 * 39.37) < 10 And (Depth3 * 39.37) < 10) And ((Depth1 * 39.37) = 0 And (Depth2 * 39.37) > 2 And (Depth3 * 39.37) > 2) Or _
                       ((Depth1 * 39.37) < 10 And (Depth2 * 39.37) = 0 And (Depth3 * 39.37) = 0) And ((Depth1 * 39.37) > 2 And (Depth2 * 39.37) = 0 And (Depth3 * 39.37) = 0) Or _
                       ((Depth1 * 39.37) = 0 And (Depth2 * 39.37) < 10 And (Depth3 * 39.37) = 0) And ((Depth1 * 39.37) = 0 And (Depth2 * 39.37) > 2 And (Depth3 * 39.37) = 0) Or _
                       ((Depth1 * 39.37) = 0 And (Depth2 * 39.37) = 0 And (Depth3 * 39.37) < 10) And ((Depth1 * 39.37) = 0 And (Depth2 * 39.37) = 0 And (Depth3 * 39.37) > 2) Then
                        OK = True
                    ElseIf NumIterations > 10 Then
                        GoTo 30
                    Else
                        NumIterations += 1
                        Reallocate_Amt = Field1_Amt + Field2_Amt + Field3_Amt
                        'The following are new variables on 12/19/06.  It was found that during the crop water allocation/prioritization process that there were an unbelievable number
                        'of combination.  For instance, because there are 9 crop levels (1. Onions, 2. Peppers, Tomatoes, Asparagus, 3. Melons, Cantaloupes, 4. Pumpkins, Squash, 
                        '5. Alfalfa, Corn, 6. Barley, Beans, Oats, 7. Sorghum, 8. Wheat, 9. Fallow), there are 9^3 ways to arrange the levels (i.e. 111, 211, 121, 819).  Therefore, 
                        'there needs to be a crafty way to program this problem.  The following attempts to do just that.  (There are probably craftier ways to accomplish this)
                        Field1_Type = FilterCropType(Field1_Type)
                        Field2_Type = FilterCropType(Field2_Type)
                        Field3_Type = FilterCropType(Field3_Type)
                        Field1_Level = DetermineCropPriorityLevel(Field1_Type)
                        Field2_Level = DetermineCropPriorityLevel(Field2_Type)
                        Field3_Level = DetermineCropPriorityLevel(Field3_Type)

                        'A significant bug was found on 10/10/07 and the following three lines of code 
                        'are to fix that bug that occurs throughout this "Case 3" (above) statement.
                        'A brief note on the bug is that I had misapplied the Fieldx_Level variables.
                        'Lower values are actually higher priority and thus to get the code working correctly...
                        Field1_Level = 9 - Field1_Level
                        Field2_Level = 9 - Field2_Level
                        Field3_Level = 9 - Field3_Level
                        'The same bug fix needs to be applied to "Case 4" below

                        'When the 3 priority levels are the same
                        If (Field1_Level = Field2_Level) And (Field1_Level = Field3_Level) Then
                            RanNum = RandomGenerator.Next(1, 3)
                            If Not Temp_Flag1 Then
                                Select Case RanNum
                                    Case 1
                                        Depth1 = 0
                                        Depth2 = Reallocate_Amt * (Field2_Area / (Field2_Area + Field3_Area)) / Field2_Area
                                        Depth3 = Reallocate_Amt * (Field3_Area / (Field2_Area + Field3_Area)) / Field3_Area
                                    Case 2
                                        Depth1 = Reallocate_Amt * (Field1_Area / (Field1_Area + Field3_Area)) / Field1_Area
                                        Depth2 = 0
                                        Depth3 = Reallocate_Amt * (Field3_Area / (Field1_Area + Field3_Area)) / Field3_Area
                                    Case 3
                                        Depth1 = Reallocate_Amt * (Field1_Area / (Field1_Area + Field3_Area)) / Field1_Area
                                        Depth2 = Reallocate_Amt * (Field1_Area / (Field1_Area + Field3_Area)) / Field2_Area
                                        Depth3 = 0
                                End Select
                                Temp_Flag1 = True
                            Else
                                Select Case RanNum
                                    Case 1
                                        Depth1 = Reallocate_Amt / Field1_Area
                                        Depth2 = 0
                                        Depth3 = 0
                                    Case 2
                                        Depth1 = 0
                                        Depth2 = Reallocate_Amt / Field2_Area
                                        Depth3 = 0
                                    Case 3
                                        Depth1 = 0
                                        Depth2 = 0
                                        Depth3 = Reallocate_Amt / Field3_Area
                                End Select
                            End If
                            'When 2 out of 3 priority levels are the same
                        ElseIf (Field1_Level = Field2_Level) Or (Field1_Level = Field3_Level) Or (Field2_Level = Field3_Level) Then
                            If Field1_Level = Field2_Level Then
                                If Not Temp_Flag1 Then
                                    If Field1_Level > Field3_Level Then
                                        Depth1 = Reallocate_Amt * (Field1_Area / (Field1_Area + Field2_Area)) / Field1_Area
                                        Depth2 = Reallocate_Amt * (Field1_Area / (Field1_Area + Field2_Area)) / Field2_Area
                                        Depth3 = 0
                                        Temp_Flag1 = True
                                    ElseIf Field1_Level < Field3_Level Then
                                        RanNum = RandomGenerator.Next(1, 2)
                                        Select Case RanNum
                                            Case 1
                                                Depth1 = Reallocate_Amt * (Field1_Area / (Field1_Area + Field3_Area)) / Field1_Area
                                                Depth2 = 0
                                                Depth3 = Reallocate_Amt * (Field3_Area / (Field1_Area + Field3_Area)) / Field3_Area
                                            Case 2
                                                Depth1 = 0
                                                Depth2 = Reallocate_Amt * (Field2_Area / (Field2_Area + Field3_Area)) / Field2_Area
                                                Depth3 = Reallocate_Amt * (Field3_Area / (Field2_Area + Field3_Area)) / Field3_Area
                                        End Select
                                        Temp_Flag1 = True
                                    End If
                                Else
                                    If Field1_Level > Field3_Level Then
                                        RanNum = RandomGenerator.Next(1, 2)
                                        Select Case RanNum
                                            Case 1
                                                Depth1 = Reallocate_Amt / Field1_Area
                                                Depth2 = 0
                                                Depth3 = 0
                                            Case 2
                                                Depth1 = 0
                                                Depth2 = Reallocate_Amt / Field2_Area
                                                Depth3 = 0
                                        End Select
                                    ElseIf Field1_Level < Field3_Level Then
                                        Depth1 = 0
                                        Depth2 = 0
                                        Depth3 = Reallocate_Amt / Field3_Area
                                    End If
                                End If
                            ElseIf Field1_Level = Field3_Level Then
                                If Not Temp_Flag1 Then
                                    If Field1_Level > Field2_Level Then
                                        Depth1 = Reallocate_Amt * (Field1_Area / (Field1_Area + Field3_Area)) / Field1_Area
                                        Depth2 = 0
                                        Depth3 = Reallocate_Amt * (Field3_Area / (Field1_Area + Field3_Area)) / Field3_Area
                                        Temp_Flag1 = True
                                    ElseIf Field1_Level < Field2_Level Then
                                        RanNum = RandomGenerator.Next(1, 2)
                                        'Even though the random is between 1 and 2, 2 is treated as if it were a 3.
                                        Select Case RanNum
                                            Case 1
                                                Depth1 = Reallocate_Amt * (Field1_Area / (Field1_Area + Field2_Area)) / Field1_Area
                                                Depth2 = Reallocate_Amt * (Field2_Area / (Field1_Area + Field2_Area)) / Field2_Area
                                                Depth3 = 0
                                            Case 2 '3
                                                Depth1 = 0
                                                Depth2 = Reallocate_Amt * (Field2_Area / (Field2_Area + Field3_Area)) / Field2_Area
                                                Depth3 = Reallocate_Amt * (Field3_Area / (Field2_Area + Field3_Area)) / Field3_Area
                                        End Select
                                        Temp_Flag1 = True
                                    End If
                                Else
                                    If Field1_Level > Field2_Level Then
                                        RanNum = RandomGenerator.Next(1, 2)
                                        Select Case RanNum
                                            Case 1
                                                Depth1 = Reallocate_Amt / Field1_Area
                                                Depth2 = 0
                                                Depth3 = 0
                                            Case 2 '3
                                                Depth1 = 0
                                                Depth2 = 0
                                                Depth3 = Reallocate_Amt / Field3_Area
                                        End Select
                                    ElseIf Field1_Level < Field2_Level Then
                                        Depth1 = 0
                                        Depth2 = Reallocate_Amt / Field2_Area
                                        Depth3 = 0
                                    End If
                                End If
                            ElseIf Field2_Level = Field3_Level Then
                                If Not Temp_Flag1 Then
                                    If Field2_Level > Field1_Level Then
                                        Depth1 = 0
                                        Depth2 = Reallocate_Amt * (Field2_Area / (Field2_Area + Field3_Area)) / Field2_Area
                                        Depth3 = Reallocate_Amt * (Field3_Area / (Field2_Area + Field3_Area)) / Field3_Area
                                        Temp_Flag1 = True
                                    ElseIf Field2_Level < Field1_Level Then
                                        RanNum = RandomGenerator.Next(2, 3)
                                        Select Case RanNum
                                            Case 2
                                                Depth1 = Reallocate_Amt * (Field1_Area / (Field1_Area + Field2_Area)) / Field1_Area
                                                Depth2 = Reallocate_Amt * (Field2_Area / (Field1_Area + Field2_Area)) / Field2_Area
                                                Depth3 = 0
                                            Case 3
                                                Depth1 = Reallocate_Amt * (Field1_Area / (Field1_Area + Field3_Area)) / Field1_Area
                                                Depth2 = 0
                                                Depth3 = Reallocate_Amt * (Field3_Area / (Field1_Area + Field3_Area)) / Field3_Area
                                        End Select
                                        Temp_Flag1 = True
                                    End If
                                Else
                                    If Field2_Level > Field1_Level Then
                                        RanNum = RandomGenerator.Next(2, 3)
                                        Select Case RanNum
                                            Case 2
                                                Depth1 = 0
                                                Depth2 = Reallocate_Amt / Field2_Area
                                                Depth3 = 0
                                            Case 3
                                                Depth1 = 0
                                                Depth2 = 0
                                                Depth3 = Reallocate_Amt / Field3_Area
                                        End Select
                                    ElseIf Field2_Level < Field1_Level Then
                                        Depth1 = Reallocate_Amt / Field1_Area
                                        Depth2 = 0
                                        Depth3 = 0
                                    End If
                                End If
                            End If
                        ElseIf (Field1_Level <> Field2_Level) And (Field1_Level <> Field3_Level) And (Field2_Level <> Field3_Level) Then
                            If Not Temp_Flag1 Then
                                If (Field1_Level > Field2_Level) And (Field2_Level > Field3_Level) Then
                                    Depth1 = Reallocate_Amt * (Field1_Area / (Field1_Area + Field2_Area)) / Field1_Area
                                    Depth2 = Reallocate_Amt * (Field2_Area / (Field1_Area + Field2_Area)) / Field2_Area
                                    Depth3 = 0
                                    Temp_Flag1 = True
                                ElseIf (Field1_Level > Field3_Level) And (Field3_Level > Field2_Level) Then
                                    Depth1 = Reallocate_Amt * (Field1_Area / (Field1_Area + Field3_Area)) / Field1_Area
                                    Depth2 = 0
                                    Depth3 = Reallocate_Amt * (Field3_Area / (Field1_Area + Field3_Area)) / Field3_Area
                                    Temp_Flag1 = True
                                ElseIf (Field2_Level > Field1_Level) And (Field1_Level > Field3_Level) Then
                                    Depth1 = Reallocate_Amt * (Field1_Area / (Field1_Area + Field2_Area)) / Field1_Area
                                    Depth2 = Reallocate_Amt * (Field2_Area / (Field1_Area + Field2_Area)) / Field2_Area
                                    Depth3 = 0
                                    Temp_Flag1 = True
                                ElseIf (Field2_Level > Field3_Level) And (Field3_Level > Field1_Level) Then
                                    Depth1 = 0
                                    Depth2 = Reallocate_Amt * (Field2_Area / (Field2_Area + Field3_Area)) / Field2_Area
                                    Depth3 = Reallocate_Amt * (Field3_Area / (Field2_Area + Field3_Area)) / Field3_Area
                                    Temp_Flag1 = True
                                ElseIf (Field3_Level > Field1_Level) And (Field1_Level > Field2_Level) Then
                                    Depth1 = Reallocate_Amt * (Field1_Area / (Field1_Area + Field3_Area)) / Field1_Area
                                    Depth2 = 0
                                    Depth3 = Reallocate_Amt * (Field3_Area / (Field1_Area + Field3_Area)) / Field3_Area
                                    Temp_Flag1 = True
                                ElseIf (Field3_Level > Field2_Level) And (Field2_Level > Field1_Level) Then
                                    Depth1 = 0
                                    Depth2 = Reallocate_Amt * (Field2_Area / (Field2_Area + Field3_Area)) / Field2_Area
                                    Depth3 = Reallocate_Amt * (Field3_Area / (Field2_Area + Field3_Area)) / Field3_Area
                                    Temp_Flag1 = True
                                End If
                            Else
                                If (Field1_Level > Field2_Level) And (Field2_Level > Field3_Level) Then
                                    Depth1 = Reallocate_Amt / Field1_Area
                                    Depth2 = 0
                                    Depth3 = 0
                                ElseIf (Field1_Level > Field3_Level) And (Field3_Level > Field2_Level) Then
                                    Depth1 = Reallocate_Amt / Field1_Area
                                    Depth2 = 0
                                    Depth3 = 0
                                ElseIf (Field2_Level > Field1_Level) And (Field1_Level > Field3_Level) Then
                                    Depth1 = 0
                                    Depth2 = Reallocate_Amt / Field2_Area
                                    Depth3 = 0
                                ElseIf (Field2_Level > Field3_Level) And (Field3_Level > Field1_Level) Then
                                    Depth1 = 0
                                    Depth2 = Reallocate_Amt / Field2_Area
                                    Depth3 = 0
                                ElseIf (Field3_Level > Field1_Level) And (Field1_Level > Field2_Level) Then
                                    Depth1 = 0
                                    Depth2 = 0
                                    Depth3 = Reallocate_Amt / Field3_Area
                                ElseIf (Field3_Level > Field2_Level) And (Field2_Level > Field1_Level) Then
                                    Depth1 = 0
                                    Depth2 = 0
                                    Depth3 = Reallocate_Amt / Field3_Area
                                End If
                            End If
                        End If
                    End If
                End While
30:             If NumIterations > 10 Then
                    If (Depth1 * 39.37 > 10) Or (Depth2 * 39.37 > 10) Or (Depth3 * 39.37 > 10) Then
                        Depth1 = Reallocate_Amt * (Field1_Area / (Field1_Area + Field2_Area + Field3_Area)) / Field1_Area
                        Depth2 = Reallocate_Amt * (Field2_Area / (Field1_Area + Field2_Area + Field3_Area)) / Field2_Area
                        Depth3 = Reallocate_Amt * (Field3_Area / (Field1_Area + Field2_Area + Field3_Area)) / Field3_Area
                        GoTo 50
                    End If
                    RanNum = RandomGenerator.Next(1, 3)
                    Select Case RanNum
                        Case 1
                            Depth1 = 0
                            Depth2 = (Reallocate_Amt * (Field2_Area / (Field2_Area + Field3_Area))) / Field2_Area
                            Depth3 = (Reallocate_Amt * (Field3_Area / (Field2_Area + Field3_Area))) / Field3_Area
                        Case 2
                            Depth1 = (Reallocate_Amt * (Field1_Area / (Field1_Area + Field3_Area))) / Field1_Area
                            Depth2 = 0
                            Depth3 = (Reallocate_Amt * (Field3_Area / (Field1_Area + Field3_Area))) / Field3_Area
                        Case 3
                            Depth1 = (Reallocate_Amt * (Field1_Area / (Field1_Area + Field2_Area))) / Field1_Area
                            Depth2 = (Reallocate_Amt * (Field2_Area / (Field2_Area + Field2_Area))) / Field2_Area
                            Depth3 = 0
                    End Select
                End If
50:             Field1_Amt = Depth1 * Field1_Area
                Field2_Amt = Depth2 * Field2_Area
                Field3_Amt = Depth3 * Field3_Area
            Case 4
                Dim Temp_Flag1 As Boolean = False
                Dim Temp_Flag2 As Boolean = False
                Depth1 = Field1_Amt / Field1_Area
                Depth2 = Field2_Amt / Field2_Area
                Depth3 = Field3_Amt / Field3_Area
                Depth4 = Field4_Amt / Field4_Area
                If Depth1 = 0 And Depth2 = 0 And Depth3 = 0 And Depth4 = 0 Then Exit Function
                While Not OK

                    If ((Depth1 * 39.37) < 10 And (Depth2 * 39.37) < 10 And (Depth3 * 39.37) < 10 And (Depth4 * 39.37) < 10) And ((Depth1 * 39.37) > 2 And (Depth2 * 39.37) > 2 And (Depth3 * 39.37) > 2 And (Depth4 * 39.37) > 2) Or _
                       ((Depth1 * 39.37) < 10 And (Depth2 * 39.37) < 10 And (Depth3 * 39.37) < 10 And (Depth4 * 39.37) = 0) And ((Depth1 * 39.37) > 2 And (Depth2 * 39.37) > 2 And (Depth3 * 39.37) > 2 And (Depth4 * 39.37) = 0) Or _
                       ((Depth1 * 39.37) < 10 And (Depth2 * 39.37) < 10 And (Depth3 * 39.37) = 0 And (Depth4 * 39.37) < 10) And ((Depth1 * 39.37) > 2 And (Depth2 * 39.37) > 2 And (Depth3 * 39.37) = 0 And (Depth4 * 39.37) > 2) Or _
                       ((Depth1 * 39.37) < 10 And (Depth2 * 39.37) = 0 And (Depth3 * 39.37) < 10 And (Depth4 * 39.37) < 10) And ((Depth1 * 39.37) > 2 And (Depth2 * 39.37) = 0 And (Depth3 * 39.37) > 2 And (Depth4 * 39.37) > 2) Or _
                       ((Depth1 * 39.37) = 0 And (Depth2 * 39.37) < 10 And (Depth3 * 39.37) < 10 And (Depth4 * 39.37) < 10) And ((Depth1 * 39.37) = 0 And (Depth2 * 39.37) > 2 And (Depth3 * 39.37) > 2 And (Depth4 * 39.37) > 2) Or _
                       ((Depth1 * 39.37) < 10 And (Depth2 * 39.37) < 10 And (Depth3 * 39.37) = 0 And (Depth4 * 39.37) = 0) And ((Depth1 * 39.37) > 2 And (Depth2 * 39.37) > 2 And (Depth3 * 39.37) = 0 And (Depth4 * 39.37) = 0) Or _
                       ((Depth1 * 39.37) < 10 And (Depth2 * 39.37) = 0 And (Depth3 * 39.37) < 10 And (Depth4 * 39.37) = 0) And ((Depth1 * 39.37) > 2 And (Depth2 * 39.37) = 0 And (Depth3 * 39.37) > 2 And (Depth4 * 39.37) = 0) Or _
                       ((Depth1 * 39.37) = 0 And (Depth2 * 39.37) < 10 And (Depth3 * 39.37) < 10 And (Depth4 * 39.37) = 0) And ((Depth1 * 39.37) = 0 And (Depth2 * 39.37) > 2 And (Depth3 * 39.37) > 2 And (Depth4 * 39.37) = 0) Or _
                       ((Depth1 * 39.37) < 10 And (Depth2 * 39.37) = 0 And (Depth3 * 39.37) = 0 And (Depth4 * 39.37) < 10) And ((Depth1 * 39.37) > 2 And (Depth2 * 39.37) = 0 And (Depth3 * 39.37) = 0 And (Depth4 * 39.37) > 2) Or _
                       ((Depth1 * 39.37) = 0 And (Depth2 * 39.37) < 10 And (Depth3 * 39.37) = 0 And (Depth4 * 39.37) < 10) And ((Depth1 * 39.37) = 0 And (Depth2 * 39.37) > 2 And (Depth3 * 39.37) = 0 And (Depth4 * 39.37) > 2) Or _
                       ((Depth1 * 39.37) = 0 And (Depth2 * 39.37) = 0 And (Depth3 * 39.37) < 10 And (Depth4 * 39.37) < 10) And ((Depth1 * 39.37) = 0 And (Depth2 * 39.37) = 0 And (Depth3 * 39.37) > 2 And (Depth4 * 39.37) > 2) Then
                        OK = True
                    ElseIf NumIterations > 10 Then
                        GoTo 60
                    Else
                        NumIterations += 1
                        Reallocate_Amt = Field1_Amt + Field2_Amt + Field3_Amt + Field4_Amt
                        Field1_Type = FilterCropType(Field1_Type)
                        Field2_Type = FilterCropType(Field2_Type)
                        Field3_Type = FilterCropType(Field3_Type)
                        Field4_Type = FilterCropType(Field4_Type)
                        Field1_Level = DetermineCropPriorityLevel(Field1_Type)
                        Field2_Level = DetermineCropPriorityLevel(Field2_Type)
                        Field3_Level = DetermineCropPriorityLevel(Field3_Type)
                        Field4_Level = DetermineCropPriorityLevel(Field4_Type)

                        'A significant bug was found on 10/10/07 and the following four lines of code 
                        'are to fix that bug that occurs throughout this "Case 4" (above) statement.
                        'A brief note on the bug is that I had misapplied the Fieldx_Level variables.
                        'Lower values are actually higher priority and thus to get the code working correctly...
                        Field1_Level = 9 - Field1_Level
                        Field2_Level = 9 - Field2_Level
                        Field3_Level = 9 - Field3_Level
                        Field4_Level = 9 - Field4_Level
                        'The same bug fix was applied to "Case 3" above

                        If (Field1_Level = Field2_Level) And (Field1_Level = Field3_Level) And (Field1_Level = Field4_Level) Then
                            If Not (Field1_Level = 5) Then
10:                             If Not Temp_Flag1 And Not Temp_Flag2 Then
                                    RanNum = RandomGenerator.Next(1, 4)
                                    Select Case RanNum
                                        Case 1
                                            Depth1 = 0
                                            Depth2 = Reallocate_Amt * (Field2_Area / (Field2_Area + Field3_Area + Field4_Area)) / Field2_Area
                                            Depth3 = Reallocate_Amt * (Field3_Area / (Field2_Area + Field3_Area + Field4_Area)) / Field3_Area
                                            Depth4 = Reallocate_Amt * (Field4_Area / (Field2_Area + Field3_Area + Field4_Area)) / Field4_Area
                                            Temp_Flag1 = True
                                        Case 2
                                            Depth1 = Reallocate_Amt * (Field1_Area / (Field1_Area + Field3_Area + Field4_Area)) / Field1_Area
                                            Depth2 = 0
                                            Depth3 = Reallocate_Amt * (Field3_Area / (Field1_Area + Field3_Area + Field4_Area)) / Field3_Area
                                            Depth4 = Reallocate_Amt * (Field4_Area / (Field1_Area + Field3_Area + Field4_Area)) / Field4_Area
                                            Temp_Flag1 = True
                                        Case 3
                                            Depth1 = Reallocate_Amt * (Field1_Area / (Field1_Area + Field2_Area + Field4_Area)) / Field1_Area
                                            Depth2 = Reallocate_Amt * (Field2_Area / (Field1_Area + Field2_Area + Field4_Area)) / Field2_Area
                                            Depth3 = 0
                                            Depth4 = Reallocate_Amt * (Field4_Area / (Field1_Area + Field2_Area + Field4_Area)) / Field4_Area
                                            Temp_Flag1 = True
                                        Case 4
                                            Depth1 = Reallocate_Amt * (Field1_Area / (Field1_Area + Field2_Area + Field3_Area)) / Field1_Area
                                            Depth2 = Reallocate_Amt * (Field2_Area / (Field1_Area + Field2_Area + Field3_Area)) / Field2_Area
                                            Depth3 = Reallocate_Amt * (Field3_Area / (Field1_Area + Field2_Area + Field3_Area)) / Field3_Area
                                            Depth4 = 0
                                            Temp_Flag1 = True
                                    End Select
                                ElseIf Temp_Flag1 And Not Temp_Flag2 Then
                                    RanNum = RandomGenerator.Next(1, 6)
                                    Select Case RanNum
                                        Case 1
                                            Depth1 = Reallocate_Amt * (Field1_Area / (Field1_Area + Field2_Area)) / Field1_Area
                                            Depth2 = Reallocate_Amt * (Field2_Area / (Field1_Area + Field2_Area)) / Field2_Area
                                            Depth3 = 0
                                            Depth4 = 0
                                            Temp_Flag2 = True
                                        Case 2
                                            Depth1 = Reallocate_Amt * (Field1_Area / (Field1_Area + Field3_Area)) / Field1_Area
                                            Depth2 = 0
                                            Depth3 = Reallocate_Amt * (Field3_Area / (Field1_Area + Field3_Area)) / Field3_Area
                                            Depth4 = 0
                                            Temp_Flag2 = True
                                        Case 3
                                            Depth1 = Reallocate_Amt * (Field1_Area / (Field1_Area + Field4_Area)) / Field1_Area
                                            Depth2 = 0
                                            Depth3 = 0
                                            Depth4 = Reallocate_Amt * (Field4_Area / (Field1_Area + Field4_Area)) / Field4_Area
                                            Temp_Flag2 = True
                                        Case 4
                                            Depth1 = 0
                                            Depth2 = Reallocate_Amt * (Field2_Area / (Field2_Area + Field3_Area)) / Field2_Area
                                            Depth3 = Reallocate_Amt * (Field3_Area / (Field2_Area + Field3_Area)) / Field3_Area
                                            Depth4 = 0
                                            Temp_Flag2 = True
                                        Case 5
                                            Depth1 = 0
                                            Depth2 = Reallocate_Amt * (Field2_Area / (Field2_Area + Field4_Area)) / Field2_Area
                                            Depth3 = 0
                                            Depth4 = Reallocate_Amt * (Field4_Area / (Field2_Area + Field4_Area)) / Field4_Area
                                            Temp_Flag2 = True
                                        Case 6
                                            Depth1 = 0
                                            Depth2 = 0
                                            Depth3 = Reallocate_Amt * (Field3_Area / (Field3_Area + Field4_Area)) / Field3_Area
                                            Depth4 = Reallocate_Amt * (Field4_Area / (Field3_Area + Field4_Area)) / Field4_Area
                                            Temp_Flag2 = True
                                    End Select
                                ElseIf Temp_Flag1 And Temp_Flag2 Then
                                    RanNum = RandomGenerator.Next(1, 4)
                                    Select Case RanNum
                                        Case 1
                                            Depth1 = Reallocate_Amt / Field1_Area
                                            Depth2 = 0
                                            Depth3 = 0
                                            Depth4 = 0
                                        Case 2
                                            Depth1 = 0
                                            Depth2 = Reallocate_Amt / Field2_Area
                                            Depth3 = 0
                                            Depth4 = 0
                                        Case 3
                                            Depth1 = 0
                                            Depth2 = 0
                                            Depth3 = Reallocate_Amt / Field3_Area
                                            Depth4 = 0
                                        Case 4
                                            Depth1 = 0
                                            Depth2 = 0
                                            Depth3 = 0
                                            Depth4 = Reallocate_Amt / Field4_Area
                                    End Select
                                End If
                            ElseIf Field1_Level = 5 Then
                                If Field1_Type = "ALFALFA" And Field2_Type = "ALFALFA" And Field3_Type = "ALFALFA" And Field4_Type = "ALFALFA" Or _
                                   Field1_Type = "CORN" And Field2_Type = "CORN" And Field3_Type = "CORN" And Field4_Type = "CORN" Then
                                    GoTo 10
                                Else 'This next bit of code has to do with prioritizing the corn/alfalfa problem based on time of year
                                    PriorityDay = CurrentDate.DayOfYear()
                                    If PriorityDay > 145 And PriorityDay < 243 Then 'Corn has higher Priority in this case
                                        If Not Temp_Flag1 And Not Temp_Flag2 Then
                                            If (Field1_Type = "CORN" And Field2_Type = "CORN" And Field3_Type = "CORN") Or (Field1_Type = "CORN" And Field2_Type = "CORN" And Field4_Type = "CORN") Or (Field1_Type = "CORN" And Field3_Type = "CORN" And Field4_Type = "CORN") Or (Field2_Type = "CORN" And Field3_Type = "CORN" And Field4_Type = "CORN") Then
                                                If Field1_Type = "CORN" And Field2_Type = "CORN" And Field3_Type = "CORN" Then
                                                    Depth1 = Reallocate_Amt * (Field1_Area / (Field1_Area + Field2_Area + Field3_Area)) / Field1_Area
                                                    Depth2 = Reallocate_Amt * (Field2_Area / (Field1_Area + Field2_Area + Field3_Area)) / Field2_Area
                                                    Depth3 = Reallocate_Amt * (Field3_Area / (Field1_Area + Field2_Area + Field3_Area)) / Field3_Area
                                                    Depth4 = 0
                                                    Temp_Flag1 = True
                                                ElseIf Field1_Type = "CORN" And Field2_Type = "CORN" And Field4_Type = "CORN" Then
                                                    Depth1 = Reallocate_Amt * (Field1_Area / (Field1_Area + Field2_Area + Field4_Area)) / Field1_Area
                                                    Depth2 = Reallocate_Amt * (Field2_Area / (Field1_Area + Field2_Area + Field4_Area)) / Field2_Area
                                                    Depth3 = 0
                                                    Depth4 = Reallocate_Amt * (Field4_Area / (Field1_Area + Field2_Area + Field4_Area)) / Field4_Area
                                                    Temp_Flag1 = True
                                                ElseIf Field1_Type = "CORN" And Field3_Type = "CORN" And Field4_Type = "CORN" Then
                                                    Depth1 = Reallocate_Amt * (Field1_Area / (Field1_Area + Field3_Area + Field4_Area)) / Field1_Area
                                                    Depth2 = 0
                                                    Depth3 = Reallocate_Amt * (Field3_Area / (Field1_Area + Field3_Area + Field4_Area)) / Field3_Area
                                                    Depth4 = Reallocate_Amt * (Field4_Area / (Field1_Area + Field3_Area + Field4_Area)) / Field4_Area
                                                    Temp_Flag1 = True
                                                ElseIf Field2_Type = "CORN" And Field3_Type = "CORN" And Field4_Type = "CORN" Then
                                                    Depth1 = 0
                                                    Depth2 = Reallocate_Amt * (Field2_Area / (Field2_Area + Field3_Area + Field4_Area)) / Field2_Area
                                                    Depth3 = Reallocate_Amt * (Field3_Area / (Field2_Area + Field3_Area + Field4_Area)) / Field3_Area
                                                    Depth4 = Reallocate_Amt * (Field4_Area / (Field2_Area + Field3_Area + Field4_Area)) / Field4_Area
                                                    Temp_Flag1 = True
                                                End If
                                            ElseIf (Field1_Type = "CORN" And Field2_Type = "CORN") Or (Field1_Type = "CORN" And Field3_Type = "CORN") Or (Field1_Type = "CORN" And Field4_Type = "CORN") Or (Field2_Type = "CORN" And Field3_Type = "CORN") Or _
                                                   (Field2_Type = "CORN" And Field4_Type = "CORN") Or (Field3_Type = "CORN" And Field4_Type = "CORN") Then
                                                If Field1_Type = "CORN" And Field2_Type = "CORN" Then
                                                    RanNum = RandomGenerator.Next(3, 4)
                                                    Select Case RanNum
                                                        Case 3
                                                            Depth1 = Reallocate_Amt * (Field1_Area / (Field1_Area + Field2_Area + Field3_Area)) / Field1_Area
                                                            Depth2 = Reallocate_Amt * (Field2_Area / (Field1_Area + Field2_Area + Field3_Area)) / Field2_Area
                                                            Depth3 = Reallocate_Amt * (Field3_Area / (Field1_Area + Field2_Area + Field3_Area)) / Field3_Area
                                                            Depth4 = 0
                                                            Temp_Flag1 = True
                                                        Case 4
                                                            Depth1 = Reallocate_Amt * (Field1_Area / (Field1_Area + Field2_Area + Field4_Area)) / Field1_Area
                                                            Depth2 = Reallocate_Amt * (Field2_Area / (Field1_Area + Field2_Area + Field4_Area)) / Field2_Area
                                                            Depth3 = 0
                                                            Depth4 = Reallocate_Amt * (Field4_Area / (Field1_Area + Field2_Area + Field4_Area)) / Field4_Area
                                                            Temp_Flag1 = True
                                                    End Select
                                                ElseIf Field1_Type = "CORN" And Field3_Type = "CORN" Then
                                                    RanNum = RandomGenerator.Next(2, 3)
                                                    Select Case RanNum
                                                        Case 2
                                                            Depth1 = Reallocate_Amt * (Field1_Area / (Field1_Area + Field2_Area + Field3_Area)) / Field1_Area
                                                            Depth2 = Reallocate_Amt * (Field2_Area / (Field1_Area + Field2_Area + Field3_Area)) / Field2_Area
                                                            Depth3 = Reallocate_Amt * (Field3_Area / (Field1_Area + Field2_Area + Field3_Area)) / Field3_Area
                                                            Depth4 = 0
                                                            Temp_Flag1 = True
                                                        Case 3 '4
                                                            Depth1 = Reallocate_Amt * (Field1_Area / (Field1_Area + Field3_Area + Field4_Area)) / Field1_Area
                                                            Depth2 = 0
                                                            Depth3 = Reallocate_Amt * (Field3_Area / (Field1_Area + Field3_Area + Field4_Area)) / Field3_Area
                                                            Depth4 = Reallocate_Amt * (Field4_Area / (Field1_Area + Field3_Area + Field4_Area)) / Field4_Area
                                                            Temp_Flag1 = True
                                                    End Select
                                                ElseIf Field1_Type = "CORN" And Field4_Type = "CORN" Then
                                                    RanNum = RandomGenerator.Next(2, 3)
                                                    Select Case RanNum
                                                        Case 2
                                                            Depth1 = Reallocate_Amt * (Field1_Area / (Field1_Area + Field2_Area + Field4_Area)) / Field1_Area
                                                            Depth2 = Reallocate_Amt * (Field2_Area / (Field1_Area + Field2_Area + Field4_Area)) / Field2_Area
                                                            Depth3 = 0
                                                            Depth4 = Reallocate_Amt * (Field4_Area / (Field1_Area + Field2_Area + Field4_Area)) / Field4_Area
                                                            Temp_Flag1 = True
                                                        Case 3
                                                            Depth1 = Reallocate_Amt * (Field1_Area / (Field1_Area + Field3_Area + Field4_Area)) / Field1_Area
                                                            Depth2 = 0
                                                            Depth3 = Reallocate_Amt * (Field3_Area / (Field1_Area + Field3_Area + Field4_Area)) / Field3_Area
                                                            Depth4 = Reallocate_Amt * (Field4_Area / (Field1_Area + Field3_Area + Field4_Area)) / Field4_Area
                                                            Temp_Flag1 = True
                                                    End Select
                                                ElseIf Field2_Type = "CORN" And Field3_Type = "CORN" Then
                                                    RanNum = RandomGenerator.Next(1, 2)
                                                    Select Case RanNum
                                                        Case 1
                                                            Depth1 = Reallocate_Amt * (Field1_Area / (Field1_Area + Field2_Area + Field3_Area)) / Field1_Area
                                                            Depth2 = Reallocate_Amt * (Field2_Area / (Field1_Area + Field2_Area + Field3_Area)) / Field2_Area
                                                            Depth3 = Reallocate_Amt * (Field3_Area / (Field1_Area + Field2_Area + Field3_Area)) / Field3_Area
                                                            Depth4 = 0
                                                            Temp_Flag1 = True
                                                        Case 2 '4
                                                            Depth1 = 0
                                                            Depth2 = Reallocate_Amt * (Field2_Area / (Field2_Area + Field3_Area + Field4_Area)) / Field2_Area
                                                            Depth3 = Reallocate_Amt * (Field3_Area / (Field2_Area + Field3_Area + Field4_Area)) / Field3_Area
                                                            Depth4 = Reallocate_Amt * (Field4_Area / (Field2_Area + Field3_Area + Field4_Area)) / Field4_Area
                                                            Temp_Flag1 = True
                                                    End Select
                                                ElseIf Field2_Type = "CORN" And Field4_Type = "CORN" Then
                                                    RanNum = RandomGenerator.Next(1, 2)
                                                    Select Case RanNum
                                                        Case 1
                                                            Depth1 = Reallocate_Amt * (Field1_Area / (Field1_Area + Field2_Area + Field4_Area)) / Field1_Area
                                                            Depth2 = Reallocate_Amt * (Field2_Area / (Field1_Area + Field2_Area + Field4_Area)) / Field2_Area
                                                            Depth3 = 0
                                                            Depth4 = Reallocate_Amt * (Field4_Area / (Field1_Area + Field2_Area + Field4_Area)) / Field4_Area
                                                            Temp_Flag1 = True
                                                        Case 2 '3
                                                            Depth1 = 0
                                                            Depth2 = Reallocate_Amt * (Field2_Area / (Field2_Area + Field3_Area + Field4_Area)) / Field2_Area
                                                            Depth3 = Reallocate_Amt * (Field3_Area / (Field2_Area + Field3_Area + Field4_Area)) / Field3_Area
                                                            Depth4 = Reallocate_Amt * (Field4_Area / (Field2_Area + Field3_Area + Field4_Area)) / Field4_Area
                                                            Temp_Flag1 = True
                                                    End Select
                                                ElseIf Field3_Type = "CORN" And Field4_Type = "CORN" Then
                                                    RanNum = RandomGenerator.Next(1, 2)
                                                    Select Case RanNum
                                                        Case 1
                                                            Depth1 = Reallocate_Amt * (Field1_Area / (Field1_Area + Field3_Area + Field4_Area)) / Field1_Area
                                                            Depth2 = 0
                                                            Depth3 = Reallocate_Amt * (Field3_Area / (Field1_Area + Field3_Area + Field4_Area)) / Field3_Area
                                                            Depth4 = Reallocate_Amt * (Field4_Area / (Field1_Area + Field3_Area + Field4_Area)) / Field4_Area
                                                            Temp_Flag1 = True
                                                        Case 2
                                                            Depth1 = 0
                                                            Depth2 = Reallocate_Amt * (Field2_Area / (Field2_Area + Field3_Area + Field4_Area)) / Field2_Area
                                                            Depth3 = Reallocate_Amt * (Field3_Area / (Field2_Area + Field3_Area + Field4_Area)) / Field3_Area
                                                            Depth4 = Reallocate_Amt * (Field4_Area / (Field2_Area + Field3_Area + Field4_Area)) / Field4_Area
                                                            Temp_Flag1 = True
                                                    End Select
                                                End If
                                            ElseIf Field1_Type = "CORN" Or Field2_Type = "CORN" Or Field3_Type = "CORN" Or Field4_Type = "CORN" Then
                                                If Field1_Type = "CORN" Then
                                                    RanNum = RandomGenerator.Next(2, 4)
                                                    Select Case RanNum
                                                        Case 2
                                                            Depth1 = Reallocate_Amt * (Field1_Area / (Field1_Area + Field3_Area + Field4_Area)) / Field1_Area
                                                            Depth2 = 0
                                                            Depth3 = Reallocate_Amt * (Field3_Area / (Field1_Area + Field3_Area + Field4_Area)) / Field3_Area
                                                            Depth4 = Reallocate_Amt * (Field4_Area / (Field1_Area + Field3_Area + Field4_Area)) / Field4_Area
                                                            Temp_Flag1 = True
                                                        Case 3
                                                            Depth1 = Reallocate_Amt * (Field1_Area / (Field1_Area + Field2_Area + Field4_Area)) / Field1_Area
                                                            Depth2 = Reallocate_Amt * (Field2_Area / (Field1_Area + Field2_Area + Field4_Area)) / Field2_Area
                                                            Depth3 = 0
                                                            Depth4 = Reallocate_Amt * (Field4_Area / (Field1_Area + Field2_Area + Field4_Area)) / Field4_Area
                                                            Temp_Flag1 = True
                                                        Case 4
                                                            Depth1 = Reallocate_Amt * (Field1_Area / (Field1_Area + Field2_Area + Field3_Area)) / Field1_Area
                                                            Depth2 = Reallocate_Amt * (Field2_Area / (Field1_Area + Field2_Area + Field3_Area)) / Field2_Area
                                                            Depth3 = Reallocate_Amt * (Field3_Area / (Field1_Area + Field2_Area + Field3_Area)) / Field3_Area
                                                            Depth4 = 0
                                                            Temp_Flag1 = True
                                                    End Select
                                                ElseIf Field2_Type = "CORN" Then
                                                    RanNum = RandomGenerator.Next(1, 3)
                                                    Select Case RanNum
                                                        Case 1
                                                            Depth1 = 0
                                                            Depth2 = Reallocate_Amt * (Field2_Area / (Field2_Area + Field3_Area + Field4_Area)) / Field2_Area
                                                            Depth3 = Reallocate_Amt * (Field3_Area / (Field2_Area + Field3_Area + Field4_Area)) / Field3_Area
                                                            Depth4 = Reallocate_Amt * (Field4_Area / (Field2_Area + Field3_Area + Field4_Area)) / Field4_Area
                                                            Temp_Flag1 = True
                                                        Case 2 '3
                                                            Depth1 = Reallocate_Amt * (Field1_Area / (Field1_Area + Field2_Area + Field4_Area)) / Field1_Area
                                                            Depth2 = Reallocate_Amt * (Field2_Area / (Field1_Area + Field2_Area + Field4_Area)) / Field2_Area
                                                            Depth3 = 0
                                                            Depth4 = Reallocate_Amt * (Field4_Area / (Field1_Area + Field2_Area + Field4_Area)) / Field4_Area
                                                            Temp_Flag1 = True
                                                        Case 3 '4
                                                            Depth1 = Reallocate_Amt * (Field1_Area / (Field1_Area + Field2_Area + Field3_Area)) / Field1_Area
                                                            Depth2 = Reallocate_Amt * (Field2_Area / (Field1_Area + Field2_Area + Field3_Area)) / Field2_Area
                                                            Depth3 = Reallocate_Amt * (Field3_Area / (Field1_Area + Field2_Area + Field3_Area)) / Field3_Area
                                                            Depth4 = 0
                                                            Temp_Flag1 = True
                                                    End Select
                                                ElseIf Field3_Type = "CORN" Then
                                                    RanNum = RandomGenerator.Next(1, 3)
                                                    Select Case RanNum
                                                        Case 1
                                                            Depth1 = 0
                                                            Depth2 = Reallocate_Amt * (Field2_Area / (Field2_Area + Field3_Area + Field4_Area)) / Field2_Area
                                                            Depth3 = Reallocate_Amt * (Field3_Area / (Field2_Area + Field3_Area + Field4_Area)) / Field3_Area
                                                            Depth4 = Reallocate_Amt * (Field4_Area / (Field2_Area + Field3_Area + Field4_Area)) / Field4_Area
                                                            Temp_Flag1 = True
                                                        Case 2
                                                            Depth1 = Reallocate_Amt * (Field1_Area / (Field1_Area + Field3_Area + Field4_Area)) / Field1_Area
                                                            Depth2 = 0
                                                            Depth3 = Reallocate_Amt * (Field3_Area / (Field1_Area + Field3_Area + Field4_Area)) / Field3_Area
                                                            Depth4 = Reallocate_Amt * (Field4_Area / (Field1_Area + Field3_Area + Field4_Area)) / Field4_Area
                                                            Temp_Flag1 = True
                                                        Case 3 '4
                                                            Depth1 = Reallocate_Amt * (Field1_Area / (Field1_Area + Field2_Area + Field3_Area)) / Field1_Area
                                                            Depth2 = Reallocate_Amt * (Field2_Area / (Field1_Area + Field2_Area + Field3_Area)) / Field2_Area
                                                            Depth3 = Reallocate_Amt * (Field3_Area / (Field1_Area + Field2_Area + Field3_Area)) / Field3_Area
                                                            Depth4 = 0
                                                            Temp_Flag1 = True
                                                    End Select
                                                ElseIf Field4_Type = "CORN" Then
                                                    RanNum = RandomGenerator.Next(1, 3)
                                                    Select Case RanNum
                                                        Case 1
                                                            Depth1 = 0
                                                            Depth2 = Reallocate_Amt * (Field2_Area / (Field2_Area + Field3_Area + Field4_Area)) / Field2_Area
                                                            Depth3 = Reallocate_Amt * (Field3_Area / (Field2_Area + Field3_Area + Field4_Area)) / Field3_Area
                                                            Depth4 = Reallocate_Amt * (Field4_Area / (Field2_Area + Field3_Area + Field4_Area)) / Field4_Area
                                                            Temp_Flag1 = True
                                                        Case 2
                                                            Depth1 = Reallocate_Amt * (Field1_Area / (Field1_Area + Field3_Area + Field4_Area)) / Field1_Area
                                                            Depth2 = 0
                                                            Depth3 = Reallocate_Amt * (Field3_Area / (Field1_Area + Field3_Area + Field4_Area)) / Field3_Area
                                                            Depth4 = Reallocate_Amt * (Field4_Area / (Field1_Area + Field3_Area + Field4_Area)) / Field4_Area
                                                            Temp_Flag1 = True
                                                        Case 3
                                                            Depth1 = Reallocate_Amt * (Field1_Area / (Field1_Area + Field2_Area + Field4_Area)) / Field1_Area
                                                            Depth2 = Reallocate_Amt * (Field2_Area / (Field1_Area + Field2_Area + Field4_Area)) / Field2_Area
                                                            Depth3 = 0
                                                            Depth4 = Reallocate_Amt * (Field4_Area / (Field1_Area + Field2_Area + Field4_Area)) / Field4_Area
                                                            Temp_Flag1 = True
                                                    End Select
                                                End If
                                            End If
                                        ElseIf Temp_Flag1 And Not Temp_Flag2 Then
                                            'here reallocating to two fields in the event that 3 fields did not work
                                            If (Field1_Type = "CORN" And Field2_Type = "CORN" And Field3_Type = "CORN") Or (Field1_Type = "CORN" And Field2_Type = "CORN" And Field4_Type = "CORN") Or (Field1_Type = "CORN" And Field3_Type = "CORN" And Field4_Type = "CORN") Or (Field2_Type = "CORN" And Field3_Type = "CORN" And Field4_Type = "CORN") Then
                                                If Field1_Type = "CORN" And Field2_Type = "CORN" And Field3_Type = "CORN" Then
                                                    RanNum = RandomGenerator.Next(1, 3)
                                                    Select Case RanNum
                                                        Case 1
                                                            Depth1 = 0
                                                            Depth2 = Reallocate_Amt * (Field2_Area / (Field2_Area + Field3_Area)) / Field2_Area
                                                            Depth3 = Reallocate_Amt * (Field3_Area / (Field2_Area + Field3_Area)) / Field3_Area
                                                            Depth4 = 0
                                                            Temp_Flag2 = True
                                                        Case 2
                                                            Depth1 = Reallocate_Amt * (Field1_Area / (Field1_Area + Field3_Area)) / Field1_Area
                                                            Depth2 = 0
                                                            Depth3 = Reallocate_Amt * (Field3_Area / (Field1_Area + Field3_Area)) / Field3_Area
                                                            Depth4 = 0
                                                            Temp_Flag2 = True
                                                        Case 3
                                                            Depth1 = Reallocate_Amt * (Field1_Area / (Field1_Area + Field2_Area)) / Field1_Area
                                                            Depth2 = Reallocate_Amt * (Field2_Area / (Field1_Area + Field2_Area)) / Field2_Area
                                                            Depth3 = 0
                                                            Depth4 = 0
                                                            Temp_Flag2 = True
                                                    End Select
                                                ElseIf Field1_Type = "CORN" And Field2_Type = "CORN" And Field4_Type = "CORN" Then
                                                    RanNum = RandomGenerator.Next(1, 3)
                                                    Select Case RanNum
                                                        Case 1
                                                            Depth1 = 0
                                                            Depth2 = Reallocate_Amt * (Field2_Area / (Field2_Area + Field4_Area)) / Field2_Area
                                                            Depth3 = 0
                                                            Depth4 = Reallocate_Amt * (Field4_Area / (Field2_Area + Field4_Area)) / Field2_Area
                                                            Temp_Flag2 = True
                                                        Case 2
                                                            Depth1 = Reallocate_Amt * (Field1_Area / (Field1_Area + Field4_Area)) / Field1_Area
                                                            Depth2 = 0
                                                            Depth3 = 0
                                                            Depth4 = Reallocate_Amt * (Field4_Area / (Field1_Area + Field4_Area)) / Field4_Area
                                                            Temp_Flag2 = True
                                                        Case 3
                                                            Depth1 = Reallocate_Amt * (Field1_Area / (Field1_Area + Field2_Area)) / Field1_Area
                                                            Depth2 = Reallocate_Amt * (Field2_Area / (Field1_Area + Field2_Area)) / Field2_Area
                                                            Depth3 = 0
                                                            Depth4 = 0
                                                            Temp_Flag2 = True
                                                    End Select
                                                ElseIf Field1_Type = "CORN" And Field3_Type = "CORN" And Field4_Type = "CORN" Then
                                                    RanNum = RandomGenerator.Next(1, 3)
                                                    Select Case RanNum
                                                        Case 1
                                                            Depth1 = 0
                                                            Depth2 = 0
                                                            Depth3 = Reallocate_Amt * (Field3_Area / (Field3_Area + Field4_Area)) / Field3_Area
                                                            Depth4 = Reallocate_Amt * (Field4_Area / (Field3_Area + Field4_Area)) / Field4_Area
                                                            Temp_Flag2 = True
                                                        Case 2 '3
                                                            Depth1 = Reallocate_Amt * (Field1_Area / (Field1_Area + Field4_Area)) / Field1_Area
                                                            Depth2 = 0
                                                            Depth3 = 0
                                                            Depth4 = Reallocate_Amt * (Field4_Area / (Field1_Area + Field4_Area)) / Field4_Area
                                                            Temp_Flag2 = True
                                                        Case 3 '4
                                                            Depth1 = Reallocate_Amt * (Field1_Area / (Field1_Area + Field3_Area)) / Field1_Area
                                                            Depth2 = 0
                                                            Depth3 = Reallocate_Amt * (Field3_Area / (Field1_Area + Field3_Area)) / Field3_Area
                                                            Depth4 = 0
                                                            Temp_Flag2 = True
                                                    End Select
                                                ElseIf Field2_Type = "CORN" And Field3_Type = "CORN" And Field4_Type = "CORN" Then
                                                    RanNum = RandomGenerator.Next(2, 4)
                                                    Select Case RanNum
                                                        Case 2
                                                            Depth1 = 0
                                                            Depth2 = 0
                                                            Depth3 = Reallocate_Amt * (Field3_Area / (Field3_Area + Field4_Area)) / Field3_Area
                                                            Depth4 = Reallocate_Amt * (Field4_Area / (Field3_Area + Field4_Area)) / Field4_Area
                                                            Temp_Flag2 = True
                                                        Case 3
                                                            Depth1 = 0
                                                            Depth2 = Reallocate_Amt * (Field2_Area / (Field2_Area + Field4_Area)) / Field2_Area
                                                            Depth3 = 0
                                                            Depth4 = Reallocate_Amt * (Field4_Area / (Field2_Area + Field4_Area)) / Field4_Area
                                                            Temp_Flag2 = True
                                                        Case 4
                                                            Depth1 = 0
                                                            Depth2 = Reallocate_Amt * (Field2_Area / (Field2_Area + Field3_Area)) / Field2_Area
                                                            Depth3 = Reallocate_Amt * (Field3_Area / (Field2_Area + Field3_Area)) / Field3_Area
                                                            Depth4 = 0
                                                            Temp_Flag2 = True
                                                    End Select
                                                End If
                                            ElseIf (Field1_Type = "CORN" And Field2_Type = "CORN") Or (Field1_Type = "CORN" And Field3_Type = "CORN") Or (Field1_Type = "CORN" And Field4_Type = "CORN") Or (Field2_Type = "CORN" And Field3_Type = "CORN") Or _
                                                   (Field2_Type = "CORN" And Field4_Type = "CORN") Or (Field3_Type = "CORN" And Field4_Type = "CORN") Then
                                                If Field1_Type = "CORN" And Field2_Type = "CORN" Then
                                                    Depth1 = Reallocate_Amt * (Field1_Area / (Field1_Area + Field2_Area)) / Field1_Area
                                                    Depth2 = Reallocate_Amt * (Field2_Area / (Field1_Area + Field2_Area)) / Field2_Area
                                                    Depth3 = 0
                                                    Depth4 = 0
                                                    Temp_Flag2 = True
                                                ElseIf Field1_Type = "CORN" And Field3_Type = "CORN" Then
                                                    Depth1 = Reallocate_Amt * (Field1_Area / (Field1_Area + Field3_Area)) / Field1_Area
                                                    Depth2 = 0
                                                    Depth3 = Reallocate_Amt * (Field3_Area / (Field1_Area + Field3_Area)) / Field3_Area
                                                    Depth4 = 0
                                                    Temp_Flag2 = True
                                                ElseIf Field1_Type = "CORN" And Field4_Type = "CORN" Then
                                                    Depth1 = Reallocate_Amt * (Field1_Area / (Field1_Area + Field4_Area)) / Field1_Area
                                                    Depth2 = 0
                                                    Depth3 = 0
                                                    Depth4 = Reallocate_Amt * (Field4_Area / (Field1_Area + Field4_Area)) / Field4_Area
                                                    Temp_Flag2 = True
                                                ElseIf Field2_Type = "CORN" And Field3_Type = "CORN" Then
                                                    Depth1 = 0
                                                    Depth2 = Reallocate_Amt * (Field2_Area / (Field2_Area + Field3_Area)) / Field2_Area
                                                    Depth3 = Reallocate_Amt * (Field3_Area / (Field2_Area + Field3_Area)) / Field3_Area
                                                    Depth4 = 0
                                                    Temp_Flag2 = True
                                                ElseIf Field2_Type = "CORN" And Field4_Type = "CORN" Then
                                                    Depth1 = 0
                                                    Depth2 = Reallocate_Amt * (Field2_Area / (Field2_Area + Field4_Area)) / Field2_Area
                                                    Depth3 = 0
                                                    Depth4 = Reallocate_Amt * (Field4_Area / (Field2_Area + Field4_Area)) / Field4_Area
                                                    Temp_Flag2 = True
                                                ElseIf Field3_Type = "CORN" And Field4_Type = "CORN" Then
                                                    Depth1 = 0
                                                    Depth2 = 0
                                                    Depth3 = Reallocate_Amt * (Field3_Area / (Field3_Area + Field4_Area)) / Field3_Area
                                                    Depth4 = Reallocate_Amt * (Field4_Area / (Field3_Area + Field4_Area)) / Field4_Area
                                                    Temp_Flag2 = True
                                                End If
                                            ElseIf Field1_Type = "CORN" Or Field2_Type = "CORN" Or Field3_Type = "CORN" Or Field4_Type = "CORN" Then
                                                If Field1_Type = "CORN" Then
                                                    RanNum = RandomGenerator.Next(2, 4)
                                                    Select Case RanNum
                                                        Case 2
                                                            Depth1 = Reallocate_Amt * (Field1_Area / (Field1_Area + Field2_Area)) / Field1_Area
                                                            Depth2 = Reallocate_Amt * (Field2_Area / (Field1_Area + Field2_Area)) / Field2_Area
                                                            Depth3 = 0
                                                            Depth4 = 0
                                                            Temp_Flag2 = True
                                                        Case 3
                                                            Depth1 = Reallocate_Amt * (Field1_Area / (Field1_Area + Field3_Area)) / Field1_Area
                                                            Depth2 = 0
                                                            Depth3 = Reallocate_Amt * (Field3_Area / (Field1_Area + Field3_Area)) / Field3_Area
                                                            Depth4 = 0
                                                            Temp_Flag2 = True
                                                        Case 4
                                                            Depth1 = Reallocate_Amt * (Field1_Area / (Field1_Area + Field4_Area)) / Field1_Area
                                                            Depth2 = 0
                                                            Depth3 = 0
                                                            Depth4 = Reallocate_Amt * (Field4_Area / (Field1_Area + Field4_Area)) / Field4_Area
                                                            Temp_Flag2 = True
                                                    End Select
                                                ElseIf Field2_Type = "CORN" Then
                                                    RanNum = RandomGenerator.Next(1, 3)
                                                    Select Case RanNum
                                                        Case 1
                                                            Depth1 = Reallocate_Amt * (Field1_Area / (Field1_Area + Field2_Area)) / Field1_Area
                                                            Depth2 = Reallocate_Amt * (Field2_Area / (Field1_Area + Field2_Area)) / Field2_Area
                                                            Depth3 = 0
                                                            Depth4 = 0
                                                            Temp_Flag2 = True
                                                        Case 2 '3
                                                            Depth1 = 0
                                                            Depth2 = Reallocate_Amt * (Field2_Area / (Field2_Area + Field3_Area)) / Field2_Area
                                                            Depth3 = Reallocate_Amt * (Field3_Area / (Field2_Area + Field3_Area)) / Field3_Area
                                                            Depth4 = 0
                                                            Temp_Flag2 = True
                                                        Case 3 '4
                                                            Depth1 = 0
                                                            Depth2 = Reallocate_Amt * (Field2_Area / (Field2_Area + Field4_Area)) / Field2_Area
                                                            Depth3 = 0
                                                            Depth4 = Reallocate_Amt * (Field4_Area / (Field2_Area + Field4_Area)) / Field4_Area
                                                            Temp_Flag2 = True
                                                    End Select
                                                ElseIf Field3_Type = "CORN" Then
                                                    RanNum = RandomGenerator.Next(1, 3)
                                                    Select Case RanNum
                                                        Case 1
                                                            Depth1 = Reallocate_Amt * (Field1_Area / (Field1_Area + Field3_Area)) / Field1_Area
                                                            Depth2 = 0
                                                            Depth3 = Reallocate_Amt * (Field3_Area / (Field1_Area + Field3_Area)) / Field3_Area
                                                            Depth4 = 0
                                                            Temp_Flag2 = True
                                                        Case 2
                                                            Depth1 = 0
                                                            Depth2 = Reallocate_Amt * (Field2_Area / (Field2_Area + Field3_Area)) / Field2_Area
                                                            Depth3 = Reallocate_Amt * (Field3_Area / (Field2_Area + Field3_Area)) / Field3_Area
                                                            Depth4 = 0
                                                            Temp_Flag2 = True
                                                        Case 3 '4
                                                            Depth1 = 0
                                                            Depth2 = 0
                                                            Depth3 = Reallocate_Amt * (Field3_Area / (Field3_Area + Field4_Area)) / Field3_Area
                                                            Depth4 = Reallocate_Amt * (Field4_Area / (Field3_Area + Field4_Area)) / Field4_Area
                                                            Temp_Flag2 = True
                                                    End Select
                                                ElseIf Field4_Type = "CORN" Then
                                                    RanNum = RandomGenerator.Next(1, 3)
                                                    Select Case RanNum
                                                        Case 1
                                                            Depth1 = Reallocate_Amt * (Field1_Area / (Field1_Area + Field4_Area)) / Field1_Area
                                                            Depth2 = 0
                                                            Depth3 = 0
                                                            Depth4 = Reallocate_Amt * (Field4_Area / (Field1_Area + Field4_Area)) / Field4_Area
                                                            Temp_Flag2 = True
                                                        Case 2
                                                            Depth1 = 0
                                                            Depth2 = Reallocate_Amt * (Field2_Area / (Field2_Area + Field4_Area)) / Field2_Area
                                                            Depth3 = 0
                                                            Depth4 = Reallocate_Amt * (Field2_Area / (Field2_Area + Field4_Area)) / Field4_Area
                                                            Temp_Flag2 = True
                                                        Case 3
                                                            Depth1 = 0
                                                            Depth2 = 0
                                                            Depth3 = Reallocate_Amt * (Field3_Area / (Field3_Area + Field4_Area)) / Field3_Area
                                                            Depth4 = Reallocate_Amt * (Field4_Area / (Field3_Area + Field4_Area)) / Field4_Area
                                                            Temp_Flag2 = True
                                                    End Select
                                                End If
                                            End If
                                        ElseIf Temp_Flag1 And Temp_Flag2 Then
                                            'Now reallocating down to one field in the even that two didn't work
                                            If (Field1_Type = "CORN" And Field2_Type = "CORN" And Field3_Type = "CORN") Or (Field1_Type = "CORN" And Field2_Type = "CORN" And Field4_Type = "CORN") Or (Field1_Type = "CORN" And Field3_Type = "CORN" And Field4_Type = "CORN") Or (Field2_Type = "CORN" And Field3_Type = "CORN" And Field4_Type = "CORN") Then
                                                If Field1_Type = "CORN" And Field2_Type = "CORN" And Field3_Type = "CORN" Then
                                                    RanNum = RandomGenerator.Next(1, 3)
                                                    Select Case RanNum
                                                        Case 1
                                                            Depth1 = Reallocate_Amt / Field1_Area
                                                            Depth2 = 0
                                                            Depth3 = 0
                                                            Depth4 = 0
                                                        Case 2
                                                            Depth1 = 0
                                                            Depth2 = Reallocate_Amt / Field2_Area
                                                            Depth3 = 0
                                                            Depth4 = 0
                                                        Case 3
                                                            Depth1 = 0
                                                            Depth2 = 0
                                                            Depth3 = Reallocate_Amt / Field3_Area
                                                            Depth4 = 0
                                                    End Select
                                                ElseIf Field1_Type = "CORN" And Field2_Type = "CORN" And Field4_Type = "CORN" Then
                                                    RanNum = RandomGenerator.Next(1, 3)
                                                    Select Case RanNum
                                                        Case 1
                                                            Depth1 = Reallocate_Amt / Field1_Area
                                                            Depth2 = 0
                                                            Depth3 = 0
                                                            Depth4 = 0
                                                        Case 2
                                                            Depth1 = 0
                                                            Depth2 = Reallocate_Amt / Field2_Area
                                                            Depth3 = 0
                                                            Depth4 = 0
                                                        Case 3 '4
                                                            Depth1 = 0
                                                            Depth2 = 0
                                                            Depth3 = 0
                                                            Depth4 = Reallocate_Amt / Field4_Area
                                                    End Select
                                                ElseIf Field1_Type = "CORN" And Field3_Type = "CORN" And Field4_Type = "CORN" Then
                                                    RanNum = RandomGenerator.Next(1, 3)
                                                    Select Case RanNum
                                                        Case 1
                                                            Depth1 = Reallocate_Amt / Field1_Area
                                                            Depth2 = 0
                                                            Depth3 = 0
                                                            Depth4 = 0
                                                        Case 2 '3
                                                            Depth1 = 0
                                                            Depth2 = 0
                                                            Depth3 = Reallocate_Amt / Field3_Area
                                                            Depth4 = 0
                                                        Case 3 '4
                                                            Depth1 = 0
                                                            Depth2 = 0
                                                            Depth3 = Reallocate_Amt / Field4_Area
                                                            Depth4 = 0
                                                    End Select
                                                ElseIf Field2_Type = "CORN" And Field3_Type = "CORN" And Field4_Type = "CORN" Then
                                                    RanNum = RandomGenerator.Next(2, 4)
                                                    Select Case RanNum
                                                        Case 2
                                                            Depth1 = 0
                                                            Depth2 = Reallocate_Amt / Field2_Area
                                                            Depth3 = 0
                                                            Depth4 = 0
                                                        Case 3
                                                            Depth1 = 0
                                                            Depth2 = 0
                                                            Depth3 = Reallocate_Amt / Field3_Area
                                                            Depth4 = 0
                                                        Case 4
                                                            Depth1 = 0
                                                            Depth2 = 0
                                                            Depth3 = 0
                                                            Depth4 = Reallocate_Amt / Field4_Area
                                                    End Select
                                                End If
                                            ElseIf (Field1_Type = "CORN" And Field2_Type = "CORN") Or (Field1_Type = "CORN" And Field3_Type = "CORN") Or (Field1_Type = "CORN" And Field4_Type = "CORN") Or (Field2_Type = "CORN" And Field3_Type = "CORN") Or _
                                                   (Field2_Type = "CORN" And Field4_Type = "CORN") Or (Field3_Type = "CORN" And Field4_Type = "CORN") Then
                                                If Field1_Type = "CORN" And Field2_Type = "CORN" Then
                                                    RanNum = RandomGenerator.Next(1, 2)
                                                    Select Case RanNum
                                                        Case 1
                                                            Depth1 = Reallocate_Amt / Field1_Area
                                                            Depth2 = 0
                                                            Depth3 = 0
                                                            Depth4 = 0
                                                        Case 2
                                                            Depth1 = 0
                                                            Depth2 = Reallocate_Amt / Field2_Area
                                                            Depth3 = 0
                                                            Depth4 = 0
                                                    End Select
                                                ElseIf Field1_Type = "CORN" And Field3_Type = "CORN" Then
                                                    RanNum = RandomGenerator.Next(1, 2)
                                                    Select Case RanNum
                                                        Case 1
                                                            Depth1 = Reallocate_Amt / Field1_Area
                                                            Depth2 = 0
                                                            Depth3 = 0
                                                            Depth4 = 0
                                                        Case 2 '3
                                                            Depth1 = 0
                                                            Depth2 = 0
                                                            Depth3 = Reallocate_Amt / Field3_Area
                                                            Depth4 = 0
                                                    End Select
                                                ElseIf Field1_Type = "CORN" And Field4_Type = "CORN" Then
                                                    RanNum = RandomGenerator.Next(1, 2)
                                                    Select Case RanNum
                                                        Case 1
                                                            Depth1 = Reallocate_Amt / Field1_Area
                                                            Depth2 = 0
                                                            Depth3 = 0
                                                            Depth4 = 0
                                                        Case 2 '4
                                                            Depth1 = 0
                                                            Depth2 = 0
                                                            Depth3 = 0
                                                            Depth4 = Reallocate_Amt / Field4_Area
                                                    End Select
                                                ElseIf Field2_Type = "CORN" And Field3_Type = "CORN" Then
                                                    RanNum = RandomGenerator.Next(2, 3)
                                                    Select Case RanNum
                                                        Case 2
                                                            Depth1 = 0
                                                            Depth2 = Reallocate_Amt / Field2_Area
                                                            Depth3 = 0
                                                            Depth4 = 0
                                                        Case 3
                                                            Depth1 = 0
                                                            Depth2 = 0
                                                            Depth3 = Reallocate_Amt / Field3_Area
                                                            Depth4 = 0
                                                    End Select
                                                ElseIf Field2_Type = "CORN" And Field4_Type = "CORN" Then
                                                    RanNum = RandomGenerator.Next(2, 3)
                                                    Select Case RanNum
                                                        Case 2
                                                            Depth1 = 0
                                                            Depth2 = Reallocate_Amt / Field2_Area
                                                            Depth3 = 0
                                                            Depth4 = 0
                                                        Case 3 '4
                                                            Depth1 = 0
                                                            Depth2 = 0
                                                            Depth3 = 0
                                                            Depth4 = Reallocate_Amt / Field4_Area
                                                    End Select
                                                ElseIf Field3_Type = "CORN" And Field4_Type = "CORN" Then
                                                    RanNum = RandomGenerator.Next(3, 4)
                                                    Select Case RanNum
                                                        Case 3
                                                            Depth1 = 0
                                                            Depth2 = 0
                                                            Depth3 = Reallocate_Amt / Field3_Area
                                                            Depth4 = 0
                                                        Case 4
                                                            Depth1 = 0
                                                            Depth2 = 0
                                                            Depth3 = 0
                                                            Depth4 = Reallocate_Amt / Field4_Area
                                                    End Select
                                                End If
                                            ElseIf Field1_Type = "CORN" Or Field2_Type = "CORN" Or Field3_Type = "CORN" Or Field4_Type = "CORN" Then
                                                If Field1_Type = "CORN" Then
                                                    Depth1 = Reallocate_Amt / Field1_Area
                                                    Depth2 = 0
                                                    Depth3 = 0
                                                    Depth4 = 0
                                                ElseIf Field2_Type = "CORN" Then
                                                    Depth1 = 0
                                                    Depth2 = Reallocate_Amt / Field2_Area
                                                    Depth3 = 0
                                                    Depth4 = 0
                                                ElseIf Field3_Type = "CORN" Then
                                                    Depth1 = 0
                                                    Depth2 = 0
                                                    Depth3 = Reallocate_Amt / Field3_Area
                                                    Depth4 = 0
                                                ElseIf Field4_Type = "CORN" Then
                                                    Depth1 = 0
                                                    Depth2 = 0
                                                    Depth3 = 0
                                                    Depth4 = Reallocate_Amt / Field4_Area
                                                End If
                                            End If
                                        End If
                                    Else 'Alfalfa has higher Priority in this case
                                        If Not Temp_Flag1 And Not Temp_Flag2 Then
                                            If (Field1_Type = "ALFALFA" And Field2_Type = "ALFALFA" And Field3_Type = "ALFALFA") Or (Field1_Type = "ALFALFA" And Field2_Type = "ALFALFA" And Field4_Type = "ALFALFA") Or (Field1_Type = "ALFALFA" And Field3_Type = "ALFALFA" And Field4_Type = "ALFALFA") Or (Field2_Type = "ALFALFA" And Field3_Type = "ALFALFA" And Field4_Type = "ALFALFA") Then
                                                If Field1_Type = "ALFALFA" And Field2_Type = "ALFALFA" And Field3_Type = "ALFALFA" Then
                                                    Depth1 = Reallocate_Amt * (Field1_Area / (Field1_Area + Field2_Area + Field3_Area)) / Field1_Area
                                                    Depth2 = Reallocate_Amt * (Field2_Area / (Field1_Area + Field2_Area + Field3_Area)) / Field2_Area
                                                    Depth3 = Reallocate_Amt * (Field3_Area / (Field1_Area + Field2_Area + Field3_Area)) / Field3_Area
                                                    Depth4 = 0
                                                    Temp_Flag1 = True
                                                ElseIf Field1_Type = "ALFALFA" And Field2_Type = "ALFALFA" And Field4_Type = "ALFALFA" Then
                                                    Depth1 = Reallocate_Amt * (Field1_Area / (Field1_Area + Field2_Area + Field4_Area)) / Field1_Area
                                                    Depth2 = Reallocate_Amt * (Field2_Area / (Field1_Area + Field2_Area + Field4_Area)) / Field2_Area
                                                    Depth3 = 0
                                                    Depth4 = Reallocate_Amt * (Field4_Area / (Field1_Area + Field2_Area + Field4_Area)) / Field4_Area
                                                    Temp_Flag1 = True
                                                ElseIf Field1_Type = "ALFALFA" And Field3_Type = "ALFALFA" And Field4_Type = "ALFALFA" Then
                                                    Depth1 = Reallocate_Amt * (Field1_Area / (Field1_Area + Field3_Area + Field4_Area)) / Field1_Area
                                                    Depth2 = 0
                                                    Depth3 = Reallocate_Amt * (Field3_Area / (Field1_Area + Field3_Area + Field4_Area)) / Field3_Area
                                                    Depth4 = Reallocate_Amt * (Field4_Area / (Field1_Area + Field3_Area + Field4_Area)) / Field4_Area
                                                    Temp_Flag1 = True
                                                ElseIf Field2_Type = "ALFALFA" And Field3_Type = "ALFALFA" And Field4_Type = "ALFALFA" Then
                                                    Depth1 = 0
                                                    Depth2 = Reallocate_Amt * (Field2_Area / (Field2_Area + Field3_Area + Field4_Area)) / Field2_Area
                                                    Depth3 = Reallocate_Amt * (Field3_Area / (Field2_Area + Field3_Area + Field4_Area)) / Field3_Area
                                                    Depth4 = Reallocate_Amt * (Field4_Area / (Field2_Area + Field3_Area + Field4_Area)) / Field4_Area
                                                    Temp_Flag1 = True
                                                End If
                                            ElseIf (Field1_Type = "ALFALFA" And Field2_Type = "ALFALFA") Or (Field1_Type = "ALFALFA" And Field3_Type = "ALFALFA") Or (Field1_Type = "ALFALFA" And Field4_Type = "ALFALFA") Or (Field2_Type = "ALFALFA" And Field3_Type = "ALFALFA") Or _
                                                   (Field2_Type = "ALFALFA" And Field4_Type = "ALFALFA") Or (Field3_Type = "ALFALFA" And Field4_Type = "ALFALFA") Then
                                                If Field1_Type = "ALFALFA" And Field2_Type = "ALFALFA" Then
                                                    RanNum = RandomGenerator.Next(3, 4)
                                                    Select Case RanNum
                                                        Case 3
                                                            Depth1 = Reallocate_Amt * (Field1_Area / (Field1_Area + Field2_Area + Field3_Area)) / Field1_Area
                                                            Depth2 = Reallocate_Amt * (Field2_Area / (Field1_Area + Field2_Area + Field3_Area)) / Field2_Area
                                                            Depth3 = Reallocate_Amt * (Field3_Area / (Field1_Area + Field2_Area + Field3_Area)) / Field3_Area
                                                            Depth4 = 0
                                                            Temp_Flag1 = True
                                                        Case 4
                                                            Depth1 = Reallocate_Amt * (Field1_Area / (Field1_Area + Field2_Area + Field4_Area)) / Field1_Area
                                                            Depth2 = Reallocate_Amt * (Field2_Area / (Field1_Area + Field2_Area + Field4_Area)) / Field2_Area
                                                            Depth3 = 0
                                                            Depth4 = Reallocate_Amt * (Field4_Area / (Field1_Area + Field2_Area + Field4_Area)) / Field4_Area
                                                            Temp_Flag1 = True
                                                    End Select
                                                ElseIf Field1_Type = "ALFALFA" And Field3_Type = "ALFALFA" Then
                                                    RanNum = RandomGenerator.Next(2, 3)
                                                    Select Case RanNum
                                                        Case 2
                                                            Depth1 = Reallocate_Amt * (Field1_Area / (Field1_Area + Field2_Area + Field3_Area)) / Field1_Area
                                                            Depth2 = Reallocate_Amt * (Field2_Area / (Field1_Area + Field2_Area + Field3_Area)) / Field2_Area
                                                            Depth3 = Reallocate_Amt * (Field3_Area / (Field1_Area + Field2_Area + Field3_Area)) / Field3_Area
                                                            Depth4 = 0
                                                            Temp_Flag1 = True
                                                        Case 3 '4
                                                            Depth1 = Reallocate_Amt * (Field1_Area / (Field1_Area + Field3_Area + Field4_Area)) / Field1_Area
                                                            Depth2 = 0
                                                            Depth3 = Reallocate_Amt * (Field3_Area / (Field1_Area + Field3_Area + Field4_Area)) / Field3_Area
                                                            Depth4 = Reallocate_Amt * (Field4_Area / (Field1_Area + Field3_Area + Field4_Area)) / Field4_Area
                                                            Temp_Flag1 = True
                                                    End Select
                                                ElseIf Field1_Type = "ALFALFA" And Field4_Type = "ALFALFA" Then
                                                    RanNum = RandomGenerator.Next(2, 3)
                                                    Select Case RanNum
                                                        Case 2
                                                            Depth1 = Reallocate_Amt * (Field1_Area / (Field1_Area + Field2_Area + Field4_Area)) / Field1_Area
                                                            Depth2 = Reallocate_Amt * (Field2_Area / (Field1_Area + Field2_Area + Field4_Area)) / Field2_Area
                                                            Depth3 = 0
                                                            Depth4 = Reallocate_Amt * (Field4_Area / (Field1_Area + Field2_Area + Field4_Area)) / Field4_Area
                                                            Temp_Flag1 = True
                                                        Case 3
                                                            Depth1 = Reallocate_Amt * (Field1_Area / (Field1_Area + Field3_Area + Field4_Area)) / Field1_Area
                                                            Depth2 = 0
                                                            Depth3 = Reallocate_Amt * (Field3_Area / (Field1_Area + Field3_Area + Field4_Area)) / Field3_Area
                                                            Depth4 = Reallocate_Amt * (Field4_Area / (Field1_Area + Field3_Area + Field4_Area)) / Field4_Area
                                                            Temp_Flag1 = True
                                                    End Select
                                                ElseIf Field2_Type = "ALFALFA" And Field3_Type = "ALFALFA" Then
                                                    RanNum = RandomGenerator.Next(1, 2)
                                                    Select Case RanNum
                                                        Case 1
                                                            Depth1 = Reallocate_Amt * (Field1_Area / (Field1_Area + Field2_Area + Field3_Area)) / Field1_Area
                                                            Depth2 = Reallocate_Amt * (Field2_Area / (Field1_Area + Field2_Area + Field3_Area)) / Field2_Area
                                                            Depth3 = Reallocate_Amt * (Field3_Area / (Field1_Area + Field2_Area + Field3_Area)) / Field3_Area
                                                            Depth4 = 0
                                                            Temp_Flag1 = True
                                                        Case 2 '4
                                                            Depth1 = 0
                                                            Depth2 = Reallocate_Amt * (Field2_Area / (Field2_Area + Field3_Area + Field4_Area)) / Field2_Area
                                                            Depth3 = Reallocate_Amt * (Field3_Area / (Field2_Area + Field3_Area + Field4_Area)) / Field3_Area
                                                            Depth4 = Reallocate_Amt * (Field4_Area / (Field2_Area + Field3_Area + Field4_Area)) / Field4_Area
                                                            Temp_Flag1 = True
                                                    End Select
                                                ElseIf Field2_Type = "ALFALFA" And Field4_Type = "ALFALFA" Then
                                                    RanNum = RandomGenerator.Next(1, 2)
                                                    Select Case RanNum
                                                        Case 1
                                                            Depth1 = Reallocate_Amt * (Field1_Area / (Field1_Area + Field2_Area + Field4_Area)) / Field1_Area
                                                            Depth2 = Reallocate_Amt * (Field2_Area / (Field1_Area + Field2_Area + Field4_Area)) / Field2_Area
                                                            Depth3 = 0
                                                            Depth4 = Reallocate_Amt * (Field4_Area / (Field1_Area + Field2_Area + Field4_Area)) / Field4_Area
                                                            Temp_Flag1 = True
                                                        Case 2 '3
                                                            Depth1 = 0
                                                            Depth2 = Reallocate_Amt * (Field2_Area / (Field2_Area + Field3_Area + Field4_Area)) / Field2_Area
                                                            Depth3 = Reallocate_Amt * (Field3_Area / (Field2_Area + Field3_Area + Field4_Area)) / Field3_Area
                                                            Depth4 = Reallocate_Amt * (Field4_Area / (Field2_Area + Field3_Area + Field4_Area)) / Field4_Area
                                                            Temp_Flag1 = True
                                                    End Select
                                                ElseIf Field3_Type = "ALFALFA" And Field4_Type = "ALFALFA" Then
                                                    RanNum = RandomGenerator.Next(1, 2)
                                                    Select Case RanNum
                                                        Case 1
                                                            Depth1 = Reallocate_Amt * (Field1_Area / (Field1_Area + Field3_Area + Field4_Area)) / Field1_Area
                                                            Depth2 = 0
                                                            Depth3 = Reallocate_Amt * (Field3_Area / (Field1_Area + Field3_Area + Field4_Area)) / Field3_Area
                                                            Depth4 = Reallocate_Amt * (Field4_Area / (Field1_Area + Field3_Area + Field4_Area)) / Field4_Area
                                                            Temp_Flag1 = True
                                                        Case 2
                                                            Depth1 = 0
                                                            Depth2 = Reallocate_Amt * (Field2_Area / (Field2_Area + Field3_Area + Field4_Area)) / Field2_Area
                                                            Depth3 = Reallocate_Amt * (Field3_Area / (Field2_Area + Field3_Area + Field4_Area)) / Field3_Area
                                                            Depth4 = Reallocate_Amt * (Field4_Area / (Field2_Area + Field3_Area + Field4_Area)) / Field4_Area
                                                            Temp_Flag1 = True
                                                    End Select
                                                End If
                                            ElseIf Field1_Type = "ALFALFA" Or Field2_Type = "ALFALFA" Or Field3_Type = "ALFALFA" Or Field4_Type = "ALFALFA" Then
                                                If Field1_Type = "ALFALFA" Then
                                                    RanNum = RandomGenerator.Next(2, 4)
                                                    Select Case RanNum
                                                        Case 2
                                                            Depth1 = Reallocate_Amt * (Field1_Area / (Field1_Area + Field3_Area + Field4_Area)) / Field1_Area
                                                            Depth2 = 0
                                                            Depth3 = Reallocate_Amt * (Field3_Area / (Field1_Area + Field3_Area + Field4_Area)) / Field3_Area
                                                            Depth4 = Reallocate_Amt * (Field4_Area / (Field1_Area + Field3_Area + Field4_Area)) / Field4_Area
                                                            Temp_Flag1 = True
                                                        Case 3
                                                            Depth1 = Reallocate_Amt * (Field1_Area / (Field1_Area + Field2_Area + Field4_Area)) / Field1_Area
                                                            Depth2 = Reallocate_Amt * (Field2_Area / (Field1_Area + Field2_Area + Field4_Area)) / Field2_Area
                                                            Depth3 = 0
                                                            Depth4 = Reallocate_Amt * (Field4_Area / (Field1_Area + Field2_Area + Field4_Area)) / Field4_Area
                                                            Temp_Flag1 = True
                                                        Case 4
                                                            Depth1 = Reallocate_Amt * (Field1_Area / (Field1_Area + Field2_Area + Field3_Area)) / Field2_Area
                                                            Depth2 = Reallocate_Amt * (Field2_Area / (Field1_Area + Field2_Area + Field3_Area)) / Field2_Area
                                                            Depth3 = Reallocate_Amt * (Field3_Area / (Field1_Area + Field2_Area + Field3_Area)) / Field2_Area
                                                            Depth4 = 0
                                                            Temp_Flag1 = True
                                                    End Select
                                                ElseIf Field2_Type = "ALFALFA" Then
                                                    RanNum = RandomGenerator.Next(1, 3)
                                                    Select Case RanNum
                                                        Case 1
                                                            Depth1 = 0
                                                            Depth2 = Reallocate_Amt * (Field2_Area / (Field2_Area + Field3_Area + Field4_Area)) / Field2_Area
                                                            Depth3 = Reallocate_Amt * (Field3_Area / (Field2_Area + Field3_Area + Field4_Area)) / Field3_Area
                                                            Depth4 = Reallocate_Amt * (Field4_Area / (Field2_Area + Field3_Area + Field4_Area)) / Field4_Area
                                                            Temp_Flag1 = True
                                                        Case 2 '3
                                                            Depth1 = Reallocate_Amt * (Field1_Area / (Field1_Area + Field2_Area + Field4_Area)) / Field1_Area
                                                            Depth2 = Reallocate_Amt * (Field2_Area / (Field1_Area + Field2_Area + Field4_Area)) / Field2_Area
                                                            Depth3 = 0
                                                            Depth4 = Reallocate_Amt * (Field4_Area / (Field1_Area + Field2_Area + Field4_Area)) / Field4_Area
                                                            Temp_Flag1 = True
                                                        Case 3 '4
                                                            Depth1 = Reallocate_Amt * (Field1_Area / (Field1_Area + Field2_Area + Field3_Area)) / Field1_Area
                                                            Depth2 = Reallocate_Amt * (Field2_Area / (Field1_Area + Field2_Area + Field3_Area)) / Field2_Area
                                                            Depth3 = Reallocate_Amt * (Field3_Area / (Field1_Area + Field2_Area + Field3_Area)) / Field3_Area
                                                            Depth4 = 0
                                                            Temp_Flag1 = True
                                                    End Select
                                                ElseIf Field3_Type = "ALFALFA" Then
                                                    RanNum = RandomGenerator.Next(1, 3)
                                                    Select Case RanNum
                                                        Case 1
                                                            Depth1 = 0
                                                            Depth2 = Reallocate_Amt * (Field2_Area / (Field2_Area + Field3_Area + Field4_Area)) / Field2_Area
                                                            Depth3 = Reallocate_Amt * (Field3_Area / (Field2_Area + Field3_Area + Field4_Area)) / Field3_Area
                                                            Depth4 = Reallocate_Amt * (Field4_Area / (Field2_Area + Field3_Area + Field4_Area)) / Field4_Area
                                                            Temp_Flag1 = True
                                                        Case 2
                                                            Depth1 = Reallocate_Amt * (Field1_Area / (Field1_Area + Field3_Area + Field4_Area)) / Field1_Area
                                                            Depth2 = 0
                                                            Depth3 = Reallocate_Amt * (Field3_Area / (Field1_Area + Field3_Area + Field4_Area)) / Field3_Area
                                                            Depth4 = Reallocate_Amt * (Field4_Area / (Field1_Area + Field3_Area + Field4_Area)) / Field4_Area
                                                            Temp_Flag1 = True
                                                        Case 3 '4
                                                            Depth1 = Reallocate_Amt * (Field1_Area / (Field1_Area + Field2_Area + Field3_Area)) / Field1_Area
                                                            Depth2 = Reallocate_Amt * (Field2_Area / (Field1_Area + Field2_Area + Field3_Area)) / Field2_Area
                                                            Depth3 = Reallocate_Amt * (Field3_Area / (Field1_Area + Field2_Area + Field3_Area)) / Field3_Area
                                                            Depth4 = 0
                                                            Temp_Flag1 = True
                                                    End Select
                                                ElseIf Field4_Type = "ALFALFA" Then
                                                    RanNum = RandomGenerator.Next(1, 3)
                                                    Select Case RanNum
                                                        Case 1
                                                            Depth1 = 0
                                                            Depth2 = Reallocate_Amt * (Field2_Area / (Field2_Area + Field3_Area + Field4_Area)) / Field2_Area
                                                            Depth3 = Reallocate_Amt * (Field3_Area / (Field2_Area + Field3_Area + Field4_Area)) / Field3_Area
                                                            Depth4 = Reallocate_Amt * (Field4_Area / (Field2_Area + Field3_Area + Field4_Area)) / Field4_Area
                                                            Temp_Flag1 = True
                                                        Case 2
                                                            Depth1 = Reallocate_Amt * (Field1_Area / (Field1_Area + Field3_Area + Field4_Area)) / Field1_Area
                                                            Depth2 = 0
                                                            Depth3 = Reallocate_Amt * (Field3_Area / (Field1_Area + Field3_Area + Field4_Area)) / Field3_Area
                                                            Depth4 = Reallocate_Amt * (Field4_Area / (Field1_Area + Field3_Area + Field4_Area)) / Field4_Area
                                                            Temp_Flag1 = True
                                                        Case 3
                                                            Depth1 = Reallocate_Amt * (Field1_Area / (Field1_Area + Field2_Area + Field4_Area)) / Field1_Area
                                                            Depth2 = Reallocate_Amt * (Field2_Area / (Field1_Area + Field2_Area + Field4_Area)) / Field2_Area
                                                            Depth3 = 0
                                                            Depth4 = Reallocate_Amt * (Field4_Area / (Field1_Area + Field2_Area + Field4_Area)) / Field4_Area
                                                            Temp_Flag1 = True
                                                    End Select
                                                End If
                                            End If
                                        ElseIf Temp_Flag1 And Not Temp_Flag2 Then
                                            'here reallocating to two fields in the event that 3 fields did not work
                                            If (Field1_Type = "ALFALFA" And Field2_Type = "ALFALFA" And Field3_Type = "ALFALFA") Or (Field1_Type = "ALFALFA" And Field2_Type = "ALFALFA" And Field4_Type = "ALFALFA") Or (Field1_Type = "ALFALFA" And Field3_Type = "ALFALFA" And Field4_Type = "ALFALFA") Or (Field2_Type = "ALFALFA" And Field3_Type = "ALFALFA" And Field4_Type = "ALFALFA") Then
                                                If Field1_Type = "ALFALFA" And Field2_Type = "ALFALFA" And Field3_Type = "ALFALFA" Then
                                                    RanNum = RandomGenerator.Next(1, 3)
                                                    Select Case RanNum
                                                        Case 1
                                                            Depth1 = 0
                                                            Depth2 = Reallocate_Amt * (Field2_Area / (Field2_Area + Field3_Area)) / Field2_Area
                                                            Depth3 = Reallocate_Amt * (Field3_Area / (Field2_Area + Field3_Area)) / Field3_Area
                                                            Depth4 = 0
                                                            Temp_Flag2 = True
                                                        Case 2
                                                            Depth1 = Reallocate_Amt * (Field1_Area / (Field1_Area + Field3_Area)) / Field1_Area
                                                            Depth2 = 0
                                                            Depth3 = Reallocate_Amt * (Field3_Area / (Field1_Area + Field3_Area)) / Field3_Area
                                                            Depth4 = 0
                                                            Temp_Flag2 = True
                                                        Case 3
                                                            Depth1 = Reallocate_Amt * (Field1_Area / (Field1_Area + Field2_Area)) / Field1_Area
                                                            Depth2 = Reallocate_Amt * (Field2_Area / (Field1_Area + Field2_Area)) / Field2_Area
                                                            Depth3 = 0
                                                            Depth4 = 0
                                                            Temp_Flag2 = True
                                                    End Select
                                                ElseIf Field1_Type = "ALFALFA" And Field2_Type = "ALFALFA" And Field4_Type = "ALFALFA" Then
                                                    RanNum = RandomGenerator.Next(1, 3)
                                                    Select Case RanNum
                                                        Case 1
                                                            Depth1 = 0
                                                            Depth2 = Reallocate_Amt * (Field2_Area / (Field2_Area + Field4_Area)) / Field2_Area
                                                            Depth3 = 0
                                                            Depth4 = Reallocate_Amt * (Field4_Area / (Field2_Area + Field4_Area)) / Field4_Area
                                                            Temp_Flag2 = True
                                                        Case 2
                                                            Depth1 = Reallocate_Amt * (Field1_Area / (Field1_Area + Field4_Area)) / Field1_Area
                                                            Depth2 = 0
                                                            Depth3 = 0
                                                            Depth4 = Reallocate_Amt * (Field4_Area / (Field1_Area + Field4_Area)) / Field4_Area
                                                            Temp_Flag2 = True
                                                        Case 3
                                                            Depth1 = Reallocate_Amt * (Field1_Area / (Field1_Area + Field2_Area)) / Field1_Area
                                                            Depth2 = Reallocate_Amt * (Field2_Area / (Field1_Area + Field2_Area)) / Field2_Area
                                                            Depth3 = 0
                                                            Depth4 = 0
                                                            Temp_Flag2 = True
                                                    End Select
                                                ElseIf Field1_Type = "ALFALFA" And Field3_Type = "ALFALFA" And Field4_Type = "ALFALFA" Then
                                                    RanNum = RandomGenerator.Next(1, 3)
                                                    Select Case RanNum
                                                        Case 1
                                                            Depth1 = 0
                                                            Depth2 = 0
                                                            Depth3 = Reallocate_Amt * (Field3_Area / (Field3_Area + Field4_Area)) / Field3_Area
                                                            Depth4 = Reallocate_Amt * (Field4_Area / (Field3_Area + Field4_Area)) / Field4_Area
                                                            Temp_Flag2 = True
                                                        Case 2 '3
                                                            Depth1 = Reallocate_Amt * (Field1_Area / (Field1_Area + Field4_Area)) / Field1_Area
                                                            Depth2 = 0
                                                            Depth3 = 0
                                                            Depth4 = Reallocate_Amt * (Field4_Area / (Field1_Area + Field4_Area)) / Field4_Area
                                                            Temp_Flag2 = True
                                                        Case 3 '4
                                                            Depth1 = Reallocate_Amt * (Field1_Area / (Field1_Area + Field3_Area)) / Field1_Area
                                                            Depth2 = 0
                                                            Depth3 = Reallocate_Amt * (Field3_Area / (Field1_Area + Field3_Area)) / Field3_Area
                                                            Depth4 = 0
                                                            Temp_Flag2 = True
                                                    End Select
                                                ElseIf Field2_Type = "ALFALFA" And Field3_Type = "ALFALFA" And Field4_Type = "ALFALFA" Then
                                                    RanNum = RandomGenerator.Next(2, 4)
                                                    Select Case RanNum
                                                        Case 2
                                                            Depth1 = 0
                                                            Depth2 = 0
                                                            Depth3 = Reallocate_Amt * (Field3_Area / (Field3_Area + Field4_Area)) / Field3_Area
                                                            Depth4 = Reallocate_Amt * (Field4_Area / (Field3_Area + Field4_Area)) / Field4_Area
                                                            Temp_Flag2 = True
                                                        Case 3
                                                            Depth1 = 0
                                                            Depth2 = Reallocate_Amt * (Field2_Area / (Field2_Area + Field4_Area)) / Field2_Area
                                                            Depth3 = 0
                                                            Depth4 = Reallocate_Amt * (Field4_Area / (Field2_Area + Field4_Area)) / Field4_Area
                                                            Temp_Flag2 = True
                                                        Case 4
                                                            Depth1 = 0
                                                            Depth2 = Reallocate_Amt * (Field2_Area / (Field2_Area + Field3_Area)) / Field2_Area
                                                            Depth3 = Reallocate_Amt * (Field3_Area / (Field2_Area + Field3_Area)) / Field3_Area
                                                            Depth4 = 0
                                                            Temp_Flag2 = True
                                                    End Select
                                                End If
                                            ElseIf (Field1_Type = "ALFALFA" And Field2_Type = "ALFALFA") Or (Field1_Type = "ALFALFA" And Field3_Type = "ALFALFA") Or (Field1_Type = "ALFALFA" And Field4_Type = "ALFALFA") Or (Field2_Type = "ALFALFA" And Field3_Type = "ALFALFA") Or _
                                                   (Field2_Type = "ALFALFA" And Field4_Type = "ALFALFA") Or (Field3_Type = "ALFALFA" And Field4_Type = "ALFALFA") Then
                                                If Field1_Type = "ALFALFA" And Field2_Type = "ALFALFA" Then
                                                    Depth1 = Reallocate_Amt * (Field1_Area / (Field1_Area + Field2_Area)) / Field1_Area
                                                    Depth2 = Reallocate_Amt * (Field2_Area / (Field1_Area + Field2_Area)) / Field2_Area
                                                    Depth3 = 0
                                                    Depth4 = 0
                                                    Temp_Flag2 = True
                                                ElseIf Field1_Type = "ALFALFA" And Field3_Type = "ALFALFA" Then
                                                    Depth1 = Reallocate_Amt * (Field1_Area / (Field1_Area + Field3_Area)) / Field1_Area
                                                    Depth2 = 0
                                                    Depth3 = Reallocate_Amt * (Field3_Area / (Field1_Area + Field3_Area)) / Field3_Area
                                                    Depth4 = 0
                                                    Temp_Flag2 = True
                                                ElseIf Field1_Type = "ALFALFA" And Field4_Type = "ALFALFA" Then
                                                    Depth1 = Reallocate_Amt * (Field1_Area / (Field1_Area + Field4_Area)) / Field1_Area
                                                    Depth2 = 0
                                                    Depth3 = 0
                                                    Depth4 = Reallocate_Amt * (Field4_Area / (Field1_Area + Field4_Area)) / Field4_Area
                                                    Temp_Flag2 = True
                                                ElseIf Field2_Type = "ALFALFA" And Field3_Type = "ALFALFA" Then
                                                    Depth1 = 0
                                                    Depth2 = Reallocate_Amt * (Field2_Area / (Field2_Area + Field3_Area)) / Field2_Area
                                                    Depth3 = Reallocate_Amt * (Field3_Area / (Field2_Area + Field3_Area)) / Field3_Area
                                                    Depth4 = 0
                                                    Temp_Flag2 = True
                                                ElseIf Field2_Type = "ALFALFA" And Field4_Type = "ALFALFA" Then
                                                    Depth1 = 0
                                                    Depth2 = Reallocate_Amt * (Field2_Area / (Field2_Area + Field4_Area)) / Field2_Area
                                                    Depth3 = 0
                                                    Depth4 = Reallocate_Amt * (Field4_Area / (Field2_Area + Field4_Area)) / Field4_Area
                                                    Temp_Flag2 = True
                                                ElseIf Field3_Type = "ALFALFA" And Field4_Type = "ALFALFA" Then
                                                    Depth1 = 0
                                                    Depth2 = 0
                                                    Depth3 = Reallocate_Amt * (Field3_Area / (Field3_Area + Field4_Area)) / Field2_Area
                                                    Depth4 = Reallocate_Amt * (Field4_Area / (Field3_Area + Field4_Area)) / Field2_Area
                                                    Temp_Flag2 = True
                                                End If
                                            ElseIf Field1_Type = "ALFALFA" Or Field2_Type = "ALFALFA" Or Field3_Type = "ALFALFA" Or Field4_Type = "ALFALFA" Then
                                                If Field1_Type = "ALFALFA" Then
                                                    RanNum = RandomGenerator.Next(2, 4)
                                                    Select Case RanNum
                                                        Case 2
                                                            Depth1 = Reallocate_Amt * (Field1_Area / (Field1_Area + Field2_Area)) / Field1_Area
                                                            Depth2 = Reallocate_Amt * (Field2_Area / (Field1_Area + Field2_Area)) / Field2_Area
                                                            Depth3 = 0
                                                            Depth4 = 0
                                                            Temp_Flag2 = True
                                                        Case 3
                                                            Depth1 = Reallocate_Amt * (Field1_Area / (Field1_Area + Field3_Area)) / Field1_Area
                                                            Depth2 = 0
                                                            Depth3 = Reallocate_Amt * (Field3_Area / (Field1_Area + Field3_Area)) / Field3_Area
                                                            Depth4 = 0
                                                            Temp_Flag2 = True
                                                        Case 4
                                                            Depth1 = Reallocate_Amt * (Field1_Area / (Field1_Area + Field4_Area)) / Field1_Area
                                                            Depth2 = 0
                                                            Depth3 = 0
                                                            Depth4 = Reallocate_Amt * (Field4_Area / (Field1_Area + Field4_Area)) / Field4_Area
                                                            Temp_Flag2 = True
                                                    End Select
                                                ElseIf Field2_Type = "ALFALFA" Then
                                                    RanNum = RandomGenerator.Next(1, 3)
                                                    Select Case RanNum
                                                        Case 1
                                                            Depth1 = Reallocate_Amt * (Field1_Area / (Field1_Area + Field2_Area)) / Field1_Area
                                                            Depth2 = Reallocate_Amt * (Field2_Area / (Field1_Area + Field2_Area)) / Field2_Area
                                                            Depth3 = 0
                                                            Depth4 = 0
                                                            Temp_Flag2 = True
                                                        Case 2 '3
                                                            Depth1 = 0
                                                            Depth2 = Reallocate_Amt * (Field2_Area / (Field2_Area + Field3_Area)) / Field2_Area
                                                            Depth3 = Reallocate_Amt * (Field3_Area / (Field2_Area + Field3_Area)) / Field3_Area
                                                            Depth4 = 0
                                                            Temp_Flag2 = True
                                                        Case 3 '4
                                                            Depth1 = 0
                                                            Depth2 = Reallocate_Amt * (Field2_Area / (Field2_Area + Field4_Area)) / Field2_Area
                                                            Depth3 = 0
                                                            Depth4 = Reallocate_Amt * (Field4_Area / (Field2_Area + Field4_Area)) / Field4_Area
                                                            Temp_Flag2 = True
                                                    End Select
                                                ElseIf Field3_Type = "ALFALFA" Then
                                                    RanNum = RandomGenerator.Next(1, 3)
                                                    Select Case RanNum
                                                        Case 1
                                                            Depth1 = Reallocate_Amt * (Field1_Area / (Field1_Area + Field3_Area)) / Field1_Area
                                                            Depth2 = 0
                                                            Depth3 = Reallocate_Amt * (Field3_Area / (Field1_Area + Field3_Area)) / Field3_Area
                                                            Depth4 = 0
                                                            Temp_Flag2 = True
                                                        Case 2
                                                            Depth1 = 0
                                                            Depth2 = Reallocate_Amt * (Field2_Area / (Field2_Area + Field3_Area)) / Field2_Area
                                                            Depth3 = Reallocate_Amt * (Field3_Area / (Field2_Area + Field3_Area)) / Field3_Area
                                                            Depth4 = 0
                                                            Temp_Flag2 = True
                                                        Case 3 '4
                                                            Depth1 = 0
                                                            Depth2 = 0
                                                            Depth3 = Reallocate_Amt * (Field3_Area / (Field3_Area + Field4_Area)) / Field3_Area
                                                            Depth4 = Reallocate_Amt * (Field4_Area / (Field3_Area + Field4_Area)) / Field4_Area
                                                            Temp_Flag2 = True
                                                    End Select
                                                ElseIf Field4_Type = "ALFALFA" Then
                                                    RanNum = RandomGenerator.Next(1, 3)
                                                    Select Case RanNum
                                                        Case 1
                                                            Depth1 = Reallocate_Amt * (Field1_Area / (Field1_Area + Field4_Area)) / Field1_Area
                                                            Depth2 = 0
                                                            Depth3 = 0
                                                            Depth4 = Reallocate_Amt * (Field4_Area / (Field1_Area + Field4_Area)) / Field4_Area
                                                            Temp_Flag2 = True
                                                        Case 2
                                                            Depth1 = 0
                                                            Depth2 = Reallocate_Amt * (Field2_Area / (Field2_Area + Field4_Area)) / Field2_Area
                                                            Depth3 = 0
                                                            Depth4 = Reallocate_Amt * (Field2_Area / (Field2_Area + Field4_Area)) / Field4_Area
                                                            Temp_Flag2 = True
                                                        Case 3
                                                            Depth1 = 0
                                                            Depth2 = 0
                                                            Depth3 = Reallocate_Amt * (Field3_Area / (Field3_Area + Field4_Area)) / Field3_Area
                                                            Depth4 = Reallocate_Amt * (Field4_Area / (Field3_Area + Field4_Area)) / Field4_Area
                                                            Temp_Flag2 = True
                                                    End Select
                                                End If
                                            End If
                                        ElseIf Temp_Flag1 And Temp_Flag2 Then
                                            'Now reallocating down to one field in the even that two didn't work
                                            If (Field1_Type = "ALFALFA" And Field2_Type = "ALFALFA" And Field3_Type = "ALFALFA") Or (Field1_Type = "ALFALFA" And Field2_Type = "ALFALFA" And Field4_Type = "ALFALFA") Or (Field1_Type = "ALFALFA" And Field3_Type = "ALFALFA" And Field4_Type = "ALFALFA") Or (Field2_Type = "ALFALFA" And Field3_Type = "ALFALFA" And Field4_Type = "ALFALFA") Then
                                                If Field1_Type = "ALFALFA" And Field2_Type = "ALFALFA" And Field3_Type = "ALFALFA" Then
                                                    RanNum = RandomGenerator.Next(1, 3)
                                                    Select Case RanNum
                                                        Case 1
                                                            Depth1 = Reallocate_Amt / Field1_Area
                                                            Depth2 = 0
                                                            Depth3 = 0
                                                            Depth4 = 0
                                                        Case 2
                                                            Depth1 = 0
                                                            Depth2 = Reallocate_Amt / Field2_Area
                                                            Depth3 = 0
                                                            Depth4 = 0
                                                        Case 3
                                                            Depth1 = 0
                                                            Depth2 = 0
                                                            Depth3 = Reallocate_Amt / Field3_Area
                                                            Depth4 = 0
                                                    End Select
                                                ElseIf Field1_Type = "ALFALFA" And Field2_Type = "ALFALFA" And Field4_Type = "ALFALFA" Then
                                                    RanNum = RandomGenerator.Next(1, 3)
                                                    Select Case RanNum
                                                        Case 1
                                                            Depth1 = Reallocate_Amt / Field1_Area
                                                            Depth2 = 0
                                                            Depth3 = 0
                                                            Depth4 = 0
                                                        Case 2
                                                            Depth1 = 0
                                                            Depth2 = Reallocate_Amt / Field2_Area
                                                            Depth3 = 0
                                                            Depth4 = 0
                                                        Case 3 '4
                                                            Depth1 = 0
                                                            Depth2 = 0
                                                            Depth3 = 0
                                                            Depth4 = Reallocate_Amt / Field4_Area
                                                    End Select
                                                ElseIf Field1_Type = "ALFALFA" And Field3_Type = "ALFALFA" And Field4_Type = "ALFALFA" Then
                                                    RanNum = RandomGenerator.Next(1, 3)
                                                    Select Case RanNum
                                                        Case 1
                                                            Depth1 = Reallocate_Amt / Field1_Area
                                                            Depth2 = 0
                                                            Depth3 = 0
                                                            Depth4 = 0
                                                        Case 2 '3
                                                            Depth1 = 0
                                                            Depth2 = 0
                                                            Depth3 = Reallocate_Amt / Field3_Area
                                                            Depth4 = 0
                                                        Case 3 '4
                                                            Depth1 = 0
                                                            Depth2 = 0
                                                            Depth3 = Reallocate_Amt / Field4_Area
                                                            Depth4 = 0
                                                    End Select
                                                ElseIf Field2_Type = "ALFALFA" And Field3_Type = "ALFALFA" And Field4_Type = "ALFALFA" Then
                                                    RanNum = RandomGenerator.Next(2, 4)
                                                    Select Case RanNum
                                                        Case 2
                                                            Depth1 = 0
                                                            Depth2 = Reallocate_Amt / Field2_Area
                                                            Depth3 = 0
                                                            Depth4 = 0
                                                        Case 3
                                                            Depth1 = 0
                                                            Depth2 = 0
                                                            Depth3 = Reallocate_Amt / Field3_Area
                                                            Depth4 = 0
                                                        Case 4
                                                            Depth1 = 0
                                                            Depth2 = 0
                                                            Depth3 = 0
                                                            Depth4 = Reallocate_Amt / Field4_Area
                                                    End Select
                                                End If
                                            ElseIf (Field1_Type = "ALFALFA" And Field2_Type = "ALFALFA") Or (Field1_Type = "ALFALFA" And Field3_Type = "ALFALFA") Or (Field1_Type = "ALFALFA" And Field4_Type = "ALFALFA") Or (Field2_Type = "ALFALFA" And Field3_Type = "ALFALFA") Or _
                                                   (Field2_Type = "ALFALFA" And Field4_Type = "ALFALFA") Or (Field3_Type = "ALFALFA" And Field4_Type = "ALFALFA") Then
                                                If Field1_Type = "ALFALFA" And Field2_Type = "ALFALFA" Then
                                                    RanNum = RandomGenerator.Next(1, 2)
                                                    Select Case RanNum
                                                        Case 1
                                                            Depth1 = Reallocate_Amt / Field1_Area
                                                            Depth2 = 0
                                                            Depth3 = 0
                                                            Depth4 = 0
                                                        Case 2
                                                            Depth1 = 0
                                                            Depth2 = Reallocate_Amt / Field2_Area
                                                            Depth3 = 0
                                                            Depth4 = 0
                                                    End Select
                                                ElseIf Field1_Type = "ALFALFA" And Field3_Type = "ALFALFA" Then
                                                    RanNum = RandomGenerator.Next(1, 2)
                                                    Select Case RanNum
                                                        Case 1
                                                            Depth1 = Reallocate_Amt / Field1_Area
                                                            Depth2 = 0
                                                            Depth3 = 0
                                                            Depth4 = 0
                                                        Case 2 '3
                                                            Depth1 = 0
                                                            Depth2 = 0
                                                            Depth3 = Reallocate_Amt / Field3_Area
                                                            Depth4 = 0
                                                    End Select
                                                ElseIf Field1_Type = "ALFALFA" And Field4_Type = "ALFALFA" Then
                                                    RanNum = RandomGenerator.Next(1, 2)
                                                    Select Case RanNum
                                                        Case 1
                                                            Depth1 = Reallocate_Amt / Field1_Area
                                                            Depth2 = 0
                                                            Depth3 = 0
                                                            Depth4 = 0
                                                        Case 2 '4
                                                            Depth1 = 0
                                                            Depth2 = 0
                                                            Depth3 = 0
                                                            Depth4 = Reallocate_Amt / Field4_Area
                                                    End Select
                                                ElseIf Field2_Type = "ALFALFA" And Field3_Type = "ALFALFA" Then
                                                    RanNum = RandomGenerator.Next(2, 3)
                                                    Select Case RanNum
                                                        Case 2
                                                            Depth1 = 0
                                                            Depth2 = Reallocate_Amt / Field2_Area
                                                            Depth3 = 0
                                                            Depth4 = 0
                                                        Case 3
                                                            Depth1 = 0
                                                            Depth2 = 0
                                                            Depth3 = Reallocate_Amt / Field3_Area
                                                            Depth4 = 0
                                                    End Select
                                                ElseIf Field2_Type = "ALFALFA" And Field4_Type = "ALFALFA" Then
                                                    RanNum = RandomGenerator.Next(2, 3)
                                                    Select Case RanNum
                                                        Case 2
                                                            Depth1 = 0
                                                            Depth2 = Reallocate_Amt / Field2_Area
                                                            Depth3 = 0
                                                            Depth4 = 0
                                                        Case 3 '4
                                                            Depth1 = 0
                                                            Depth2 = 0
                                                            Depth3 = 0
                                                            Depth4 = Reallocate_Amt / Field4_Area
                                                    End Select
                                                ElseIf Field3_Type = "ALFALFA" And Field4_Type = "ALFALFA" Then
                                                    RanNum = RandomGenerator.Next(3, 4)
                                                    Select Case RanNum
                                                        Case 3
                                                            Depth1 = 0
                                                            Depth2 = 0
                                                            Depth3 = Reallocate_Amt / Field3_Area
                                                            Depth4 = 0
                                                        Case 4
                                                            Depth1 = 0
                                                            Depth2 = 0
                                                            Depth3 = 0
                                                            Depth4 = Reallocate_Amt / Field4_Area
                                                    End Select
                                                End If
                                            ElseIf Field1_Type = "ALFALFA" Or Field2_Type = "ALFALFA" Or Field3_Type = "ALFALFA" Or Field4_Type = "ALFALFA" Then
                                                If Field1_Type = "ALFALFA" Then
                                                    Depth1 = Reallocate_Amt / Field1_Area
                                                    Depth2 = 0
                                                    Depth3 = 0
                                                    Depth4 = 0
                                                ElseIf Field2_Type = "ALFALFA" Then
                                                    Depth1 = 0
                                                    Depth2 = Reallocate_Amt / Field2_Area
                                                    Depth3 = 0
                                                    Depth4 = 0
                                                ElseIf Field3_Type = "ALFALFA" Then
                                                    Depth1 = 0
                                                    Depth2 = 0
                                                    Depth3 = Reallocate_Amt / Field3_Area
                                                    Depth4 = 0
                                                ElseIf Field4_Type = "ALFALFA" Then
                                                    Depth1 = 0
                                                    Depth2 = 0
                                                    Depth3 = 0
                                                    Depth4 = Reallocate_Amt / Field4_Area
                                                End If
                                            End If
                                        End If
                                    End If
                                End If
                            End If
                            'When 3 out of 4 Level are equal and greater in value than the fourth field level
                        ElseIf ((Field1_Level = Field2_Level) And (Field1_Level = Field3_Level) And (Field1_Level > Field4_Level)) Or ((Field1_Level = Field2_Level) And (Field1_Level = Field4_Level) And (Field1_Level > Field3_Level)) Or ((Field1_Level = Field3_Level) And (Field1_Level = Field4_Level) And (Field1_Level > Field2_Level)) Or ((Field2_Level = Field3_Level) And (Field2_Level = Field4_Level) And (Field2_Level > Field1_Level)) Then
                            ' When 3 levels are equal and greater than the fourth, start by reallocating to 3 of the 4, then later on, if that isn't sufficient, reallocate to 2 or 1 fields
                            If Not Temp_Flag1 And Not Temp_Flag2 Then
                                If (Field1_Level = Field2_Level) And (Field1_Level = Field3_Level) And (Field1_Level > Field4_Level) Then
                                    Depth1 = Reallocate_Amt * (Field1_Area / (Field1_Area + Field2_Area + Field3_Area)) / Field1_Area
                                    Depth2 = Reallocate_Amt * (Field2_Area / (Field1_Area + Field2_Area + Field3_Area)) / Field2_Area
                                    Depth3 = Reallocate_Amt * (Field3_Area / (Field1_Area + Field2_Area + Field3_Area)) / Field3_Area
                                    Depth4 = 0
                                    Temp_Flag1 = True
                                ElseIf (Field1_Level = Field2_Level) And (Field1_Level = Field4_Level) And (Field1_Level > Field3_Level) Then
                                    Depth1 = Reallocate_Amt * (Field1_Area / (Field1_Area + Field2_Area + Field4_Area)) / Field1_Area
                                    Depth2 = Reallocate_Amt * (Field2_Area / (Field1_Area + Field2_Area + Field4_Area)) / Field2_Area
                                    Depth3 = 0
                                    Depth4 = Reallocate_Amt * (Field4_Area / (Field1_Area + Field2_Area + Field4_Area)) / Field4_Area
                                    Temp_Flag1 = True
                                ElseIf (Field1_Level = Field3_Level) And (Field1_Level = Field4_Level) And (Field1_Level > Field2_Level) Then
                                    Depth1 = Reallocate_Amt * (Field1_Area / (Field1_Area + Field3_Area + Field4_Area)) / Field1_Area
                                    Depth2 = 0
                                    Depth3 = Reallocate_Amt * (Field3_Area / (Field1_Area + Field3_Area + Field4_Area)) / Field3_Area
                                    Depth4 = Reallocate_Amt * (Field4_Area / (Field1_Area + Field3_Area + Field4_Area)) / Field4_Area
                                    Temp_Flag1 = True
                                ElseIf (Field2_Level = Field3_Level) And (Field2_Level = Field4_Level) And (Field2_Level > Field1_Level) Then
                                    Depth1 = 0
                                    Depth2 = Reallocate_Amt * (Field2_Area / (Field2_Area + Field3_Area + Field4_Area)) / Field2_Area
                                    Depth3 = Reallocate_Amt * (Field3_Area / (Field2_Area + Field3_Area + Field4_Area)) / Field3_Area
                                    Depth4 = Reallocate_Amt * (Field4_Area / (Field2_Area + Field3_Area + Field4_Area)) / Field4_Area
                                    Temp_Flag1 = True
                                End If
                            ElseIf Temp_Flag1 And Not Temp_Flag2 Then
                                If (Field1_Level = Field2_Level) And (Field1_Level = Field3_Level) And (Field1_Level > Field4_Level) Then
                                    'Here I am reallocating to two fields if reallocating to 3 fields still did not provide sufficient depth
                                    RanNum = RandomGenerator.Next(1, 3)
                                    Select Case RanNum
                                        Case 1
                                            Depth1 = 0
                                            Depth2 = Reallocate_Amt * (Field2_Area / (Field2_Area + Field3_Area)) / Field2_Area
                                            Depth3 = Reallocate_Amt * (Field3_Area / (Field2_Area + Field3_Area)) / Field3_Area
                                            Depth4 = 0
                                            Temp_Flag2 = True
                                        Case 2
                                            Depth1 = Reallocate_Amt * (Field1_Area / (Field1_Area + Field3_Area)) / Field1_Area
                                            Depth2 = 0
                                            Depth3 = Reallocate_Amt * (Field3_Area / (Field1_Area + Field3_Area)) / Field3_Area
                                            Depth4 = 0
                                            Temp_Flag2 = True
                                        Case 3
                                            Depth1 = Reallocate_Amt * (Field1_Area / (Field1_Area + Field2_Area)) / Field1_Area
                                            Depth2 = Reallocate_Amt * (Field2_Area / (Field1_Area + Field2_Area)) / Field2_Area
                                            Depth3 = 0
                                            Depth4 = 0
                                            Temp_Flag2 = True
                                    End Select
                                ElseIf (Field1_Level = Field2_Level) And (Field1_Level = Field4_Level) And (Field1_Level > Field3_Level) Then
                                    'Here I am reallocating to two fields if reallocating to 3 fields still did not provide sufficient depth
                                    RanNum = RandomGenerator.Next(1, 3)
                                    Select Case RanNum
                                        Case 1
                                            Depth1 = 0
                                            Depth2 = Reallocate_Amt * (Field2_Area / (Field2_Area + Field4_Area)) / Field2_Area
                                            Depth3 = 0
                                            Depth4 = Reallocate_Amt * (Field4_Area / (Field2_Area + Field4_Area)) / Field4_Area
                                            Temp_Flag2 = True
                                        Case 2
                                            Depth1 = Reallocate_Amt * (Field1_Area / (Field1_Area + Field4_Area)) / Field1_Area
                                            Depth2 = 0
                                            Depth3 = 0
                                            Depth4 = Reallocate_Amt * (Field4_Area / (Field1_Area + Field4_Area)) / Field4_Area
                                            Temp_Flag2 = True
                                        Case 3 '4
                                            Depth1 = Reallocate_Amt * (Field1_Area / (Field1_Area + Field2_Area)) / Field1_Area
                                            Depth2 = Reallocate_Amt * (Field2_Area / (Field1_Area + Field2_Area)) / Field2_Area
                                            Depth3 = 0
                                            Depth4 = 0
                                            Temp_Flag2 = True
                                    End Select
                                ElseIf (Field1_Level = Field3_Level) And (Field1_Level = Field4_Level) And (Field1_Level > Field2_Level) Then
                                    'Here I am reallocating to two fields if reallocating to 3 fields still did not provide sufficient depth
                                    RanNum = RandomGenerator.Next(1, 3)
                                    Select Case RanNum
                                        Case 1
                                            Depth1 = 0
                                            Depth2 = 0
                                            Depth3 = Reallocate_Amt * (Field3_Area / (Field3_Area + Field4_Area)) / Field3_Area
                                            Depth4 = Reallocate_Amt * (Field4_Area / (Field3_Area + Field4_Area)) / Field4_Area
                                            Temp_Flag2 = True
                                        Case 2 '3
                                            Depth1 = Reallocate_Amt * (Field1_Area / (Field1_Area + Field4_Area)) / Field1_Area
                                            Depth2 = 0
                                            Depth3 = 0
                                            Depth4 = Reallocate_Amt * (Field4_Area / (Field1_Area + Field4_Area)) / Field4_Area
                                            Temp_Flag2 = True
                                        Case 3 '4
                                            Depth1 = Reallocate_Amt * (Field1_Area / (Field1_Area + Field3_Area)) / Field1_Area
                                            Depth2 = 0
                                            Depth3 = Reallocate_Amt * (Field3_Area / (Field1_Area + Field3_Area)) / Field3_Area
                                            Depth4 = 0
                                            Temp_Flag2 = True
                                    End Select
                                ElseIf (Field2_Level = Field3_Level) And (Field2_Level = Field4_Level) And (Field2_Level > Field1_Level) Then
                                    'Here I am reallocating to two fields if reallocating to 3 fields still did not provide sufficient depth
                                    RanNum = RandomGenerator.Next(2, 4)
                                    Select Case RanNum
                                        Case 2
                                            Depth1 = 0
                                            Depth2 = 0
                                            Depth3 = Reallocate_Amt * (Field3_Area / (Field3_Area + Field4_Area)) / Field3_Area
                                            Depth4 = Reallocate_Amt * (Field4_Area / (Field3_Area + Field4_Area)) / Field4_Area
                                            Temp_Flag2 = True
                                        Case 3
                                            Depth1 = 0
                                            Depth2 = Reallocate_Amt * (Field2_Area / (Field2_Area + Field4_Area)) / Field2_Area
                                            Depth3 = 0
                                            Depth4 = Reallocate_Amt * (Field4_Area / (Field2_Area + Field4_Area)) / Field4_Area
                                            Temp_Flag2 = True
                                        Case 4
                                            Depth1 = 0
                                            Depth2 = Reallocate_Amt * (Field2_Area / (Field2_Area + Field3_Area)) / Field2_Area
                                            Depth3 = Reallocate_Amt * (Field3_Area / (Field2_Area + Field3_Area)) / Field3_Area
                                            Depth4 = 0
                                            Temp_Flag2 = True
                                    End Select
                                End If
                            ElseIf Temp_Flag1 And Temp_Flag2 Then
                                If (Field1_Level = Field2_Level) And (Field1_Level = Field3_Level) And (Field1_Level > Field4_Level) Then
                                    'Here I am reallocating to one field if reallocating to 3 (then 2) fields still did not provide sufficient depth
                                    RanNum = RandomGenerator.Next(1, 3)
                                    Select Case RanNum
                                        Case 1
                                            Depth1 = Reallocate_Amt / Field1_Area
                                            Depth2 = 0
                                            Depth3 = 0
                                            Depth4 = 0
                                        Case 2
                                            Depth1 = 0
                                            Depth2 = Reallocate_Amt / Field2_Area
                                            Depth3 = 0
                                            Depth4 = 0
                                        Case 3
                                            Depth1 = 0
                                            Depth2 = 0
                                            Depth3 = Reallocate_Amt / Field3_Area
                                            Depth4 = 0
                                    End Select
                                ElseIf (Field1_Level = Field2_Level) And (Field1_Level = Field4_Level) And (Field1_Level > Field3_Level) Then
                                    'Here I am reallocating to one field if reallocating to 3 (then 2) fields still did not provide sufficient depth
                                    RanNum = RandomGenerator.Next(1, 3)
                                    Select Case RanNum
                                        Case 1
                                            Depth1 = Reallocate_Amt / Field1_Area
                                            Depth2 = 0
                                            Depth3 = 0
                                            Depth4 = 0
                                        Case 2
                                            Depth1 = 0
                                            Depth2 = Reallocate_Amt / Field2_Area
                                            Depth3 = 0
                                            Depth4 = 0
                                        Case 3 '4
                                            Depth1 = 0
                                            Depth2 = 0
                                            Depth3 = 0
                                            Depth4 = Reallocate_Amt / Field4_Area
                                    End Select
                                ElseIf (Field1_Level = Field3_Level) And (Field1_Level = Field4_Level) And (Field1_Level > Field2_Level) Then
                                    'Here I am reallocating to one field if reallocating to 3 (then 2) fields still did not provide sufficient depth
                                    RanNum = RandomGenerator.Next(1, 3)
                                    Select Case RanNum
                                        Case 1
                                            Depth1 = Reallocate_Amt / Field1_Area
                                            Depth2 = 0
                                            Depth3 = 0
                                            Depth4 = 0
                                        Case 2 '3
                                            Depth1 = 0
                                            Depth2 = 0
                                            Depth3 = Reallocate_Amt / Field3_Area
                                            Depth4 = 0
                                        Case 3 '4
                                            Depth1 = 0
                                            Depth2 = 0
                                            Depth3 = 0
                                            Depth4 = Reallocate_Amt / Field4_Area
                                    End Select
                                ElseIf (Field2_Level = Field3_Level) And (Field2_Level = Field4_Level) And (Field2_Level > Field1_Level) Then
                                    'Here I am reallocating to one field if reallocating to 3 (then 2) fields still did not provide sufficient depth
                                    RanNum = RandomGenerator.Next(2, 4)
                                    Select Case RanNum
                                        Case 2
                                            Depth1 = 0
                                            Depth2 = Reallocate_Amt / Field2_Area
                                            Depth3 = 0
                                            Depth4 = 0
                                        Case 3
                                            Depth1 = 0
                                            Depth2 = 0
                                            Depth3 = Reallocate_Amt / Field3_Area
                                            Depth4 = 0
                                        Case 4
                                            Depth1 = 0
                                            Depth2 = 0
                                            Depth3 = 0
                                            Depth4 = Reallocate_Amt / Field4_Area
                                    End Select
                                End If
                            End If
                        ElseIf ((Field1_Level = Field2_Level) And (Field1_Level = Field3_Level) And (Field1_Level < Field4_Level)) Or ((Field1_Level = Field2_Level) And (Field1_Level = Field4_Level) And (Field1_Level < Field3_Level)) Or ((Field1_Level = Field3_Level) And (Field1_Level = Field4_Level) And (Field1_Level < Field2_Level)) Or ((Field2_Level = Field3_Level) And (Field2_Level = Field4_Level) And (Field2_Level < Field1_Level)) Then
                            'Here I'm reallocating to 3 fields when the 4th has a greater priority than the three that are equal.
                            If Not Temp_Flag1 And Not Temp_Flag2 Then
                                If (Field1_Level = Field2_Level) And (Field1_Level = Field3_Level) And (Field1_Level < Field4_Level) Then
                                    RanNum = RandomGenerator.Next(1, 3)
                                    Select Case RanNum
                                        Case 1
                                            Depth1 = 0
                                            Depth2 = Reallocate_Amt * (Field2_Area / (Field2_Area + Field3_Area + Field4_Area)) / Field2_Area
                                            Depth3 = Reallocate_Amt * (Field3_Area / (Field2_Area + Field3_Area + Field4_Area)) / Field3_Area
                                            Depth4 = Reallocate_Amt * (Field4_Area / (Field2_Area + Field3_Area + Field4_Area)) / Field4_Area
                                            Temp_Flag1 = True
                                        Case 2
                                            Depth1 = Reallocate_Amt * (Field1_Area / (Field1_Area + Field3_Area + Field4_Area)) / Field1_Area
                                            Depth2 = 0
                                            Depth3 = Reallocate_Amt * (Field3_Area / (Field1_Area + Field3_Area + Field4_Area)) / Field3_Area
                                            Depth4 = Reallocate_Amt * (Field4_Area / (Field1_Area + Field3_Area + Field4_Area)) / Field4_Area
                                            Temp_Flag1 = True
                                        Case 3
                                            Depth1 = Reallocate_Amt * (Field1_Area / (Field1_Area + Field2_Area + Field4_Area)) / Field1_Area
                                            Depth2 = Reallocate_Amt * (Field2_Area / (Field1_Area + Field2_Area + Field4_Area)) / Field2_Area
                                            Depth3 = 0
                                            Depth4 = Reallocate_Amt * (Field4_Area / (Field1_Area + Field2_Area + Field4_Area)) / Field4_Area
                                            Temp_Flag1 = True
                                    End Select
                                ElseIf (Field1_Level = Field2_Level) And (Field1_Level = Field4_Level) And (Field1_Level < Field3_Level) Then
                                    RanNum = RandomGenerator.Next(1, 3)
                                    Select Case RanNum
                                        Case 1
                                            Depth1 = 0
                                            Depth2 = Reallocate_Amt * (Field2_Area / (Field2_Area + Field3_Area + Field4_Area)) / Field2_Area
                                            Depth3 = Reallocate_Amt * (Field3_Area / (Field2_Area + Field3_Area + Field4_Area)) / Field3_Area
                                            Depth4 = Reallocate_Amt * (Field4_Area / (Field2_Area + Field3_Area + Field4_Area)) / Field4_Area
                                            Temp_Flag1 = True
                                        Case 2
                                            Depth1 = Reallocate_Amt * (Field1_Area / (Field1_Area + Field3_Area + Field4_Area)) / Field1_Area
                                            Depth2 = 0
                                            Depth3 = Reallocate_Amt * (Field3_Area / (Field1_Area + Field3_Area + Field4_Area)) / Field3_Area
                                            Depth4 = Reallocate_Amt * (Field4_Area / (Field1_Area + Field3_Area + Field4_Area)) / Field4_Area
                                            Temp_Flag1 = True
                                        Case 3 '4
                                            Depth1 = Reallocate_Amt * (Field1_Area / (Field1_Area + Field2_Area + Field3_Area)) / Field1_Area
                                            Depth2 = Reallocate_Amt * (Field2_Area / (Field1_Area + Field2_Area + Field3_Area)) / Field2_Area
                                            Depth3 = Reallocate_Amt * (Field3_Area / (Field1_Area + Field2_Area + Field3_Area)) / Field3_Area
                                            Depth4 = 0
                                            Temp_Flag1 = True
                                    End Select
                                ElseIf (Field1_Level = Field3_Level) And (Field1_Level = Field4_Level) And (Field1_Level < Field2_Level) Then
                                    RanNum = RandomGenerator.Next(1, 3)
                                    Select Case RanNum
                                        Case 1
                                            Depth1 = 0
                                            Depth2 = Reallocate_Amt * (Field2_Area / (Field2_Area + Field3_Area + Field4_Area)) / Field2_Area
                                            Depth3 = Reallocate_Amt * (Field3_Area / (Field2_Area + Field3_Area + Field4_Area)) / Field3_Area
                                            Depth4 = Reallocate_Amt * (Field4_Area / (Field2_Area + Field3_Area + Field4_Area)) / Field4_Area
                                            Temp_Flag1 = True
                                        Case 2 '3
                                            Depth1 = Reallocate_Amt * (Field1_Area / (Field1_Area + Field2_Area + Field4_Area)) / Field1_Area
                                            Depth2 = Reallocate_Amt * (Field2_Area / (Field1_Area + Field2_Area + Field4_Area)) / Field2_Area
                                            Depth3 = 0
                                            Depth4 = Reallocate_Amt * (Field4_Area / (Field1_Area + Field2_Area + Field4_Area)) / Field4_Area
                                            Temp_Flag1 = True
                                        Case 3 '4
                                            Depth1 = Reallocate_Amt * (Field1_Area / (Field1_Area + Field2_Area + Field3_Area)) / Field1_Area
                                            Depth2 = Reallocate_Amt * (Field2_Area / (Field1_Area + Field2_Area + Field3_Area)) / Field2_Area
                                            Depth3 = Reallocate_Amt * (Field3_Area / (Field1_Area + Field2_Area + Field3_Area)) / Field3_Area
                                            Depth4 = 0
                                            Temp_Flag1 = True
                                    End Select
                                ElseIf (Field2_Level = Field3_Level) And (Field2_Level = Field4_Level) And (Field2_Level < Field1_Level) Then
                                    RanNum = RandomGenerator.Next(2, 4)
                                    Select Case RanNum
                                        Case 2
                                            Depth1 = Reallocate_Amt * (Field1_Area / (Field1_Area + Field3_Area + Field4_Area)) / Field1_Area
                                            Depth2 = 0
                                            Depth3 = Reallocate_Amt * (Field3_Area / (Field1_Area + Field3_Area + Field4_Area)) / Field3_Area
                                            Depth4 = Reallocate_Amt * (Field4_Area / (Field1_Area + Field3_Area + Field4_Area)) / Field4_Area
                                            Temp_Flag1 = True
                                        Case 3
                                            Depth1 = Reallocate_Amt * (Field1_Area / (Field1_Area + Field2_Area + Field4_Area)) / Field1_Area
                                            Depth2 = Reallocate_Amt * (Field2_Area / (Field1_Area + Field2_Area + Field4_Area)) / Field2_Area
                                            Depth3 = 0
                                            Depth4 = Reallocate_Amt * (Field4_Area / (Field1_Area + Field2_Area + Field4_Area)) / Field4_Area
                                            Temp_Flag1 = True
                                        Case 4
                                            Depth1 = Reallocate_Amt * (Field1_Area / (Field1_Area + Field2_Area + Field3_Area)) / Field1_Area
                                            Depth2 = Reallocate_Amt * (Field2_Area / (Field1_Area + Field2_Area + Field3_Area)) / Field2_Area
                                            Depth3 = Reallocate_Amt * (Field3_Area / (Field1_Area + Field2_Area + Field3_Area)) / Field3_Area
                                            Depth4 = 0
                                            Temp_Flag1 = True
                                    End Select
                                End If
                            ElseIf Temp_Flag1 And Not Temp_Flag2 Then
                                ' Reallocating down to two fields in the event that reallocating 3 didn't provide enough depth in the three fields
                                If (Field1_Level = Field2_Level) And (Field1_Level = Field3_Level) And (Field1_Level < Field4_Level) Then
                                    RanNum = RandomGenerator.Next(1, 3)
                                    Select Case RanNum
                                        Case 1
                                            Depth1 = Reallocate_Amt * (Field1_Area / (Field1_Area + Field4_Area)) / Field1_Area
                                            Depth2 = 0
                                            Depth3 = 0
                                            Depth4 = Reallocate_Amt * (Field4_Area / (Field1_Area + Field4_Area)) / Field4_Area
                                            Temp_Flag2 = True
                                        Case 2
                                            Depth1 = 0
                                            Depth2 = Reallocate_Amt * (Field1_Area / (Field1_Area + Field4_Area)) / Field2_Area
                                            Depth3 = 0
                                            Depth4 = Reallocate_Amt * (Field4_Area / (Field1_Area + Field4_Area)) / Field4_Area
                                            Temp_Flag2 = True
                                        Case 3
                                            Depth1 = 0
                                            Depth2 = 0
                                            Depth3 = Reallocate_Amt * (Field3_Area / (Field3_Area + Field4_Area)) / Field3_Area
                                            Depth4 = Reallocate_Amt * (Field4_Area / (Field3_Area + Field4_Area)) / Field4_Area
                                            Temp_Flag2 = True
                                    End Select
                                ElseIf (Field1_Level = Field2_Level) And (Field1_Level = Field4_Level) And (Field1_Level < Field3_Level) Then
                                    RanNum = RandomGenerator.Next(1, 3)
                                    Select Case RanNum
                                        Case 1
                                            Depth1 = Reallocate_Amt * (Field1_Area / (Field1_Area + Field3_Area)) / Field1_Area
                                            Depth2 = 0
                                            Depth3 = Reallocate_Amt * (Field3_Area / (Field1_Area + Field3_Area)) / Field3_Area
                                            Depth4 = 0
                                            Temp_Flag2 = True
                                        Case 2
                                            Depth1 = 0
                                            Depth2 = Reallocate_Amt * (Field2_Area / (Field2_Area + Field3_Area)) / Field2_Area
                                            Depth3 = Reallocate_Amt * (Field3_Area / (Field2_Area + Field3_Area)) / Field3_Area
                                            Depth4 = 0
                                            Temp_Flag2 = True
                                        Case 3 '4
                                            Depth1 = 0
                                            Depth2 = 0
                                            Depth3 = Reallocate_Amt * (Field3_Area / (Field3_Area + Field4_Area)) / Field3_Area
                                            Depth4 = Reallocate_Amt * (Field4_Area / (Field3_Area + Field4_Area)) / Field4_Area
                                            Temp_Flag2 = True
                                    End Select
                                ElseIf (Field1_Level = Field3_Level) And (Field1_Level = Field4_Level) And (Field1_Level < Field2_Level) Then
                                    RanNum = RandomGenerator.Next(1, 3)
                                    Select Case RanNum
                                        Case 1
                                            Depth1 = Reallocate_Amt * (Field1_Area / (Field1_Area + Field2_Area)) / Field1_Area
                                            Depth2 = Reallocate_Amt * (Field2_Area / (Field1_Area + Field2_Area)) / Field2_Area
                                            Depth3 = 0
                                            Depth4 = 0
                                            Temp_Flag2 = True
                                        Case 2 '3
                                            Depth1 = 0
                                            Depth2 = Reallocate_Amt * (Field2_Area / (Field2_Area + Field3_Area)) / Field2_Area
                                            Depth3 = Reallocate_Amt * (Field3_Area / (Field2_Area + Field3_Area)) / Field3_Area
                                            Depth4 = 0
                                            Temp_Flag2 = True
                                        Case 3 '4
                                            Depth1 = 0
                                            Depth2 = Reallocate_Amt * (Field2_Area / (Field2_Area + Field4_Area)) / Field2_Area
                                            Depth3 = 0
                                            Depth4 = Reallocate_Amt * (Field4_Area / (Field2_Area + Field4_Area)) / Field4_Area
                                            Temp_Flag2 = True
                                    End Select
                                ElseIf (Field2_Level = Field3_Level) And (Field2_Level = Field4_Level) And (Field2_Level < Field1_Level) Then
                                    RanNum = RandomGenerator.Next(2, 4)
                                    Select Case RanNum
                                        Case 2
                                            Depth1 = Reallocate_Amt * (Field1_Area / (Field1_Area + Field2_Area)) / Field1_Area
                                            Depth2 = Reallocate_Amt * (Field2_Area / (Field1_Area + Field2_Area)) / Field2_Area
                                            Depth3 = 0
                                            Depth4 = 0
                                            Temp_Flag2 = True
                                        Case 3
                                            Depth1 = Reallocate_Amt * (Field1_Area / (Field1_Area + Field3_Area)) / Field1_Area
                                            Depth2 = 0
                                            Depth3 = Reallocate_Amt * (Field3_Area / (Field1_Area + Field3_Area)) / Field3_Area
                                            Depth4 = 0
                                            Temp_Flag2 = True
                                        Case 4
                                            Depth1 = Reallocate_Amt * (Field1_Area / (Field1_Area + Field4_Area)) / Field1_Area
                                            Depth2 = 0
                                            Depth3 = 0
                                            Depth4 = Reallocate_Amt * (Field4_Area / (Field1_Area + Field4_Area)) / Field4_Area
                                            Temp_Flag2 = True
                                    End Select
                                End If
                            ElseIf Temp_Flag1 And Temp_Flag2 Then
                                ' Reallocating to 1 field 
                                If (Field1_Level = Field2_Level) And (Field1_Level = Field3_Level) And (Field1_Level < Field4_Level) Then
                                    Depth1 = 0
                                    Depth2 = 0
                                    Depth3 = 0
                                    Depth4 = Reallocate_Amt / Field4_Area
                                ElseIf (Field1_Level = Field2_Level) And (Field1_Level = Field4_Level) And (Field1_Level < Field3_Level) Then
                                    Depth1 = 0
                                    Depth2 = 0
                                    Depth3 = Reallocate_Amt / Field3_Area
                                    Depth4 = 0
                                ElseIf (Field1_Level = Field3_Level) And (Field1_Level = Field4_Level) And (Field1_Level < Field2_Level) Then
                                    Depth1 = 0
                                    Depth2 = Reallocate_Amt / Field2_Area
                                    Depth3 = 0
                                    Depth4 = 0
                                ElseIf (Field2_Level = Field3_Level) And (Field2_Level = Field4_Level) And (Field2_Level < Field1_Level) Then
                                    Depth1 = Reallocate_Amt / Field1_Area
                                    Depth2 = 0
                                    Depth3 = 0
                                    Depth4 = 0
                                End If
                            End If
                            'When 2 out of 4 Level are equal and the other two are not equal
                        ElseIf (Field1_Level = Field2_Level And Field3_Level <> Field4_Level) Or (Field1_Level = Field3_Level And Field2_Level <> Field4_Level) Or (Field1_Level = Field4_Level And Field2_Level <> Field3_Level) Or _
                               (Field2_Level = Field3_Level And Field1_Level <> Field4_Level) Or (Field2_Level = Field4_Level And Field1_Level <> Field3_Level) Or (Field3_Level = Field4_Level And Field1_Level <> Field2_Level) Then
                            'Reallocating to 3 fields
                            If Not Temp_Flag1 And Not Temp_Flag2 Then
                                If ((Field1_Level = Field2_Level) And (Field1_Level > Field3_Level)) And ((Field1_Level = Field2_Level) And (Field1_Level > Field4_Level)) Then
                                    If Field3_Level > Field4_Level Then
                                        Depth1 = Reallocate_Amt * (Field1_Area / (Field1_Area + Field2_Area + Field3_Area)) / Field1_Area
                                        Depth2 = Reallocate_Amt * (Field2_Area / (Field1_Area + Field2_Area + Field3_Area)) / Field2_Area
                                        Depth3 = Reallocate_Amt * (Field3_Area / (Field1_Area + Field2_Area + Field3_Area)) / Field3_Area
                                        Depth4 = 0
                                        Temp_Flag1 = True
                                    ElseIf Field3_Level < Field4_Level Then
                                        Depth1 = Reallocate_Amt * (Field1_Area / (Field1_Area + Field2_Area + Field4_Area)) / Field1_Area
                                        Depth2 = Reallocate_Amt * (Field2_Area / (Field1_Area + Field2_Area + Field4_Area)) / Field2_Area
                                        Depth3 = 0
                                        Depth4 = Reallocate_Amt * (Field4_Area / (Field1_Area + Field2_Area + Field4_Area)) / Field4_Area
                                        Temp_Flag1 = True
                                    End If
                                ElseIf ((Field1_Level = Field2_Level) And (Field1_Level < Field3_Level)) And ((Field1_Level = Field2_Level) And (Field1_Level < Field4_Level)) Then
                                    RanNum = RandomGenerator.Next(1, 2)
                                    Select Case RanNum
                                        Case 1
                                            Depth1 = Reallocate_Amt * (Field1_Area / (Field1_Area + Field3_Area + Field4_Area)) / Field1_Area
                                            Depth2 = 0
                                            Depth3 = Reallocate_Amt * (Field3_Area / (Field1_Area + Field3_Area + Field4_Area)) / Field3_Area
                                            Depth4 = Reallocate_Amt * (Field4_Area / (Field1_Area + Field3_Area + Field4_Area)) / Field4_Area
                                            Temp_Flag1 = True
                                        Case 2
                                            Depth1 = 0
                                            Depth2 = Reallocate_Amt * (Field2_Area / (Field2_Area + Field3_Area + Field4_Area)) / Field2_Area
                                            Depth3 = Reallocate_Amt * (Field3_Area / (Field2_Area + Field3_Area + Field4_Area)) / Field3_Area
                                            Depth4 = Reallocate_Amt * (Field4_Area / (Field2_Area + Field3_Area + Field4_Area)) / Field4_Area
                                            Temp_Flag1 = True
                                    End Select
                                ElseIf ((Field1_Level = Field2_Level) And (Field1_Level < Field4_Level)) And ((Field1_Level = Field2_Level) And (Field1_Level > Field3_Level)) Then
                                    Depth1 = Reallocate_Amt * (Field1_Area / (Field1_Area + Field2_Area + Field4_Area)) / Field1_Area
                                    Depth2 = Reallocate_Amt * (Field2_Area / (Field1_Area + Field2_Area + Field4_Area)) / Field2_Area
                                    Depth3 = 0
                                    Depth4 = Reallocate_Amt * (Field4_Area / (Field1_Area + Field2_Area + Field4_Area)) / Field4_Area
                                    Temp_Flag1 = True
                                ElseIf ((Field1_Level = Field2_Level) And (Field1_Level < Field3_Level)) And ((Field1_Level = Field2_Level) And (Field1_Level > Field4_Level)) Then
                                    Depth1 = Reallocate_Amt * (Field1_Area / (Field1_Area + Field2_Area + Field3_Area)) / Field1_Area
                                    Depth2 = Reallocate_Amt * (Field2_Area / (Field1_Area + Field2_Area + Field3_Area)) / Field2_Area
                                    Depth3 = Reallocate_Amt * (Field3_Area / (Field1_Area + Field2_Area + Field3_Area)) / Field3_Area
                                    Depth4 = 0
                                    Temp_Flag1 = True
                                End If
                                If ((Field1_Level = Field3_Level) And (Field1_Level > Field2_Level)) And ((Field1_Level = Field3_Level) And (Field1_Level > Field4_Level)) Then
                                    If Field2_Level > Field4_Level Then
                                        Depth1 = Reallocate_Amt * (Field1_Area / (Field1_Area + Field2_Area + Field3_Area)) / Field1_Area
                                        Depth2 = Reallocate_Amt * (Field2_Area / (Field1_Area + Field2_Area + Field3_Area)) / Field2_Area
                                        Depth3 = Reallocate_Amt * (Field3_Area / (Field1_Area + Field2_Area + Field3_Area)) / Field3_Area
                                        Depth4 = 0
                                        Temp_Flag1 = True
                                    ElseIf Field2_Level < Field4_Level Then
                                        Depth1 = Reallocate_Amt * (Field1_Area / (Field1_Area + Field3_Area + Field4_Area)) / Field1_Area
                                        Depth2 = 0
                                        Depth3 = Reallocate_Amt * (Field3_Area / (Field1_Area + Field3_Area + Field4_Area)) / Field3_Area
                                        Depth4 = Reallocate_Amt * (Field4_Area / (Field1_Area + Field3_Area + Field4_Area)) / Field4_Area
                                        Temp_Flag1 = True
                                    End If
                                ElseIf ((Field1_Level = Field3_Level) And (Field1_Level < Field2_Level)) And ((Field1_Level = Field3_Level) And (Field1_Level < Field4_Level)) Then
                                    RanNum = RandomGenerator.Next(1, 2)
                                    Select Case RanNum
                                        Case 1
                                            Depth1 = Reallocate_Amt * (Field1_Area / (Field1_Area + Field2_Area + Field4_Area)) / Field1_Area
                                            Depth2 = Reallocate_Amt * (Field2_Area / (Field1_Area + Field2_Area + Field4_Area)) / Field2_Area
                                            Depth3 = 0
                                            Depth4 = Reallocate_Amt * (Field4_Area / (Field1_Area + Field2_Area + Field4_Area)) / Field4_Area
                                            Temp_Flag1 = True
                                        Case 2 '3
                                            Depth1 = 0
                                            Depth2 = Reallocate_Amt * (Field2_Area / (Field2_Area + Field3_Area + Field4_Area)) / Field2_Area
                                            Depth3 = Reallocate_Amt * (Field3_Area / (Field2_Area + Field3_Area + Field4_Area)) / Field3_Area
                                            Depth4 = Reallocate_Amt * (Field4_Area / (Field2_Area + Field3_Area + Field4_Area)) / Field4_Area
                                            Temp_Flag1 = True
                                    End Select
                                ElseIf ((Field1_Level = Field3_Level) And (Field1_Level < Field2_Level)) And ((Field1_Level = Field3_Level) And (Field1_Level > Field4_Level)) Then
                                    Depth1 = Reallocate_Amt * (Field1_Area / (Field1_Area + Field2_Area + Field3_Area)) / Field1_Area
                                    Depth2 = Reallocate_Amt * (Field2_Area / (Field1_Area + Field2_Area + Field3_Area)) / Field2_Area
                                    Depth3 = Reallocate_Amt * (Field3_Area / (Field1_Area + Field2_Area + Field3_Area)) / Field3_Area
                                    Depth4 = 0
                                    Temp_Flag1 = True
                                ElseIf ((Field1_Level = Field3_Level) And (Field1_Level < Field4_Level)) And ((Field1_Level = Field3_Level) And (Field1_Level > Field2_Level)) Then
                                    Depth1 = Reallocate_Amt * (Field1_Area / (Field1_Area + Field3_Area + Field4_Area)) / Field1_Area
                                    Depth2 = 0
                                    Depth3 = Reallocate_Amt * (Field3_Area / (Field1_Area + Field3_Area + Field4_Area)) / Field3_Area
                                    Depth4 = Reallocate_Amt * (Field4_Area / (Field1_Area + Field3_Area + Field4_Area)) / Field4_Area
                                    Temp_Flag1 = True
                                End If
                                If ((Field1_Level = Field4_Level) And (Field1_Level > Field2_Level)) And ((Field1_Level = Field4_Level) And (Field1_Level > Field3_Level)) Then
                                    If Field2_Level > Field3_Level Then
                                        Depth1 = Reallocate_Amt * (Field1_Area / (Field1_Area + Field2_Area + Field4_Area)) / Field1_Area
                                        Depth2 = Reallocate_Amt * (Field2_Area / (Field1_Area + Field2_Area + Field4_Area)) / Field2_Area
                                        Depth3 = 0
                                        Depth4 = Reallocate_Amt * (Field4_Area / (Field1_Area + Field2_Area + Field4_Area)) / Field4_Area
                                        Temp_Flag1 = True
                                    ElseIf Field2_Level < Field3_Level Then
                                        Depth1 = Reallocate_Amt * (Field1_Area / (Field1_Area + Field3_Area + Field4_Area)) / Field1_Area
                                        Depth2 = 0
                                        Depth3 = Reallocate_Amt * (Field3_Area / (Field1_Area + Field3_Area + Field4_Area)) / Field3_Area
                                        Depth4 = Reallocate_Amt * (Field4_Area / (Field1_Area + Field3_Area + Field4_Area)) / Field4_Area
                                        Temp_Flag1 = True
                                    End If
                                ElseIf ((Field1_Level = Field4_Level) And (Field1_Level < Field2_Level)) And ((Field1_Level = Field4_Level) And (Field1_Level < Field3_Level)) Then
                                    RanNum = RandomGenerator.Next(1, 2)
                                    Select Case RanNum
                                        Case 1
                                            Depth1 = Reallocate_Amt * (Field1_Area / (Field1_Area + Field2_Area + Field3_Area)) / Field1_Area
                                            Depth2 = Reallocate_Amt * (Field2_Area / (Field1_Area + Field2_Area + Field3_Area)) / Field2_Area
                                            Depth3 = Reallocate_Amt * (Field3_Area / (Field1_Area + Field2_Area + Field3_Area)) / Field3_Area
                                            Depth4 = 0
                                            Temp_Flag1 = True
                                        Case 2 '4
                                            Depth1 = 0
                                            Depth2 = Reallocate_Amt * (Field2_Area / (Field2_Area + Field3_Area + Field4_Area)) / Field2_Area
                                            Depth3 = Reallocate_Amt * (Field3_Area / (Field2_Area + Field3_Area + Field4_Area)) / Field3_Area
                                            Depth4 = Reallocate_Amt * (Field4_Area / (Field2_Area + Field3_Area + Field4_Area)) / Field4_Area
                                            Temp_Flag1 = True
                                    End Select
                                ElseIf ((Field1_Level = Field4_Level) And (Field1_Level < Field2_Level)) And ((Field1_Level = Field4_Level) And (Field1_Level > Field3_Level)) Then
                                    Depth1 = Reallocate_Amt * (Field1_Area / (Field1_Area + Field2_Area + Field4_Area)) / Field1_Area
                                    Depth2 = Reallocate_Amt * (Field2_Area / (Field1_Area + Field2_Area + Field4_Area)) / Field2_Area
                                    Depth3 = 0
                                    Depth4 = Reallocate_Amt * (Field4_Area / (Field1_Area + Field2_Area + Field4_Area)) / Field4_Area
                                    Temp_Flag1 = True
                                ElseIf ((Field1_Level = Field4_Level) And (Field1_Level < Field3_Level)) And ((Field1_Level = Field4_Level) And (Field1_Level > Field2_Level)) Then
                                    Depth1 = Reallocate_Amt * (Field1_Area / (Field1_Area + Field3_Area + Field4_Area)) / Field1_Area
                                    Depth2 = 0
                                    Depth3 = Reallocate_Amt * (Field3_Area / (Field1_Area + Field3_Area + Field4_Area)) / Field3_Area
                                    Depth4 = Reallocate_Amt * (Field4_Area / (Field1_Area + Field3_Area + Field4_Area)) / Field4_Area
                                    Temp_Flag1 = True
                                End If
                                If ((Field2_Level = Field3_Level) And (Field2_Level > Field1_Level)) And ((Field2_Level = Field3_Level) And (Field2_Level > Field4_Level)) Then
                                    If Field1_Level > Field4_Level Then
                                        Depth1 = Reallocate_Amt * (Field1_Area / (Field1_Area + Field2_Area + Field3_Area)) / Field1_Area
                                        Depth2 = Reallocate_Amt * (Field2_Area / (Field1_Area + Field2_Area + Field3_Area)) / Field2_Area
                                        Depth3 = Reallocate_Amt * (Field3_Area / (Field1_Area + Field2_Area + Field3_Area)) / Field3_Area
                                        Depth4 = 0
                                        Temp_Flag1 = True
                                    ElseIf Field1_Level < Field4_Level Then
                                        Depth1 = 0
                                        Depth2 = Reallocate_Amt * (Field2_Area / (Field2_Area + Field3_Area + Field4_Area)) / Field2_Area
                                        Depth3 = Reallocate_Amt * (Field3_Area / (Field2_Area + Field3_Area + Field4_Area)) / Field3_Area
                                        Depth4 = Reallocate_Amt * (Field4_Area / (Field2_Area + Field3_Area + Field4_Area)) / Field4_Area
                                        Temp_Flag1 = True
                                    End If
                                ElseIf ((Field2_Level = Field3_Level) And (Field2_Level < Field1_Level)) And ((Field2_Level = Field3_Level) And (Field2_Level < Field4_Level)) Then
                                    RanNum = RandomGenerator.Next(2, 3)
                                    Select Case RanNum
                                        Case 2
                                            Depth1 = Reallocate_Amt * (Field1_Area / (Field1_Area + Field2_Area + Field4_Area)) / Field1_Area
                                            Depth2 = Reallocate_Amt * (Field2_Area / (Field1_Area + Field2_Area + Field4_Area)) / Field2_Area
                                            Depth3 = 0
                                            Depth4 = Reallocate_Amt * (Field4_Area / (Field1_Area + Field2_Area + Field4_Area)) / Field4_Area
                                            Temp_Flag1 = True
                                        Case 3
                                            Depth1 = Reallocate_Amt * (Field1_Area / (Field1_Area + Field3_Area + Field4_Area)) / Field1_Area
                                            Depth2 = 0
                                            Depth3 = Reallocate_Amt * (Field3_Area / (Field1_Area + Field3_Area + Field4_Area)) / Field3_Area
                                            Depth4 = Reallocate_Amt * (Field4_Area / (Field1_Area + Field3_Area + Field4_Area)) / Field4_Area
                                            Temp_Flag1 = True
                                    End Select
                                ElseIf ((Field2_Level = Field3_Level) And (Field2_Level < Field1_Level)) And ((Field2_Level = Field3_Level) And (Field2_Level > Field4_Level)) Then
                                    Depth1 = Reallocate_Amt * (Field1_Area / (Field1_Area + Field2_Area + Field3_Area)) / Field1_Area
                                    Depth2 = Reallocate_Amt * (Field2_Area / (Field1_Area + Field2_Area + Field3_Area)) / Field2_Area
                                    Depth3 = Reallocate_Amt * (Field3_Area / (Field1_Area + Field2_Area + Field3_Area)) / Field3_Area
                                    Depth4 = 0
                                    Temp_Flag1 = True
                                ElseIf ((Field2_Level = Field3_Level) And (Field2_Level < Field4_Level)) And ((Field2_Level = Field3_Level) And (Field2_Level > Field1_Level)) Then
                                    Depth1 = 0
                                    Depth2 = Reallocate_Amt * (Field2_Area / (Field2_Area + Field3_Area + Field4_Area)) / Field2_Area
                                    Depth3 = Reallocate_Amt * (Field3_Area / (Field2_Area + Field3_Area + Field4_Area)) / Field3_Area
                                    Depth4 = Reallocate_Amt * (Field4_Area / (Field2_Area + Field3_Area + Field4_Area)) / Field4_Area
                                    Temp_Flag1 = True
                                End If
                                If ((Field2_Level = Field4_Level) And (Field2_Level > Field1_Level)) And ((Field2_Level = Field4_Level) And (Field2_Level > Field3_Level)) Then
                                    If Field1_Level > Field3_Level Then
                                        Depth1 = Reallocate_Amt * (Field1_Area / (Field1_Area + Field2_Area + Field4_Area)) / Field1_Area
                                        Depth2 = Reallocate_Amt * (Field2_Area / (Field1_Area + Field2_Area + Field4_Area)) / Field2_Area
                                        Depth3 = 0
                                        Depth4 = Reallocate_Amt * (Field4_Area / (Field1_Area + Field2_Area + Field4_Area)) / Field4_Area
                                        Temp_Flag1 = True
                                    ElseIf Field1_Level < Field3_Level Then
                                        Depth1 = 0
                                        Depth2 = Reallocate_Amt * (Field2_Area / (Field2_Area + Field3_Area + Field4_Area)) / Field2_Area
                                        Depth3 = Reallocate_Amt * (Field3_Area / (Field2_Area + Field3_Area + Field4_Area)) / Field3_Area
                                        Depth4 = Reallocate_Amt * (Field4_Area / (Field2_Area + Field3_Area + Field4_Area)) / Field4_Area
                                        Temp_Flag1 = True
                                    End If
                                ElseIf ((Field2_Level = Field4_Level) And (Field2_Level < Field1_Level)) And ((Field2_Level = Field4_Level) And (Field2_Level < Field3_Level)) Then
                                    RanNum = RandomGenerator.Next(2, 3)
                                    Select Case RanNum
                                        Case 2
                                            Depth1 = Reallocate_Amt * (Field1_Area / (Field1_Area + Field2_Area + Field3_Area)) / Field1_Area
                                            Depth2 = Reallocate_Amt * (Field2_Area / (Field1_Area + Field2_Area + Field3_Area)) / Field2_Area
                                            Depth3 = Reallocate_Amt * (Field3_Area / (Field1_Area + Field2_Area + Field3_Area)) / Field3_Area
                                            Depth4 = 0
                                            Temp_Flag1 = True
                                        Case 3 '4
                                            Depth1 = Reallocate_Amt * (Field1_Area / (Field1_Area + Field3_Area + Field4_Area)) / Field1_Area
                                            Depth2 = 0
                                            Depth3 = Reallocate_Amt * (Field3_Area / (Field1_Area + Field3_Area + Field4_Area)) / Field3_Area
                                            Depth4 = Reallocate_Amt * (Field4_Area / (Field1_Area + Field3_Area + Field4_Area)) / Field4_Area
                                            Temp_Flag1 = True
                                    End Select
                                ElseIf ((Field2_Level = Field4_Level) And (Field2_Level < Field1_Level)) And ((Field2_Level = Field4_Level) And (Field2_Level > Field3_Level)) Then
                                    Depth1 = Reallocate_Amt * (Field1_Area / (Field1_Area + Field2_Area + Field4_Area)) / Field1_Area
                                    Depth2 = Reallocate_Amt * (Field2_Area / (Field1_Area + Field2_Area + Field4_Area)) / Field2_Area
                                    Depth3 = 0
                                    Depth4 = Reallocate_Amt * (Field4_Area / (Field1_Area + Field2_Area + Field4_Area)) / Field4_Area
                                    Temp_Flag1 = True
                                ElseIf ((Field2_Level = Field4_Level) And (Field2_Level < Field3_Level)) And ((Field2_Level = Field4_Level) And (Field2_Level > Field1_Level)) Then
                                    Depth1 = 0
                                    Depth2 = Reallocate_Amt * (Field2_Area / (Field2_Area + Field3_Area + Field4_Area)) / Field2_Area
                                    Depth3 = Reallocate_Amt * (Field3_Area / (Field2_Area + Field3_Area + Field4_Area)) / Field3_Area
                                    Depth4 = Reallocate_Amt * (Field4_Area / (Field2_Area + Field3_Area + Field4_Area)) / Field4_Area
                                    Temp_Flag1 = True
                                End If
                                If ((Field3_Level = Field4_Level) And (Field3_Level > Field1_Level)) And ((Field3_Level = Field4_Level) And (Field3_Level > Field2_Level)) Then
                                    If Field1_Level > Field2_Level Then
                                        Depth1 = Reallocate_Amt * (Field1_Area / (Field1_Area + Field3_Area + Field4_Area)) / Field1_Area
                                        Depth2 = 0
                                        Depth3 = Reallocate_Amt * (Field3_Area / (Field1_Area + Field3_Area + Field4_Area)) / Field3_Area
                                        Depth4 = Reallocate_Amt * (Field4_Area / (Field1_Area + Field3_Area + Field4_Area)) / Field4_Area
                                        Temp_Flag1 = True
                                    ElseIf Field1_Level < Field2_Level Then
                                        Depth1 = 0
                                        Depth2 = Reallocate_Amt * (Field2_Area / (Field2_Area + Field3_Area + Field4_Area)) / Field2_Area
                                        Depth3 = Reallocate_Amt * (Field3_Area / (Field2_Area + Field3_Area + Field4_Area)) / Field3_Area
                                        Depth4 = Reallocate_Amt * (Field4_Area / (Field2_Area + Field3_Area + Field4_Area)) / Field4_Area
                                        Temp_Flag1 = True
                                    End If
                                ElseIf ((Field3_Level = Field4_Level) And (Field3_Level < Field1_Level)) And ((Field3_Level = Field4_Level) And (Field3_Level < Field2_Level)) Then
                                    RanNum = RandomGenerator.Next(3, 4)
                                    Select Case RanNum
                                        Case 3
                                            Depth1 = Reallocate_Amt * (Field1_Area / (Field1_Area + Field2_Area + Field3_Area)) / Field1_Area
                                            Depth2 = Reallocate_Amt * (Field2_Area / (Field1_Area + Field2_Area + Field3_Area)) / Field2_Area
                                            Depth3 = Reallocate_Amt * (Field3_Area / (Field1_Area + Field2_Area + Field3_Area)) / Field3_Area
                                            Depth4 = 0
                                            Temp_Flag1 = True
                                        Case 4
                                            Depth1 = Reallocate_Amt * (Field1_Area / (Field1_Area + Field2_Area + Field4_Area)) / Field1_Area
                                            Depth2 = Reallocate_Amt * (Field2_Area / (Field1_Area + Field2_Area + Field4_Area)) / Field2_Area
                                            Depth3 = 0
                                            Depth4 = Reallocate_Amt * (Field4_Area / (Field1_Area + Field2_Area + Field4_Area)) / Field4_Area
                                            Temp_Flag1 = True
                                    End Select
                                ElseIf ((Field3_Level = Field4_Level) And (Field3_Level < Field1_Level)) And ((Field3_Level = Field4_Level) And (Field3_Level > Field2_Level)) Then
                                    Depth1 = Reallocate_Amt * (Field1_Area / (Field1_Area + Field3_Area + Field4_Area)) / Field1_Area
                                    Depth2 = 0
                                    Depth3 = Reallocate_Amt * (Field3_Area / (Field1_Area + Field3_Area + Field4_Area)) / Field3_Area
                                    Depth4 = Reallocate_Amt * (Field4_Area / (Field1_Area + Field3_Area + Field4_Area)) / Field4_Area
                                    Temp_Flag1 = True
                                ElseIf ((Field3_Level = Field4_Level) And (Field3_Level < Field2_Level)) And ((Field3_Level = Field4_Level) And (Field3_Level > Field1_Level)) Then
                                    Depth1 = 0
                                    Depth2 = Reallocate_Amt * (Field2_Area / (Field2_Area + Field3_Area + Field4_Area)) / Field2_Area
                                    Depth3 = Reallocate_Amt * (Field3_Area / (Field2_Area + Field3_Area + Field4_Area)) / Field3_Area
                                    Depth4 = Reallocate_Amt * (Field4_Area / (Field2_Area + Field3_Area + Field4_Area)) / Field4_Area
                                    Temp_Flag1 = True
                                End If
                            ElseIf Temp_Flag1 And Not Temp_Flag2 Then
                                'Now Reallocating down to 2 fields in the event reallocating to 3 fields wasn't sufficient
                                If ((Field1_Level = Field2_Level) And (Field1_Level > Field3_Level)) And ((Field1_Level = Field2_Level) And (Field1_Level > Field4_Level)) Then
                                    Depth1 = Reallocate_Amt * (Field1_Area / (Field1_Area + Field2_Area)) / Field1_Area
                                    Depth2 = Reallocate_Amt * (Field2_Area / (Field1_Area + Field2_Area)) / Field2_Area
                                    Depth3 = 0
                                    Depth4 = 0
                                    Temp_Flag2 = True
                                ElseIf ((Field1_Level = Field2_Level) And (Field1_Level < Field3_Level)) And ((Field1_Level = Field2_Level) And (Field1_Level < Field4_Level)) Then
                                    Depth1 = 0
                                    Depth2 = 0
                                    Depth3 = Reallocate_Amt * (Field3_Area / (Field3_Area + Field4_Area)) / Field3_Area
                                    Depth4 = Reallocate_Amt * (Field4_Area / (Field3_Area + Field4_Area)) / Field4_Area
                                    Temp_Flag2 = True
                                ElseIf ((Field1_Level = Field2_Level) And (Field1_Level < Field4_Level)) And ((Field1_Level = Field2_Level) And (Field1_Level > Field3_Level)) Then
                                    RanNum = RandomGenerator.Next(1, 2)
                                    Select Case RanNum
                                        Case 1
                                            Depth1 = Reallocate_Amt * (Field1_Area / (Field1_Area + Field4_Area)) / Field1_Area
                                            Depth2 = 0
                                            Depth3 = 0
                                            Depth4 = Reallocate_Amt * (Field4_Area / (Field1_Area + Field4_Area)) / Field4_Area
                                            Temp_Flag2 = True
                                        Case 2
                                            Depth1 = 0
                                            Depth2 = Reallocate_Amt * (Field2_Area / (Field2_Area + Field4_Area)) / Field2_Area
                                            Depth3 = 0
                                            Depth4 = Reallocate_Amt * (Field4_Area / (Field2_Area + Field4_Area)) / Field4_Area
                                            Temp_Flag2 = True
                                    End Select
                                ElseIf ((Field1_Level = Field2_Level) And (Field1_Level < Field3_Level)) And ((Field1_Level = Field2_Level) And (Field1_Level > Field4_Level)) Then
                                    RanNum = RandomGenerator.Next(1, 2)
                                    Select Case RanNum
                                        Case 1
                                            Depth1 = Reallocate_Amt * (Field1_Area / (Field1_Area + Field3_Area)) / Field1_Area
                                            Depth2 = 0
                                            Depth3 = Reallocate_Amt * (Field3_Area / (Field1_Area + Field3_Area)) / Field3_Area
                                            Depth4 = 0
                                            Temp_Flag2 = True
                                        Case 2
                                            Depth1 = 0
                                            Depth2 = Reallocate_Amt * (Field2_Area / (Field2_Area + Field3_Area)) / Field2_Area
                                            Depth3 = Reallocate_Amt * (Field3_Area / (Field2_Area + Field3_Area)) / Field3_Area
                                            Depth4 = 0
                                            Temp_Flag2 = True
                                    End Select
                                End If
                                If ((Field1_Level = Field3_Level) And (Field1_Level > Field2_Level)) And ((Field1_Level = Field3_Level) And (Field1_Level > Field4_Level)) Then
                                    Depth1 = Reallocate_Amt * (Field1_Area / (Field1_Area + Field3_Area)) / Field1_Area
                                    Depth2 = 0
                                    Depth3 = Reallocate_Amt * (Field3_Area / (Field1_Area + Field3_Area)) / Field3_Area
                                    Depth4 = 0
                                    Temp_Flag2 = True
                                ElseIf ((Field1_Level = Field3_Level) And (Field1_Level < Field2_Level)) And ((Field1_Level = Field3_Level) And (Field1_Level < Field4_Level)) Then
                                    Depth1 = 0
                                    Depth2 = Reallocate_Amt * (Field2_Area / (Field2_Area + Field4_Area)) / Field2_Area
                                    Depth3 = 0
                                    Depth4 = Reallocate_Amt * (Field4_Area / (Field2_Area + Field4_Area)) / Field4_Area
                                    Temp_Flag2 = True
                                ElseIf ((Field1_Level = Field3_Level) And (Field1_Level < Field2_Level)) And ((Field1_Level = Field3_Level) And (Field1_Level > Field4_Level)) Then
                                    RanNum = RandomGenerator.Next(1, 2)
                                    Select Case RanNum
                                        Case 1
                                            Depth1 = Reallocate_Amt * (Field1_Area / (Field1_Area + Field2_Area)) / Field1_Area
                                            Depth2 = Reallocate_Amt * (Field2_Area / (Field1_Area + Field2_Area)) / Field2_Area
                                            Depth3 = 0
                                            Depth4 = 0
                                            Temp_Flag2 = True
                                        Case 2 '3
                                            Depth1 = 0
                                            Depth2 = Reallocate_Amt * (Field2_Area / (Field2_Area + Field3_Area)) / Field2_Area
                                            Depth3 = Reallocate_Amt * (Field3_Area / (Field2_Area + Field3_Area)) / Field3_Area
                                            Depth4 = 0
                                            Temp_Flag2 = True
                                    End Select
                                ElseIf ((Field1_Level = Field3_Level) And (Field1_Level < Field4_Level)) And ((Field1_Level = Field3_Level) And (Field1_Level > Field2_Level)) Then
                                    RanNum = RandomGenerator.Next(1, 2)
                                    Select Case RanNum
                                        Case 1
                                            Depth1 = Reallocate_Amt * (Field1_Area / (Field1_Area + Field4_Area)) / Field1_Area
                                            Depth2 = 0
                                            Depth3 = 0
                                            Depth4 = Reallocate_Amt * (Field4_Area / (Field1_Area + Field4_Area)) / Field4_Area
                                            Temp_Flag2 = True
                                        Case 2 '3
                                            Depth1 = 0
                                            Depth2 = 0
                                            Depth3 = Reallocate_Amt * (Field3_Area / (Field3_Area + Field4_Area)) / Field3_Area
                                            Depth4 = Reallocate_Amt * (Field4_Area / (Field3_Area + Field4_Area)) / Field4_Area
                                            Temp_Flag2 = True
                                    End Select
                                End If
                                If ((Field1_Level = Field4_Level) And (Field1_Level > Field2_Level)) And ((Field1_Level = Field4_Level) And (Field1_Level > Field3_Level)) Then
                                    Depth1 = Reallocate_Amt * (Field1_Area / (Field1_Area + Field4_Area)) / Field1_Area
                                    Depth2 = 0
                                    Depth3 = 0
                                    Depth4 = Reallocate_Amt * (Field4_Area / (Field1_Area + Field4_Area)) / Field4_Area
                                    Temp_Flag2 = True
                                ElseIf ((Field1_Level = Field4_Level) And (Field1_Level < Field2_Level)) And ((Field1_Level = Field4_Level) And (Field1_Level < Field3_Level)) Then
                                    Depth1 = 0
                                    Depth2 = Reallocate_Amt * (Field2_Area / (Field2_Area + Field3_Area)) / Field2_Area
                                    Depth3 = Reallocate_Amt * (Field3_Area / (Field2_Area + Field3_Area)) / Field3_Area
                                    Depth4 = 0
                                    Temp_Flag2 = True
                                ElseIf ((Field1_Level = Field4_Level) And (Field1_Level < Field2_Level)) And ((Field1_Level = Field4_Level) And (Field1_Level > Field3_Level)) Then
                                    RanNum = RandomGenerator.Next(1, 2)
                                    Select Case RanNum
                                        Case 1
                                            Depth1 = Reallocate_Amt * (Field1_Area / (Field1_Area + Field2_Area)) / Field1_Area
                                            Depth2 = Reallocate_Amt * (Field2_Area / (Field1_Area + Field2_Area)) / Field2_Area
                                            Depth3 = 0
                                            Depth4 = 0
                                            Temp_Flag2 = True
                                        Case 2 '4
                                            Depth1 = 0
                                            Depth2 = Reallocate_Amt * (Field2_Area / (Field2_Area + Field4_Area)) / Field2_Area
                                            Depth3 = 0
                                            Depth4 = Reallocate_Amt * (Field4_Area / (Field2_Area + Field4_Area)) / Field4_Area
                                            Temp_Flag2 = True
                                    End Select
                                ElseIf ((Field1_Level = Field4_Level) And (Field1_Level < Field3_Level)) And ((Field1_Level = Field4_Level) And (Field1_Level > Field2_Level)) Then
                                    RanNum = RandomGenerator.Next(1, 2)
                                    Select Case RanNum
                                        Case 1
                                            Depth1 = Reallocate_Amt * (Field1_Area / (Field1_Area + Field3_Area)) / Field1_Area
                                            Depth2 = 0
                                            Depth3 = Reallocate_Amt * (Field3_Area / (Field1_Area + Field3_Area)) / Field3_Area
                                            Depth4 = 0
                                            Temp_Flag2 = True
                                        Case 2 '4
                                            Depth1 = 0
                                            Depth2 = 0
                                            Depth3 = Reallocate_Amt * (Field3_Area / (Field3_Area + Field4_Area)) / Field3_Area
                                            Depth4 = Reallocate_Amt * (Field4_Area / (Field3_Area + Field4_Area)) / Field4_Area
                                            Temp_Flag2 = True
                                    End Select
                                End If
                                If ((Field2_Level = Field3_Level) And (Field2_Level > Field1_Level)) And ((Field2_Level = Field3_Level) And (Field2_Level > Field4_Level)) Then
                                    Depth1 = 0
                                    Depth2 = Reallocate_Amt * (Field2_Area / (Field2_Area + Field3_Area)) / Field2_Area
                                    Depth3 = Reallocate_Amt * (Field3_Area / (Field2_Area + Field3_Area)) / Field3_Area
                                    Depth4 = 0
                                    Temp_Flag2 = True
                                ElseIf ((Field2_Level = Field3_Level) And (Field2_Level < Field1_Level)) And ((Field2_Level = Field3_Level) And (Field2_Level < Field4_Level)) Then
                                    Depth1 = Reallocate_Amt * (Field2_Area / (Field2_Area + Field3_Area)) / Field1_Area
                                    Depth2 = 0
                                    Depth3 = 0
                                    Depth4 = Reallocate_Amt * (Field3_Area / (Field2_Area + Field3_Area)) / Field4_Area
                                    Temp_Flag2 = True
                                ElseIf ((Field2_Level = Field3_Level) And (Field2_Level < Field1_Level)) And ((Field2_Level = Field3_Level) And (Field2_Level > Field4_Level)) Then
                                    RanNum = RandomGenerator.Next(2, 3)
                                    Select Case RanNum
                                        Case 2
                                            Depth1 = Reallocate_Amt * (Field1_Area / (Field1_Area + Field2_Area)) / Field1_Area
                                            Depth2 = Reallocate_Amt * (Field2_Area / (Field1_Area + Field2_Area)) / Field2_Area
                                            Depth3 = 0
                                            Depth4 = 0
                                            Temp_Flag2 = True
                                        Case 3
                                            Depth1 = Reallocate_Amt * (Field1_Area / (Field1_Area + Field3_Area)) / Field1_Area
                                            Depth2 = 0
                                            Depth3 = Reallocate_Amt * (Field3_Area / (Field1_Area + Field3_Area)) / Field3_Area
                                            Depth4 = 0
                                            Temp_Flag2 = True
                                    End Select
                                ElseIf ((Field2_Level = Field3_Level) And (Field2_Level < Field4_Level)) And ((Field2_Level = Field3_Level) And (Field2_Level > Field1_Level)) Then
                                    RanNum = RandomGenerator.Next(2, 3)
                                    Select Case RanNum
                                        Case 2
                                            Depth1 = 0
                                            Depth2 = Reallocate_Amt * (Field2_Area / (Field2_Area + Field4_Area)) / Field2_Area
                                            Depth3 = 0
                                            Depth4 = Reallocate_Amt * (Field4_Area / (Field2_Area + Field4_Area)) / Field4_Area
                                            Temp_Flag2 = True
                                        Case 3
                                            Depth1 = 0
                                            Depth2 = 0
                                            Depth3 = Reallocate_Amt * (Field3_Area / (Field3_Area + Field4_Area)) / Field3_Area
                                            Depth4 = Reallocate_Amt * (Field4_Area / (Field3_Area + Field4_Area)) / Field4_Area
                                            Temp_Flag2 = True
                                    End Select
                                End If
                                If ((Field2_Level = Field4_Level) And (Field2_Level > Field1_Level)) And ((Field2_Level = Field4_Level) And (Field2_Level > Field3_Level)) Then
                                    Depth1 = 0
                                    Depth2 = Reallocate_Amt * (Field2_Area / (Field2_Area + Field4_Area)) / Field2_Area
                                    Depth3 = 0
                                    Depth4 = Reallocate_Amt * (Field4_Area / (Field2_Area + Field4_Area)) / Field4_Area
                                    Temp_Flag2 = True
                                ElseIf ((Field2_Level = Field4_Level) And (Field2_Level < Field1_Level)) And ((Field2_Level = Field4_Level) And (Field2_Level < Field3_Level)) Then
                                    Depth1 = Reallocate_Amt * (Field1_Area / (Field1_Area + Field3_Area)) / Field1_Area
                                    Depth2 = 0
                                    Depth3 = Reallocate_Amt * (Field3_Area / (Field1_Area + Field3_Area)) / Field3_Area
                                    Depth4 = 0
                                    Temp_Flag2 = True
                                ElseIf ((Field2_Level = Field4_Level) And (Field2_Level < Field1_Level)) And ((Field2_Level = Field4_Level) And (Field2_Level > Field3_Level)) Then
                                    RanNum = RandomGenerator.Next(2, 3)
                                    Select Case RanNum
                                        Case 2
                                            Depth1 = Reallocate_Amt * (Field1_Area / (Field1_Area + Field2_Area)) / Field1_Area
                                            Depth2 = Reallocate_Amt * (Field2_Area / (Field1_Area + Field2_Area)) / Field2_Area
                                            Depth3 = 0
                                            Depth4 = 0
                                            Temp_Flag2 = True
                                        Case 3 '4
                                            Depth1 = Reallocate_Amt * (Field1_Area / (Field1_Area + Field4_Area)) / Field1_Area
                                            Depth2 = 0
                                            Depth3 = 0
                                            Depth4 = Reallocate_Amt * (Field4_Area / (Field1_Area + Field4_Area)) / Field4_Area
                                            Temp_Flag2 = True
                                    End Select
                                ElseIf ((Field2_Level = Field4_Level) And (Field2_Level < Field3_Level)) And ((Field2_Level = Field4_Level) And (Field2_Level > Field1_Level)) Then
                                    RanNum = RandomGenerator.Next(2, 3)
                                    Select Case RanNum
                                        Case 2
                                            Depth1 = 0
                                            Depth2 = Reallocate_Amt * (Field2_Area / (Field2_Area + Field3_Area)) / Field2_Area
                                            Depth3 = Reallocate_Amt * (Field3_Area / (Field2_Area + Field3_Area)) / Field3_Area
                                            Depth4 = 0
                                            Temp_Flag2 = True
                                        Case 3 '4
                                            Depth1 = 0
                                            Depth2 = 0
                                            Depth3 = Reallocate_Amt * (Field3_Area / (Field3_Area + Field4_Area)) / Field3_Area
                                            Depth4 = Reallocate_Amt * (Field4_Area / (Field3_Area + Field4_Area)) / Field4_Area
                                            Temp_Flag2 = True
                                    End Select
                                End If
                                If ((Field3_Level = Field4_Level) And (Field3_Level > Field1_Level)) And ((Field3_Level = Field4_Level) And (Field3_Level > Field2_Level)) Then
                                    Depth1 = 0
                                    Depth2 = 0
                                    Depth3 = Reallocate_Amt * (Field3_Area / (Field3_Area + Field4_Area)) / Field3_Area
                                    Depth4 = Reallocate_Amt * (Field4_Area / (Field3_Area + Field4_Area)) / Field4_Area
                                    Temp_Flag2 = True
                                ElseIf ((Field3_Level = Field4_Level) And (Field3_Level < Field1_Level)) And ((Field3_Level = Field4_Level) And (Field3_Level < Field2_Level)) Then
                                    Depth1 = Reallocate_Amt * (Field1_Area / (Field1_Area + Field2_Area)) / Field1_Area
                                    Depth2 = Reallocate_Amt * (Field2_Area / (Field1_Area + Field2_Area)) / Field2_Area
                                    Depth3 = 0
                                    Depth4 = 0
                                    Temp_Flag2 = True
                                ElseIf ((Field3_Level = Field4_Level) And (Field3_Level < Field1_Level)) And ((Field3_Level = Field4_Level) And (Field3_Level > Field2_Level)) Then
                                    RanNum = RandomGenerator.Next(3, 4)
                                    Select Case RanNum
                                        Case 3
                                            Depth1 = Reallocate_Amt * (Field1_Area / (Field1_Area + Field3_Area)) / Field1_Area
                                            Depth2 = 0
                                            Depth3 = Reallocate_Amt * (Field3_Area / (Field1_Area + Field3_Area)) / Field3_Area
                                            Depth4 = 0
                                            Temp_Flag2 = True
                                        Case 4
                                            Depth1 = Reallocate_Amt * (Field1_Area / (Field1_Area + Field4_Area)) / Field1_Area
                                            Depth2 = 0
                                            Depth3 = 0
                                            Depth4 = Reallocate_Amt * (Field4_Area / (Field1_Area + Field4_Area)) / Field4_Area
                                            Temp_Flag2 = True
                                    End Select
                                ElseIf ((Field3_Level = Field4_Level) And (Field3_Level < Field2_Level)) And ((Field3_Level = Field4_Level) And (Field3_Level > Field1_Level)) Then
                                    RanNum = RandomGenerator.Next(3, 4)
                                    Select Case RanNum
                                        Case 3
                                            Depth1 = 0
                                            Depth2 = Reallocate_Amt * (Field2_Area / (Field2_Area + Field3_Area)) / Field2_Area
                                            Depth3 = Reallocate_Amt * (Field3_Area / (Field2_Area + Field3_Area)) / Field3_Area
                                            Depth4 = 0
                                            Temp_Flag2 = True
                                        Case 4
                                            Depth1 = 0
                                            Depth2 = Reallocate_Amt * (Field2_Area / (Field2_Area + Field4_Area)) / Field2_Area
                                            Depth3 = 0
                                            Depth4 = Reallocate_Amt * (Field4_Area / (Field2_Area + Field4_Area)) / Field4_Area
                                            Temp_Flag2 = True
                                    End Select
                                End If
                            ElseIf Temp_Flag1 And Temp_Flag2 Then
                                If ((Field1_Level = Field2_Level) And (Field1_Level > Field3_Level)) And ((Field1_Level = Field2_Level) And (Field1_Level > Field4_Level)) Then
                                    RanNum = RandomGenerator.Next(1, 2)
                                    Select Case RanNum
                                        Case 1
                                            Depth1 = Reallocate_Amt / Field1_Area
                                            Depth2 = 0
                                            Depth3 = 0
                                            Depth4 = 0
                                        Case 2
                                            Depth1 = 0
                                            Depth2 = Reallocate_Amt / Field2_Area
                                            Depth3 = 0
                                            Depth4 = 0
                                    End Select
                                ElseIf ((Field1_Level = Field2_Level) And (Field1_Level < Field3_Level)) And ((Field1_Level = Field2_Level) And (Field1_Level < Field4_Level)) Then
                                    If Field3_Level > Field4_Level Then
                                        Depth1 = 0
                                        Depth2 = 0
                                        Depth3 = Reallocate_Amt / Field3_Area
                                        Depth4 = 0
                                    ElseIf Field3_Level < Field4_Level Then
                                        Depth1 = 0
                                        Depth2 = 0
                                        Depth3 = 0
                                        Depth4 = Reallocate_Amt / Field4_Area
                                    End If
                                ElseIf ((Field1_Level = Field2_Level) And (Field1_Level < Field4_Level)) And ((Field1_Level = Field2_Level) And (Field1_Level > Field3_Level)) Then
                                    Depth1 = 0
                                    Depth2 = 0
                                    Depth3 = 0
                                    Depth4 = Reallocate_Amt / Field4_Area
                                ElseIf ((Field1_Level = Field2_Level) And (Field1_Level < Field3_Level)) And ((Field1_Level = Field2_Level) And (Field1_Level > Field4_Level)) Then
                                    Depth1 = 0
                                    Depth2 = 0
                                    Depth3 = Reallocate_Amt / Field3_Area
                                    Depth4 = 0
                                End If
                                If ((Field1_Level = Field3_Level) And (Field1_Level > Field2_Level)) And ((Field1_Level = Field3_Level) And (Field1_Level > Field4_Level)) Then
                                    RanNum = RandomGenerator.Next(1, 2)
                                    Select Case RanNum
                                        Case 1
                                            Depth1 = Reallocate_Amt / Field1_Area
                                            Depth2 = 0
                                            Depth3 = 0
                                            Depth4 = 0
                                        Case 2 '3
                                            Depth1 = 0
                                            Depth2 = 0
                                            Depth3 = Reallocate_Amt / Field3_Area
                                            Depth4 = 0
                                    End Select
                                ElseIf ((Field1_Level = Field3_Level) And (Field1_Level < Field2_Level)) And ((Field1_Level = Field3_Level) And (Field1_Level < Field4_Level)) Then
                                    If Field2_Level > Field4_Level Then
                                        Depth1 = 0
                                        Depth2 = Reallocate_Amt / Field2_Area
                                        Depth3 = 0
                                        Depth4 = 0
                                    ElseIf Field2_Level < Field4_Level Then
                                        Depth1 = 0
                                        Depth2 = 0
                                        Depth3 = 0
                                        Depth4 = Reallocate_Amt / Field4_Area
                                    End If
                                ElseIf ((Field1_Level = Field3_Level) And (Field1_Level < Field2_Level)) And ((Field1_Level = Field3_Level) And (Field1_Level > Field4_Level)) Then
                                    Depth1 = 0
                                    Depth2 = Reallocate_Amt / Field2_Area
                                    Depth3 = 0
                                    Depth4 = 0
                                ElseIf ((Field1_Level = Field3_Level) And (Field1_Level < Field4_Level)) And ((Field1_Level = Field3_Level) And (Field1_Level > Field2_Level)) Then
                                    Depth1 = 0
                                    Depth2 = 0
                                    Depth3 = 0
                                    Depth4 = Reallocate_Amt / Field4_Area
                                End If
                                If ((Field1_Level = Field4_Level) And (Field1_Level > Field2_Level)) And ((Field1_Level = Field4_Level) And (Field1_Level > Field3_Level)) Then
                                    RanNum = RandomGenerator.Next(1, 4)
                                    Select Case RanNum
                                        Case 1
                                            Depth1 = Reallocate_Amt / Field1_Area
                                            Depth2 = 0
                                            Depth3 = 0
                                            Depth4 = 0
                                        Case 2 '4
                                            Depth1 = 0
                                            Depth2 = 0
                                            Depth3 = 0
                                            Depth4 = Reallocate_Amt / Field4_Area
                                    End Select
                                ElseIf ((Field1_Level = Field4_Level) And (Field1_Level < Field2_Level)) And ((Field1_Level = Field4_Level) And (Field1_Level < Field3_Level)) Then
                                    If Field2_Level > Field3_Level Then
                                        Depth1 = 0
                                        Depth2 = Reallocate_Amt / Field2_Area
                                        Depth3 = 0
                                        Depth4 = 0
                                    ElseIf Field2_Level < Field3_Level Then
                                        Depth1 = 0
                                        Depth2 = 0
                                        Depth3 = Reallocate_Amt / Field3_Area
                                        Depth4 = 0
                                    End If
                                ElseIf ((Field1_Level = Field4_Level) And (Field1_Level < Field2_Level)) And ((Field1_Level = Field4_Level) And (Field1_Level > Field3_Level)) Then
                                    Depth1 = 0
                                    Depth2 = Reallocate_Amt / Field2_Area
                                    Depth3 = 0
                                    Depth4 = 0
                                ElseIf ((Field1_Level = Field4_Level) And (Field1_Level < Field3_Level)) And ((Field1_Level = Field4_Level) And (Field1_Level > Field2_Level)) Then
                                    Depth1 = 0
                                    Depth2 = 0
                                    Depth3 = Reallocate_Amt / Field3_Area
                                    Depth4 = 0
                                End If
                                If ((Field2_Level = Field3_Level) And (Field2_Level > Field1_Level)) And ((Field2_Level = Field3_Level) And (Field2_Level > Field4_Level)) Then
                                    RanNum = RandomGenerator.Next(2, 3)
                                    Select Case RanNum
                                        Case 2
                                            Depth1 = 0
                                            Depth2 = Reallocate_Amt / Field2_Area
                                            Depth3 = 0
                                            Depth4 = 0
                                        Case 3
                                            Depth1 = 0
                                            Depth2 = 0
                                            Depth3 = Reallocate_Amt / Field3_Area
                                            Depth4 = 0
                                    End Select
                                ElseIf ((Field2_Level = Field3_Level) And (Field2_Level < Field1_Level)) And ((Field2_Level = Field3_Level) And (Field2_Level < Field4_Level)) Then
                                    If Field1_Level > Field4_Level Then
                                        Depth1 = Reallocate_Amt / Field1_Area
                                        Depth2 = 0
                                        Depth3 = 0
                                        Depth4 = 0
                                    ElseIf Field1_Level > Field4_Level Then
                                        Depth1 = 0
                                        Depth2 = 0
                                        Depth3 = 0
                                        Depth4 = Reallocate_Amt / Field4_Area
                                    End If
                                ElseIf ((Field2_Level = Field3_Level) And (Field2_Level < Field1_Level)) And ((Field2_Level = Field3_Level) And (Field2_Level > Field4_Level)) Then
                                    Depth1 = Reallocate_Amt / Field1_Area
                                    Depth2 = 0
                                    Depth3 = 0
                                    Depth4 = 0
                                ElseIf ((Field2_Level = Field3_Level) And (Field2_Level < Field4_Level)) And ((Field2_Level = Field3_Level) And (Field2_Level > Field1_Level)) Then
                                    Depth1 = 0
                                    Depth2 = 0
                                    Depth3 = 0
                                    Depth4 = Reallocate_Amt / Field4_Area
                                End If
                                If ((Field2_Level = Field4_Level) And (Field2_Level > Field1_Level)) And ((Field2_Level = Field4_Level) And (Field2_Level > Field3_Level)) Then
                                    RanNum = RandomGenerator.Next(2, 3)
                                    Select Case RanNum
                                        Case 2
                                            Depth1 = 0
                                            Depth2 = Reallocate_Amt / Field2_Area
                                            Depth3 = 0
                                            Depth4 = 0
                                        Case 3 '4
                                            Depth1 = 0
                                            Depth2 = 0
                                            Depth3 = 0
                                            Depth4 = Reallocate_Amt / Field4_Area
                                    End Select
                                ElseIf ((Field2_Level = Field4_Level) And (Field2_Level < Field1_Level)) And ((Field2_Level = Field4_Level) And (Field2_Level < Field3_Level)) Then
                                    If Field1_Level > Field3_Level Then
                                        Depth1 = Reallocate_Amt / Field1_Area
                                        Depth2 = 0
                                        Depth3 = 0
                                        Depth4 = 0
                                    ElseIf Field1_Level < Field3_Level Then
                                        Depth1 = 0
                                        Depth2 = 0
                                        Depth3 = Reallocate_Amt / Field3_Area
                                        Depth4 = 0
                                    End If
                                ElseIf ((Field2_Level = Field4_Level) And (Field2_Level < Field1_Level)) And ((Field2_Level = Field4_Level) And (Field2_Level > Field3_Level)) Then
                                    Depth1 = Reallocate_Amt / Field1_Area
                                    Depth2 = 0
                                    Depth3 = 0
                                    Depth4 = 0
                                ElseIf ((Field2_Level = Field4_Level) And (Field2_Level < Field3_Level)) And ((Field2_Level = Field4_Level) And (Field2_Level > Field1_Level)) Then
                                    Depth1 = 0
                                    Depth2 = 0
                                    Depth3 = Reallocate_Amt / Field3_Area
                                    Depth4 = 0
                                End If
                                If ((Field3_Level = Field4_Level) And (Field3_Level > Field1_Level)) And ((Field3_Level = Field4_Level) And (Field3_Level > Field2_Level)) Then
                                    RanNum = RandomGenerator.Next(3, 4)
                                    Select Case RanNum
                                        Case 3
                                            Depth1 = 0
                                            Depth2 = 0
                                            Depth3 = Reallocate_Amt / Field3_Area
                                            Depth4 = 0
                                        Case 4
                                            Depth1 = 0
                                            Depth2 = 0
                                            Depth3 = 0
                                            Depth4 = Reallocate_Amt / Field4_Area
                                    End Select
                                ElseIf ((Field3_Level = Field4_Level) And (Field3_Level < Field1_Level)) And ((Field3_Level = Field4_Level) And (Field3_Level < Field2_Level)) Then
                                    If Field1_Level > Field2_Level Then
                                        Depth1 = Reallocate_Amt / Field1_Area
                                        Depth2 = 0
                                        Depth3 = 0
                                        Depth4 = 0
                                    ElseIf Field1_Level < Field2_Level Then
                                        Depth1 = 0
                                        Depth2 = Reallocate_Amt / Field2_Area
                                        Depth3 = 0
                                        Depth4 = 0
                                    End If
                                ElseIf ((Field3_Level = Field4_Level) And (Field3_Level < Field1_Level)) And ((Field3_Level = Field4_Level) And (Field3_Level > Field2_Level)) Then
                                    Depth1 = Reallocate_Amt / Field1_Area
                                    Depth2 = 0
                                    Depth3 = 0
                                    Depth4 = 0
                                ElseIf ((Field3_Level = Field4_Level) And (Field3_Level < Field2_Level)) And ((Field3_Level = Field4_Level) And (Field3_Level > Field1_Level)) Then
                                    Depth1 = 0
                                    Depth2 = Reallocate_Amt / Field2_Area
                                    Depth3 = 0
                                    Depth4 = 0
                                End If
                            End If
                            'When 2 out of 4 Level are equal and the other two ARE equal
                        ElseIf ((Field1_Level = Field2_Level) And (Field3_Level = Field4_Level)) Or ((Field1_Level = Field3_Level) And (Field2_Level = Field4_Level)) Or ((Field1_Level = Field4_Level) And (Field2_Level = Field3_Level)) Then
                            If Not Temp_Flag1 And Not Temp_Flag2 Then
                                If ((Field1_Level = Field2_Level) And (Field2_Level > Field3_Level) And (Field3_Level = Field4_Level)) Then
                                    RanNum = RandomGenerator.Next(3, 4)
                                    Select Case RanNum
                                        Case 3
                                            Depth1 = Reallocate_Amt * (Field1_Area / (Field1_Area + Field2_Area + Field3_Area)) / Field1_Area
                                            Depth2 = Reallocate_Amt * (Field2_Area / (Field2_Area + Field2_Area + Field3_Area)) / Field2_Area
                                            Depth3 = Reallocate_Amt * (Field3_Area / (Field3_Area + Field2_Area + Field3_Area)) / Field3_Area
                                            Depth4 = 0
                                            Temp_Flag1 = True
                                        Case 4
                                            Depth1 = Reallocate_Amt * (Field1_Area / (Field1_Area + Field2_Area + Field4_Area)) / Field1_Area
                                            Depth2 = Reallocate_Amt * (Field2_Area / (Field1_Area + Field2_Area + Field4_Area)) / Field2_Area
                                            Depth3 = 0
                                            Depth4 = Reallocate_Amt * (Field4_Area / (Field1_Area + Field2_Area + Field4_Area)) / Field4_Area
                                            Temp_Flag1 = True
                                    End Select
                                ElseIf (Field1_Level = Field2_Level) And (Field2_Level < Field3_Level) And (Field3_Level = Field4_Level) Then
                                    RanNum = RandomGenerator.Next(1, 2)
                                    Select Case RanNum
                                        Case 1
                                            Depth1 = Reallocate_Amt * (Field1_Area / (Field1_Area + Field3_Area + Field4_Area)) / Field1_Area
                                            Depth2 = 0
                                            Depth3 = Reallocate_Amt * (Field3_Area / (Field1_Area + Field3_Area + Field4_Area)) / Field3_Area
                                            Depth4 = Reallocate_Amt * (Field4_Area / (Field1_Area + Field3_Area + Field4_Area)) / Field4_Area
                                            Temp_Flag1 = True
                                        Case 2
                                            Depth1 = 0
                                            Depth2 = Reallocate_Amt * (Field2_Area / (Field2_Area + Field3_Area + Field4_Area)) / Field2_Area
                                            Depth3 = Reallocate_Amt * (Field3_Area / (Field2_Area + Field3_Area + Field4_Area)) / Field3_Area
                                            Depth4 = Reallocate_Amt * (Field4_Area / (Field2_Area + Field3_Area + Field4_Area)) / Field4_Area
                                            Temp_Flag1 = True
                                    End Select
                                ElseIf (Field1_Level = Field3_Level) And (Field3_Level > Field2_Level) And (Field2_Level = Field4_Level) Then
                                    RanNum = RandomGenerator.Next(1, 2)
                                    Select Case RanNum
                                        Case 1 '2
                                            Depth1 = Reallocate_Amt * (Field1_Area / (Field1_Area + Field2_Area + Field3_Area)) / Field1_Area
                                            Depth2 = Reallocate_Amt * (Field2_Area / (Field1_Area + Field2_Area + Field3_Area)) / Field2_Area
                                            Depth3 = Reallocate_Amt * (Field3_Area / (Field1_Area + Field2_Area + Field3_Area)) / Field3_Area
                                            Depth4 = 0
                                            Temp_Flag1 = True
                                        Case 2 '4
                                            Depth1 = Reallocate_Amt * (Field1_Area / (Field1_Area + Field3_Area + Field4_Area)) / Field1_Area
                                            Depth2 = 0
                                            Depth3 = Reallocate_Amt * (Field3_Area / (Field1_Area + Field3_Area + Field4_Area)) / Field3_Area
                                            Depth4 = Reallocate_Amt * (Field4_Area / (Field1_Area + Field3_Area + Field4_Area)) / Field4_Area
                                            Temp_Flag1 = True
                                    End Select
                                ElseIf (Field1_Level = Field3_Level) And (Field3_Level < Field2_Level) And (Field2_Level = Field4_Level) Then
                                    RanNum = RandomGenerator.Next(1, 2)
                                    Select Case RanNum
                                        Case 1
                                            Depth1 = Reallocate_Amt * (Field1_Area / (Field1_Area + Field2_Area + Field4_Area)) / Field1_Area
                                            Depth2 = Reallocate_Amt * (Field2_Area / (Field1_Area + Field2_Area + Field4_Area)) / Field2_Area
                                            Depth3 = 0
                                            Depth4 = Reallocate_Amt * (Field4_Area / (Field1_Area + Field2_Area + Field4_Area)) / Field4_Area
                                            Temp_Flag1 = True
                                        Case 2 '3
                                            Depth1 = 0
                                            Depth2 = Reallocate_Amt * (Field2_Area / (Field2_Area + Field3_Area + Field4_Area)) / Field2_Area
                                            Depth3 = Reallocate_Amt * (Field3_Area / (Field2_Area + Field3_Area + Field4_Area)) / Field3_Area
                                            Depth4 = Reallocate_Amt * (Field4_Area / (Field2_Area + Field3_Area + Field4_Area)) / Field4_Area
                                            Temp_Flag1 = True
                                    End Select
                                ElseIf (Field1_Level = Field4_Level) And (Field4_Level > Field2_Level) And (Field2_Level = Field3_Level) Then
                                    RanNum = RandomGenerator.Next(2, 3)
                                    Select Case RanNum
                                        Case 2
                                            Depth1 = Reallocate_Amt * (Field1_Area / (Field1_Area + Field2_Area + Field4_Area)) / Field1_Area
                                            Depth2 = Reallocate_Amt * (Field2_Area / (Field1_Area + Field2_Area + Field4_Area)) / Field2_Area
                                            Depth3 = 0
                                            Depth4 = Reallocate_Amt * (Field4_Area / (Field1_Area + Field2_Area + Field4_Area)) / Field4_Area
                                            Temp_Flag1 = True
                                        Case 3
                                            Depth1 = Reallocate_Amt * (Field1_Area / (Field1_Area + Field3_Area + Field4_Area)) / Field1_Area
                                            Depth2 = 0
                                            Depth3 = Reallocate_Amt * (Field3_Area / (Field1_Area + Field3_Area + Field4_Area)) / Field3_Area
                                            Depth4 = Reallocate_Amt * (Field4_Area / (Field1_Area + Field3_Area + Field4_Area)) / Field4_Area
                                            Temp_Flag1 = True
                                    End Select
                                ElseIf (Field1_Level = Field4_Level) And (Field4_Level < Field2_Level) And (Field2_Level = Field3_Level) Then
                                    RanNum = RandomGenerator.Next(1, 2)
                                    Select Case RanNum
                                        Case 1
                                            Depth1 = Reallocate_Amt * (Field1_Area / (Field1_Area + Field2_Area + Field3_Area)) / Field1_Area
                                            Depth2 = Reallocate_Amt * (Field2_Area / (Field1_Area + Field2_Area + Field3_Area)) / Field2_Area
                                            Depth3 = Reallocate_Amt * (Field3_Area / (Field1_Area + Field2_Area + Field3_Area)) / Field3_Area
                                            Depth4 = 0
                                            Temp_Flag1 = True
                                        Case 2 '4
                                            Depth1 = 0
                                            Depth2 = Reallocate_Amt * (Field2_Area / (Field2_Area + Field3_Area + Field4_Area)) / Field2_Area
                                            Depth3 = Reallocate_Amt * (Field3_Area / (Field2_Area + Field3_Area + Field4_Area)) / Field3_Area
                                            Depth4 = Reallocate_Amt * (Field4_Area / (Field2_Area + Field3_Area + Field4_Area)) / Field4_Area
                                            Temp_Flag1 = True
                                    End Select
                                End If
                            ElseIf Temp_Flag1 And Not Temp_Flag2 Then
                                ' Now reallocating to two fields in the event that 3 was not sufficient
                                If (Field1_Level = Field2_Level) And (Field2_Level > Field3_Level) And (Field3_Level = Field4_Level) Then
                                    Depth1 = Reallocate_Amt * (Field1_Area / (Field1_Area + Field2_Area)) / Field1_Area
                                    Depth2 = Reallocate_Amt * (Field2_Area / (Field1_Area + Field2_Area)) / Field2_Area
                                    Depth3 = 0
                                    Depth4 = 0
                                    Temp_Flag2 = True
                                ElseIf (Field1_Level = Field2_Level) And (Field2_Level < Field3_Level) And (Field3_Level = Field4_Level) Then
                                    Depth1 = 0
                                    Depth2 = 0
                                    Depth3 = Reallocate_Amt * (Field3_Area / (Field3_Area + Field4_Area)) / Field3_Area
                                    Depth4 = Reallocate_Amt * (Field4_Area / (Field3_Area + Field4_Area)) / Field4_Area
                                    Temp_Flag2 = True
                                ElseIf (Field1_Level = Field3_Level) And (Field3_Level > Field2_Level) And (Field2_Level = Field4_Level) Then
                                    Depth1 = Reallocate_Amt * (Field1_Area / (Field1_Area + Field3_Area)) / Field1_Area
                                    Depth2 = 0
                                    Depth3 = Reallocate_Amt * (Field3_Area / (Field1_Area + Field3_Area)) / Field3_Area
                                    Depth4 = 0
                                    Temp_Flag2 = True
                                ElseIf (Field1_Level = Field3_Level) And (Field3_Level < Field2_Level) And (Field2_Level = Field4_Level) Then
                                    Depth1 = 0
                                    Depth2 = Reallocate_Amt * (Field2_Area / (Field2_Area + Field4_Area)) / Field2_Area
                                    Depth3 = 0
                                    Depth4 = Reallocate_Amt * (Field4_Area / (Field2_Area + Field4_Area)) / Field4_Area
                                    Temp_Flag2 = True
                                ElseIf (Field1_Level = Field4_Level) And (Field4_Level > Field2_Level) And (Field2_Level = Field3_Level) Then
                                    Depth1 = Reallocate_Amt * (Field1_Area / (Field1_Area + Field4_Area)) / Field1_Area
                                    Depth2 = 0
                                    Depth3 = 0
                                    Depth4 = Reallocate_Amt * (Field4_Area / (Field1_Area + Field4_Area)) / Field4_Area
                                    Temp_Flag2 = True
                                ElseIf (Field1_Level = Field4_Level) And (Field4_Level < Field2_Level) And (Field2_Level = Field3_Level) Then
                                    Depth1 = 0
                                    Depth2 = Reallocate_Amt * (Field2_Area / (Field2_Area + Field3_Area)) / Field2_Area
                                    Depth3 = Reallocate_Amt * (Field3_Area / (Field2_Area + Field3_Area)) / Field3_Area
                                    Depth4 = 0
                                    Temp_Flag2 = True
                                End If
                            ElseIf Temp_Flag1 And Temp_Flag2 Then
                                If (Field1_Level = Field2_Level) And (Field2_Level > Field3_Level) And (Field3_Level = Field4_Level) Then
                                    RanNum = RandomGenerator.Next(1, 2)
                                    Select Case RanNum
                                        Case 1
                                            Depth1 = Reallocate_Amt / Field1_Area
                                            Depth2 = 0
                                            Depth3 = 0
                                            Depth4 = 0
                                        Case 2
                                            Depth1 = 0
                                            Depth2 = Reallocate_Amt / Field2_Area
                                            Depth3 = 0
                                            Depth4 = 0
                                    End Select
                                ElseIf (Field1_Level = Field2_Level) And (Field2_Level < Field3_Level) And (Field3_Level = Field4_Level) Then
                                    RanNum = RandomGenerator.Next(3, 4)
                                    Select Case RanNum
                                        Case 3
                                            Depth1 = 0
                                            Depth2 = 0
                                            Depth3 = Reallocate_Amt / Field3_Area
                                            Depth4 = 0
                                        Case 4
                                            Depth1 = 0
                                            Depth2 = 0
                                            Depth3 = 0
                                            Depth4 = Reallocate_Amt / Field4_Area
                                    End Select
                                ElseIf (Field1_Level = Field3_Level) And (Field3_Level > Field2_Level) And (Field2_Level = Field4_Level) Then
                                    RanNum = RandomGenerator.Next(1, 2)
                                    Select Case RanNum
                                        Case 1
                                            Depth1 = Reallocate_Amt / Field1_Area
                                            Depth2 = 0
                                            Depth3 = 0
                                            Depth4 = 0
                                        Case 2 '3
                                            Depth1 = 0
                                            Depth2 = 0
                                            Depth3 = Reallocate_Amt / Field3_Area
                                            Depth4 = 0
                                    End Select
                                ElseIf (Field1_Level = Field3_Level) And (Field3_Level < Field2_Level) And (Field2_Level = Field4_Level) Then
                                    RanNum = RandomGenerator.Next(2, 3)
                                    Select Case RanNum
                                        Case 2
                                            Depth1 = 0
                                            Depth2 = Reallocate_Amt / Field2_Area
                                            Depth3 = 0
                                            Depth4 = 0
                                        Case 3 '4
                                            Depth1 = 0
                                            Depth2 = 0
                                            Depth3 = 0
                                            Depth4 = Reallocate_Amt / Field4_Area
                                    End Select
                                ElseIf (Field1_Level = Field4_Level) And (Field4_Level > Field2_Level) And (Field2_Level = Field3_Level) Then
                                    RanNum = RandomGenerator.Next(1, 2)
                                    Select Case RanNum
                                        Case 1
                                            Depth1 = Reallocate_Amt / Field1_Area
                                            Depth2 = 0
                                            Depth3 = 0
                                            Depth4 = 0
                                        Case 2 '4
                                            Depth1 = 0
                                            Depth2 = 0
                                            Depth3 = 0
                                            Depth4 = Reallocate_Amt / Field4_Area
                                    End Select
                                ElseIf (Field1_Level = Field4_Level) And (Field4_Level < Field2_Level) And (Field2_Level = Field3_Level) Then
                                    RanNum = RandomGenerator.Next(2, 3)
                                    Select Case RanNum
                                        Case 2
                                            Depth1 = 0
                                            Depth2 = Reallocate_Amt / Field2_Area
                                            Depth3 = 0
                                            Depth4 = 0
                                        Case 3
                                            Depth1 = 0
                                            Depth2 = 0
                                            Depth3 = Reallocate_Amt / Field3_Area
                                            Depth4 = 0
                                    End Select
                                End If
                            End If
                            'Now dealing with heirarchtical structure where none of the field levels are equal
                        ElseIf (Field1_Level <> Field2_Level) And (Field2_Level <> Field3_Level) And (Field3_Level <> Field4_Level) And (Field1_Level <> Field3_Level) And (Field1_Level <> Field4_Level) And (Field2_Level <> Field4_Level) Then
                            If Not Temp_Flag1 And Not Temp_Flag2 Then
                                If (Field1_Level > Field2_Level) And (Field2_Level > Field3_Level) And (Field3_Level > Field4_Level) Then '1
                                    Depth1 = Reallocate_Amt * (Field1_Area / (Field1_Area + Field2_Area + Field3_Area)) / Field1_Area
                                    Depth2 = Reallocate_Amt * (Field2_Area / (Field1_Area + Field2_Area + Field3_Area)) / Field2_Area
                                    Depth3 = Reallocate_Amt * (Field3_Area / (Field1_Area + Field2_Area + Field3_Area)) / Field3_Area
                                    Depth4 = 0
                                    Temp_Flag1 = True
                                ElseIf (Field1_Level > Field2_Level) And (Field2_Level > Field4_Level) And (Field4_Level > Field3_Level) Then '2
                                    Depth1 = Reallocate_Amt * (Field1_Area / (Field1_Area + Field2_Area + Field4_Area)) / Field1_Area
                                    Depth2 = Reallocate_Amt * (Field2_Area / (Field1_Area + Field2_Area + Field4_Area)) / Field2_Area
                                    Depth3 = 0
                                    Depth4 = Reallocate_Amt * (Field4_Area / (Field1_Area + Field2_Area + Field4_Area)) / Field4_Area
                                    Temp_Flag1 = True
                                ElseIf (Field1_Level > Field3_Level) And (Field3_Level > Field2_Level) And (Field2_Level > Field4_Level) Then '3
                                    Depth1 = Reallocate_Amt * (Field1_Area / (Field1_Area + Field2_Area + Field3_Area)) / Field1_Area
                                    Depth2 = Reallocate_Amt * (Field2_Area / (Field1_Area + Field2_Area + Field3_Area)) / Field2_Area
                                    Depth3 = Reallocate_Amt * (Field3_Area / (Field1_Area + Field2_Area + Field3_Area)) / Field3_Area
                                    Depth4 = 0
                                    Temp_Flag1 = True
                                ElseIf (Field1_Level > Field3_Level) And (Field3_Level > Field2_Level) And (Field2_Level > Field4_Level) Then '4
                                    Depth1 = Reallocate_Amt * (Field1_Area / (Field1_Area + Field2_Area + Field3_Area)) / Field1_Area
                                    Depth2 = Reallocate_Amt * (Field2_Area / (Field1_Area + Field2_Area + Field3_Area)) / Field2_Area
                                    Depth3 = Reallocate_Amt * (Field3_Area / (Field1_Area + Field2_Area + Field3_Area)) / Field3_Area
                                    Depth4 = 0
                                    Temp_Flag1 = True
                                ElseIf (Field1_Level > Field4_Level) And (Field4_Level > Field2_Level) And (Field2_Level > Field3_Level) Then '5
                                    Depth1 = Reallocate_Amt * (Field1_Area / (Field1_Area + Field2_Area + Field4_Area)) / Field1_Area
                                    Depth2 = Reallocate_Amt * (Field2_Area / (Field1_Area + Field2_Area + Field4_Area)) / Field2_Area
                                    Depth3 = 0
                                    Depth4 = Reallocate_Amt * (Field4_Area / (Field1_Area + Field2_Area + Field4_Area)) / Field4_Area
                                    Temp_Flag1 = True
                                ElseIf (Field1_Level > Field4_Level) And (Field4_Level > Field3_Level) And (Field3_Level > Field2_Level) Then '6
                                    Depth1 = Reallocate_Amt * (Field1_Area / (Field1_Area + Field3_Area + Field4_Area)) / Field1_Area
                                    Depth2 = 0
                                    Depth3 = Reallocate_Amt * (Field3_Area / (Field1_Area + Field3_Area + Field4_Area)) / Field3_Area
                                    Depth4 = Reallocate_Amt * (Field4_Area / (Field1_Area + Field3_Area + Field4_Area)) / Field4_Area
                                    Temp_Flag1 = True
                                ElseIf (Field2_Level > Field1_Level) And (Field1_Level > Field3_Level) And (Field3_Level > Field4_Level) Then '7
                                    Depth1 = Reallocate_Amt * (Field1_Area / (Field1_Area + Field2_Area + Field3_Area)) / Field1_Area
                                    Depth2 = Reallocate_Amt * (Field2_Area / (Field1_Area + Field2_Area + Field3_Area)) / Field2_Area
                                    Depth3 = Reallocate_Amt * (Field3_Area / (Field1_Area + Field2_Area + Field3_Area)) / Field3_Area
                                    Depth4 = 0
                                    Temp_Flag1 = True
                                ElseIf (Field2_Level > Field1_Level) And (Field1_Level > Field4_Level) And (Field4_Level > Field3_Level) Then '8
                                    Depth1 = Reallocate_Amt * (Field1_Area / (Field1_Area + Field2_Area + Field4_Area)) / Field1_Area
                                    Depth2 = Reallocate_Amt * (Field2_Area / (Field1_Area + Field2_Area + Field4_Area)) / Field2_Area
                                    Depth3 = 0
                                    Depth4 = Reallocate_Amt * (Field4_Area / (Field1_Area + Field2_Area + Field4_Area)) / Field4_Area
                                    Temp_Flag1 = True
                                ElseIf (Field2_Level > Field3_Level) And (Field3_Level > Field1_Level) And (Field1_Level > Field4_Level) Then '9
                                    Depth1 = Reallocate_Amt * (Field1_Area / (Field1_Area + Field2_Area + Field3_Area)) / Field1_Area
                                    Depth2 = Reallocate_Amt * (Field2_Area / (Field1_Area + Field2_Area + Field3_Area)) / Field2_Area
                                    Depth3 = Reallocate_Amt * (Field3_Area / (Field1_Area + Field2_Area + Field3_Area)) / Field3_Area
                                    Depth4 = 0
                                    Temp_Flag1 = True
                                ElseIf (Field2_Level > Field3_Level) And (Field3_Level > Field4_Level) And (Field4_Level > Field1_Level) Then '10
                                    Depth1 = 0
                                    Depth2 = Reallocate_Amt * (Field2_Area / (Field2_Area + Field3_Area + Field4_Area)) / Field2_Area
                                    Depth3 = Reallocate_Amt * (Field3_Area / (Field2_Area + Field3_Area + Field4_Area)) / Field3_Area
                                    Depth4 = Reallocate_Amt * (Field4_Area / (Field2_Area + Field3_Area + Field4_Area)) / Field4_Area
                                    Temp_Flag1 = True
                                ElseIf (Field2_Level > Field4_Level) And (Field4_Level > Field1_Level) And (Field1_Level > Field3_Level) Then '11
                                    Depth1 = Reallocate_Amt * (Field1_Area / (Field1_Area + Field2_Area + Field4_Area)) / Field1_Area
                                    Depth2 = Reallocate_Amt * (Field2_Area / (Field1_Area + Field2_Area + Field4_Area)) / Field2_Area
                                    Depth3 = 0
                                    Depth4 = Reallocate_Amt * (Field4_Area / (Field1_Area + Field2_Area + Field4_Area)) / Field4_Area
                                    Temp_Flag1 = True
                                ElseIf (Field2_Level > Field4_Level) And (Field4_Level > Field3_Level) And (Field3_Level > Field1_Level) Then '12
                                    Depth1 = 0
                                    Depth2 = Reallocate_Amt * (Field2_Area / (Field2_Area + Field3_Area + Field4_Area)) / Field2_Area
                                    Depth3 = Reallocate_Amt * (Field3_Area / (Field2_Area + Field3_Area + Field4_Area)) / Field3_Area
                                    Depth4 = Reallocate_Amt * (Field4_Area / (Field2_Area + Field3_Area + Field4_Area)) / Field4_Area
                                    Temp_Flag1 = True
                                ElseIf (Field3_Level > Field1_Level) And (Field1_Level > Field2_Level) And (Field2_Level > Field4_Level) Then '13
                                    Depth1 = Reallocate_Amt * (Field1_Area / (Field1_Area + Field2_Area + Field3_Area)) / Field1_Area
                                    Depth2 = Reallocate_Amt * (Field2_Area / (Field1_Area + Field2_Area + Field3_Area)) / Field2_Area
                                    Depth3 = Reallocate_Amt * (Field3_Area / (Field1_Area + Field2_Area + Field3_Area)) / Field3_Area
                                    Depth4 = 0
                                    Temp_Flag1 = True
                                ElseIf (Field3_Level > Field1_Level) And (Field1_Level > Field4_Level) And (Field4_Level > Field2_Level) Then '14
                                    Depth1 = Reallocate_Amt * (Field1_Area / (Field1_Area + Field3_Area + Field4_Area)) / Field1_Area
                                    Depth2 = 0
                                    Depth3 = Reallocate_Amt * (Field3_Area / (Field1_Area + Field3_Area + Field4_Area)) / Field3_Area
                                    Depth4 = Reallocate_Amt * (Field4_Area / (Field1_Area + Field3_Area + Field4_Area)) / Field4_Area
                                    Temp_Flag1 = True
                                ElseIf (Field3_Level > Field2_Level) And (Field2_Level > Field1_Level) And (Field1_Level > Field4_Level) Then '15
                                    Depth1 = Reallocate_Amt * (Field1_Area / (Field1_Area + Field2_Area + Field3_Area)) / Field1_Area
                                    Depth2 = Reallocate_Amt * (Field2_Area / (Field1_Area + Field2_Area + Field3_Area)) / Field2_Area
                                    Depth3 = Reallocate_Amt * (Field3_Area / (Field1_Area + Field2_Area + Field3_Area)) / Field3_Area
                                    Depth4 = 0
                                    Temp_Flag1 = True
                                ElseIf (Field3_Level > Field2_Level) And (Field2_Level > Field4_Level) And (Field4_Level > Field1_Level) Then '16
                                    Depth1 = 0
                                    Depth2 = Reallocate_Amt * (Field2_Area / (Field2_Area + Field3_Area + Field4_Area)) / Field2_Area
                                    Depth3 = Reallocate_Amt * (Field3_Area / (Field2_Area + Field3_Area + Field4_Area)) / Field3_Area
                                    Depth4 = Reallocate_Amt * (Field4_Area / (Field2_Area + Field3_Area + Field4_Area)) / Field4_Area
                                    Temp_Flag1 = True
                                ElseIf (Field3_Level > Field4_Level) And (Field2_Level > Field1_Level) And (Field1_Level > Field2_Level) Then '17
                                    Depth1 = Reallocate_Amt * (Field1_Area / (Field1_Area + Field3_Area + Field4_Area)) / Field1_Area
                                    Depth2 = 0
                                    Depth3 = Reallocate_Amt * (Field3_Area / (Field1_Area + Field3_Area + Field4_Area)) / Field3_Area
                                    Depth4 = Reallocate_Amt * (Field4_Area / (Field1_Area + Field3_Area + Field4_Area)) / Field4_Area
                                    Temp_Flag1 = True
                                ElseIf (Field3_Level > Field4_Level) And (Field4_Level > Field2_Level) And (Field2_Level > Field1_Level) Then '18
                                    Depth1 = 0
                                    Depth2 = Reallocate_Amt * (Field2_Area / (Field2_Area + Field3_Area + Field4_Area)) / Field2_Area
                                    Depth3 = Reallocate_Amt * (Field3_Area / (Field2_Area + Field3_Area + Field4_Area)) / Field3_Area
                                    Depth4 = Reallocate_Amt * (Field4_Area / (Field2_Area + Field3_Area + Field4_Area)) / Field4_Area
                                    Temp_Flag1 = True
                                ElseIf (Field4_Level > Field1_Level) And (Field1_Level > Field2_Level) And (Field1_Level > Field3_Level) Then '19
                                    Depth1 = Reallocate_Amt * (Field1_Area / (Field1_Area + Field2_Area + Field4_Area)) / Field1_Area
                                    Depth2 = Reallocate_Amt * (Field2_Area / (Field1_Area + Field2_Area + Field4_Area)) / Field2_Area
                                    Depth3 = 0
                                    Depth4 = Reallocate_Amt * (Field4_Area / (Field1_Area + Field2_Area + Field4_Area)) / Field4_Area
                                    Temp_Flag1 = True
                                ElseIf (Field4_Level > Field1_Level) And (Field1_Level > Field3_Level) And (Field3_Level > Field2_Level) Then '20
                                    Depth1 = Reallocate_Amt * (Field1_Area / (Field1_Area + Field3_Area + Field4_Area)) / Field1_Area
                                    Depth2 = 0
                                    Depth3 = Reallocate_Amt * (Field3_Area / (Field1_Area + Field3_Area + Field4_Area)) / Field3_Area
                                    Depth4 = Reallocate_Amt * (Field4_Area / (Field1_Area + Field3_Area + Field4_Area)) / Field4_Area
                                    Temp_Flag1 = True
                                ElseIf (Field4_Level > Field2_Level) And (Field2_Level > Field1_Level) And (Field1_Level > Field3_Level) Then '21
                                    Depth1 = Reallocate_Amt * (Field1_Area / (Field1_Area + Field2_Area + Field4_Area)) / Field1_Area
                                    Depth2 = Reallocate_Amt * (Field2_Area / (Field1_Area + Field2_Area + Field4_Area)) / Field2_Area
                                    Depth3 = 0
                                    Depth4 = Reallocate_Amt * (Field4_Area / (Field1_Area + Field2_Area + Field4_Area)) / Field4_Area
                                    Temp_Flag1 = True
                                ElseIf (Field4_Level > Field2_Level) And (Field2_Level > Field3_Level) And (Field3_Level > Field1_Level) Then '22
                                    Depth1 = 0
                                    Depth2 = Reallocate_Amt * (Field2_Area / (Field2_Area + Field3_Area + Field4_Area)) / Field2_Area
                                    Depth3 = Reallocate_Amt * (Field3_Area / (Field2_Area + Field3_Area + Field4_Area)) / Field3_Area
                                    Depth4 = Reallocate_Amt * (Field4_Area / (Field2_Area + Field3_Area + Field4_Area)) / Field4_Area
                                    Temp_Flag1 = True
                                ElseIf (Field4_Level > Field3_Level) And (Field3_Level > Field1_Level) And (Field1_Level > Field2_Level) Then '23
                                    Depth1 = Reallocate_Amt * (Field1_Area / (Field1_Area + Field3_Area + Field4_Area)) / Field1_Area
                                    Depth2 = 0
                                    Depth3 = Reallocate_Amt * (Field3_Area / (Field1_Area + Field3_Area + Field4_Area)) / Field3_Area
                                    Depth4 = Reallocate_Amt * (Field4_Area / (Field1_Area + Field3_Area + Field4_Area)) / Field4_Area
                                    Temp_Flag1 = True
                                ElseIf (Field4_Level > Field3_Level) And (Field3_Level > Field2_Level) And (Field2_Level > Field1_Level) Then '24
                                    Depth1 = 0
                                    Depth2 = Reallocate_Amt * (Field2_Area / (Field2_Area + Field3_Area + Field4_Area)) / Field2_Area
                                    Depth3 = Reallocate_Amt * (Field3_Area / (Field2_Area + Field3_Area + Field4_Area)) / Field3_Area
                                    Depth4 = Reallocate_Amt * (Field4_Area / (Field2_Area + Field3_Area + Field4_Area)) / Field4_Area
                                    Temp_Flag1 = True
                                End If
                            ElseIf Temp_Flag1 And Not Temp_Flag2 Then
                                If (Field1_Level > Field2_Level) And (Field2_Level > Field3_Level) And (Field3_Level > Field4_Level) Then '1
                                    Depth1 = Reallocate_Amt * (Field1_Area / (Field1_Area + Field2_Area)) / Field1_Area
                                    Depth2 = Reallocate_Amt * (Field2_Area / (Field1_Area + Field2_Area)) / Field2_Area
                                    Depth3 = 0
                                    Depth4 = 0
                                    Temp_Flag2 = True
                                ElseIf (Field1_Level > Field2_Level) And (Field2_Level > Field4_Level) And (Field4_Level > Field3_Level) Then '2
                                    Depth1 = Reallocate_Amt * (Field1_Area / (Field1_Area + Field2_Area)) / Field1_Area
                                    Depth2 = Reallocate_Amt * (Field2_Area / (Field1_Area + Field2_Area)) / Field2_Area
                                    Depth3 = 0
                                    Depth4 = 0
                                    Temp_Flag2 = True
                                ElseIf (Field1_Level > Field3_Level) And (Field3_Level > Field2_Level) And (Field2_Level > Field4_Level) Then '3
                                    Depth1 = Reallocate_Amt * (Field1_Area / (Field1_Area + Field3_Area)) / Field1_Area
                                    Depth2 = 0
                                    Depth3 = Reallocate_Amt * (Field3_Area / (Field1_Area + Field3_Area)) / Field3_Area
                                    Depth4 = 0
                                    Temp_Flag2 = True
                                ElseIf (Field1_Level > Field3_Level) And (Field3_Level > Field2_Level) And (Field2_Level > Field4_Level) Then '4
                                    Depth1 = Reallocate_Amt * (Field1_Area / (Field1_Area + Field3_Area)) / Field1_Area
                                    Depth2 = 0
                                    Depth3 = Reallocate_Amt * (Field3_Area / (Field1_Area + Field3_Area)) / Field3_Area
                                    Depth4 = 0
                                    Temp_Flag2 = True
                                ElseIf (Field1_Level > Field4_Level) And (Field4_Level > Field2_Level) And (Field2_Level > Field3_Level) Then '5
                                    Depth1 = Reallocate_Amt * (Field1_Area / (Field1_Area + Field4_Area)) / Field1_Area
                                    Depth2 = 0
                                    Depth3 = 0
                                    Depth4 = Reallocate_Amt * (Field4_Area / (Field1_Area + Field4_Area)) / Field4_Area
                                    Temp_Flag2 = True
                                ElseIf (Field1_Level > Field4_Level) And (Field4_Level > Field3_Level) And (Field3_Level > Field2_Level) Then '6
                                    Depth1 = Reallocate_Amt * (Field1_Area / (Field1_Area + Field4_Area)) / Field1_Area
                                    Depth2 = 0
                                    Depth3 = 0
                                    Depth4 = Reallocate_Amt * (Field4_Area / (Field1_Area + Field4_Area)) / Field4_Area
                                    Temp_Flag2 = True
                                ElseIf (Field2_Level > Field1_Level) And (Field2_Level > Field3_Level) And (Field3_Level > Field4_Level) Then '7
                                    Depth1 = Reallocate_Amt * (Field1_Area / (Field1_Area + Field2_Area)) / Field1_Area
                                    Depth2 = Reallocate_Amt * (Field2_Area / (Field1_Area + Field2_Area)) / Field2_Area
                                    Depth3 = 0
                                    Depth4 = 0
                                    Temp_Flag2 = True
                                ElseIf (Field2_Level > Field1_Level) And (Field1_Level > Field4_Level) And (Field4_Level > Field3_Level) Then '8
                                    Depth1 = Reallocate_Amt * (Field1_Area / (Field1_Area + Field2_Area)) / Field1_Area
                                    Depth2 = Reallocate_Amt * (Field2_Area / (Field1_Area + Field2_Area)) / Field2_Area
                                    Depth3 = 0
                                    Depth4 = 0
                                    Temp_Flag2 = True
                                ElseIf (Field2_Level > Field3_Level) And (Field3_Level > Field1_Level) And (Field1_Level > Field4_Level) Then '9
                                    Depth1 = 0
                                    Depth2 = Reallocate_Amt * (Field2_Area / (Field2_Area + Field3_Area)) / Field2_Area
                                    Depth3 = Reallocate_Amt * (Field3_Area / (Field2_Area + Field3_Area)) / Field3_Area
                                    Depth4 = 0
                                    Temp_Flag2 = True
                                ElseIf (Field2_Level > Field3_Level) And (Field3_Level > Field4_Level) And (Field4_Level > Field1_Level) Then '10
                                    Depth1 = 0
                                    Depth2 = Reallocate_Amt * (Field2_Area / (Field2_Area + Field3_Area)) / Field2_Area
                                    Depth3 = Reallocate_Amt * (Field3_Area / (Field2_Area + Field3_Area)) / Field3_Area
                                    Depth4 = 0
                                    Temp_Flag2 = True
                                ElseIf (Field2_Level > Field4_Level) And (Field4_Level > Field1_Level) And (Field1_Level > Field3_Level) Then '11
                                    Depth1 = 0
                                    Depth2 = Reallocate_Amt * (Field2_Area / (Field2_Area + Field4_Area)) / Field2_Area
                                    Depth3 = 0
                                    Depth4 = Reallocate_Amt * (Field4_Area / (Field2_Area + Field4_Area)) / Field4_Area
                                    Temp_Flag2 = True
                                ElseIf (Field2_Level > Field4_Level) And (Field4_Level > Field3_Level) And (Field3_Level > Field1_Level) Then '12
                                    Depth1 = 0
                                    Depth2 = Reallocate_Amt * (Field2_Area / (Field2_Area + Field4_Area)) / Field2_Area
                                    Depth3 = 0
                                    Depth4 = Reallocate_Amt * (Field4_Area / (Field2_Area + Field4_Area)) / Field4_Area
                                    Temp_Flag2 = True
                                ElseIf (Field3_Level > Field1_Level) And (Field1_Level > Field2_Level) And (Field2_Level > Field4_Level) Then '13
                                    Depth1 = Reallocate_Amt * (Field1_Area / (Field1_Area + Field3_Area)) / Field1_Area
                                    Depth2 = 0
                                    Depth3 = Reallocate_Amt * (Field3_Area / (Field1_Area + Field3_Area)) / Field3_Area
                                    Depth4 = 0
                                    Temp_Flag2 = True
                                ElseIf (Field3_Level > Field1_Level) And (Field1_Level > Field4_Level) And (Field4_Level > Field2_Level) Then '14
                                    Depth1 = Reallocate_Amt * (Field1_Area / (Field1_Area + Field3_Area)) / Field1_Area
                                    Depth2 = 0
                                    Depth3 = Reallocate_Amt * (Field3_Area / (Field1_Area + Field3_Area)) / Field3_Area
                                    Depth4 = 0
                                    Temp_Flag2 = True
                                ElseIf (Field3_Level > Field2_Level) And (Field3_Level > Field1_Level) And (Field1_Level > Field4_Level) Then '15
                                    Depth1 = 0
                                    Depth2 = Reallocate_Amt * (Field2_Area / (Field2_Area + Field3_Area)) / Field2_Area
                                    Depth3 = Reallocate_Amt * (Field3_Area / (Field2_Area + Field3_Area)) / Field3_Area
                                    Depth4 = 0
                                    Temp_Flag2 = True
                                ElseIf (Field3_Level > Field2_Level) And (Field2_Level > Field4_Level) And (Field4_Level > Field1_Level) Then '16
                                    Depth1 = 0
                                    Depth2 = Reallocate_Amt * (Field2_Area / (Field2_Area + Field3_Area)) / Field2_Area
                                    Depth3 = Reallocate_Amt * (Field3_Area / (Field2_Area + Field3_Area)) / Field3_Area
                                    Depth4 = 0
                                    Temp_Flag2 = True
                                ElseIf (Field3_Level > Field4_Level) And (Field4_Level > Field1_Level) And (Field1_Level > Field2_Level) Then '17
                                    Depth1 = 0
                                    Depth2 = 0
                                    Depth3 = Reallocate_Amt * (Field3_Area / (Field3_Area + Field4_Area)) / Field3_Area
                                    Depth4 = Reallocate_Amt * (Field4_Area / (Field3_Area + Field4_Area)) / Field4_Area
                                    Temp_Flag2 = True
                                ElseIf (Field3_Level > Field4_Level) And (Field4_Level > Field2_Level) And (Field2_Level > Field1_Level) Then '18
                                    Depth1 = 0
                                    Depth2 = 0
                                    Depth3 = Reallocate_Amt * (Field3_Area / (Field3_Area + Field4_Area)) / Field3_Area
                                    Depth4 = Reallocate_Amt * (Field4_Area / (Field3_Area + Field4_Area)) / Field4_Area
                                    Temp_Flag2 = True
                                ElseIf (Field4_Level > Field1_Level) And (Field1_Level > Field2_Level) And (Field2_Level > Field3_Level) Then '19
                                    Depth1 = Reallocate_Amt * (Field1_Area / (Field1_Area + Field4_Area)) / Field1_Area
                                    Depth2 = 0
                                    Depth3 = 0
                                    Depth4 = Reallocate_Amt * (Field4_Area / (Field1_Area + Field4_Area)) / Field4_Area
                                    Temp_Flag2 = True
                                ElseIf (Field4_Level > Field1_Level) And (Field1_Level > Field3_Level) And (Field3_Level > Field2_Level) Then '20
                                    Depth1 = Reallocate_Amt * (Field1_Area / (Field1_Area + Field4_Area)) / Field1_Area
                                    Depth2 = 0
                                    Depth3 = 0
                                    Depth4 = Reallocate_Amt * (Field4_Area / (Field1_Area + Field4_Area)) / Field4_Area
                                    Temp_Flag2 = True
                                ElseIf (Field4_Level > Field2_Level) And (Field2_Level > Field1_Level) And (Field1_Level > Field3_Level) Then '21
                                    Depth1 = 0
                                    Depth2 = Reallocate_Amt * (Field2_Area / (Field2_Area + Field4_Area)) / Field2_Area
                                    Depth3 = 0
                                    Depth4 = Reallocate_Amt * (Field4_Area / (Field2_Area + Field4_Area)) / Field4_Area
                                    Temp_Flag2 = True
                                ElseIf (Field4_Level > Field2_Level) And (Field2_Level > Field3_Level) And (Field1_Level > Field1_Level) Then '22
                                    Depth1 = 0
                                    Depth2 = Reallocate_Amt * (Field2_Area / (Field2_Area + Field4_Area)) / Field2_Area
                                    Depth3 = 0
                                    Depth4 = Reallocate_Amt * (Field4_Area / (Field2_Area + Field4_Area)) / Field4_Area
                                    Temp_Flag2 = True
                                ElseIf (Field4_Level > Field3_Level) And (Field3_Level > Field1_Level) And (Field1_Level > Field2_Level) Then '23
                                    Depth1 = 0
                                    Depth2 = 0
                                    Depth3 = Reallocate_Amt * (Field3_Area / (Field3_Area + Field4_Area)) / Field3_Area
                                    Depth4 = Reallocate_Amt * (Field4_Area / (Field3_Area + Field4_Area)) / Field4_Area
                                    Temp_Flag2 = True
                                ElseIf (Field4_Level > Field3_Level) And (Field3_Level > Field2_Level) And (Field2_Level > Field1_Level) Then '24
                                    Depth1 = 0
                                    Depth2 = 0
                                    Depth3 = Reallocate_Amt * (Field3_Area / (Field3_Area + Field4_Area)) / Field3_Area
                                    Depth4 = Reallocate_Amt * (Field4_Area / (Field3_Area + Field4_Area)) / Field4_Area
                                    Temp_Flag2 = True
                                End If
                            ElseIf Temp_Flag1 And Temp_Flag2 Then
                                If (Field1_Level > Field2_Level) And (Field2_Level > Field3_Level) And (Field3_Level > Field4_Level) Then '1
                                    Depth1 = Reallocate_Amt / Field1_Area
                                    Depth2 = 0
                                    Depth3 = 0
                                    Depth4 = 0
                                ElseIf (Field1_Level > Field2_Level) And (Field2_Level > Field4_Level) And (Field4_Level > Field3_Level) Then '2
                                    Depth1 = Reallocate_Amt / Field1_Area
                                    Depth2 = 0
                                    Depth3 = 0
                                    Depth4 = 0
                                ElseIf (Field1_Level > Field3_Level) And (Field3_Level > Field2_Level) And (Field2_Level > Field4_Level) Then '3
                                    Depth1 = Reallocate_Amt / Field1_Area
                                    Depth2 = 0
                                    Depth3 = 0
                                    Depth4 = 0
                                ElseIf (Field1_Level > Field3_Level) And (Field3_Level > Field2_Level) And (Field2_Level > Field4_Level) Then '4
                                    Depth1 = Reallocate_Amt / Field1_Area
                                    Depth2 = 0
                                    Depth3 = 0
                                    Depth4 = 0
                                ElseIf (Field1_Level > Field4_Level) And (Field4_Level > Field2_Level) And (Field2_Level > Field3_Level) Then '5
                                    Depth1 = Reallocate_Amt / Field1_Area
                                    Depth2 = 0
                                    Depth3 = 0
                                    Depth4 = 0
                                ElseIf (Field1_Level > Field4_Level) And (Field4_Level > Field3_Level) And (Field3_Level > Field2_Level) Then '6
                                    Depth1 = Reallocate_Amt / Field1_Area
                                    Depth2 = 0
                                    Depth3 = 0
                                    Depth4 = 0
                                ElseIf (Field2_Level > Field1_Level) And (Field1_Level > Field3_Level) And (Field3_Level > Field4_Level) Then '7
                                    Depth1 = 0
                                    Depth2 = (Reallocate_Amt / Field2_Area)
                                    Depth3 = 0
                                    Depth4 = 0
                                ElseIf (Field2_Level > Field1_Level) And (Field1_Level > Field4_Level) And (Field4_Level > Field3_Level) Then '8
                                    Depth1 = 0
                                    Depth2 = Reallocate_Amt / Field2_Area
                                    Depth3 = 0
                                    Depth4 = 0
                                ElseIf (Field2_Level > Field3_Level) And (Field3_Level > Field1_Level) And (Field1_Level > Field4_Level) Then '9
                                    Depth1 = 0
                                    Depth2 = Reallocate_Amt / Field2_Area
                                    Depth3 = 0
                                    Depth4 = 0
                                ElseIf (Field2_Level > Field3_Level) And (Field3_Level > Field4_Level) And (Field4_Level > Field1_Level) Then '10
                                    Depth1 = 0
                                    Depth2 = Reallocate_Amt / Field2_Area
                                    Depth3 = 0
                                    Depth4 = 0
                                ElseIf (Field2_Level > Field4_Level) And (Field4_Level > Field1_Level) And (Field1_Level > Field3_Level) Then '11
                                    Depth1 = 0
                                    Depth2 = Reallocate_Amt / Field2_Area
                                    Depth3 = 0
                                    Depth4 = 0
                                ElseIf (Field2_Level > Field4_Level) And (Field4_Level > Field3_Level) And (Field3_Level > Field1_Level) Then '12
                                    Depth1 = 0
                                    Depth2 = Reallocate_Amt / Field2_Area
                                    Depth3 = 0
                                    Depth4 = 0
                                ElseIf (Field3_Level > Field1_Level) And (Field1_Level > Field2_Level) And (Field2_Level > Field4_Level) Then '13
                                    Depth1 = 0
                                    Depth2 = 0
                                    Depth3 = Reallocate_Amt / Field3_Area
                                    Depth4 = 0
                                ElseIf (Field3_Level > Field1_Level) And (Field1_Level > Field4_Level) And (Field4_Level > Field2_Level) Then '14
                                    Depth1 = 0
                                    Depth2 = 0
                                    Depth3 = Reallocate_Amt / Field3_Area
                                    Depth4 = 0
                                ElseIf (Field3_Level > Field2_Level) And (Field2_Level > Field1_Level) And (Field1_Level > Field4_Level) Then '15
                                    Depth1 = 0
                                    Depth2 = 0
                                    Depth3 = Reallocate_Amt / Field3_Area
                                    Depth4 = 0
                                ElseIf (Field3_Level > Field2_Level) And (Field2_Level > Field4_Level) And (Field4_Level > Field1_Level) Then '16
                                    Depth1 = 0
                                    Depth2 = 0
                                    Depth3 = Reallocate_Amt / Field3_Area
                                    Depth4 = 0
                                ElseIf (Field3_Level > Field4_Level) And (Field4_Level > Field1_Level) And (Field1_Level > Field2_Level) Then '17
                                    Depth1 = 0
                                    Depth2 = 0
                                    Depth3 = Reallocate_Amt / Field3_Area
                                    Depth4 = 0
                                ElseIf (Field3_Level > Field4_Level) And (Field4_Level > Field2_Level) And (Field2_Level > Field1_Level) Then '18
                                    Depth1 = 0
                                    Depth2 = 0
                                    Depth3 = Reallocate_Amt / Field3_Area
                                    Depth4 = 0
                                ElseIf (Field4_Level > Field1_Level) And (Field1_Level > Field2_Level) And (Field2_Level > Field3_Level) Then '19
                                    Depth1 = 0
                                    Depth2 = 0
                                    Depth3 = 0
                                    Depth4 = Reallocate_Amt / Field4_Area
                                ElseIf (Field4_Level > Field1_Level) And (Field1_Level > Field3_Level) And (Field3_Level > Field2_Level) Then '20
                                    Depth1 = 0
                                    Depth2 = 0
                                    Depth3 = 0
                                    Depth4 = Reallocate_Amt / Field4_Area
                                ElseIf (Field4_Level > Field2_Level) And (Field2_Level > Field1_Level) And (Field1_Level > Field3_Level) Then '21
                                    Depth1 = 0
                                    Depth2 = 0
                                    Depth3 = 0
                                    Depth4 = Reallocate_Amt / Field4_Area
                                ElseIf (Field4_Level > Field2_Level) And (Field2_Level > Field3_Level) And (Field3_Level > Field1_Level) Then '22
                                    Depth1 = 0
                                    Depth2 = 0
                                    Depth3 = 0
                                    Depth4 = Reallocate_Amt / Field4_Area
                                ElseIf (Field4_Level > Field3_Level) And (Field3_Level > Field1_Level) And (Field1_Level > Field2_Level) Then '23
                                    Depth1 = 0
                                    Depth2 = 0
                                    Depth3 = 0
                                    Depth4 = Reallocate_Amt / Field4_Area
                                ElseIf (Field4_Level > Field3_Level) And (Field3_Level > Field2_Level) And (Field2_Level > Field1_Level) Then '24
                                    Depth1 = 0
                                    Depth2 = 0
                                    Depth3 = 0
                                    Depth4 = Reallocate_Amt / Field4_Area
                                End If
                            End If
                        End If
                    End If
                End While
60:             Field1_Amt = Depth1 * Field1_Area
                Field2_Amt = Depth2 * Field2_Area
                Field3_Amt = Depth3 * Field3_Area
                Field4_Amt = Depth4 * Field4_Area
            Case 5

            Case 6
            Case 7
            Case 8
            Case 9
            Case 10
        End Select
    End Function
    Public Function DetermineCropPriorityLevel(ByVal CropType As String) As Integer
        If CropType = "ONION" Then Return 1
        If CropType = "PEPPERS" Then Return 2
        If CropType = "TOMATO" Then Return 2
        If CropType = "ASPARAGUS" Then Return 2
        If CropType = "MELONS" Then Return 3
        If CropType = "CANTALOUPE" Then Return 3
        If CropType = "PUMPKINS" Then Return 4
        If CropType = "SQUASH" Then Return 4
        If CropType = "ALFALFA" Then Return 5
        If CropType = "CORN" Then Return 5
        If CropType = "BARLEY" Then Return 6
        If CropType = "BEANS" Then Return 6
        If CropType = "OATS" Then Return 6
        If CropType = "SORGHUM" Then Return 7
        If CropType = "WHEAT" Then Return 8
        If CropType = "GRASS/PASTURE" Then Return 9
    End Function

    Public Function FilterCropType(ByVal CropType As String) As String
        If CropType = "0" Then
            Return "GRASS/PASTURE"
        ElseIf CropType = "ALFAL" Then
            Return "ALFALFA"
        ElseIf CropType = "ALFALFA" Then
            Return "ALFALFA"
        ElseIf CropType = "Alfalfa" Then
            Return "ALFALFA"
        ElseIf CropType = "Alfalfa Hay" Then
            Return "ALFALFA"
        ElseIf CropType = "ASPARAGUS" Then
            Return "ASPARAGUS"
        ElseIf CropType = "ASPRG" Then
            Return "ASPARAGUS"
        ElseIf CropType = "Barley" Then
            Return "BARLEY"
        ElseIf CropType = "BARLEY" Then
            Return "BARLEY"
        ElseIf CropType = "BEANS" Then
            Return "BEANS"
        ElseIf CropType = "Beans" Then
            Return "BEANS"
        ElseIf CropType = "BEETS" Then
            Return "ONION"
        ElseIf CropType = "CANTA" Then
            Return "CANTALOUPE"
        ElseIf CropType = "CANTALOUPE" Then
            Return "CANTALOUPE"
        ElseIf CropType = "Conservation Res" Then
            Return "GRASS/PASTURE"
        ElseIf CropType = "CORN" Then
            Return "CORN"
        ElseIf CropType = "Corn" Then
            Return "CORN"
        ElseIf CropType = "CRp" Then
            Return "GRASS/PASTURE"
        ElseIf CropType = "CUCUM" Then
            Return "PEPPERS"
        ElseIf CropType = "FALLOW" Then
            Return "GRASS/PASTURE"
        ElseIf CropType = "FLOWR" Then
            Return "GRASS/PASTURE"
        ElseIf CropType = "FOAV" Then
            Return "PEPPERS"
        ElseIf CropType = "Forage Sorghum" Then
            Return "SORGHUM"
        ElseIf CropType = "GORDS" Then
            Return "PEPPERS"
        ElseIf CropType = "Grain Sorghum" Then
            Return "SORGHUM"
        ElseIf CropType = "Grass" Then
            Return "GRASS/PASTURE"
        ElseIf CropType = "GRASS" Then
            Return "GRASS/PASTURE"
        ElseIf CropType = "GRASS/PASTURE" Then
            Return "GRASS/PASTURE"
        ElseIf CropType = "HAYMX" Then
            Return "GRASS/PASTURE"
        ElseIf CropType = "HMGRD" Then
            Return "OATS"
        ElseIf CropType = "HNYDW" Then
            Return "MELONS"
        ElseIf CropType = "Melons" Then
            Return "MELONS"
        ElseIf CropType = "MELONS" Then
            Return "MELONS"
        ElseIf CropType = "MIXFG" Then
            Return "GRASS/PASTURE"
        ElseIf CropType = "NO_CROP" Then
            Return "GRASS/PASTURE"
        ElseIf CropType = "OATS" Then
            Return "OATS"
        ElseIf CropType = "Oats" Then
            Return "OATS"
        ElseIf CropType = "OCROP" Then
            Return "GRASS/PASTURE"
        ElseIf CropType = "OKRA" Then
            Return "PEPPERS"
        ElseIf CropType = "OFAV" Then
            Return "PEPPERS"
        ElseIf CropType = "ONION" Then
            Return "ONION"
        ElseIf CropType = "Onions" Then
            Return "ONION"
        ElseIf CropType = "Other" Then
            Return "GRASS/PASTURE"
        ElseIf CropType = "Other" Then
            Return "GRASS/PASTURE"
        ElseIf CropType = "Pasture" Then
            Return "GRASS/PASTURE"
        ElseIf CropType = "PEPPERS" Then
            Return "PEPPERS"
        ElseIf CropType = "PEPRS" Then
            Return "PEPPERS"
        ElseIf CropType = "PUMKN" Then
            Return "PUMPKINS"
        ElseIf CropType = "PUMPKINS" Then
            Return "PUMPKINS"
        ElseIf CropType = "Pumpkins" Then
            Return "PUMPKINS"
        ElseIf CropType = "SNFLR" Then
            Return "CORN"
        ElseIf CropType = "SORGH" Then
            Return "SORGHUM"
        ElseIf CropType = "SORGHUM" Then
            Return "SORGHUM"
        ElseIf CropType = "Sorghum" Then
            Return "SORGHUM"
        ElseIf CropType = "Soybeans" Then
            Return "BEANS"
        ElseIf CropType = "SOYBN" Then
            Return "BEANS"
        ElseIf CropType = "SQASH" Then
            Return "SQUASH"
        ElseIf CropType = "SQUASH" Then
            Return "SQUASH"
        ElseIf CropType = "Squash" Then
            Return "SQUASH"
        ElseIf CropType = "SSORG" Then
            Return "SORGHUM"
        ElseIf CropType = "SUMFL" Then
            Return "GRASS/PASTURE"
        ElseIf CropType = "Summer Fallow" Then
            Return "GRASS/PASTURE"
        ElseIf CropType = "SWCRN" Then
            Return "CORN"
        ElseIf CropType = "Sweet Corn" Then
            Return "CORN"
        ElseIf CropType = "Sweet Sorghum" Then
            Return "SORGHUM"
        ElseIf CropType = "TMATO" Then
            Return "TOMATO"
        ElseIf CropType = "TOMATO" Then
            Return "TOMATO"
        ElseIf CropType = "Tomatoes" Then
            Return "TOMATO"
        ElseIf CropType = "TRICL" Then
            Return "WHEAT"
        ElseIf CropType = "Triticale" Then
            Return "WHEAT"
        ElseIf CropType = "VEGETABLES" Then
            Return "PEPPERS"
        ElseIf CropType = "WATRM" Then
            Return "MELONS"
        ElseIf CropType = "Wheat" Then
            Return "WHEAT"
        ElseIf CropType = "WHEAT" Then
            Return "WHEAT"
        ElseIf CropType = "WLDFP" Then
            Return "GRASS/PASTURE"
        Else
            Return CropType & "_Error"
        End If
    End Function


    Public Function GetTableFromDB(ByVal queryString As String, ByVal m_TableName As String, ByVal conn As OleDbConnection) As DataTable
        Try
            'If Not conn.State = ConnectionState.Open Then
            'OpenDBConnection()
            'End If
            Dim SelectCmd As OleDbCommand
            SelectCmd = New OleDbCommand(queryString, conn)
            Dim dAdapt As OleDbDataAdapter = New OleDbDataAdapter
            dAdapt.SelectCommand = SelectCmd
            Dim cb As OleDbCommandBuilder = New OleDbCommandBuilder(dAdapt)
            Dim m_DS As New DataSet
            dAdapt.Fill(m_DS, "QueryTable")
            GetTableFromDB = m_DS.Tables("QueryTable")
            GetTableFromDB.TableName = m_TableName
            'CloseDBConnection()
        Catch ex As Exception
            MessageBox.Show(ex.Message)
            Return Nothing
        End Try
    End Function
    'This function abandoned, too simplistic
    Public Function FinalizeWaterAllocation(ByRef WaterAllocationSchemeDataset1 As DataSet, ByVal CurrentDate As Date, ByVal CatlinDivertedAmt_m3perWk As Single, _
                                            ByVal FortLyonUSDivertedAmt_m3perWk As Single, ByVal HolbrookDivertedAmt_m3perWk As Single, ByVal OteroDivertedAmt_m3perWk As Single, _
                                            ByVal RockyFordDivertedAmt_m3perWk As Single, ByVal RockyFordHighlineDivertedAmt_m3perWk As Single, _
                                            ByVal ActiveWells() As Object, ByVal QueriedDate() As Object, ByVal MonthlyPumpedAcreFt() As Object)

        Dim TableOfFieldsEligibleForSurfWat As DataTable = WaterAllocationSchemeDataset1.Tables("PrelimSurfWaterAllocScheme")
        Dim TableOfFieldsEligibleForGrndWat As DataTable = WaterAllocationSchemeDataset1.Tables("PrelimPumpedWaterAllocScheme")
        Dim FinalizedWatAllocTable As DataTable = WaterAllocationSchemeDataset1.Tables("FinalWaterAllocScheme")
        Dim FinalWatAllocTableRow As DataRow

        Dim x As Integer
        Dim TRACT As String
        Dim a As Integer
        Dim b As Integer
        Dim c As Integer
        Dim i As Integer
        Dim TS As Integer
        Dim FldAppAmt_m3perWk As Single
        Dim Canal As String
        Dim SurfRowsReturned() As DataRow
        Dim PumpedRowsReturned() As DataRow
        Dim ActiveSurfRowsReturned() As DataRow
        TS = CurrentTS(CurrentDate)

        For x = 0 To TableOfFieldsEligibleForSurfWat.Rows.Count() - 1
            TRACT = TableOfFieldsEligibleForSurfWat.Rows(x).Item("TRACT")
            SurfRowsReturned = TableOfFieldsEligibleForSurfWat.Select("TRACT = " & TRACT)
            ' The array "ActiveWells" was used to fill the following table, Thus, if wells don't show up that clearly belong to the fields in question it is because they are not active.
            PumpedRowsReturned = TableOfFieldsEligibleForGrndWat.Select("TRACT = " & TRACT)
            a = SurfRowsReturned.Length
            b = PumpedRowsReturned.Length
            If b = 0 Then
                ActiveSurfRowsReturned = TableOfFieldsEligibleForSurfWat.Select("TRACT = " & TRACT & " AND RECEIVE_SURF_WAT = TRUE")
                c = ActiveSurfRowsReturned.Length
                If c = 0 Then

                ElseIf c > 0 Then

                End If
            ElseIf b > 0 Then   'If b is greater than 0 then need to check for each field if its servicing well is active for the time step.
                'Start here:  figure out water application heirarchy programatically.
                ActiveSurfRowsReturned = TableOfFieldsEligibleForSurfWat.Select("TRACT = " & TRACT & " AND RECEIVE_SURF_WAT = TRUE")

                c = ActiveSurfRowsReturned.Length
                If c = 0 Then

                ElseIf c > 0 Then
                    For i = 1 To c
                        Canal = ActiveSurfRowsReturned.GetValue(i - 1)(7) ' Returns the canal name, leave second index fixed at 7 unless I change table format
                        Select Case Canal
                            Case "Catlin Canal"
                                FldAppAmt_m3perWk = (1 / c) * CatlinDivertedAmt_m3perWk / 330           ' The # at the end is the # of tracts (farm units) within the study region for that particular command area
                            Case "Fort Lyon Canal"                                                      ' However, I need to adjust the tailing number to adjust for the number of active tracts in this time step
                                FldAppAmt_m3perWk = (1 / c) * FortLyonUSDivertedAmt_m3perWk / 124       ' based upon the timing codes.  All fields for a particular tract may be "timed off" for a particular time step
                            Case "Holbrook Canal"
                                FldAppAmt_m3perWk = (1 / c) * HolbrookDivertedAmt_m3perWk / 218
                            Case "Otero Canal"
                                FldAppAmt_m3perWk = (1 / c) * OteroDivertedAmt_m3perWk / 80
                            Case "Rocky Ford Ditch"
                                FldAppAmt_m3perWk = (1 / c) * RockyFordDivertedAmt_m3perWk / 118
                            Case "Rocky Ford Highline"
                                FldAppAmt_m3perWk = (1 / c) * RockyFordHighlineDivertedAmt_m3perWk / 209
                        End Select
                        FinalWatAllocTableRow = FinalizedWatAllocTable.NewRow()
                        FinalWatAllocTableRow("FIELD_NO_TXT") = ActiveSurfRowsReturned.GetValue(i - 1)(1)   ' The index 1 is for "FIELD_NO_TXT" in PrelimSurfWaterAllocScheme
                        FinalWatAllocTableRow("Area") = ActiveSurfRowsReturned.GetValue(i - 1)(3)           ' The index 3 is for "Area" in PrelimSurfWaterAllocScheme
                        FinalWatAllocTableRow("Precip") = ActiveSurfRowsReturned.GetValue(i - 1)(4)         ' The index 4 is for "Precip" in PrelimSurfWaterAllocScheme
                        FinalWatAllocTableRow("ETc") = ActiveSurfRowsReturned.GetValue(i - 1)(5)            ' The index 5 is for "ETc" in PrelimSurfWaterAllocScheme
                        FinalWatAllocTableRow("Qsurf_m3perWk") = FldAppAmt_m3perWk
                        FinalizedWatAllocTable.Rows.Add(FinalWatAllocTableRow)
                    Next i
                End If
            End If
        Next x

    End Function

    Public Function CurrentTS(ByVal CurrentDate As Date) As Integer

        Dim US_StartDate As Date = #4/1/1999#
        Dim DS_StartDate As Date = #3/28/2002#

        Dim IterativeDate As Date
        Dim CurrentTimeStep As Integer = 1

        If Upstream_or_not1 Then
            IterativeDate = US_StartDate
            If Not (CurrentDate = US_StartDate) Then
                Do
                    CurrentTimeStep += 1
                    IterativeDate = IterativeDate.AddDays(7)
                Loop While CurrentDate > IterativeDate
            End If
            CurrentTS = CurrentTimeStep
        Else
            IterativeDate = DS_StartDate
            If Not (CurrentDate = DS_StartDate) Then
                Do
                    CurrentTimeStep += 1
                    IterativeDate = IterativeDate.AddDays(7)
                Loop While CurrentDate > IterativeDate
            End If
            CurrentTS = CurrentTimeStep
        End If
        Return CurrentTS

    End Function
    Public Function Prepare_preMODFLOW_files(ByVal DataSorter As MyDBUtils, ByVal CurrentDate As Date)

        Dim DateString As String
        Dim QueryString As String

        DateString = QueryDateString(CurrentDate)

        Try
            DataSorter.DeleteExistingTables("Values_For_MODFLOW" & DateString)
        Catch ex As Exception
        End Try

        If Upstream_or_not1 Then
            If CurrentDate < #1/1/2002# Or CurrentDate > #12/31/2003# Then
                QueryString = "SELECT UpStreamGrid.Cell_Number, IIf(Sum((Grid_PhilFlds_Intersect!Shape_Ar_1*(WaterBalance" & DateString & "!DP_final/1000))/62500)>0,Sum((Grid_PhilFlds_Intersect!Shape_Ar_1*(WaterBalance" & DateString & "!DP_final/1000))/62500),0) AS Cell_RCH_Flds, IIf(Sum(([Grid_NatVeg_Intersect]![Shape_Ar_1]*([WaterBalance_NatVeg_Trsk_" & DateString & "_1]![DP]/1000))/62500)>0,Sum(([Grid_NatVeg_Intersect]![Shape_Ar_1]*([WaterBalance_NatVeg_Trsk_" & DateString & "_1]![DP]/1000))/62500),0) AS Cell_RCH_NatVeg, IIf(Sum((Grid_Trsk_Intersect!Shape_Ar_1*(WaterBalance_NatVeg_Trsk_" & DateString & "!DP/1000))/62500)>0,Sum((Grid_Trsk_Intersect!Shape_Ar_1*(WaterBalance_NatVeg_Trsk_" & DateString & "!DP/1000))/62500),0) AS Cell_RCH_Trsk, (IIf(Sum((Grid_PhilFlds_Intersect!Shape_Ar_1*(WaterBalance" & DateString & "!DP_final/1000))/62500)>0,Sum((Grid_PhilFlds_Intersect!Shape_Ar_1*(WaterBalance" & DateString & "!DP_final/1000))/62500),0))+(IIf(Sum((Grid_Trsk_Intersect!Shape_Ar_1*(WaterBalance_NatVeg_Trsk_" & DateString & "!DP/1000))/62500)>0,Sum((Grid_Trsk_Intersect!Shape_Ar_1*(WaterBalance_NatVeg_Trsk_" & DateString & "!DP/1000))/62500),0))+(IIf(Sum(([Grid_NatVeg_Intersect]![Shape_Ar_1]*([WaterBalance_NatVeg_Trsk_" & DateString & "_1]![DP]/1000))/62500)>0,Sum(([Grid_NatVeg_Intersect]![Shape_Ar_1]*([WaterBalance_NatVeg_Trsk_" & DateString & "_1]![DP]/1000))/62500),0)) AS Cell_RCH, IIf(Sum(Grid_PhilFlds_Intersect!Shape_Ar_1*(WaterBalance" & DateString & "!ET_adj/1000))/62500>0,Sum(Grid_PhilFlds_Intersect!Shape_Ar_1*(WaterBalance" & DateString & "!ET_adj/1000))/62500,0) AS Cell_ET_Flds, IIf(Sum([Grid_NatVeg_Intersect]![Shape_Ar_1]*([WaterBalance_NatVeg_Trsk_" & DateString & "_1]![ET_adj]/1000))/62500>0,Sum([Grid_NatVeg_Intersect]![Shape_Ar_1]*([WaterBalance_NatVeg_Trsk_" & DateString & "_1]![ET_adj]/1000))/62500,0) AS Cell_ET_NatVeg, IIf(Sum(Grid_Trsk_Intersect!Shape_Ar_1*(WaterBalance_NatVeg_Trsk_" & DateString & "_1!ET_adj/1000))/62500>0,Sum(Grid_Trsk_Intersect!Shape_Ar_1*(WaterBalance_NatVeg_Trsk_" & DateString & "_1!ET_adj/1000))/62500,0) AS Cell_ET_Trsk, (IIf(Sum(Grid_PhilFlds_Intersect!Shape_Ar_1*(WaterBalance" & DateString & "!ET_adj/1000))/62500>0,Sum(Grid_PhilFlds_Intersect!Shape_Ar_1*(WaterBalance" & DateString & "!ET_adj/1000))/62500,0))+(IIf(Sum([Grid_NatVeg_Intersect]![Shape_Ar_1]*([WaterBalance_NatVeg_Trsk_" & DateString & "_1]![ET_adj]/1000))/62500>0,Sum([Grid_NatVeg_Intersect]![Shape_Ar_1]*([WaterBalance_NatVeg_Trsk_" & DateString & "_1]![ET_adj]/1000))/62500,0))+(IIf(Sum(Grid_Trsk_Intersect!Shape_Ar_1*(WaterBalance_NatVeg_Trsk_" & DateString & "_1!ET_adj/1000))/62500>0,Sum(Grid_Trsk_Intersect!Shape_Ar_1*(WaterBalance_NatVeg_Trsk_" & DateString & "_1!ET_adj/1000))/62500,0)) AS Cell_ET, IIf(Avg(WaterAllocation" & DateString & "!Zr)>0,Avg(WaterAllocation" & DateString & "!Zr),0) AS Cell_ROOT_Flds, IIf(Avg(Grid_NatVeg_Intersect!ROOT_DEPTH)>0,Avg(Grid_NatVeg_Intersect!ROOT_DEPTH),0) AS Cell_ROOT_NatVeg, IIf(Avg(Grid_Trsk_Intersect!ROOT_DEPTH)>0,Avg(Grid_Trsk_Intersect!ROOT_DEPTH),0) AS Cell_ROOT_Trsk, IIf([Cell_ROOT_Flds]>0 And [Cell_ROOT_NatVeg]>0 And [Cell_ROOT_Trsk]>0,3,IIf(([Cell_ROOT_Flds]>0 And [Cell_ROOT_NatVeg]>0) Or ([Cell_ROOT_Flds]>0 And [Cell_ROOT_Trsk]>0) Or ([Cell_ROOT_NatVeg]>0 And [Cell_ROOT_Trsk]>0),2,IIf([Cell_ROOT_Flds]>0 Or [Cell_ROOT_NatVeg]>0 Or [Cell_ROOT_Trsk]>0,1,0))) AS ct, IIf([ct]>0,([Cell_ROOT_Flds]+[Cell_ROOT_NatVeg]+[Cell_ROOT_Trsk])/[ct],0) AS Cell_ROOT INTO Values_For_MODFLOW" & DateString & " "
                QueryString += "FROM ((((((UpStreamGrid LEFT JOIN Grid_PhilFlds_Intersect ON UpStreamGrid.Cell_Number = Grid_PhilFlds_Intersect.Cell_Number) LEFT JOIN Grid_NatVeg_Intersect ON UpStreamGrid.Cell_Number = Grid_NatVeg_Intersect.Cell_Number) LEFT JOIN Grid_Trsk_Intersect ON UpStreamGrid.Cell_Number = Grid_Trsk_Intersect.Cell_Number) LEFT JOIN WaterBalance" & DateString & " ON Grid_PhilFlds_Intersect.FIELD_NO = WaterBalance" & DateString & ".Field_No) LEFT JOIN WaterBalance_NatVeg_Trsk_" & DateString & " ON Grid_Trsk_Intersect.Id = WaterBalance_NatVeg_Trsk_" & DateString & ".Poly_ID) LEFT JOIN WaterBalance_NatVeg_Trsk_" & DateString & " AS WaterBalance_NatVeg_Trsk_" & DateString & "_1 ON Grid_NatVeg_Intersect.Poly_ID = WaterBalance_NatVeg_Trsk_" & DateString & "_1.Poly_ID) LEFT JOIN WaterAllocation" & DateString & " ON Grid_PhilFlds_Intersect.FIELD_NO = WaterAllocation" & DateString & ".Field_No "
                QueryString += "GROUP BY UpStreamGrid.Cell_Number;"
            Else
                QueryString = "SELECT UpStreamGrid.Cell_Number, IIf(Sum((Grid_DWRFlds_Intersect!Shape_Ar_1*(WaterBalance" & DateString & "!DP_final/1000))/62500)>0,Sum((Grid_DWRFlds_Intersect!Shape_Ar_1*(WaterBalance" & DateString & "!DP_final/1000))/62500),0) AS Cell_RCH_Flds, IIf(Sum((Grid_NatVeg_Intersect!Shape_Ar_1*(WaterBalance_NatVeg_Trsk_" & DateString & "_1!DP/1000))/62500)>0,Sum((Grid_NatVeg_Intersect!Shape_Ar_1*(WaterBalance_NatVeg_Trsk_" & DateString & "_1!DP/1000))/62500),0) AS Cell_RCH_NatVeg, IIf(Sum((Grid_Trsk_Intersect!Shape_Ar_1*(WaterBalance_NatVeg_Trsk_" & DateString & "!DP/1000))/62500)>0,Sum((Grid_Trsk_Intersect!Shape_Ar_1*(WaterBalance_NatVeg_Trsk_" & DateString & "!DP/1000))/62500),0) AS Cell_RCH_Trsk, (IIf(Sum((Grid_DWRFlds_Intersect!Shape_Ar_1*(WaterBalance" & DateString & "!DP_final/1000))/62500)>0,Sum((Grid_DWRFlds_Intersect!Shape_Ar_1*(WaterBalance" & DateString & "!DP_final/1000))/62500),0))+(IIf(Sum((Grid_Trsk_Intersect!Shape_Ar_1*(WaterBalance_NatVeg_Trsk_" & DateString & "!DP/1000))/62500)>0,Sum((Grid_Trsk_Intersect!Shape_Ar_1*(WaterBalance_NatVeg_Trsk_" & DateString & "!DP/1000))/62500),0))+(IIf(Sum((Grid_NatVeg_Intersect!Shape_Ar_1*(WaterBalance_NatVeg_Trsk_" & DateString & "_1!DP/1000))/62500)>0,Sum((Grid_NatVeg_Intersect!Shape_Ar_1*(WaterBalance_NatVeg_Trsk_" & DateString & "_1!DP/1000))/62500),0)) AS Cell_RCH, IIf(Sum(Grid_DWRFlds_Intersect!Shape_Ar_1*(WaterBalance" & DateString & "!ET_adj/1000))/62500>0,Sum(Grid_DWRFlds_Intersect!Shape_Ar_1*(WaterBalance" & DateString & "!ET_adj/1000))/62500,0) AS Cell_ET_Flds, IIf(Sum(Grid_NatVeg_Intersect!Shape_Ar_1*(WaterBalance_NatVeg_Trsk_" & DateString & "!ET_adj/1000))/62500>0,Sum(Grid_NatVeg_Intersect!Shape_Ar_1*(WaterBalance_NatVeg_Trsk_" & DateString & "!ET_adj/1000))/62500,0) AS Cell_ET_NatVeg, IIf(Sum(Grid_Trsk_Intersect!Shape_Ar_1*(WaterBalance_NatVeg_Trsk_" & DateString & "!ET_adj/1000))/62500>0,Sum(Grid_Trsk_Intersect!Shape_Ar_1*(WaterBalance_NatVeg_Trsk_" & DateString & "!ET_adj/1000))/62500,0) AS Cell_ET_Trsk, (IIf(Sum(Grid_DWRFlds_Intersect!Shape_Ar_1*(WaterBalance" & DateString & "!ET_adj/1000))/62500>0,Sum(Grid_DWRFlds_Intersect!Shape_Ar_1*(WaterBalance" & DateString & "!ET_adj/1000))/62500,0))+(IIf(Sum(Grid_NatVeg_Intersect!Shape_Ar_1*(WaterBalance_NatVeg_Trsk_" & DateString & "!ET_adj/1000))/62500>0,Sum(Grid_NatVeg_Intersect!Shape_Ar_1*(WaterBalance_NatVeg_Trsk_" & DateString & "!ET_adj/1000))/62500,0))+(IIf(Sum(Grid_Trsk_Intersect!Shape_Ar_1*(WaterBalance_NatVeg_Trsk_" & DateString & "!ET_adj/1000))/62500>0,Sum(Grid_Trsk_Intersect!Shape_Ar_1*(WaterBalance_NatVeg_Trsk_" & DateString & "!ET_adj/1000))/62500,0)) AS Cell_ET, IIf(Avg(WaterAllocation" & DateString & "!Zr)>0,Avg(WaterAllocation" & DateString & "!Zr),0) AS Cell_ROOT_Flds, IIf(Avg(Grid_NatVeg_Intersect!ROOT_DEPTH)>0,Avg(Grid_NatVeg_Intersect!ROOT_DEPTH),0) AS Cell_ROOT_NatVeg, IIf(Avg(Grid_Trsk_Intersect!ROOT_DEPTH)>0,Avg(Grid_Trsk_Intersect!ROOT_DEPTH),0) AS Cell_ROOT_Trsk, IIf([Cell_ROOT_Flds]>0 And [Cell_ROOT_NatVeg]>0 And [Cell_ROOT_Trsk]>0,3,IIf(([Cell_ROOT_Flds]>0 And [Cell_ROOT_NatVeg]>0) Or ([Cell_ROOT_Flds]>0 And [Cell_ROOT_Trsk]>0) Or ([Cell_ROOT_NatVeg]>0 And [Cell_ROOT_Trsk]>0),2,IIf([Cell_ROOT_Flds]>0 Or [Cell_ROOT_NatVeg]>0 Or [Cell_ROOT_Trsk]>0,1,0))) AS ct, IIf([ct]>0,([Cell_ROOT_Flds]+[Cell_ROOT_NatVeg]+[Cell_ROOT_Trsk])/[ct],0) AS Cell_ROOT INTO Values_For_MODFLOW" & DateString & " "
                QueryString += "FROM ((((((UpStreamGrid LEFT JOIN Grid_Trsk_Intersect ON UpStreamGrid.Cell_Number=Grid_Trsk_Intersect.Cell_Number) LEFT JOIN Grid_DWRFlds_Intersect ON UpStreamGrid.Cell_Number=Grid_DWRFlds_Intersect.Cell_Number) LEFT JOIN Grid_NatVeg_Intersect ON UpStreamGrid.Cell_Number=Grid_NatVeg_Intersect.Cell_Number) LEFT JOIN WaterBalance" & DateString & " ON Grid_DWRFlds_Intersect.FIELD_NO=WaterBalance" & DateString & ".Field_No) LEFT JOIN WaterBalance_NatVeg_Trsk_" & DateString & " ON Grid_Trsk_Intersect.Id=WaterBalance_NatVeg_Trsk_" & DateString & ".Poly_ID) LEFT JOIN WaterBalance_NatVeg_Trsk_" & DateString & " AS WaterBalance_NatVeg_Trsk_" & DateString & "_1 ON Grid_NatVeg_Intersect.Poly_ID=WaterBalance_NatVeg_Trsk_" & DateString & "_1.Poly_ID) LEFT JOIN WaterAllocation" & DateString & " ON Grid_DWRFlds_Intersect.FIELD_NO=WaterAllocation" & DateString & ".Field_No "
                QueryString += "GROUP BY UpStreamGrid.Cell_Number;"
            End If
        Else
            If CurrentDate > #12/31/2003# Then
                QueryString = "SELECT DownStreamGrid.Cell_Number, IIf(Sum((Grid_EricFlds_Intersect!Shape_Ar_1*(WaterBalance" & DateString & "!DP_final/1000))/62500)>0,Sum((Grid_EricFlds_Intersect!Shape_Ar_1*(WaterBalance" & DateString & "!DP_final/1000))/62500),0) AS Cell_RCH_Flds, IIf(Sum(([Grid_NatVeg_Intersect]![Shape_Ar_1]*([WaterBalance_NatVeg_Trsk_" & DateString & "_1]![DP]/1000))/62500)>0,Sum(([Grid_NatVeg_Intersect]![Shape_Ar_1]*([WaterBalance_NatVeg_Trsk_" & DateString & "_1]![DP]/1000))/62500),0) AS Cell_RCH_NatVeg, IIf(Sum((Grid_Trsk_Intersect!Shape_Ar_1*(WaterBalance_NatVeg_Trsk_" & DateString & "!DP/1000))/62500)>0,Sum((Grid_Trsk_Intersect!Shape_Ar_1*(WaterBalance_NatVeg_Trsk_" & DateString & "!DP/1000))/62500),0) AS Cell_RCH_Trsk, (IIf(Sum((Grid_EricFlds_Intersect!Shape_Ar_1*(WaterBalance" & DateString & "!DP_final/1000))/62500)>0,Sum((Grid_EricFlds_Intersect!Shape_Ar_1*(WaterBalance" & DateString & "!DP_final/1000))/62500),0))+(IIf(Sum((Grid_Trsk_Intersect!Shape_Ar_1*(WaterBalance_NatVeg_Trsk_" & DateString & "!DP/1000))/62500)>0,Sum((Grid_Trsk_Intersect!Shape_Ar_1*(WaterBalance_NatVeg_Trsk_" & DateString & "!DP/1000))/62500),0))+(IIf(Sum(([Grid_NatVeg_Intersect]![Shape_Ar_1]*([WaterBalance_NatVeg_Trsk_" & DateString & "_1]![DP]/1000))/62500)>0,Sum(([Grid_NatVeg_Intersect]![Shape_Ar_1]*([WaterBalance_NatVeg_Trsk_" & DateString & "_1]![DP]/1000))/62500),0)) AS Cell_RCH, IIf(Sum(Grid_EricFlds_Intersect!Shape_Ar_1*(WaterBalance" & DateString & "!ET_adj/1000))/62500>0,Sum(Grid_EricFlds_Intersect!Shape_Ar_1*(WaterBalance" & DateString & "!ET_adj/1000))/62500,0) AS Cell_ET_Flds, IIf(Sum([Grid_NatVeg_Intersect]![Shape_Ar_1]*([WaterBalance_NatVeg_Trsk_" & DateString & "_1]![ET_adj]/1000))/62500>0,Sum([Grid_NatVeg_Intersect]![Shape_Ar_1]*([WaterBalance_NatVeg_Trsk_" & DateString & "_1]![ET_adj]/1000))/62500,0) AS Cell_ET_NatVeg, IIf(Sum(Grid_Trsk_Intersect!Shape_Ar_1*(WaterBalance_NatVeg_Trsk_" & DateString & "_1!ET_adj/1000))/62500>0,Sum(Grid_Trsk_Intersect!Shape_Ar_1*(WaterBalance_NatVeg_Trsk_" & DateString & "_1!ET_adj/1000))/62500,0) AS Cell_ET_Trsk, (IIf(Sum(Grid_EricFlds_Intersect!Shape_Ar_1*(WaterBalance" & DateString & "!ET_adj/1000))/62500>0,Sum(Grid_EricFlds_Intersect!Shape_Ar_1*(WaterBalance" & DateString & "!ET_adj/1000))/62500,0))+(IIf(Sum([Grid_NatVeg_Intersect]![Shape_Ar_1]*([WaterBalance_NatVeg_Trsk_" & DateString & "_1]![ET_adj]/1000))/62500>0,Sum([Grid_NatVeg_Intersect]![Shape_Ar_1]*([WaterBalance_NatVeg_Trsk_" & DateString & "_1]![ET_adj]/1000))/62500,0))+(IIf(Sum(Grid_Trsk_Intersect!Shape_Ar_1*(WaterBalance_NatVeg_Trsk_" & DateString & "_1!ET_adj/1000))/62500>0,Sum(Grid_Trsk_Intersect!Shape_Ar_1*(WaterBalance_NatVeg_Trsk_" & DateString & "_1!ET_adj/1000))/62500,0)) AS Cell_ET, IIf(Avg(WaterAllocation" & DateString & "!Zr)>0,Avg(WaterAllocation" & DateString & "!Zr),0) AS Cell_ROOT_Flds, IIf(Avg(Grid_NatVeg_Intersect!ROOT_DEPTH)>0,Avg(Grid_NatVeg_Intersect!ROOT_DEPTH),0) AS Cell_ROOT_NatVeg, IIf(Avg(Grid_Trsk_Intersect!ROOT_DEPTH)>0,Avg(Grid_Trsk_Intersect!ROOT_DEPTH),0) AS Cell_ROOT_Trsk, IIf([Cell_ROOT_Flds]>0 And [Cell_ROOT_NatVeg]>0 And [Cell_ROOT_Trsk]>0,3,IIf(([Cell_ROOT_Flds]>0 And [Cell_ROOT_NatVeg]>0) Or ([Cell_ROOT_Flds]>0 And [Cell_ROOT_Trsk]>0) Or ([Cell_ROOT_NatVeg]>0 And [Cell_ROOT_Trsk]>0),2,IIf([Cell_ROOT_Flds]>0 Or [Cell_ROOT_NatVeg]>0 Or [Cell_ROOT_Trsk]>0,1,0))) AS ct, IIf([ct]>0,([Cell_ROOT_Flds]+[Cell_ROOT_NatVeg]+[Cell_ROOT_Trsk])/[ct],0) AS Cell_ROOT INTO Values_For_MODFLOW" & DateString & " "
                QueryString += "FROM ((((((DownStreamGrid LEFT JOIN Grid_EricFlds_Intersect ON DownStreamGrid.Cell_Number = Grid_EricFlds_Intersect.Cell_Number) LEFT JOIN Grid_NatVeg_Intersect ON DownStreamGrid.Cell_Number = Grid_NatVeg_Intersect.Cell_Number) LEFT JOIN Grid_Trsk_Intersect ON DownStreamGrid.Cell_Number = Grid_Trsk_Intersect.Cell_Number) LEFT JOIN WaterBalance" & DateString & " ON Grid_EricFlds_Intersect.FIELD_NO = WaterBalance" & DateString & ".Field_No) LEFT JOIN WaterBalance_NatVeg_Trsk_" & DateString & " ON Grid_Trsk_Intersect.Id = WaterBalance_NatVeg_Trsk_" & DateString & ".Poly_ID) LEFT JOIN WaterBalance_NatVeg_Trsk_" & DateString & " AS WaterBalance_NatVeg_Trsk_" & DateString & "_1 ON Grid_NatVeg_Intersect.Poly_ID = WaterBalance_NatVeg_Trsk_" & DateString & "_1.Poly_ID) LEFT JOIN WaterAllocation" & DateString & " ON Grid_EricFlds_Intersect.FIELD_NO = WaterAllocation" & DateString & ".Field_No "
                QueryString += "GROUP BY DownStreamGrid.Cell_Number;"
            Else
                QueryString = "SELECT DownStreamGrid.Cell_Number, IIf(Sum((Grid_DWRFlds_Intersect!Shape_Ar_1*(WaterBalance" & DateString & "!DP_final/1000))/62500)>0,Sum((Grid_DWRFlds_Intersect!Shape_Ar_1*(WaterBalance" & DateString & "!DP_final/1000))/62500),0) AS Cell_RCH_Flds, IIf(Sum((Grid_NatVeg_Intersect!Shape_Ar_1*(WaterBalance_NatVeg_Trsk_" & DateString & "_1!DP/1000))/62500)>0,Sum((Grid_NatVeg_Intersect!Shape_Ar_1*(WaterBalance_NatVeg_Trsk_" & DateString & "_1!DP/1000))/62500),0) AS Cell_RCH_NatVeg, IIf(Sum((Grid_Trsk_Intersect!Shape_Ar_1*(WaterBalance_NatVeg_Trsk_" & DateString & "!DP/1000))/62500)>0,Sum((Grid_Trsk_Intersect!Shape_Ar_1*(WaterBalance_NatVeg_Trsk_" & DateString & "!DP/1000))/62500),0) AS Cell_RCH_Trsk, (IIf(Sum((Grid_DWRFlds_Intersect!Shape_Ar_1*(WaterBalance" & DateString & "!DP_final/1000))/62500)>0,Sum((Grid_DWRFlds_Intersect!Shape_Ar_1*(WaterBalance" & DateString & "!DP_final/1000))/62500),0))+(IIf(Sum((Grid_Trsk_Intersect!Shape_Ar_1*(WaterBalance_NatVeg_Trsk_" & DateString & "!DP/1000))/62500)>0,Sum((Grid_Trsk_Intersect!Shape_Ar_1*(WaterBalance_NatVeg_Trsk_" & DateString & "!DP/1000))/62500),0))+(IIf(Sum((Grid_NatVeg_Intersect!Shape_Ar_1*(WaterBalance_NatVeg_Trsk_" & DateString & "_1!DP/1000))/62500)>0,Sum((Grid_NatVeg_Intersect!Shape_Ar_1*(WaterBalance_NatVeg_Trsk_" & DateString & "_1!DP/1000))/62500),0)) AS Cell_RCH, IIf(Sum(Grid_DWRFlds_Intersect!Shape_Ar_1*(WaterBalance" & DateString & "!ET_adj/1000))/62500>0,Sum(Grid_DWRFlds_Intersect!Shape_Ar_1*(WaterBalance" & DateString & "!ET_adj/1000))/62500,0) AS Cell_ET_Flds, IIf(Sum(Grid_NatVeg_Intersect!Shape_Ar_1*(WaterBalance_NatVeg_Trsk_" & DateString & "!ET_adj/1000))/62500>0,Sum(Grid_NatVeg_Intersect!Shape_Ar_1*(WaterBalance_NatVeg_Trsk_" & DateString & "!ET_adj/1000))/62500,0) AS Cell_ET_NatVeg, IIf(Sum(Grid_Trsk_Intersect!Shape_Ar_1*(WaterBalance_NatVeg_Trsk_" & DateString & "!ET_adj/1000))/62500>0,Sum(Grid_Trsk_Intersect!Shape_Ar_1*(WaterBalance_NatVeg_Trsk_" & DateString & "!ET_adj/1000))/62500,0) AS Cell_ET_Trsk, (IIf(Sum(Grid_DWRFlds_Intersect!Shape_Ar_1*(WaterBalance" & DateString & "!ET_adj/1000))/62500>0,Sum(Grid_DWRFlds_Intersect!Shape_Ar_1*(WaterBalance" & DateString & "!ET_adj/1000))/62500,0))+(IIf(Sum(Grid_NatVeg_Intersect!Shape_Ar_1*(WaterBalance_NatVeg_Trsk_" & DateString & "!ET_adj/1000))/62500>0,Sum(Grid_NatVeg_Intersect!Shape_Ar_1*(WaterBalance_NatVeg_Trsk_" & DateString & "!ET_adj/1000))/62500,0))+(IIf(Sum(Grid_Trsk_Intersect!Shape_Ar_1*(WaterBalance_NatVeg_Trsk_" & DateString & "!ET_adj/1000))/62500>0,Sum(Grid_Trsk_Intersect!Shape_Ar_1*(WaterBalance_NatVeg_Trsk_" & DateString & "!ET_adj/1000))/62500,0)) AS Cell_ET, IIf(Avg(WaterAllocation" & DateString & "!Zr)>0,Avg(WaterAllocation" & DateString & "!Zr),0) AS Cell_ROOT_Flds, IIf(Avg(Grid_NatVeg_Intersect!ROOT_DEPTH)>0,Avg(Grid_NatVeg_Intersect!ROOT_DEPTH),0) AS Cell_ROOT_NatVeg, IIf(Avg(Grid_Trsk_Intersect!ROOT_DEPTH)>0,Avg(Grid_Trsk_Intersect!ROOT_DEPTH),0) AS Cell_ROOT_Trsk, IIf([Cell_ROOT_Flds]>0 And [Cell_ROOT_NatVeg]>0 And [Cell_ROOT_Trsk]>0,3,IIf(([Cell_ROOT_Flds]>0 And [Cell_ROOT_NatVeg]>0) Or ([Cell_ROOT_Flds]>0 And [Cell_ROOT_Trsk]>0) Or ([Cell_ROOT_NatVeg]>0 And [Cell_ROOT_Trsk]>0),2,IIf([Cell_ROOT_Flds]>0 Or [Cell_ROOT_NatVeg]>0 Or [Cell_ROOT_Trsk]>0,1,0))) AS ct, IIf([ct]>0,([Cell_ROOT_Flds]+[Cell_ROOT_NatVeg]+[Cell_ROOT_Trsk])/[ct],0) AS Cell_ROOT INTO Values_For_MODFLOW" & DateString & " "
                QueryString += "FROM ((((((DownStreamGrid LEFT JOIN Grid_Trsk_Intersect ON DownStreamGrid.Cell_Number=Grid_Trsk_Intersect.Cell_Number) LEFT JOIN Grid_DWRFlds_Intersect ON DownStreamGrid.Cell_Number=Grid_DWRFlds_Intersect.Cell_Number) LEFT JOIN Grid_NatVeg_Intersect ON DownStreamGrid.Cell_Number=Grid_NatVeg_Intersect.Cell_Number) LEFT JOIN WaterBalance" & DateString & " ON Grid_DWRFlds_Intersect.FIELD_NO=WaterBalance" & DateString & ".Field_No) LEFT JOIN WaterBalance_NatVeg_Trsk_" & DateString & " ON Grid_Trsk_Intersect.Id=WaterBalance_NatVeg_Trsk_" & DateString & ".Poly_ID) LEFT JOIN WaterBalance_NatVeg_Trsk_" & DateString & " AS WaterBalance_NatVeg_Trsk_" & DateString & "_1 ON Grid_NatVeg_Intersect.Poly_ID=WaterBalance_NatVeg_Trsk_" & DateString & "_1.Poly_ID) LEFT JOIN WaterAllocation" & DateString & " ON Grid_DWRFlds_Intersect.FIELD_NO=WaterAllocation" & DateString & ".Field_No "
                QueryString += "GROUP BY DownStreamGrid.Cell_Number;"
            End If
        End If

        DataSorter.ExecuteQuery(QueryString)
    End Function
    Public Function Prepare_preMODFLOW_files_ForUZF(ByVal DataSorter As MyDBUtils, ByVal CurrentDate As Date)

        Dim DateString As String
        Dim QueryString As String

        DateString = QueryDateString(CurrentDate)

        Try
            DataSorter.DeleteExistingTables("Values_For_MODFLOW" & DateString)
        Catch ex As Exception
        End Try

        If Upstream_or_not1 Then
            If CurrentDate < #1/1/2002# Or CurrentDate > #12/31/2003# Then
                QueryString = "SELECT UpStreamGrid.Cell_Number, IIf(Sum(([Grid_PhilFlds_Intersect]![Shape_Ar_1]*(([WaterAllocation" & DateString & "]![SurfWatDelivered]+[WaterAllocation" & DateString & "]![PumpWatDelivered]+[WaterAllocation" & DateString & "]![Precip_Amt]-[WaterAllocation" & DateString & "]![Runoff_Amt])/1000))/62500)>0,Sum(([Grid_PhilFlds_Intersect]![Shape_Ar_1]*(([WaterAllocation" & DateString & "]![SurfWatDelivered]+[WaterAllocation" & DateString & "]![PumpWatDelivered]+[WaterAllocation" & DateString & "]![Precip_Amt]-[WaterAllocation" & DateString & "]![Runoff_Amt])/1000))/62500),0) AS Cell_Applied_Flds, IIf(Sum(([Grid_NatVeg_Intersect]![Shape_Ar_1]*(IIf([WaterAllocation_NatVeg_Trsk_" & DateString & "]![Precip_Amt]>30,[WaterAllocation_NatVeg_Trsk_" & DateString & "]![Precip_Amt]*0.5,[WaterAllocation_NatVeg_Trsk_" & DateString & "]![Precip_Amt]*0.7)/1000))/62500)>0,Sum(([Grid_NatVeg_Intersect]![Shape_Ar_1]*(IIf([WaterAllocation_NatVeg_Trsk_" & DateString & "]![Precip_Amt]>30,[WaterAllocation_NatVeg_Trsk_" & DateString & "]![Precip_Amt]*0.5,[WaterAllocation_NatVeg_Trsk_" & DateString & "]![Precip_Amt]*0.7)/1000))/62500),0) AS Cell_Precip_NatVeg, IIf(Sum(([Grid_Trsk_Intersect]![Shape_Ar_1]*(IIf([WaterAllocation_NatVeg_Trsk_" & DateString & "_1]![Precip_Amt]>30,[WaterAllocation_NatVeg_Trsk_" & DateString & "_1]![Precip_Amt]*0.5,[WaterAllocation_NatVeg_Trsk_" & DateString & "_1]![Precip_Amt]*0.7)/1000))/62500)>0,Sum(([Grid_Trsk_Intersect]![Shape_Ar_1]*(IIf([WaterAllocation_NatVeg_Trsk_" & DateString & "_1]![Precip_Amt]>30,[WaterAllocation_NatVeg_Trsk_" & DateString & "_1]![Precip_Amt]*0.5,[WaterAllocation_NatVeg_Trsk_" & DateString & "_1]![Precip_Amt]*0.7)/1000))/62500),0) AS Cell_Precip_Trsk, (IIf(Sum((Grid_PhilFlds_Intersect!Shape_Ar_1*((WaterAllocation" & DateString & "!SurfWatDelivered+WaterAllocation" & DateString & "!PumpWatDelivered+WaterAllocation" & DateString & "!Precip_Amt-WaterAllocation" & DateString & "!Runoff_Amt)/1000))/62500)>0, "
                QueryString += "Sum((Grid_PhilFlds_Intersect!Shape_Ar_1*((WaterAllocation" & DateString & "!SurfWatDelivered+WaterAllocation" & DateString & "!PumpWatDelivered+WaterAllocation" & DateString & "!Precip_Amt-WaterAllocation" & DateString & "!Runoff_Amt)/1000))/62500),0))+(IIf(Sum((Grid_Trsk_Intersect!Shape_Ar_1*(IIf(WaterAllocation_NatVeg_Trsk_" & DateString & "_1!Precip_Amt>30,WaterAllocation_NatVeg_Trsk_" & DateString & "_1!Precip_Amt*0.5,WaterAllocation_NatVeg_Trsk_" & DateString & "_1!Precip_Amt*0.7)/1000))/62500)>0,Sum((Grid_Trsk_Intersect!Shape_Ar_1*(IIf(WaterAllocation_NatVeg_Trsk_" & DateString & "_1!Precip_Amt>30,WaterAllocation_NatVeg_Trsk_" & DateString & "_1!Precip_Amt*0.5,WaterAllocation_NatVeg_Trsk_" & DateString & "_1!Precip_Amt*0.7)/1000))/62500),0))+(IIf(Sum((Grid_NatVeg_Intersect!Shape_Ar_1*(IIf(WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt>30,WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt*0.5,WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt*0.7)/1000))/62500)>0,Sum((Grid_NatVeg_Intersect!Shape_Ar_1*(IIf(WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt>30,WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt*0.5,WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt*0.7)/1000))/62500),0)) AS Cell_Infil, IIf(Sum([Grid_PhilFlds_Intersect]![Shape_Ar_1]*([WaterAllocation" & DateString & "]![ETc]/1000))/62500>0,Sum([Grid_PhilFlds_Intersect]![Shape_Ar_1]*([WaterAllocation" & DateString & "]![ETc]/1000))/62500,0) AS Cell_ET_Flds, IIf(Sum([Grid_NatVeg_Intersect]![Shape_Ar_1]*([WaterAllocation_NatVeg_Trsk_" & DateString & "]![ETc]/1000))/62500>0,Sum([Grid_NatVeg_Intersect]![Shape_Ar_1]*([WaterAllocation_NatVeg_Trsk_" & DateString & "]![ETc]/1000))/62500,0) AS Cell_ET_NatVeg, IIf(Sum([Grid_Trsk_Intersect]![Shape_Ar_1]*([WaterAllocation_NatVeg_Trsk_" & DateString & "_1]![ETc]/1000))/62500>0,Sum([Grid_Trsk_Intersect]![Shape_Ar_1]*([WaterAllocation_NatVeg_Trsk_" & DateString & "_1]![ETc]/1000))/62500,0) AS Cell_ET_Trsk, "
                QueryString += "(IIf(Sum([Grid_PhilFlds_Intersect]![Shape_Ar_1]*([WaterAllocation" & DateString & "]![ETc]/1000))/62500>0,Sum([Grid_PhilFlds_Intersect]![Shape_Ar_1]*([WaterAllocation" & DateString & "]![ETc]/1000))/62500,0))+(IIf(Sum([Grid_NatVeg_Intersect]![Shape_Ar_1]*([WaterAllocation_NatVeg_Trsk_" & DateString & "]![ETc]/1000))/62500>0,Sum([Grid_NatVeg_Intersect]![Shape_Ar_1]*([WaterAllocation_NatVeg_Trsk_" & DateString & "]![ETc]/1000))/62500,0))+(IIf(Sum([Grid_Trsk_Intersect]![Shape_Ar_1]*([WaterAllocation_NatVeg_Trsk_" & DateString & "_1]![ETc]/1000))/62500>0,Sum([Grid_Trsk_Intersect]![Shape_Ar_1]*([WaterAllocation_NatVeg_Trsk_" & DateString & "_1]![ETc]/1000))/62500,0)) AS Cell_ET, IIf(Avg(WaterAllocation" & DateString & "!Zr)>0,Avg(WaterAllocation" & DateString & "!Zr),0) AS Cell_ROOT_Flds, IIf(Avg(Grid_NatVeg_Intersect!ROOT_DEPTH)>0,Avg(Grid_NatVeg_Intersect!ROOT_DEPTH),0) AS Cell_ROOT_NatVeg, IIf(Avg(Grid_Trsk_Intersect!ROOT_DEPTH)>0,Avg(Grid_Trsk_Intersect!ROOT_DEPTH),0) AS Cell_ROOT_Trsk, IIf([Cell_ROOT_Flds]>0 And [Cell_ROOT_NatVeg]>0 And [Cell_ROOT_Trsk]>0,3,IIf(([Cell_ROOT_Flds]>0 And [Cell_ROOT_NatVeg]>0) Or ([Cell_ROOT_Flds]>0 And [Cell_ROOT_Trsk]>0) Or ([Cell_ROOT_NatVeg]>0 And [Cell_ROOT_Trsk]>0),2,IIf([Cell_ROOT_Flds]>0 Or [Cell_ROOT_NatVeg]>0 Or [Cell_ROOT_Trsk]>0,1,0))) AS ct, IIf([ct]>0,([Cell_ROOT_Flds]+[Cell_ROOT_NatVeg]+[Cell_ROOT_Trsk])/[ct],0) AS Cell_ROOT INTO Values_For_MODFLOW" & DateString & " "
                QueryString += "FROM (((((UpStreamGrid LEFT JOIN Grid_Trsk_Intersect ON UpStreamGrid.Cell_Number = Grid_Trsk_Intersect.Cell_Number) LEFT JOIN Grid_PhilFlds_Intersect ON UpStreamGrid.Cell_Number = Grid_PhilFlds_Intersect.Cell_Number) LEFT JOIN Grid_NatVeg_Intersect ON UpStreamGrid.Cell_Number = Grid_NatVeg_Intersect.Cell_Number) LEFT JOIN WaterAllocation" & DateString & " ON Grid_PhilFlds_Intersect.FIELD_NO = WaterAllocation" & DateString & ".Field_No) LEFT JOIN WaterAllocation_NatVeg_Trsk_" & DateString & " ON Grid_NatVeg_Intersect.Poly_ID = WaterAllocation_NatVeg_Trsk_" & DateString & ".Poly_ID) LEFT JOIN WaterAllocation_NatVeg_Trsk_" & DateString & " AS WaterAllocation_NatVeg_Trsk_" & DateString & "_1 ON Grid_Trsk_Intersect.Id = WaterAllocation_NatVeg_Trsk_" & DateString & "_1.Poly_ID "
                QueryString += "GROUP BY UpStreamGrid.Cell_Number;"
            Else
                QueryString = "SELECT UpStreamGrid.Cell_Number, IIf(Sum(([Grid_DWRFlds_Intersect]![Shape_Ar_1]*(([WaterAllocation" & DateString & "]![SurfWatDelivered]+[WaterAllocation" & DateString & "]![PumpWatDelivered]+[WaterAllocation" & DateString & "]![Precip_Amt]-[WaterAllocation" & DateString & "]![Runoff_Amt])/1000))/62500)>0,Sum(([Grid_DWRFlds_Intersect]![Shape_Ar_1]*(([WaterAllocation" & DateString & "]![SurfWatDelivered]+[WaterAllocation" & DateString & "]![PumpWatDelivered]+[WaterAllocation" & DateString & "]![Precip_Amt]-[WaterAllocation" & DateString & "]![Runoff_Amt])/1000))/62500),0) AS Cell_Applied_Flds, IIf(Sum(([Grid_NatVeg_Intersect]![Shape_Ar_1]*(IIf([WaterAllocation_NatVeg_Trsk_" & DateString & "]![Precip_Amt]>30,[WaterAllocation_NatVeg_Trsk_" & DateString & "]![Precip_Amt]*0.5,[WaterAllocation_NatVeg_Trsk_" & DateString & "]![Precip_Amt]*0.7)/1000))/62500)>0,Sum(([Grid_NatVeg_Intersect]![Shape_Ar_1]*(IIf([WaterAllocation_NatVeg_Trsk_" & DateString & "]![Precip_Amt]>30,[WaterAllocation_NatVeg_Trsk_" & DateString & "]![Precip_Amt]*0.5,[WaterAllocation_NatVeg_Trsk_" & DateString & "]![Precip_Amt]*0.7)/1000))/62500),0) AS Cell_Precip_NatVeg, IIf(Sum(([Grid_Trsk_Intersect]![Shape_Ar_1]*(IIf([WaterAllocation_NatVeg_Trsk_" & DateString & "_1]![Precip_Amt]>30,[WaterAllocation_NatVeg_Trsk_" & DateString & "_1]![Precip_Amt]*0.5,[WaterAllocation_NatVeg_Trsk_" & DateString & "_1]![Precip_Amt]*0.7)/1000))/62500)>0,Sum(([Grid_Trsk_Intersect]![Shape_Ar_1]*(IIf([WaterAllocation_NatVeg_Trsk_" & DateString & "_1]![Precip_Amt]>30,[WaterAllocation_NatVeg_Trsk_" & DateString & "_1]![Precip_Amt]*0.5,[WaterAllocation_NatVeg_Trsk_" & DateString & "_1]![Precip_Amt]*0.7)/1000))/62500),0) AS Cell_Precip_Trsk, (IIf(Sum((Grid_DWRFlds_Intersect!Shape_Ar_1*((WaterAllocation" & DateString & "!SurfWatDelivered+WaterAllocation" & DateString & "!PumpWatDelivered+WaterAllocation" & DateString & "!Precip_Amt-WaterAllocation" & DateString & "!Runoff_Amt)/1000))/62500)>0, "
                QueryString += "Sum((Grid_DWRFlds_Intersect!Shape_Ar_1*((WaterAllocation" & DateString & "!SurfWatDelivered+WaterAllocation" & DateString & "!PumpWatDelivered+WaterAllocation" & DateString & "!Precip_Amt-WaterAllocation" & DateString & "!Runoff_Amt)/1000))/62500),0))+(IIf(Sum((Grid_Trsk_Intersect!Shape_Ar_1*(IIf(WaterAllocation_NatVeg_Trsk_" & DateString & "_1!Precip_Amt>30,WaterAllocation_NatVeg_Trsk_" & DateString & "_1!Precip_Amt*0.5,WaterAllocation_NatVeg_Trsk_" & DateString & "_1!Precip_Amt*0.7)/1000))/62500)>0,Sum((Grid_Trsk_Intersect!Shape_Ar_1*(IIf(WaterAllocation_NatVeg_Trsk_" & DateString & "_1!Precip_Amt>30,WaterAllocation_NatVeg_Trsk_" & DateString & "_1!Precip_Amt*0.5,WaterAllocation_NatVeg_Trsk_" & DateString & "_1!Precip_Amt*0.7)/1000))/62500),0))+(IIf(Sum((Grid_NatVeg_Intersect!Shape_Ar_1*(IIf(WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt>30,WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt*0.5,WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt*0.7)/1000))/62500)>0,Sum((Grid_NatVeg_Intersect!Shape_Ar_1*(IIf(WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt>30,WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt*0.5,WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt*0.7)/1000))/62500),0)) AS Cell_Infil, IIf(Sum([Grid_DWRFlds_Intersect]![Shape_Ar_1]*([WaterAllocation" & DateString & "]![ETc]/1000))/62500>0,Sum([Grid_DWRFlds_Intersect]![Shape_Ar_1]*([WaterAllocation" & DateString & "]![ETc]/1000))/62500,0) AS Cell_ET_Flds, IIf(Sum([Grid_NatVeg_Intersect]![Shape_Ar_1]*([WaterAllocation_NatVeg_Trsk_" & DateString & "]![ETc]/1000))/62500>0,Sum([Grid_NatVeg_Intersect]![Shape_Ar_1]*([WaterAllocation_NatVeg_Trsk_" & DateString & "]![ETc]/1000))/62500,0) AS Cell_ET_NatVeg, IIf(Sum([Grid_Trsk_Intersect]![Shape_Ar_1]*([WaterAllocation_NatVeg_Trsk_" & DateString & "_1]![ETc]/1000))/62500>0,Sum([Grid_Trsk_Intersect]![Shape_Ar_1]*([WaterAllocation_NatVeg_Trsk_" & DateString & "_1]![ETc]/1000))/62500,0) AS Cell_ET_Trsk, "
                QueryString += "(IIf(Sum([Grid_DWRFlds_Intersect]![Shape_Ar_1]*([WaterAllocation" & DateString & "]![ETc]/1000))/62500>0,Sum([Grid_DWRFlds_Intersect]![Shape_Ar_1]*([WaterAllocation" & DateString & "]![ETc]/1000))/62500,0))+(IIf(Sum([Grid_NatVeg_Intersect]![Shape_Ar_1]*([WaterAllocation_NatVeg_Trsk_" & DateString & "]![ETc]/1000))/62500>0,Sum([Grid_NatVeg_Intersect]![Shape_Ar_1]*([WaterAllocation_NatVeg_Trsk_" & DateString & "]![ETc]/1000))/62500,0))+(IIf(Sum([Grid_Trsk_Intersect]![Shape_Ar_1]*([WaterAllocation_NatVeg_Trsk_" & DateString & "_1]![ETc]/1000))/62500>0,Sum([Grid_Trsk_Intersect]![Shape_Ar_1]*([WaterAllocation_NatVeg_Trsk_" & DateString & "_1]![ETc]/1000))/62500,0)) AS Cell_ET, IIf(Avg(WaterAllocation" & DateString & "!Zr)>0,Avg(WaterAllocation" & DateString & "!Zr),0) AS Cell_ROOT_Flds, IIf(Avg(Grid_NatVeg_Intersect!ROOT_DEPTH)>0,Avg(Grid_NatVeg_Intersect!ROOT_DEPTH),0) AS Cell_ROOT_NatVeg, IIf(Avg(Grid_Trsk_Intersect!ROOT_DEPTH)>0,Avg(Grid_Trsk_Intersect!ROOT_DEPTH),0) AS Cell_ROOT_Trsk, IIf([Cell_ROOT_Flds]>0 And [Cell_ROOT_NatVeg]>0 And [Cell_ROOT_Trsk]>0,3,IIf(([Cell_ROOT_Flds]>0 And [Cell_ROOT_NatVeg]>0) Or ([Cell_ROOT_Flds]>0 And [Cell_ROOT_Trsk]>0) Or ([Cell_ROOT_NatVeg]>0 And [Cell_ROOT_Trsk]>0),2,IIf([Cell_ROOT_Flds]>0 Or [Cell_ROOT_NatVeg]>0 Or [Cell_ROOT_Trsk]>0,1,0))) AS ct, IIf([ct]>0,([Cell_ROOT_Flds]+[Cell_ROOT_NatVeg]+[Cell_ROOT_Trsk])/[ct],0) AS Cell_ROOT INTO Values_For_MODFLOW" & DateString & " "
                QueryString += "FROM (((((UpStreamGrid LEFT JOIN Grid_Trsk_Intersect ON UpStreamGrid.Cell_Number = Grid_Trsk_Intersect.Cell_Number) LEFT JOIN Grid_DWRFlds_Intersect ON UpStreamGrid.Cell_Number = Grid_DWRFlds_Intersect.Cell_Number) LEFT JOIN Grid_NatVeg_Intersect ON UpStreamGrid.Cell_Number = Grid_NatVeg_Intersect.Cell_Number) LEFT JOIN WaterAllocation" & DateString & " ON Grid_DWRFlds_Intersect.FIELD_NO = WaterAllocation" & DateString & ".Field_No) LEFT JOIN WaterAllocation_NatVeg_Trsk_" & DateString & " ON Grid_NatVeg_Intersect.Poly_ID = WaterAllocation_NatVeg_Trsk_" & DateString & ".Poly_ID) LEFT JOIN WaterAllocation_NatVeg_Trsk_" & DateString & " AS WaterAllocation_NatVeg_Trsk_" & DateString & "_1 ON Grid_Trsk_Intersect.Id = WaterAllocation_NatVeg_Trsk_" & DateString & "_1.Poly_ID "
                QueryString += "GROUP BY UpStreamGrid.Cell_Number;"

            End If
        Else
            If CurrentDate > #12/31/2003# Then
                QueryString = "SELECT DownStreamGrid.Cell_Number, IIf(Sum(([Grid_EricFlds_Intersect]![Shape_Ar_1]*(([WaterAllocation" & DateString & "]![SurfWatDelivered]+[WaterAllocation" & DateString & "]![PumpWatDelivered]+[WaterAllocation" & DateString & "]![Precip_Amt]-[WaterAllocation" & DateString & "]![Runoff_Amt])/1000))/62500)>0,Sum(([Grid_EricFlds_Intersect]![Shape_Ar_1]*(([WaterAllocation" & DateString & "]![SurfWatDelivered]+[WaterAllocation" & DateString & "]![PumpWatDelivered]+[WaterAllocation" & DateString & "]![Precip_Amt]-[WaterAllocation" & DateString & "]![Runoff_Amt])/1000))/62500),0) AS Cell_Applied_Flds, IIf(Sum(([Grid_NatVeg_Intersect]![Shape_Ar_1]*(IIf([WaterAllocation_NatVeg_Trsk_" & DateString & "]![Precip_Amt]>30,[WaterAllocation_NatVeg_Trsk_" & DateString & "]![Precip_Amt]*0.5,[WaterAllocation_NatVeg_Trsk_" & DateString & "]![Precip_Amt]*0.7)/1000))/62500)>0,Sum(([Grid_NatVeg_Intersect]![Shape_Ar_1]*(IIf([WaterAllocation_NatVeg_Trsk_" & DateString & "]![Precip_Amt]>30,[WaterAllocation_NatVeg_Trsk_" & DateString & "]![Precip_Amt]*0.5,[WaterAllocation_NatVeg_Trsk_" & DateString & "]![Precip_Amt]*0.7)/1000))/62500),0) AS Cell_Precip_NatVeg, IIf(Sum(([Grid_Trsk_Intersect]![Shape_Ar_1]*(IIf([WaterAllocation_NatVeg_Trsk_" & DateString & "_1]![Precip_Amt]>30,[WaterAllocation_NatVeg_Trsk_" & DateString & "_1]![Precip_Amt]*0.5,[WaterAllocation_NatVeg_Trsk_" & DateString & "_1]![Precip_Amt]*0.7)/1000))/62500)>0,Sum(([Grid_Trsk_Intersect]![Shape_Ar_1]*(IIf([WaterAllocation_NatVeg_Trsk_" & DateString & "_1]![Precip_Amt]>30,[WaterAllocation_NatVeg_Trsk_" & DateString & "_1]![Precip_Amt]*0.5,[WaterAllocation_NatVeg_Trsk_" & DateString & "_1]![Precip_Amt]*0.7)/1000))/62500),0) AS Cell_Precip_Trsk, (IIf(Sum((Grid_EricFlds_Intersect!Shape_Ar_1*((WaterAllocation" & DateString & "!SurfWatDelivered+WaterAllocation" & DateString & "!PumpWatDelivered+WaterAllocation" & DateString & "!Precip_Amt-WaterAllocation" & DateString & "!Runoff_Amt)/1000))/62500)>0, "
                QueryString += "Sum((Grid_EricFlds_Intersect!Shape_Ar_1*((WaterAllocation" & DateString & "!SurfWatDelivered+WaterAllocation" & DateString & "!PumpWatDelivered+WaterAllocation" & DateString & "!Precip_Amt-WaterAllocation" & DateString & "!Runoff_Amt)/1000))/62500),0))+(IIf(Sum((Grid_Trsk_Intersect!Shape_Ar_1*(IIf(WaterAllocation_NatVeg_Trsk_" & DateString & "_1!Precip_Amt>30,WaterAllocation_NatVeg_Trsk_" & DateString & "_1!Precip_Amt*0.5,WaterAllocation_NatVeg_Trsk_" & DateString & "_1!Precip_Amt*0.7)/1000))/62500)>0,Sum((Grid_Trsk_Intersect!Shape_Ar_1*(IIf(WaterAllocation_NatVeg_Trsk_" & DateString & "_1!Precip_Amt>30,WaterAllocation_NatVeg_Trsk_" & DateString & "_1!Precip_Amt*0.5,WaterAllocation_NatVeg_Trsk_" & DateString & "_1!Precip_Amt*0.7)/1000))/62500),0))+(IIf(Sum((Grid_NatVeg_Intersect!Shape_Ar_1*(IIf(WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt>30,WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt*0.5,WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt*0.7)/1000))/62500)>0,Sum((Grid_NatVeg_Intersect!Shape_Ar_1*(IIf(WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt>30,WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt*0.5,WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt*0.7)/1000))/62500),0)) AS Cell_Infil, IIf(Sum([Grid_EricFlds_Intersect]![Shape_Ar_1]*([WaterAllocation" & DateString & "]![ETc]/1000))/62500>0,Sum([Grid_EricFlds_Intersect]![Shape_Ar_1]*([WaterAllocation" & DateString & "]![ETc]/1000))/62500,0) AS Cell_ET_Flds, IIf(Sum([Grid_NatVeg_Intersect]![Shape_Ar_1]*([WaterAllocation_NatVeg_Trsk_" & DateString & "]![ETc]/1000))/62500>0,Sum([Grid_NatVeg_Intersect]![Shape_Ar_1]*([WaterAllocation_NatVeg_Trsk_" & DateString & "]![ETc]/1000))/62500,0) AS Cell_ET_NatVeg, IIf(Sum([Grid_Trsk_Intersect]![Shape_Ar_1]*([WaterAllocation_NatVeg_Trsk_" & DateString & "_1]![ETc]/1000))/62500>0,Sum([Grid_Trsk_Intersect]![Shape_Ar_1]*([WaterAllocation_NatVeg_Trsk_" & DateString & "_1]![ETc]/1000))/62500,0) AS Cell_ET_Trsk, "
                QueryString += "(IIf(Sum([Grid_EricFlds_Intersect]![Shape_Ar_1]*([WaterAllocation" & DateString & "]![ETc]/1000))/62500>0,Sum([Grid_EricFlds_Intersect]![Shape_Ar_1]*([WaterAllocation" & DateString & "]![ETc]/1000))/62500,0))+(IIf(Sum([Grid_NatVeg_Intersect]![Shape_Ar_1]*([WaterAllocation_NatVeg_Trsk_" & DateString & "]![ETc]/1000))/62500>0,Sum([Grid_NatVeg_Intersect]![Shape_Ar_1]*([WaterAllocation_NatVeg_Trsk_" & DateString & "]![ETc]/1000))/62500,0))+(IIf(Sum([Grid_Trsk_Intersect]![Shape_Ar_1]*([WaterAllocation_NatVeg_Trsk_" & DateString & "_1]![ETc]/1000))/62500>0,Sum([Grid_Trsk_Intersect]![Shape_Ar_1]*([WaterAllocation_NatVeg_Trsk_" & DateString & "_1]![ETc]/1000))/62500,0)) AS Cell_ET, IIf(Avg(WaterAllocation" & DateString & "!Zr)>0,Avg(WaterAllocation" & DateString & "!Zr),0) AS Cell_ROOT_Flds, IIf(Avg(Grid_NatVeg_Intersect!ROOT_DEPTH)>0,Avg(Grid_NatVeg_Intersect!ROOT_DEPTH),0) AS Cell_ROOT_NatVeg, IIf(Avg(Grid_Trsk_Intersect!ROOT_DEPTH)>0,Avg(Grid_Trsk_Intersect!ROOT_DEPTH),0) AS Cell_ROOT_Trsk, IIf([Cell_ROOT_Flds]>0 And [Cell_ROOT_NatVeg]>0 And [Cell_ROOT_Trsk]>0,3,IIf(([Cell_ROOT_Flds]>0 And [Cell_ROOT_NatVeg]>0) Or ([Cell_ROOT_Flds]>0 And [Cell_ROOT_Trsk]>0) Or ([Cell_ROOT_NatVeg]>0 And [Cell_ROOT_Trsk]>0),2,IIf([Cell_ROOT_Flds]>0 Or [Cell_ROOT_NatVeg]>0 Or [Cell_ROOT_Trsk]>0,1,0))) AS ct, IIf([ct]>0,([Cell_ROOT_Flds]+[Cell_ROOT_NatVeg]+[Cell_ROOT_Trsk])/[ct],0) AS Cell_ROOT INTO Values_For_MODFLOW" & DateString & " "
                QueryString += "FROM (((((DownStreamGrid LEFT JOIN Grid_Trsk_Intersect ON DownStreamGrid.Cell_Number = Grid_Trsk_Intersect.Cell_Number) LEFT JOIN Grid_EricFlds_Intersect ON DownStreamGrid.Cell_Number = Grid_EricFlds_Intersect.Cell_Number) LEFT JOIN Grid_NatVeg_Intersect ON DownStreamGrid.Cell_Number = Grid_NatVeg_Intersect.Cell_Number) LEFT JOIN WaterAllocation" & DateString & " ON Grid_EricFlds_Intersect.FIELD_NO = WaterAllocation" & DateString & ".Field_No) LEFT JOIN WaterAllocation_NatVeg_Trsk_" & DateString & " ON Grid_NatVeg_Intersect.Poly_ID = WaterAllocation_NatVeg_Trsk_" & DateString & ".Poly_ID) LEFT JOIN WaterAllocation_NatVeg_Trsk_" & DateString & " AS WaterAllocation_NatVeg_Trsk_" & DateString & "_1 ON Grid_Trsk_Intersect.Id = WaterAllocation_NatVeg_Trsk_" & DateString & "_1.Poly_ID "
                QueryString += "GROUP BY DownStreamGrid.Cell_Number;"
            Else
                QueryString = "SELECT DownStreamGrid.Cell_Number, IIf(Sum(([Grid_DWRFlds_Intersect]![Shape_Ar_1]*(([WaterAllocation" & DateString & "]![SurfWatDelivered]+[WaterAllocation" & DateString & "]![PumpWatDelivered]+[WaterAllocation" & DateString & "]![Precip_Amt]-[WaterAllocation" & DateString & "]![Runoff_Amt])/1000))/62500)>0,Sum(([Grid_DWRFlds_Intersect]![Shape_Ar_1]*(([WaterAllocation" & DateString & "]![SurfWatDelivered]+[WaterAllocation" & DateString & "]![PumpWatDelivered]+[WaterAllocation" & DateString & "]![Precip_Amt]-[WaterAllocation" & DateString & "]![Runoff_Amt])/1000))/62500),0) AS Cell_Applied_Flds, IIf(Sum(([Grid_NatVeg_Intersect]![Shape_Ar_1]*(IIf([WaterAllocation_NatVeg_Trsk_" & DateString & "]![Precip_Amt]>30,[WaterAllocation_NatVeg_Trsk_" & DateString & "]![Precip_Amt]*0.5,[WaterAllocation_NatVeg_Trsk_" & DateString & "]![Precip_Amt]*0.7)/1000))/62500)>0,Sum(([Grid_NatVeg_Intersect]![Shape_Ar_1]*(IIf([WaterAllocation_NatVeg_Trsk_" & DateString & "]![Precip_Amt]>30,[WaterAllocation_NatVeg_Trsk_" & DateString & "]![Precip_Amt]*0.5,[WaterAllocation_NatVeg_Trsk_" & DateString & "]![Precip_Amt]*0.7)/1000))/62500),0) AS Cell_Precip_NatVeg, IIf(Sum(([Grid_Trsk_Intersect]![Shape_Ar_1]*(IIf([WaterAllocation_NatVeg_Trsk_" & DateString & "_1]![Precip_Amt]>30,[WaterAllocation_NatVeg_Trsk_" & DateString & "_1]![Precip_Amt]*0.5,[WaterAllocation_NatVeg_Trsk_" & DateString & "_1]![Precip_Amt]*0.7)/1000))/62500)>0,Sum(([Grid_Trsk_Intersect]![Shape_Ar_1]*(IIf([WaterAllocation_NatVeg_Trsk_" & DateString & "_1]![Precip_Amt]>30,[WaterAllocation_NatVeg_Trsk_" & DateString & "_1]![Precip_Amt]*0.5,[WaterAllocation_NatVeg_Trsk_" & DateString & "_1]![Precip_Amt]*0.7)/1000))/62500),0) AS Cell_Precip_Trsk, (IIf(Sum((Grid_DWRFlds_Intersect!Shape_Ar_1*((WaterAllocation" & DateString & "!SurfWatDelivered+WaterAllocation" & DateString & "!PumpWatDelivered+WaterAllocation" & DateString & "!Precip_Amt-WaterAllocation" & DateString & "!Runoff_Amt)/1000))/62500)>0, "
                QueryString += "Sum((Grid_DWRFlds_Intersect!Shape_Ar_1*((WaterAllocation" & DateString & "!SurfWatDelivered+WaterAllocation" & DateString & "!PumpWatDelivered+WaterAllocation" & DateString & "!Precip_Amt-WaterAllocation" & DateString & "!Runoff_Amt)/1000))/62500),0))+(IIf(Sum((Grid_Trsk_Intersect!Shape_Ar_1*(IIf(WaterAllocation_NatVeg_Trsk_" & DateString & "_1!Precip_Amt>30,WaterAllocation_NatVeg_Trsk_" & DateString & "_1!Precip_Amt*0.5,WaterAllocation_NatVeg_Trsk_" & DateString & "_1!Precip_Amt*0.7)/1000))/62500)>0,Sum((Grid_Trsk_Intersect!Shape_Ar_1*(IIf(WaterAllocation_NatVeg_Trsk_" & DateString & "_1!Precip_Amt>30,WaterAllocation_NatVeg_Trsk_" & DateString & "_1!Precip_Amt*0.5,WaterAllocation_NatVeg_Trsk_" & DateString & "_1!Precip_Amt*0.7)/1000))/62500),0))+(IIf(Sum((Grid_NatVeg_Intersect!Shape_Ar_1*(IIf(WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt>30,WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt*0.5,WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt*0.7)/1000))/62500)>0,Sum((Grid_NatVeg_Intersect!Shape_Ar_1*(IIf(WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt>30,WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt*0.5,WaterAllocation_NatVeg_Trsk_" & DateString & "!Precip_Amt*0.7)/1000))/62500),0)) AS Cell_Infil, IIf(Sum([Grid_DWRFlds_Intersect]![Shape_Ar_1]*([WaterAllocation" & DateString & "]![ETc]/1000))/62500>0,Sum([Grid_DWRFlds_Intersect]![Shape_Ar_1]*([WaterAllocation" & DateString & "]![ETc]/1000))/62500,0) AS Cell_ET_Flds, IIf(Sum([Grid_NatVeg_Intersect]![Shape_Ar_1]*([WaterAllocation_NatVeg_Trsk_" & DateString & "]![ETc]/1000))/62500>0,Sum([Grid_NatVeg_Intersect]![Shape_Ar_1]*([WaterAllocation_NatVeg_Trsk_" & DateString & "]![ETc]/1000))/62500,0) AS Cell_ET_NatVeg, IIf(Sum([Grid_Trsk_Intersect]![Shape_Ar_1]*([WaterAllocation_NatVeg_Trsk_" & DateString & "_1]![ETc]/1000))/62500>0,Sum([Grid_Trsk_Intersect]![Shape_Ar_1]*([WaterAllocation_NatVeg_Trsk_" & DateString & "_1]![ETc]/1000))/62500,0) AS Cell_ET_Trsk, "
                QueryString += "(IIf(Sum([Grid_DWRFlds_Intersect]![Shape_Ar_1]*([WaterAllocation" & DateString & "]![ETc]/1000))/62500>0,Sum([Grid_DWRFlds_Intersect]![Shape_Ar_1]*([WaterAllocation" & DateString & "]![ETc]/1000))/62500,0))+(IIf(Sum([Grid_NatVeg_Intersect]![Shape_Ar_1]*([WaterAllocation_NatVeg_Trsk_" & DateString & "]![ETc]/1000))/62500>0,Sum([Grid_NatVeg_Intersect]![Shape_Ar_1]*([WaterAllocation_NatVeg_Trsk_" & DateString & "]![ETc]/1000))/62500,0))+(IIf(Sum([Grid_Trsk_Intersect]![Shape_Ar_1]*([WaterAllocation_NatVeg_Trsk_" & DateString & "_1]![ETc]/1000))/62500>0,Sum([Grid_Trsk_Intersect]![Shape_Ar_1]*([WaterAllocation_NatVeg_Trsk_" & DateString & "_1]![ETc]/1000))/62500,0)) AS Cell_ET, IIf(Avg(WaterAllocation" & DateString & "!Zr)>0,Avg(WaterAllocation" & DateString & "!Zr),0) AS Cell_ROOT_Flds, IIf(Avg(Grid_NatVeg_Intersect!ROOT_DEPTH)>0,Avg(Grid_NatVeg_Intersect!ROOT_DEPTH),0) AS Cell_ROOT_NatVeg, IIf(Avg(Grid_Trsk_Intersect!ROOT_DEPTH)>0,Avg(Grid_Trsk_Intersect!ROOT_DEPTH),0) AS Cell_ROOT_Trsk, IIf([Cell_ROOT_Flds]>0 And [Cell_ROOT_NatVeg]>0 And [Cell_ROOT_Trsk]>0,3,IIf(([Cell_ROOT_Flds]>0 And [Cell_ROOT_NatVeg]>0) Or ([Cell_ROOT_Flds]>0 And [Cell_ROOT_Trsk]>0) Or ([Cell_ROOT_NatVeg]>0 And [Cell_ROOT_Trsk]>0),2,IIf([Cell_ROOT_Flds]>0 Or [Cell_ROOT_NatVeg]>0 Or [Cell_ROOT_Trsk]>0,1,0))) AS ct, IIf([ct]>0,([Cell_ROOT_Flds]+[Cell_ROOT_NatVeg]+[Cell_ROOT_Trsk])/[ct],0) AS Cell_ROOT INTO Values_For_MODFLOW" & DateString & " "
                QueryString += "FROM (((((DownStreamGrid LEFT JOIN Grid_Trsk_Intersect ON DownStreamGrid.Cell_Number = Grid_Trsk_Intersect.Cell_Number) LEFT JOIN Grid_DWRFlds_Intersect ON DownStreamGrid.Cell_Number = Grid_DWRFlds_Intersect.Cell_Number) LEFT JOIN Grid_NatVeg_Intersect ON DownStreamGrid.Cell_Number = Grid_NatVeg_Intersect.Cell_Number) LEFT JOIN WaterAllocation" & DateString & " ON Grid_DWRFlds_Intersect.FIELD_NO = WaterAllocation" & DateString & ".Field_No) LEFT JOIN WaterAllocation_NatVeg_Trsk_" & DateString & " ON Grid_NatVeg_Intersect.Poly_ID = WaterAllocation_NatVeg_Trsk_" & DateString & ".Poly_ID) LEFT JOIN WaterAllocation_NatVeg_Trsk_" & DateString & " AS WaterAllocation_NatVeg_Trsk_" & DateString & "_1 ON Grid_Trsk_Intersect.Id = WaterAllocation_NatVeg_Trsk_" & DateString & "_1.Poly_ID "
                QueryString += "GROUP BY DownStreamGrid.Cell_Number;"

                'below is a string that should work in access.  I think the one above has too many
                'characters.  I removed the "AS Cell_Infil" calculation from the above query so that
                'it would work.
                'SELECT DownStreamGrid.Cell_Number, IIf(Sum(([Grid_DWRFlds_Intersect]![Shape_Ar_1]*(([WaterAllocation04042002]![SurfWatDelivered]+[WaterAllocation04042002]![PumpWatDelivered]+[WaterAllocation04042002]![Precip_Amt]-[WaterAllocation04042002]![Runoff_Amt])/1000))/62500)>0,Sum(([Grid_DWRFlds_Intersect]![Shape_Ar_1]*(([WaterAllocation04042002]![SurfWatDelivered]+[WaterAllocation04042002]![PumpWatDelivered]+[WaterAllocation04042002]![Precip_Amt]-[WaterAllocation04042002]![Runoff_Amt])/1000))/62500),0) AS Cell_Applied_Flds, IIf(Sum(([Grid_NatVeg_Intersect]![Shape_Ar_1]*(IIf([WaterAllocation_NatVeg_Trsk_04042002]![Precip_Amt]>30,[WaterAllocation_NatVeg_Trsk_04042002]![Precip_Amt]*0.5,[WaterAllocation_NatVeg_Trsk_04042002]![Precip_Amt]*0.7)/1000))/62500)>0,Sum(([Grid_NatVeg_Intersect]![Shape_Ar_1]*(IIf([WaterAllocation_NatVeg_Trsk_04042002]![Precip_Amt]>30,[WaterAllocation_NatVeg_Trsk_04042002]![Precip_Amt]*0.5,[WaterAllocation_NatVeg_Trsk_04042002]![Precip_Amt]*0.7)/1000))/62500),0) AS Cell_Precip_NatVeg, IIf(Sum(([Grid_Trsk_Intersect]![Shape_Ar_1]*(IIf([WaterAllocation_NatVeg_Trsk_04042002_1]![Precip_Amt]>30,[WaterAllocation_NatVeg_Trsk_04042002_1]![Precip_Amt]*0.5,[WaterAllocation_NatVeg_Trsk_04042002_1]![Precip_Amt]*0.7)/1000))/62500)>0,Sum(([Grid_Trsk_Intersect]![Shape_Ar_1]*(IIf([WaterAllocation_NatVeg_Trsk_04042002_1]![Precip_Amt]>30,[WaterAllocation_NatVeg_Trsk_04042002_1]![Precip_Amt]*0.5,[WaterAllocation_NatVeg_Trsk_04042002_1]![Precip_Amt]*0.7)/1000))/62500),0) AS Cell_Precip_Trsk, IIf(Sum([Grid_DWRFlds_Intersect]![Shape_Ar_1]*([WaterAllocation04042002]![ETc]/1000))/62500>0,Sum([Grid_DWRFlds_Intersect]![Shape_Ar_1]*([WaterAllocation04042002]![ETc]/1000))/62500,0) AS Cell_ET_Flds, IIf(Sum([Grid_NatVeg_Intersect]![Shape_Ar_1]*([WaterAllocation_NatVeg_Trsk_04042002]![ETc]/1000))/62500>0,Sum([Grid_NatVeg_Intersect]![Shape_Ar_1]*([WaterAllocation_NatVeg_Trsk_04042002]![ETc]/1000))/62500,0) AS Cell_ET_NatVeg, IIf(Sum([Grid_Trsk_Intersect]![Shape_Ar_1]*([WaterAllocation_NatVeg_Trsk_04042002_1]![ETc]/1000))/62500>0,Sum([Grid_Trsk_Intersect]![Shape_Ar_1]*([WaterAllocation_NatVeg_Trsk_04042002_1]![ETc]/1000))/62500,0) AS Cell_ET_Trsk, (IIf(Sum([Grid_DWRFlds_Intersect]![Shape_Ar_1]*([WaterAllocation04042002]![ETc]/1000))/62500>0,Sum([Grid_DWRFlds_Intersect]![Shape_Ar_1]*([WaterAllocation04042002]![ETc]/1000))/62500,0))+(IIf(Sum([Grid_NatVeg_Intersect]![Shape_Ar_1]*([WaterAllocation_NatVeg_Trsk_04042002]![ETc]/1000))/62500>0,Sum([Grid_NatVeg_Intersect]![Shape_Ar_1]*([WaterAllocation_NatVeg_Trsk_04042002]![ETc]/1000))/62500,0))+(IIf(Sum([Grid_Trsk_Intersect]![Shape_Ar_1]*([WaterAllocation_NatVeg_Trsk_04042002_1]![ETc]/1000))/62500>0,Sum([Grid_Trsk_Intersect]![Shape_Ar_1]*([WaterAllocation_NatVeg_Trsk_04042002_1]![ETc]/1000))/62500,0)) AS Cell_ET, IIf(Avg(WaterAllocation04042002!Zr)>0,Avg(WaterAllocation04042002!Zr),0) AS Cell_ROOT_Flds, IIf(Avg(Grid_NatVeg_Intersect!ROOT_DEPTH)>0,Avg(Grid_NatVeg_Intersect!ROOT_DEPTH),0) AS Cell_ROOT_NatVeg, IIf(Avg(Grid_Trsk_Intersect!ROOT_DEPTH)>0,Avg(Grid_Trsk_Intersect!ROOT_DEPTH),0) AS Cell_ROOT_Trsk, IIf([Cell_ROOT_Flds]>0 And [Cell_ROOT_NatVeg]>0 And [Cell_ROOT_Trsk]>0,3,IIf(([Cell_ROOT_Flds]>0 And [Cell_ROOT_NatVeg]>0) Or ([Cell_ROOT_Flds]>0 And [Cell_ROOT_Trsk]>0) Or ([Cell_ROOT_NatVeg]>0 And [Cell_ROOT_Trsk]>0),2,IIf([Cell_ROOT_Flds]>0 Or [Cell_ROOT_NatVeg]>0 Or [Cell_ROOT_Trsk]>0,1,0))) AS ct, IIf([ct]>0,([Cell_ROOT_Flds]+[Cell_ROOT_NatVeg]+[Cell_ROOT_Trsk])/[ct],0) AS Cell_ROOT INTO Values_For_MODFLOW04042002
                'FROM (((((DownStreamGrid LEFT JOIN Grid_Trsk_Intersect ON DownStreamGrid.Cell_Number = Grid_Trsk_Intersect.Cell_Number) LEFT JOIN Grid_DWRFlds_Intersect ON DownStreamGrid.Cell_Number = Grid_DWRFlds_Intersect.Cell_Number) LEFT JOIN Grid_NatVeg_Intersect ON DownStreamGrid.Cell_Number = Grid_NatVeg_Intersect.Cell_Number) LEFT JOIN WaterAllocation04042002 ON Grid_DWRFlds_Intersect.FIELD_NO = WaterAllocation04042002.Field_No) LEFT JOIN WaterAllocation_NatVeg_Trsk_04042002 ON Grid_NatVeg_Intersect.Poly_ID = WaterAllocation_NatVeg_Trsk_04042002.Poly_ID) LEFT JOIN WaterAllocation_NatVeg_Trsk_04042002 AS WaterAllocation_NatVeg_Trsk_04042002_1 ON Grid_Trsk_Intersect.Id = WaterAllocation_NatVeg_Trsk_04042002_1.Poly_ID
                'GROUP BY DownStreamGrid.Cell_Number;
            End If
        End If

        DataSorter.ExecuteQuery(QueryString)
    End Function
    Public Function Prepare_preMODFLOW_files_ForUZF_SQLDirect(ByVal SQL_inserter As MySQLUtils, ByVal CurrentDate As Date, ByRef AdjustTable As DataTable)
        'This function is meant to replace "Prepare_preMODFLOW_files_ForUZF"
        'because I am trying to streamline the code I want to do the queries on SQL server
        'rather than take the time to write on the local drive and then copy it over SQL

        Dim i As Integer
        Dim j As Integer
        Dim ct As Integer
        Dim DateString As String
        Dim m_row As DataRow
        Dim num_cells As Integer
        DateString = QueryDateString(CurrentDate)
        Dim QueryString As String
        Dim m_table As DataTable = New DataTable("Values_For_MODFLOW" & DateString)
        m_table = BuildMFTable(m_table)

        If Upstream_or_not1 Then
            num_cells = 27051
        Else
            num_cells = 22134
        End If

        Dim Flds_table As DataTable
        Dim NatVeg_table As DataTable
        Dim Trsk_table As DataTable
        'make a table that stores the Cell_Applied_Flds 
        If Me.Upstream_or_not1 = True Then
            If CurrentDate < #1/1/2002# Or CurrentDate > #12/31/2003# Then
                QueryString = "SELECT UpStreamGrid.Cell_Number, SUM(Grid_PhilFlds_Intersect.Shape_Ar_1 * ((WaterAllocation" & DateString & ".SurfWatDelivered + WaterAllocation" & DateString & ".PumpWatDelivered + WaterAllocation" & DateString & ".Precip_Amt - WaterAllocation" & DateString & ".Runoff_Amt) / 1000) / 62500) AS Cell_Applied_Flds, "
                QueryString += "SUM(Grid_PhilFlds_Intersect.Shape_Ar_1 * (WaterAllocation" & DateString & ".ETc / 1000)) / 62500 AS Cell_ET_Flds, "
                QueryString += "CASE WHEN AVG(WaterAllocation" & DateString & ".Zr) > 0 THEN AVG(WaterAllocation" & DateString & ".Zr) ELSE 0 END AS Cell_ROOT_Flds "
                QueryString += "FROM UpStreamGrid LEFT OUTER JOIN Grid_PhilFlds_Intersect LEFT OUTER JOIN WaterAllocation" & DateString & " ON Grid_PhilFlds_Intersect.FIELD_NO = WaterAllocation" & DateString & ".Field_No ON UpStreamGrid.Cell_Number = Grid_PhilFlds_Intersect.Cell_Number "
                QueryString += "GROUP BY UpStreamGrid.Cell_Number "
                QueryString += "ORDER BY UpStreamGrid.Cell_Number"
                Flds_table = SQL_inserter.GetTableFromDB(QueryString, "Flds_table")
            Else
                QueryString = "SELECT UpStreamGrid.Cell_Number, SUM(Grid_DWRFlds_Intersect.Shape_Ar_1 * ((WaterAllocation" & DateString & ".SurfWatDelivered + WaterAllocation" & DateString & ".PumpWatDelivered + WaterAllocation" & DateString & ".Precip_Amt - WaterAllocation" & DateString & ".Runoff_Amt) / 1000) / 62500) AS Cell_Applied_Flds, "
                QueryString += "SUM(Grid_DWRFlds_Intersect.Shape_Ar_1 * (WaterAllocation" & DateString & ".ETc / 1000)) / 62500 AS Cell_ET_Flds, "
                QueryString += "CASE WHEN AVG(WaterAllocation" & DateString & ".Zr) > 0 THEN AVG(WaterAllocation" & DateString & ".Zr) ELSE 0 END AS Cell_ROOT_Flds "
                QueryString += "FROM UpStreamGrid LEFT OUTER JOIN Grid_DWRFlds_Intersect LEFT OUTER JOIN WaterAllocation" & DateString & " ON Grid_DWRFlds_Intersect.FIELD_NO = WaterAllocation" & DateString & ".Field_No ON UpStreamGrid.Cell_Number = Grid_DWRFlds_Intersect.Cell_Number "
                QueryString += "GROUP BY UpStreamGrid.Cell_Number "
                QueryString += "ORDER BY UpStreamGrid.Cell_Number"
                Flds_table = SQL_inserter.GetTableFromDB(QueryString, "Flds_table")
            End If

            QueryString = "SELECT UpStreamGrid.Cell_Number, SUM((CASE WHEN Prec_NatVeg_Table.Prec" & DateString & " > 50 THEN Prec_NatVeg_Table.Prec" & DateString & " * 0.7 ELSE Prec_NatVeg_Table.Prec" & DateString & " END) / 1000 * Grid_NatVeg_Intersect.Shape_Ar_1 / 62500) AS Cell_Precip_NatVeg, "
            QueryString += "SUM(Grid_NatVeg_Intersect.Shape_Ar_1 * (ET_NatVeg_Table.ETc" & DateString & " / 1000)) / 62500 AS Cell_ET_NatVeg, "
            QueryString += "CASE WHEN SUM(Grid_NatVeg_Intersect.Shape_Ar_1) > 0 THEN 4 ELSE 0 END AS Cell_ROOT_NatVeg "
            QueryString += "FROM UpStreamGrid LEFT OUTER JOIN Prec_NatVeg_Table RIGHT OUTER JOIN ET_NatVeg_Table RIGHT OUTER JOIN Grid_NatVeg_Intersect ON ET_NatVeg_Table.Poly_ID = Grid_NatVeg_Intersect.Poly_ID ON Prec_NatVeg_Table.Poly_ID = Grid_NatVeg_Intersect.Poly_ID ON UpStreamGrid.Cell_Number = Grid_NatVeg_Intersect.Cell_Number "
            QueryString += "GROUP BY UpStreamGrid.Cell_Number "
            QueryString += "ORDER BY UpStreamGrid.Cell_Number"
            NatVeg_table = SQL_inserter.GetTableFromDB(QueryString, "NatVeg_table")

            QueryString = "SELECT UpStreamGrid.Cell_Number, SUM((CASE WHEN Prec_NatVeg_Table.Prec" & DateString & " > 50 THEN Prec_NatVeg_Table.Prec" & DateString & " * 0.7 ELSE Prec_NatVeg_Table.Prec" & DateString & " END) / 1000 * Grid_Trsk_Intersect.Shape_Ar_1 / 62500) AS Cell_Precip_Trsk, "
            QueryString += "SUM(Grid_Trsk_Intersect.Shape_Ar_1 * (ET_NatVeg_Table.ETc" & DateString & " / 1000)) / 62500 AS Cell_ET_Trsk, "
            QueryString += "CASE WHEN SUM(Grid_Trsk_Intersect.Shape_Ar_1) > 0 THEN 4 ELSE 0 END AS Cell_ROOT_Trsk "
            QueryString += "FROM UpStreamGrid LEFT OUTER JOIN Prec_NatVeg_Table Prec_NatVeg_Table RIGHT OUTER JOIN ET_NatVeg_Table ET_NatVeg_Table RIGHT OUTER JOIN Grid_Trsk_Intersect ON ET_NatVeg_Table.Poly_ID = Grid_Trsk_Intersect.Id ON Prec_NatVeg_Table.Poly_ID = Grid_Trsk_Intersect.Id ON UpStreamGrid.Cell_Number = Grid_Trsk_Intersect.Cell_Number "
            QueryString += "GROUP BY UpStreamGrid.Cell_Number "
            QueryString += "ORDER BY UpStreamGrid.Cell_Number"
            Trsk_table = SQL_inserter.GetTableFromDB(QueryString, "Trsk_table")
        Else    'code drops in here for the downstream
            If CurrentDate > #12/31/2003# Then
                QueryString = "SELECT DownStreamGrid.Cell_Number, SUM(Grid_EricFlds_Intersect.Shape_Ar_1 * ((WaterAllocation" & DateString & ".SurfWatDelivered + WaterAllocation" & DateString & ".PumpWatDelivered + WaterAllocation" & DateString & ".Precip_Amt - WaterAllocation" & DateString & ".Runoff_Amt) / 1000) / 62500) AS Cell_Applied_Flds, "
                QueryString += "SUM(Grid_EricFlds_Intersect.Shape_Ar_1 * (WaterAllocation" & DateString & ".ETc / 1000)) / 62500 AS Cell_ET_Flds, "
                QueryString += "CASE WHEN AVG(WaterAllocation" & DateString & ".Zr) > 0 THEN AVG(WaterAllocation" & DateString & ".Zr) ELSE 0 END AS Cell_ROOT_Flds "
                QueryString += "FROM DownStreamGrid LEFT OUTER JOIN Grid_EricFlds_Intersect LEFT OUTER JOIN WaterAllocation" & DateString & " ON Grid_EricFlds_Intersect.FIELD_NO = WaterAllocation" & DateString & ".Field_No ON DownStreamGrid.Cell_Number = Grid_EricFlds_Intersect.Cell_Number "
                QueryString += "GROUP BY DownStreamGrid.Cell_Number "
                QueryString += "ORDER BY DownStreamGrid.Cell_Number"
                Flds_table = SQL_inserter.GetTableFromDB(QueryString, "Flds_table")
            Else
                QueryString = "SELECT DownStreamGrid.Cell_Number, SUM(Grid_DWRFlds_Intersect.Shape_Ar_1 * ((WaterAllocation" & DateString & ".SurfWatDelivered + WaterAllocation" & DateString & ".PumpWatDelivered + WaterAllocation" & DateString & ".Precip_Amt - WaterAllocation" & DateString & ".Runoff_Amt) / 1000) / 62500) AS Cell_Applied_Flds, "
                QueryString += "SUM(Grid_DWRFlds_Intersect.Shape_Ar_1 * (WaterAllocation" & DateString & ".ETc / 1000)) / 62500 AS Cell_ET_Flds, "
                QueryString += "CASE WHEN AVG(WaterAllocation" & DateString & ".Zr) > 0 THEN AVG(WaterAllocation" & DateString & ".Zr) ELSE 0 END AS Cell_ROOT_Flds "
                QueryString += "FROM DownStreamGrid LEFT OUTER JOIN Grid_DWRFlds_Intersect LEFT OUTER JOIN WaterAllocation" & DateString & " ON Grid_DWRFlds_Intersect.FIELD_NO = WaterAllocation" & DateString & ".Field_No ON DownStreamGrid.Cell_Number = Grid_DWRFlds_Intersect.Cell_Number "
                QueryString += "GROUP BY DownStreamGrid.Cell_Number "
                QueryString += "ORDER BY DownStreamGrid.Cell_Number"
                Flds_table = SQL_inserter.GetTableFromDB(QueryString, "Flds_table")
            End If

            QueryString = "SELECT DownStreamGrid.Cell_Number, SUM((CASE WHEN Prec_NatVeg_Table.Prec" & DateString & " > 50 THEN Prec_NatVeg_Table.Prec" & DateString & " * 0.7 ELSE Prec_NatVeg_Table.Prec" & DateString & " END) / 1000 * Grid_NatVeg_Intersect.Shape_Ar_1 / 62500) AS Cell_Precip_NatVeg, "
            QueryString += "SUM(Grid_NatVeg_Intersect.Shape_Ar_1 * (ET_NatVeg_Table.ETc" & DateString & " / 1000)) / 62500 AS Cell_ET_NatVeg, "
            QueryString += "CASE WHEN SUM(Grid_NatVeg_Intersect.Shape_Ar_1) > 0 THEN 4 ELSE 0 END AS Cell_ROOT_NatVeg "
            QueryString += "FROM DownStreamGrid LEFT OUTER JOIN Prec_NatVeg_Table RIGHT OUTER JOIN ET_NatVeg_Table RIGHT OUTER JOIN Grid_NatVeg_Intersect ON ET_NatVeg_Table.Poly_ID = Grid_NatVeg_Intersect.Poly_ID ON Prec_NatVeg_Table.Poly_ID = Grid_NatVeg_Intersect.Poly_ID ON DownStreamGrid.Cell_Number = Grid_NatVeg_Intersect.Cell_Number "
            QueryString += "GROUP BY DownStreamGrid.Cell_Number "
            QueryString += "ORDER BY DownStreamGrid.Cell_Number"
            NatVeg_table = SQL_inserter.GetTableFromDB(QueryString, "NatVeg_table")

            QueryString = "SELECT DownStreamGrid.Cell_Number, SUM((CASE WHEN Prec_NatVeg_Table.Prec" & DateString & " > 50 THEN Prec_NatVeg_Table.Prec" & DateString & " * 0.7 ELSE Prec_NatVeg_Table.Prec" & DateString & " END) / 1000 * Grid_Trsk_Intersect.Shape_Ar_1 / 62500) AS Cell_Precip_Trsk, "
            QueryString += "SUM(Grid_Trsk_Intersect.Shape_Ar_1 * (ET_NatVeg_Table.ETc" & DateString & " / 1000)) / 62500 AS Cell_ET_Trsk, "
            QueryString += "CASE WHEN SUM(Grid_Trsk_Intersect.Shape_Ar_1) > 0 THEN 4 ELSE 0 END AS Cell_ROOT_Trsk "
            QueryString += "FROM DownStreamGrid LEFT OUTER JOIN Prec_NatVeg_Table Prec_NatVeg_Table RIGHT OUTER JOIN ET_NatVeg_Table ET_NatVeg_Table RIGHT OUTER JOIN Grid_Trsk_Intersect ON ET_NatVeg_Table.Poly_ID = Grid_Trsk_Intersect.Id ON Prec_NatVeg_Table.Poly_ID = Grid_Trsk_Intersect.Id ON DownStreamGrid.Cell_Number = Grid_Trsk_Intersect.Cell_Number "
            QueryString += "GROUP BY DownStreamGrid.Cell_Number "
            QueryString += "ORDER BY DownStreamGrid.Cell_Number"
            Trsk_table = SQL_inserter.GetTableFromDB(QueryString, "Trsk_table")
        End If

        'There is a problem where some of the naturally vegetated areas overlap the irrigated fields.
        'The best thing to do would be go back and clip the polygons but this would require I redo all the
        'grid/field(or naturally vegetated or tamarisk) intersect and that the resulting tables have
        'exactly the same column names.  I'm going to do a quicker fix here but coming up with a 
        'multiplier to down adjust values based on the overlap.  Future efforts may want to fix this.
        'Dim fld_chk As DataTable     'a temp table to check shape areas within the current cell
        'Dim nv_chk As DataTable     'a temp table to check shape areas within the current cell
        'Dim tk_chk As DataTable     'a temp table to check shape areas within the current cell
        'Dim sum_area As Single
        'Dim multiplier As Single

        'temp-only once
        'Dim dump_table As DataTable
        'Dim m_col As DataColumn

        'dump_table = New DataTable("Overlap_Correction")
        'm_col = New DataColumn
        'With m_col
        '    .ColumnName = "Cell_ID"
        '    .DataType = GetType(System.Int32)
        'End With
        'dump_table.Columns.Add(m_col)

        'm_col = New DataColumn
        'With m_col
        '    .ColumnName = "Correcting_Multiplier"
        '    .DataType = GetType(System.Single)
        'End With
        'dump_table.Columns.Add(m_col)

        'For i = 1 To num_cells
        '    If Me.Upstream_or_not1 = True Then
        '        If i >= 145 And i < 249 Then
        '            QueryString = "SELECT Cell_Number, SUM(Shape_Ar_1) FROM Grid_DWRFlds_Intersect GROUP BY Cell_Number HAVING Cell_Number = " & CStr(i) & ";"
        '        Else
        '            QueryString = "SELECT Cell_Number, SUM(Shape_Ar_1) FROM Grid_PhilFlds_Intersect GROUP BY Cell_Number HAVING Cell_Number = " & CStr(i) & ";"
        '        End If
        '    Else
        '        If i <= 92 Then
        '            QueryString = "SELECT Cell_Number, SUM(Shape_Ar_1) FROM Grid_DWRFlds_Intersect GROUP BY Cell_Number HAVING Cell_Number = " & CStr(i) & ";"
        '        Else
        '            QueryString = "SELECT Cell_Number, SUM(Shape_Ar_1) FROM Grid_EricFlds_Intersect GROUP BY Cell_Number HAVING Cell_Number = " & CStr(i) & ";"
        '        End If
        '    End If
        '    fld_chk = DataSorter.GetTableFromDB(QueryString, "fld_chk")
        '    QueryString = "SELECT Cell_Number, SUM(Shape_Ar_1) FROM Grid_NatVeg_Intersect GROUP BY Cell_Number HAVING Cell_Number = " & CStr(i) & ";"
        '    nv_chk = DataSorter.GetTableFromDB(QueryString, "nv_chk")
        '    QueryString = "SELECT Cell_Number, SUM(Shape_Ar_1) FROM Grid_Trsk_Intersect GROUP BY Cell_Number HAVING Cell_Number = " & CStr(i) & ";"
        '    tk_chk = DataSorter.GetTableFromDB(QueryString, "tk_chk")
        '    sum_area = 0
        '    'Sum the areas if a row were returned for each table.
        '    If fld_chk.Rows.Count > 0 Then
        '        sum_area += fld_chk.Rows(0)(1)
        '    End If
        '    If nv_chk.Rows.Count > 0 Then
        '        sum_area += nv_chk.Rows(0)(1)
        '    End If
        '    If tk_chk.Rows.Count > 0 Then
        '        sum_area += tk_chk.Rows(0)(1)
        '    End If

        '    If sum_area > 62501 Then
        '        multiplier = 62500 / sum_area
        '    Else
        '        multiplier = 1
        '    End If
        '    m_row = dump_table.NewRow()
        '    m_row(0) = i
        '    m_row(1) = multiplier
        '    dump_table.Rows.Add(m_row)
        'Next i
        'DataSorter.CreateTableInDB(dump_table)
        'DataSorter.InsertValuesInDBTable(dump_table)

        For i = 1 To num_cells

            ct = 0
            m_row = m_table.NewRow()
            m_row("Cell_Number") = i
            If Flds_table.Select("Cell_Number = " & i).GetValue(0)("Cell_Applied_Flds").GetType() Is GetType(System.DBNull) Then
                m_row("Cell_Applied_Flds") = 0
            Else
                m_row("Cell_Applied_Flds") = (Flds_table.Select("Cell_Number = " & i).GetValue(0)("Cell_Applied_Flds") * AdjustTable.Select("Cell_ID = " & i).GetValue(0)("Correcting_Multiplier"))
            End If
            If NatVeg_table.Select("Cell_Number = " & i).GetValue(0)("Cell_Precip_NatVeg").GetType() Is GetType(System.DBNull) Then
                m_row("Cell_Precip_NatVeg") = 0
            Else
                m_row("Cell_Precip_NatVeg") = (NatVeg_table.Select("Cell_Number = " & i).GetValue(0)("Cell_Precip_NatVeg") * AdjustTable.Select("Cell_ID = " & i).GetValue(0)("Correcting_Multiplier"))
            End If
            If Trsk_table.Select("Cell_Number = " & i).GetValue(0)("Cell_Precip_Trsk").GetType() Is GetType(System.DBNull) Then
                m_row("Cell_Precip_Trsk") = 0
            Else
                m_row("Cell_Precip_Trsk") = (Trsk_table.Select("Cell_Number = " & i).GetValue(0)("Cell_Precip_Trsk") * AdjustTable.Select("Cell_ID = " & i).GetValue(0)("Correcting_Multiplier"))
            End If
            m_row("Cell_Infil") = m_row("Cell_Applied_Flds") + m_row("Cell_Precip_NatVeg") + m_row("Cell_Precip_Trsk")

            If Flds_table.Select("Cell_Number = " & i).GetValue(0)("Cell_ET_Flds").GetType Is GetType(System.DBNull) Then
                m_row("Cell_ET_Flds") = 0
            Else
                m_row("Cell_ET_Flds") = (Flds_table.Select("Cell_Number = " & i).GetValue(0)("Cell_ET_Flds") * AdjustTable.Select("Cell_ID = " & i).GetValue(0)("Correcting_Multiplier"))
            End If
            If NatVeg_table.Select("Cell_Number = " & i).GetValue(0)("Cell_ET_NatVeg").GetType() Is GetType(System.DBNull) Then
                m_row("Cell_ET_NatVeg") = 0
            Else
                m_row("Cell_ET_NatVeg") = (NatVeg_table.Select("Cell_Number = " & i).GetValue(0)("Cell_ET_NatVeg") * AdjustTable.Select("Cell_ID = " & i).GetValue(0)("Correcting_Multiplier"))
            End If
            If Trsk_table.Select("Cell_Number = " & i).GetValue(0)("Cell_ET_Trsk").GetType() Is GetType(System.DBNull) Then
                m_row("Cell_ET_Trsk") = 0
            Else
                m_row("Cell_ET_Trsk") = (Trsk_table.Select("Cell_Number = " & i).GetValue(0)("Cell_ET_Trsk") * AdjustTable.Select("Cell_ID = " & i).GetValue(0)("Correcting_Multiplier"))
            End If
            m_row("Cell_ET") = m_row("Cell_ET_Flds") + m_row("Cell_ET_NatVeg") + m_row("Cell_ET_Trsk")

            If Flds_table.Select("Cell_Number = " & i).GetValue(0)("Cell_ROOT_Flds").GetType() Is GetType(System.DBNull) Then
                m_row("Cell_ROOT_Flds") = 0
            Else
                m_row("Cell_ROOT_Flds") = Flds_table.Select("Cell_Number = " & i).GetValue(0)("Cell_ROOT_Flds")
            End If
            'do a simple check to see if a value is present and if so then incrementally increase ct for subsequent storage
            If Flds_table.Select("Cell_Number = " & i).GetValue(0)("Cell_ROOT_Flds") > 0 Then ct += 1
            If NatVeg_table.Select("Cell_Number = " & i).GetValue(0)("Cell_ROOT_NatVeg").GetType() Is GetType(System.DBNull) Then
                m_row("Cell_ROOT_NatVeg") = 0
            Else
                m_row("Cell_ROOT_NatVeg") = NatVeg_table.Select("Cell_Number = " & i).GetValue(0)("Cell_ROOT_NatVeg")
            End If
            If NatVeg_table.Select("Cell_Number = " & i).GetValue(0)("Cell_ROOT_NatVeg") > 0 Then ct += 1
            If Trsk_table.Select("Cell_Number = " & i).GetValue(0)("Cell_ROOT_Trsk").GetType() Is GetType(System.DBNull) Then
                m_row("Cell_ROOT_Trsk") = 0
            Else
                m_row("Cell_ROOT_Trsk") = Trsk_table.Select("Cell_Number = " & i).GetValue(0)("Cell_ROOT_Trsk")
            End If
            If Trsk_table.Select("Cell_Number = " & i).GetValue(0)("Cell_ROOT_Trsk") > 0 Then ct += 1
            m_row("ct") = ct
            'if statement ensures division by zero isn't attempted.
            If ct > 0 Then
                m_row("Cell_ROOT") = (m_row("Cell_ROOT_Flds") + m_row("Cell_ROOT_NatVeg") + m_row("Cell_ROOT_Trsk")) / ct
            Else
                m_row("Cell_ROOT") = 0
            End If

            m_table.Rows.Add(m_row)
        Next i

        Try
            SQL_inserter.DeleteExistingTable("Values_For_MODFLOW" & DateString)
        Catch ex As Exception
        End Try
        SQL_inserter.CreateTableInDB(m_table)
        SQL_inserter.InsertValuesInDBTable(m_table)

        Flds_table = Nothing
        NatVeg_table = Nothing
        Trsk_table = Nothing

        'If Upstream_or_not1 Then
        '    If CurrentDate < #1/1/2002# Or CurrentDate > #12/31/2003# Then
        '        QueryString = "SELECT UpStreamGrid.Cell_Number, CASE WHEN SUM((Grid_PhilFlds_Intersect.Shape_Ar_1 * ((WaterAllocation" & DateString & ".SurfWatDelivered + WaterAllocation" & DateString & ".PumpWatDelivered  + WaterAllocation" & DateString & ".Precip_Amt - WaterAllocation" & DateString & ".Runoff_Amt) / 1000)) / 62500) > 0 THEN SUM((Grid_PhilFlds_Intersect.Shape_Ar_1 * ((WaterAllocation" & DateString & ".SurfWatDelivered + WaterAllocation" & DateString & ".PumpWatDelivered + WaterAllocation" & DateString & ".Precip_Amt  - WaterAllocation" & DateString & ".Runoff_Amt) / 1000)) / 62500) ELSE 0 END AS Cell_Applied_Flds, CASE WHEN SUM((CASE WHEN Prec_NatVeg_Table.Prec" & DateString & " > 50 THEN Prec_NatVeg_Table.Prec" & DateString & " * 0.7 ELSE Prec_NatVeg_Table.Prec" & DateString & "  END) / 1000 * Grid_NatVeg_Intersect.Shape_Ar_1 / 62500) > 0 THEN SUM((CASE WHEN Prec_NatVeg_Table.Prec" & DateString & " > 50 THEN Prec_NatVeg_Table.Prec" & DateString & " * 0.7 ELSE Prec_NatVeg_Table.Prec" & DateString & "  END) / 1000 * Grid_NatVeg_Intersect.Shape_Ar_1 / 62500) ELSE 0 END AS Cell_Precip_NatVeg, CASE WHEN SUM((CASE WHEN Prec_NatVeg_Table_1.Prec" & DateString & " > 50 THEN Prec_NatVeg_Table_1.Prec" & DateString & " * 0.7 ELSE Prec_NatVeg_Table_1.Prec" & DateString & "  END) / 1000 * Grid_Trsk_Intersect.Shape_Ar_1 / 62500) > 0 THEN SUM((CASE WHEN Prec_NatVeg_Table_1.Prec" & DateString & " > 50 THEN Prec_NatVeg_Table_1.Prec" & DateString & " * 0.7 ELSE Prec_NatVeg_Table_1.Prec" & DateString & "  END) / 1000 * Grid_Trsk_Intersect.Shape_Ar_1 / 62500) ELSE 0 END AS Cell_Precip_Trsk, (CASE WHEN SUM((Grid_PhilFlds_Intersect.Shape_Ar_1 * ((WaterAllocation" & DateString & ".SurfWatDelivered + WaterAllocation" & DateString & ".PumpWatDelivered  + WaterAllocation" & DateString & ".Precip_Amt - WaterAllocation" & DateString & ".Runoff_Amt) / 1000)) / 62500) > 0 THEN "
        '        QueryString += "SUM((Grid_PhilFlds_Intersect.Shape_Ar_1 * ((WaterAllocation" & DateString & ".SurfWatDelivered + WaterAllocation" & DateString & ".PumpWatDelivered + WaterAllocation" & DateString & ".Precip_Amt - WaterAllocation" & DateString & ".Runoff_Amt) / 1000)) / 62500) ELSE 0 END) + (CASE WHEN SUM((CASE WHEN Prec_NatVeg_Table.Prec" & DateString & " > 50 THEN Prec_NatVeg_Table.Prec" & DateString & " * 0.7 ELSE Prec_NatVeg_Table.Prec" & DateString & "  END) / 1000 * Grid_NatVeg_Intersect.Shape_Ar_1 / 62500) > 0 THEN SUM((CASE WHEN Prec_NatVeg_Table.Prec" & DateString & " > 50 THEN Prec_NatVeg_Table.Prec" & DateString & " * 0.7 ELSE Prec_NatVeg_Table.Prec" & DateString & "  END) / 1000 * Grid_NatVeg_Intersect.Shape_Ar_1 / 62500) ELSE 0 END) + (CASE WHEN SUM((CASE WHEN Prec_NatVeg_Table_1.Prec" & DateString & " > 50 THEN Prec_NatVeg_Table_1.Prec" & DateString & " * 0.7 ELSE Prec_NatVeg_Table_1.Prec" & DateString & "  END) / 1000 * Grid_Trsk_Intersect.Shape_Ar_1 / 62500) > 0 THEN SUM((CASE WHEN Prec_NatVeg_Table_1.Prec" & DateString & " > 50 THEN Prec_NatVeg_Table_1.Prec" & DateString & " * 0.7 ELSE Prec_NatVeg_Table_1.Prec" & DateString & "  END) / 1000 * Grid_Trsk_Intersect.Shape_Ar_1 / 62500) ELSE 0 END) AS Cell_Infil, CASE WHEN SUM(Grid_PhilFlds_Intersect.Shape_Ar_1 * (WaterAllocation" & DateString & ".ETc / 1000)) / 62500 > 0 THEN SUM(Grid_PhilFlds_Intersect.Shape_Ar_1 * (WaterAllocation" & DateString & ".ETc / 1000)) / 62500 ELSE 0 END AS Cell_ET_Flds, CASE WHEN SUM(Grid_NatVeg_Intersect.Shape_Ar_1 * (ET_NatVeg_Table.ETc" & DateString & " / 1000)) / 62500 > 0 THEN SUM(Grid_NatVeg_Intersect.Shape_Ar_1 * (ET_NatVeg_Table.ETc" & DateString & " / 1000)) / 62500 ELSE 0 END AS Cell_ET_NatVeg, CASE WHEN SUM(Grid_Trsk_Intersect.Shape_Ar_1 * (ET_NatVeg_Table_1.ETc" & DateString & " / 1000)) / 62500 > 0 THEN "
        '        QueryString += "SUM(Grid_Trsk_Intersect.Shape_Ar_1 * (ET_NatVeg_Table_1.ETc" & DateString & " / 1000)) / 62500 ELSE 0 END AS Cell_ET_Trsk, (CASE WHEN SUM(Grid_PhilFlds_Intersect.Shape_Ar_1 * (WaterAllocation" & DateString & ".ETc / 1000)) / 62500 > 0 THEN SUM(Grid_PhilFlds_Intersect.Shape_Ar_1 * (WaterAllocation" & DateString & ".ETc / 1000)) / 62500 ELSE 0 END) + (CASE WHEN SUM(Grid_NatVeg_Intersect.Shape_Ar_1 * (ET_NatVeg_Table.ETc" & DateString & " / 1000)) / 62500 > 0 THEN SUM(Grid_NatVeg_Intersect.Shape_Ar_1 * (ET_NatVeg_Table.ETc" & DateString & " / 1000)) / 62500 ELSE 0 END) + (CASE WHEN SUM(Grid_Trsk_Intersect.Shape_Ar_1 * (ET_NatVeg_Table_1.ETc" & DateString & " / 1000)) / 62500 > 0 THEN SUM(Grid_Trsk_Intersect.Shape_Ar_1 * (ET_NatVeg_Table_1.ETc" & DateString & " / 1000)) / 62500 ELSE 0 END) AS Cell_ET, CASE WHEN AVG(WaterAllocation" & DateString & ".Zr) > 0 THEN AVG(WaterAllocation" & DateString & ".Zr) ELSE 0 END AS Cell_ROOT_Flds, CASE WHEN SUM(Grid_NatVeg_Intersect.Shape_Ar_1) > 0 THEN 4 ELSE 0 END AS Cell_ROOT_NatVeg, CASE WHEN SUM(Grid_Trsk_Intersect.Shape_Ar_1) > 0 THEN 4 ELSE 0 END AS Cell_ROOT_Trsk, CASE WHEN (CASE WHEN AVG(WaterAllocation" & DateString & ".Zr) > 0 THEN AVG(WaterAllocation" & DateString & ".Zr) ELSE 0 END) > 0 AND (CASE WHEN SUM(Grid_NatVeg_Intersect.Shape_Ar_1) > 0 THEN 4 ELSE 0 END) > 0 AND (CASE WHEN SUM(Grid_Trsk_Intersect.Shape_Ar_1) > 0 THEN 4 ELSE 0 END) > 0 THEN 3 ELSE CASE WHEN ((CASE WHEN AVG(WaterAllocation" & DateString & ".Zr) > 0 THEN AVG(WaterAllocation" & DateString & ".Zr) ELSE 0 END) > 0 AND (CASE WHEN SUM(Grid_NatVeg_Intersect.Shape_Ar_1) > 0 THEN 4 ELSE 0 END) > 0) OR ((CASE WHEN AVG(WaterAllocation" & DateString & ".Zr) > 0 THEN AVG(WaterAllocation" & DateString & ".Zr) ELSE 0 END) > 0 "
        '        QueryString += "AND (CASE WHEN SUM(Grid_Trsk_Intersect.Shape_Ar_1) > 0 THEN 4 ELSE 0 END) > 0) OR ((CASE WHEN SUM(Grid_NatVeg_Intersect.Shape_Ar_1) > 0 THEN 4 ELSE 0 END) > 0 AND (CASE WHEN SUM(Grid_Trsk_Intersect.Shape_Ar_1) > 0 THEN 4 ELSE 0 END) > 0) THEN 2 ELSE CASE WHEN (CASE WHEN AVG(WaterAllocation" & DateString & ".Zr) > 0 THEN AVG(WaterAllocation" & DateString & ".Zr) ELSE 0 END) > 0 OR (CASE WHEN SUM(Grid_NatVeg_Intersect.Shape_Ar_1) > 0 THEN 4 ELSE 0 END) > 0 OR (CASE WHEN SUM(Grid_Trsk_Intersect.Shape_Ar_1) > 0 THEN 4 ELSE 0 END) > 0 THEN 1 ELSE 0 END END END AS ct, CASE WHEN (CASE WHEN (CASE WHEN AVG(WaterAllocation" & DateString & ".Zr) > 0 THEN AVG(WaterAllocation" & DateString & ".Zr) ELSE 0 END) > 0 AND (CASE WHEN SUM(Grid_NatVeg_Intersect.Shape_Ar_1) > 0 THEN 4 ELSE 0 END) > 0 AND (CASE WHEN SUM(Grid_Trsk_Intersect.Shape_Ar_1) > 0 THEN 4 ELSE 0 END) > 0 THEN 3 ELSE CASE WHEN ((CASE WHEN AVG(WaterAllocation" & DateString & ".Zr) > 0 THEN AVG(WaterAllocation" & DateString & ".Zr) ELSE 0 END) > 0 AND (CASE WHEN SUM(Grid_NatVeg_Intersect.Shape_Ar_1) > 0 THEN 4 ELSE 0 END) > 0) OR ((CASE WHEN AVG(WaterAllocation" & DateString & ".Zr) > 0 THEN AVG(WaterAllocation" & DateString & ".Zr) ELSE 0 END) > 0 AND (CASE WHEN SUM(Grid_Trsk_Intersect.Shape_Ar_1) > 0 THEN 4 ELSE 0 END) > 0) OR ((CASE WHEN SUM(Grid_NatVeg_Intersect.Shape_Ar_1) > 0 THEN 4 ELSE 0 END) > 0 AND (CASE WHEN SUM(Grid_Trsk_Intersect.Shape_Ar_1) > 0 THEN 4 ELSE 0 END) > 0) THEN 2 ELSE CASE WHEN (CASE WHEN AVG(WaterAllocation" & DateString & ".Zr) > 0 THEN AVG(WaterAllocation" & DateString & ".Zr) ELSE 0 END) > 0 OR (CASE WHEN SUM(Grid_NatVeg_Intersect.Shape_Ar_1) > 0 THEN 4 ELSE 0 END) > 0 OR "
        '        QueryString += "(CASE WHEN SUM(Grid_Trsk_Intersect.Shape_Ar_1) > 0 THEN 4 ELSE 0 END) > 0 THEN 1 ELSE 0 END END END) > 0 THEN (CASE WHEN AVG(WaterAllocation" & DateString & ".Zr) > 0 THEN AVG(WaterAllocation" & DateString & ".Zr) ELSE 0 END + CASE WHEN SUM(Grid_NatVeg_Intersect.Shape_Ar_1) > 0 THEN 4 ELSE 0 END + CASE WHEN SUM(Grid_Trsk_Intersect.Shape_Ar_1) > 0 THEN 4 ELSE 0 END) / CASE WHEN (CASE WHEN AVG(WaterAllocation" & DateString & ".Zr) > 0 THEN AVG(WaterAllocation" & DateString & ".Zr) ELSE 0 END) > 0 AND (CASE WHEN SUM(Grid_NatVeg_Intersect.Shape_Ar_1) > 0 THEN 4 ELSE 0 END) > 0 AND (CASE WHEN SUM(Grid_Trsk_Intersect.Shape_Ar_1) > 0 THEN 4 ELSE 0 END) > 0 THEN 3 ELSE CASE WHEN ((CASE WHEN AVG(WaterAllocation" & DateString & ".Zr) > 0 THEN AVG(WaterAllocation" & DateString & ".Zr) ELSE 0 END) > 0 AND (CASE WHEN SUM(Grid_NatVeg_Intersect.Shape_Ar_1) > 0 THEN 4 ELSE 0 END) > 0) OR ((CASE WHEN AVG(WaterAllocation" & DateString & ".Zr) > 0 THEN AVG(WaterAllocation" & DateString & ".Zr) ELSE 0 END) > 0 AND (CASE WHEN SUM(Grid_Trsk_Intersect.Shape_Ar_1) > 0 THEN 4 ELSE 0 END) > 0) OR ((CASE WHEN SUM(Grid_NatVeg_Intersect.Shape_Ar_1) > 0 THEN 4 ELSE 0 END) > 0 AND (CASE WHEN SUM(Grid_Trsk_Intersect.Shape_Ar_1) > 0 THEN 4 ELSE 0 END) > 0) THEN 2 ELSE CASE WHEN (CASE WHEN AVG(WaterAllocation" & DateString & ".Zr) > 0 THEN AVG(WaterAllocation" & DateString & ".Zr) ELSE 0 END) > 0 OR (CASE WHEN SUM(Grid_NatVeg_Intersect.Shape_Ar_1) > 0 THEN 4 ELSE 0 END) > 0 OR (CASE WHEN SUM(Grid_Trsk_Intersect.Shape_Ar_1) > 0 THEN 4 ELSE 0 END) > 0 THEN 1 ELSE 0 END END END ELSE 0 END AS Cell_ROOT "
        '        QueryString += "INTO Values_For_MODFLOW" & DateString & " "
        '        QueryString += "FROM UpStreamGrid LEFT OUTER JOIN Prec_NatVeg_Table Prec_NatVeg_Table_1 RIGHT OUTER JOIN ET_NatVeg_Table ET_NatVeg_Table_1 RIGHT OUTER JOIN Grid_Trsk_Intersect ON ET_NatVeg_Table_1.Poly_ID = Grid_Trsk_Intersect.Id ON Prec_NatVeg_Table_1.Poly_ID = Grid_Trsk_Intersect.Id ON UpStreamGrid.Cell_Number = Grid_Trsk_Intersect.Cell_Number LEFT OUTER JOIN Prec_NatVeg_Table RIGHT OUTER JOIN ET_NatVeg_Table RIGHT OUTER JOIN Grid_NatVeg_Intersect ON ET_NatVeg_Table.Poly_ID = Grid_NatVeg_Intersect.Poly_ID ON Prec_NatVeg_Table.Poly_ID = Grid_NatVeg_Intersect.Poly_ID ON UpStreamGrid.Cell_Number = Grid_NatVeg_Intersect.Cell_Number LEFT OUTER JOIN Grid_PhilFlds_Intersect LEFT OUTER JOIN WaterAllocation" & DateString & " ON Grid_PhilFlds_Intersect.FIELD_NO = WaterAllocation" & DateString & ".Field_No ON UpStreamGrid.Cell_Number = Grid_PhilFlds_Intersect.Cell_Number "
        '        QueryString += "GROUP BY UpStreamGrid.Cell_Number "
        '        QueryString += "ORDER BY UpStreamGrid.Cell_Number;"

        '    Else
        '        QueryString = "SELECT UpStreamGrid.Cell_Number, CASE WHEN SUM((Grid_DWRFlds_Intersect.Shape_Ar_1 * ((WaterAllocation" & DateString & ".SurfWatDelivered + WaterAllocation" & DateString & ".PumpWatDelivered  + WaterAllocation" & DateString & ".Precip_Amt - WaterAllocation" & DateString & ".Runoff_Amt) / 1000)) / 62500) > 0 THEN SUM((Grid_DWRFlds_Intersect.Shape_Ar_1 * ((WaterAllocation" & DateString & ".SurfWatDelivered + WaterAllocation" & DateString & ".PumpWatDelivered + WaterAllocation" & DateString & ".Precip_Amt  - WaterAllocation" & DateString & ".Runoff_Amt) / 1000)) / 62500) ELSE 0 END AS Cell_Applied_Flds, CASE WHEN SUM((CASE WHEN Prec_NatVeg_Table.Prec" & DateString & " > 50 THEN Prec_NatVeg_Table.Prec" & DateString & " * 0.7 ELSE Prec_NatVeg_Table.Prec" & DateString & "  END) / 1000 * Grid_NatVeg_Intersect.Shape_Ar_1 / 62500) > 0 THEN SUM((CASE WHEN Prec_NatVeg_Table.Prec" & DateString & " > 50 THEN Prec_NatVeg_Table.Prec" & DateString & " * 0.7 ELSE Prec_NatVeg_Table.Prec" & DateString & "  END) / 1000 * Grid_NatVeg_Intersect.Shape_Ar_1 / 62500) ELSE 0 END AS Cell_Precip_NatVeg, CASE WHEN SUM((CASE WHEN Prec_NatVeg_Table_1.Prec" & DateString & " > 50 THEN Prec_NatVeg_Table_1.Prec" & DateString & " * 0.7 ELSE Prec_NatVeg_Table_1.Prec" & DateString & "  END) / 1000 * Grid_Trsk_Intersect.Shape_Ar_1 / 62500) > 0 THEN SUM((CASE WHEN Prec_NatVeg_Table_1.Prec" & DateString & " > 50 THEN Prec_NatVeg_Table_1.Prec" & DateString & " * 0.7 ELSE Prec_NatVeg_Table_1.Prec" & DateString & "  END) / 1000 * Grid_Trsk_Intersect.Shape_Ar_1 / 62500) ELSE 0 END AS Cell_Precip_Trsk, (CASE WHEN SUM((Grid_DWRFlds_Intersect.Shape_Ar_1 * ((WaterAllocation" & DateString & ".SurfWatDelivered + WaterAllocation" & DateString & ".PumpWatDelivered  + WaterAllocation" & DateString & ".Precip_Amt - WaterAllocation" & DateString & ".Runoff_Amt) / 1000)) / 62500) > 0 THEN "
        '        QueryString += "SUM((Grid_DWRFlds_Intersect.Shape_Ar_1 * ((WaterAllocation" & DateString & ".SurfWatDelivered + WaterAllocation" & DateString & ".PumpWatDelivered + WaterAllocation" & DateString & ".Precip_Amt - WaterAllocation" & DateString & ".Runoff_Amt) / 1000)) / 62500) ELSE 0 END) + (CASE WHEN SUM((CASE WHEN Prec_NatVeg_Table.Prec" & DateString & " > 50 THEN Prec_NatVeg_Table.Prec" & DateString & " * 0.7 ELSE Prec_NatVeg_Table.Prec" & DateString & "  END) / 1000 * Grid_NatVeg_Intersect.Shape_Ar_1 / 62500) > 0 THEN SUM((CASE WHEN Prec_NatVeg_Table.Prec" & DateString & " > 50 THEN Prec_NatVeg_Table.Prec" & DateString & " * 0.7 ELSE Prec_NatVeg_Table.Prec" & DateString & "  END) / 1000 * Grid_NatVeg_Intersect.Shape_Ar_1 / 62500) ELSE 0 END) + (CASE WHEN SUM((CASE WHEN Prec_NatVeg_Table_1.Prec" & DateString & " > 50 THEN Prec_NatVeg_Table_1.Prec" & DateString & " * 0.7 ELSE Prec_NatVeg_Table_1.Prec" & DateString & "  END) / 1000 * Grid_Trsk_Intersect.Shape_Ar_1 / 62500) > 0 THEN SUM((CASE WHEN Prec_NatVeg_Table_1.Prec" & DateString & " > 50 THEN Prec_NatVeg_Table_1.Prec" & DateString & " * 0.7 ELSE Prec_NatVeg_Table_1.Prec" & DateString & "  END) / 1000 * Grid_Trsk_Intersect.Shape_Ar_1 / 62500) ELSE 0 END) AS Cell_Infil, CASE WHEN SUM(Grid_DWRFlds_Intersect.Shape_Ar_1 * (WaterAllocation" & DateString & ".ETc / 1000)) / 62500 > 0 THEN SUM(Grid_DWRFlds_Intersect.Shape_Ar_1 * (WaterAllocation" & DateString & ".ETc / 1000)) / 62500 ELSE 0 END AS Cell_ET_Flds, CASE WHEN SUM(Grid_NatVeg_Intersect.Shape_Ar_1 * (ET_NatVeg_Table.ETc" & DateString & " / 1000)) / 62500 > 0 THEN SUM(Grid_NatVeg_Intersect.Shape_Ar_1 * (ET_NatVeg_Table.ETc" & DateString & " / 1000)) / 62500 ELSE 0 END AS Cell_ET_NatVeg, CASE WHEN SUM(Grid_Trsk_Intersect.Shape_Ar_1 * (ET_NatVeg_Table_1.ETc" & DateString & " / 1000)) / 62500 > 0 THEN "
        '        QueryString += "SUM(Grid_Trsk_Intersect.Shape_Ar_1 * (ET_NatVeg_Table_1.ETc" & DateString & " / 1000)) / 62500 ELSE 0 END AS Cell_ET_Trsk, (CASE WHEN SUM(Grid_DWRFlds_Intersect.Shape_Ar_1 * (WaterAllocation" & DateString & ".ETc / 1000)) / 62500 > 0 THEN SUM(Grid_DWRFlds_Intersect.Shape_Ar_1 * (WaterAllocation" & DateString & ".ETc / 1000)) / 62500 ELSE 0 END) + (CASE WHEN SUM(Grid_NatVeg_Intersect.Shape_Ar_1 * (ET_NatVeg_Table.ETc" & DateString & " / 1000)) / 62500 > 0 THEN SUM(Grid_NatVeg_Intersect.Shape_Ar_1 * (ET_NatVeg_Table.ETc" & DateString & " / 1000)) / 62500 ELSE 0 END) + (CASE WHEN SUM(Grid_Trsk_Intersect.Shape_Ar_1 * (ET_NatVeg_Table_1.ETc" & DateString & " / 1000)) / 62500 > 0 THEN SUM(Grid_Trsk_Intersect.Shape_Ar_1 * (ET_NatVeg_Table_1.ETc" & DateString & " / 1000)) / 62500 ELSE 0 END) AS Cell_ET, CASE WHEN AVG(WaterAllocation" & DateString & ".Zr) > 0 THEN AVG(WaterAllocation" & DateString & ".Zr) ELSE 0 END AS Cell_ROOT_Flds, CASE WHEN SUM(Grid_NatVeg_Intersect.Shape_Ar_1) > 0 THEN 4 ELSE 0 END AS Cell_ROOT_NatVeg, CASE WHEN SUM(Grid_Trsk_Intersect.Shape_Ar_1) > 0 THEN 4 ELSE 0 END AS Cell_ROOT_Trsk, CASE WHEN (CASE WHEN AVG(WaterAllocation" & DateString & ".Zr) > 0 THEN AVG(WaterAllocation" & DateString & ".Zr) ELSE 0 END) > 0 AND (CASE WHEN SUM(Grid_NatVeg_Intersect.Shape_Ar_1) > 0 THEN 4 ELSE 0 END) > 0 AND (CASE WHEN SUM(Grid_Trsk_Intersect.Shape_Ar_1) > 0 THEN 4 ELSE 0 END) > 0 THEN 3 ELSE CASE WHEN ((CASE WHEN AVG(WaterAllocation" & DateString & ".Zr) > 0 THEN AVG(WaterAllocation" & DateString & ".Zr) ELSE 0 END) > 0 AND (CASE WHEN SUM(Grid_NatVeg_Intersect.Shape_Ar_1) > 0 THEN 4 ELSE 0 END) > 0) OR ((CASE WHEN AVG(WaterAllocation" & DateString & ".Zr) > 0 THEN AVG(WaterAllocation" & DateString & ".Zr) ELSE 0 END) > 0 "
        '        QueryString += "AND (CASE WHEN SUM(Grid_Trsk_Intersect.Shape_Ar_1) > 0 THEN 4 ELSE 0 END) > 0) OR ((CASE WHEN SUM(Grid_NatVeg_Intersect.Shape_Ar_1) > 0 THEN 4 ELSE 0 END) > 0 AND (CASE WHEN SUM(Grid_Trsk_Intersect.Shape_Ar_1) > 0 THEN 4 ELSE 0 END) > 0) THEN 2 ELSE CASE WHEN (CASE WHEN AVG(WaterAllocation" & DateString & ".Zr) > 0 THEN AVG(WaterAllocation" & DateString & ".Zr) ELSE 0 END) > 0 OR (CASE WHEN SUM(Grid_NatVeg_Intersect.Shape_Ar_1) > 0 THEN 4 ELSE 0 END) > 0 OR (CASE WHEN SUM(Grid_Trsk_Intersect.Shape_Ar_1) > 0 THEN 4 ELSE 0 END) > 0 THEN 1 ELSE 0 END END END AS ct, CASE WHEN (CASE WHEN (CASE WHEN AVG(WaterAllocation" & DateString & ".Zr) > 0 THEN AVG(WaterAllocation" & DateString & ".Zr) ELSE 0 END) > 0 AND (CASE WHEN SUM(Grid_NatVeg_Intersect.Shape_Ar_1) > 0 THEN 4 ELSE 0 END) > 0 AND (CASE WHEN SUM(Grid_Trsk_Intersect.Shape_Ar_1) > 0 THEN 4 ELSE 0 END) > 0 THEN 3 ELSE CASE WHEN ((CASE WHEN AVG(WaterAllocation" & DateString & ".Zr) > 0 THEN AVG(WaterAllocation" & DateString & ".Zr) ELSE 0 END) > 0 AND (CASE WHEN SUM(Grid_NatVeg_Intersect.Shape_Ar_1) > 0 THEN 4 ELSE 0 END) > 0) OR ((CASE WHEN AVG(WaterAllocation" & DateString & ".Zr) > 0 THEN AVG(WaterAllocation" & DateString & ".Zr) ELSE 0 END) > 0 AND (CASE WHEN SUM(Grid_Trsk_Intersect.Shape_Ar_1) > 0 THEN 4 ELSE 0 END) > 0) OR ((CASE WHEN SUM(Grid_NatVeg_Intersect.Shape_Ar_1) > 0 THEN 4 ELSE 0 END) > 0 AND (CASE WHEN SUM(Grid_Trsk_Intersect.Shape_Ar_1) > 0 THEN 4 ELSE 0 END) > 0) THEN 2 ELSE CASE WHEN (CASE WHEN AVG(WaterAllocation" & DateString & ".Zr) > 0 THEN AVG(WaterAllocation" & DateString & ".Zr) ELSE 0 END) > 0 OR (CASE WHEN SUM(Grid_NatVeg_Intersect.Shape_Ar_1) > 0 THEN 4 ELSE 0 END) > 0 OR "
        '        QueryString += "(CASE WHEN SUM(Grid_Trsk_Intersect.Shape_Ar_1) > 0 THEN 4 ELSE 0 END) > 0 THEN 1 ELSE 0 END END END) > 0 THEN (CASE WHEN AVG(WaterAllocation" & DateString & ".Zr) > 0 THEN AVG(WaterAllocation" & DateString & ".Zr) ELSE 0 END + CASE WHEN SUM(Grid_NatVeg_Intersect.Shape_Ar_1) > 0 THEN 4 ELSE 0 END + CASE WHEN SUM(Grid_Trsk_Intersect.Shape_Ar_1) > 0 THEN 4 ELSE 0 END) / CASE WHEN (CASE WHEN AVG(WaterAllocation" & DateString & ".Zr) > 0 THEN AVG(WaterAllocation" & DateString & ".Zr) ELSE 0 END) > 0 AND (CASE WHEN SUM(Grid_NatVeg_Intersect.Shape_Ar_1) > 0 THEN 4 ELSE 0 END) > 0 AND (CASE WHEN SUM(Grid_Trsk_Intersect.Shape_Ar_1) > 0 THEN 4 ELSE 0 END) > 0 THEN 3 ELSE CASE WHEN ((CASE WHEN AVG(WaterAllocation" & DateString & ".Zr) > 0 THEN AVG(WaterAllocation" & DateString & ".Zr) ELSE 0 END) > 0 AND (CASE WHEN SUM(Grid_NatVeg_Intersect.Shape_Ar_1) > 0 THEN 4 ELSE 0 END) > 0) OR ((CASE WHEN AVG(WaterAllocation" & DateString & ".Zr) > 0 THEN AVG(WaterAllocation" & DateString & ".Zr) ELSE 0 END) > 0 AND (CASE WHEN SUM(Grid_Trsk_Intersect.Shape_Ar_1) > 0 THEN 4 ELSE 0 END) > 0) OR ((CASE WHEN SUM(Grid_NatVeg_Intersect.Shape_Ar_1) > 0 THEN 4 ELSE 0 END) > 0 AND (CASE WHEN SUM(Grid_Trsk_Intersect.Shape_Ar_1) > 0 THEN 4 ELSE 0 END) > 0) THEN 2 ELSE CASE WHEN (CASE WHEN AVG(WaterAllocation" & DateString & ".Zr) > 0 THEN AVG(WaterAllocation" & DateString & ".Zr) ELSE 0 END) > 0 OR (CASE WHEN SUM(Grid_NatVeg_Intersect.Shape_Ar_1) > 0 THEN 4 ELSE 0 END) > 0 OR (CASE WHEN SUM(Grid_Trsk_Intersect.Shape_Ar_1) > 0 THEN 4 ELSE 0 END) > 0 THEN 1 ELSE 0 END END END ELSE 0 END AS Cell_ROOT "
        '        QueryString += "INTO Values_For_MODFLOW" & DateString & " "
        '        QueryString += "FROM UpStreamGrid LEFT OUTER JOIN Prec_NatVeg_Table Prec_NatVeg_Table_1 RIGHT OUTER JOIN ET_NatVeg_Table ET_NatVeg_Table_1 RIGHT OUTER JOIN Grid_Trsk_Intersect ON ET_NatVeg_Table_1.Poly_ID = Grid_Trsk_Intersect.Id ON Prec_NatVeg_Table_1.Poly_ID = Grid_Trsk_Intersect.Id ON UpStreamGrid.Cell_Number = Grid_Trsk_Intersect.Cell_Number LEFT OUTER JOIN Prec_NatVeg_Table RIGHT OUTER JOIN ET_NatVeg_Table RIGHT OUTER JOIN Grid_NatVeg_Intersect ON ET_NatVeg_Table.Poly_ID = Grid_NatVeg_Intersect.Poly_ID ON Prec_NatVeg_Table.Poly_ID = Grid_NatVeg_Intersect.Poly_ID ON UpStreamGrid.Cell_Number = Grid_NatVeg_Intersect.Cell_Number LEFT OUTER JOIN Grid_DWRFlds_Intersect LEFT OUTER JOIN WaterAllocation" & DateString & " ON Grid_DWRFlds_Intersect.FIELD_NO = WaterAllocation" & DateString & ".Field_No ON UpStreamGrid.Cell_Number = Grid_DWRFlds_Intersect.Cell_Number "
        '        QueryString += "GROUP BY UpStreamGrid.Cell_Number "
        '        QueryString += "ORDER BY UpStreamGrid.Cell_Number;"
        '    End If
        'Else
        '    If CurrentDate > #12/31/2003# Then
        '        QueryString = "SELECT DownStreamGrid.Cell_Number, CASE WHEN SUM((Grid_DWRFlds_Intersect.Shape_Ar_1 * ((WaterAllocation" & DateString & ".SurfWatDelivered + WaterAllocation" & DateString & ".PumpWatDelivered  + WaterAllocation" & DateString & ".Precip_Amt - WaterAllocation" & DateString & ".Runoff_Amt) / 1000)) / 62500) > 0 THEN SUM((Grid_DWRFlds_Intersect.Shape_Ar_1 * ((WaterAllocation" & DateString & ".SurfWatDelivered + WaterAllocation" & DateString & ".PumpWatDelivered + WaterAllocation" & DateString & ".Precip_Amt  - WaterAllocation" & DateString & ".Runoff_Amt) / 1000)) / 62500) ELSE 0 END AS Cell_Applied_Flds, CASE WHEN SUM((CASE WHEN Prec_NatVeg_Table.Prec" & DateString & " > 50 THEN Prec_NatVeg_Table.Prec" & DateString & " * 0.7 ELSE Prec_NatVeg_Table.Prec" & DateString & "  END) / 1000 * Grid_NatVeg_Intersect.Shape_Ar_1 / 62500) > 0 THEN SUM((CASE WHEN Prec_NatVeg_Table.Prec" & DateString & " > 50 THEN Prec_NatVeg_Table.Prec" & DateString & " * 0.7 ELSE Prec_NatVeg_Table.Prec" & DateString & "  END) / 1000 * Grid_NatVeg_Intersect.Shape_Ar_1 / 62500) ELSE 0 END AS Cell_Precip_NatVeg, CASE WHEN SUM((CASE WHEN Prec_NatVeg_Table_1.Prec" & DateString & " > 50 THEN Prec_NatVeg_Table_1.Prec" & DateString & " * 0.7 ELSE Prec_NatVeg_Table_1.Prec" & DateString & "  END) / 1000 * Grid_Trsk_Intersect.Shape_Ar_1 / 62500) > 0 THEN SUM((CASE WHEN Prec_NatVeg_Table_1.Prec" & DateString & " > 50 THEN Prec_NatVeg_Table_1.Prec" & DateString & " * 0.7 ELSE Prec_NatVeg_Table_1.Prec" & DateString & "  END) / 1000 * Grid_Trsk_Intersect.Shape_Ar_1 / 62500) ELSE 0 END AS Cell_Precip_Trsk, (CASE WHEN SUM((Grid_DWRFlds_Intersect.Shape_Ar_1 * ((WaterAllocation" & DateString & ".SurfWatDelivered + WaterAllocation" & DateString & ".PumpWatDelivered  + WaterAllocation" & DateString & ".Precip_Amt - WaterAllocation" & DateString & ".Runoff_Amt) / 1000)) / 62500) > 0 THEN "
        '        QueryString += "SUM((Grid_DWRFlds_Intersect.Shape_Ar_1 * ((WaterAllocation" & DateString & ".SurfWatDelivered + WaterAllocation" & DateString & ".PumpWatDelivered + WaterAllocation" & DateString & ".Precip_Amt - WaterAllocation" & DateString & ".Runoff_Amt) / 1000)) / 62500) ELSE 0 END) + (CASE WHEN SUM((CASE WHEN Prec_NatVeg_Table.Prec" & DateString & " > 50 THEN Prec_NatVeg_Table.Prec" & DateString & " * 0.7 ELSE Prec_NatVeg_Table.Prec" & DateString & "  END) / 1000 * Grid_NatVeg_Intersect.Shape_Ar_1 / 62500) > 0 THEN SUM((CASE WHEN Prec_NatVeg_Table.Prec" & DateString & " > 50 THEN Prec_NatVeg_Table.Prec" & DateString & " * 0.7 ELSE Prec_NatVeg_Table.Prec" & DateString & "  END) / 1000 * Grid_NatVeg_Intersect.Shape_Ar_1 / 62500) ELSE 0 END) + (CASE WHEN SUM((CASE WHEN Prec_NatVeg_Table_1.Prec" & DateString & " > 50 THEN Prec_NatVeg_Table_1.Prec" & DateString & " * 0.7 ELSE Prec_NatVeg_Table_1.Prec" & DateString & "  END) / 1000 * Grid_Trsk_Intersect.Shape_Ar_1 / 62500) > 0 THEN SUM((CASE WHEN Prec_NatVeg_Table_1.Prec" & DateString & " > 50 THEN Prec_NatVeg_Table_1.Prec" & DateString & " * 0.7 ELSE Prec_NatVeg_Table_1.Prec" & DateString & "  END) / 1000 * Grid_Trsk_Intersect.Shape_Ar_1 / 62500) ELSE 0 END) AS Cell_Infil, CASE WHEN SUM(Grid_DWRFlds_Intersect.Shape_Ar_1 * (WaterAllocation" & DateString & ".ETc / 1000)) / 62500 > 0 THEN SUM(Grid_DWRFlds_Intersect.Shape_Ar_1 * (WaterAllocation" & DateString & ".ETc / 1000)) / 62500 ELSE 0 END AS Cell_ET_Flds, CASE WHEN SUM(Grid_NatVeg_Intersect.Shape_Ar_1 * (ET_NatVeg_Table.ETc" & DateString & " / 1000)) / 62500 > 0 THEN SUM(Grid_NatVeg_Intersect.Shape_Ar_1 * (ET_NatVeg_Table.ETc" & DateString & " / 1000)) / 62500 ELSE 0 END AS Cell_ET_NatVeg, CASE WHEN SUM(Grid_Trsk_Intersect.Shape_Ar_1 * (ET_NatVeg_Table_1.ETc" & DateString & " / 1000)) / 62500 > 0 THEN "
        '        QueryString += "SUM(Grid_Trsk_Intersect.Shape_Ar_1 * (ET_NatVeg_Table_1.ETc" & DateString & " / 1000)) / 62500 ELSE 0 END AS Cell_ET_Trsk, (CASE WHEN SUM(Grid_DWRFlds_Intersect.Shape_Ar_1 * (WaterAllocation" & DateString & ".ETc / 1000)) / 62500 > 0 THEN SUM(Grid_DWRFlds_Intersect.Shape_Ar_1 * (WaterAllocation" & DateString & ".ETc / 1000)) / 62500 ELSE 0 END) + (CASE WHEN SUM(Grid_NatVeg_Intersect.Shape_Ar_1 * (ET_NatVeg_Table.ETc" & DateString & " / 1000)) / 62500 > 0 THEN SUM(Grid_NatVeg_Intersect.Shape_Ar_1 * (ET_NatVeg_Table.ETc" & DateString & " / 1000)) / 62500 ELSE 0 END) + (CASE WHEN SUM(Grid_Trsk_Intersect.Shape_Ar_1 * (ET_NatVeg_Table_1.ETc" & DateString & " / 1000)) / 62500 > 0 THEN SUM(Grid_Trsk_Intersect.Shape_Ar_1 * (ET_NatVeg_Table_1.ETc" & DateString & " / 1000)) / 62500 ELSE 0 END) AS Cell_ET, CASE WHEN AVG(WaterAllocation" & DateString & ".Zr) > 0 THEN AVG(WaterAllocation" & DateString & ".Zr) ELSE 0 END AS Cell_ROOT_Flds, CASE WHEN SUM(Grid_NatVeg_Intersect.Shape_Ar_1) > 0 THEN 4 ELSE 0 END AS Cell_ROOT_NatVeg, CASE WHEN SUM(Grid_Trsk_Intersect.Shape_Ar_1) > 0 THEN 4 ELSE 0 END AS Cell_ROOT_Trsk, CASE WHEN (CASE WHEN AVG(WaterAllocation" & DateString & ".Zr) > 0 THEN AVG(WaterAllocation" & DateString & ".Zr) ELSE 0 END) > 0 AND (CASE WHEN SUM(Grid_NatVeg_Intersect.Shape_Ar_1) > 0 THEN 4 ELSE 0 END) > 0 AND (CASE WHEN SUM(Grid_Trsk_Intersect.Shape_Ar_1) > 0 THEN 4 ELSE 0 END) > 0 THEN 3 ELSE CASE WHEN ((CASE WHEN AVG(WaterAllocation" & DateString & ".Zr) > 0 THEN AVG(WaterAllocation" & DateString & ".Zr) ELSE 0 END) > 0 AND (CASE WHEN SUM(Grid_NatVeg_Intersect.Shape_Ar_1) > 0 THEN 4 ELSE 0 END) > 0) OR ((CASE WHEN AVG(WaterAllocation" & DateString & ".Zr) > 0 THEN AVG(WaterAllocation" & DateString & ".Zr) ELSE 0 END) > 0 "
        '        QueryString += "AND (CASE WHEN SUM(Grid_Trsk_Intersect.Shape_Ar_1) > 0 THEN 4 ELSE 0 END) > 0) OR ((CASE WHEN SUM(Grid_NatVeg_Intersect.Shape_Ar_1) > 0 THEN 4 ELSE 0 END) > 0 AND (CASE WHEN SUM(Grid_Trsk_Intersect.Shape_Ar_1) > 0 THEN 4 ELSE 0 END) > 0) THEN 2 ELSE CASE WHEN (CASE WHEN AVG(WaterAllocation" & DateString & ".Zr) > 0 THEN AVG(WaterAllocation" & DateString & ".Zr) ELSE 0 END) > 0 OR (CASE WHEN SUM(Grid_NatVeg_Intersect.Shape_Ar_1) > 0 THEN 4 ELSE 0 END) > 0 OR (CASE WHEN SUM(Grid_Trsk_Intersect.Shape_Ar_1) > 0 THEN 4 ELSE 0 END) > 0 THEN 1 ELSE 0 END END END AS ct, CASE WHEN (CASE WHEN (CASE WHEN AVG(WaterAllocation" & DateString & ".Zr) > 0 THEN AVG(WaterAllocation" & DateString & ".Zr) ELSE 0 END) > 0 AND (CASE WHEN SUM(Grid_NatVeg_Intersect.Shape_Ar_1) > 0 THEN 4 ELSE 0 END) > 0 AND (CASE WHEN SUM(Grid_Trsk_Intersect.Shape_Ar_1) > 0 THEN 4 ELSE 0 END) > 0 THEN 3 ELSE CASE WHEN ((CASE WHEN AVG(WaterAllocation" & DateString & ".Zr) > 0 THEN AVG(WaterAllocation" & DateString & ".Zr) ELSE 0 END) > 0 AND (CASE WHEN SUM(Grid_NatVeg_Intersect.Shape_Ar_1) > 0 THEN 4 ELSE 0 END) > 0) OR ((CASE WHEN AVG(WaterAllocation" & DateString & ".Zr) > 0 THEN AVG(WaterAllocation" & DateString & ".Zr) ELSE 0 END) > 0 AND (CASE WHEN SUM(Grid_Trsk_Intersect.Shape_Ar_1) > 0 THEN 4 ELSE 0 END) > 0) OR ((CASE WHEN SUM(Grid_NatVeg_Intersect.Shape_Ar_1) > 0 THEN 4 ELSE 0 END) > 0 AND (CASE WHEN SUM(Grid_Trsk_Intersect.Shape_Ar_1) > 0 THEN 4 ELSE 0 END) > 0) THEN 2 ELSE CASE WHEN (CASE WHEN AVG(WaterAllocation" & DateString & ".Zr) > 0 THEN AVG(WaterAllocation" & DateString & ".Zr) ELSE 0 END) > 0 OR (CASE WHEN SUM(Grid_NatVeg_Intersect.Shape_Ar_1) > 0 THEN 4 ELSE 0 END) > 0 OR "
        '        QueryString += "(CASE WHEN SUM(Grid_Trsk_Intersect.Shape_Ar_1) > 0 THEN 4 ELSE 0 END) > 0 THEN 1 ELSE 0 END END END) > 0 THEN (CASE WHEN AVG(WaterAllocation" & DateString & ".Zr) > 0 THEN AVG(WaterAllocation" & DateString & ".Zr) ELSE 0 END + CASE WHEN SUM(Grid_NatVeg_Intersect.Shape_Ar_1) > 0 THEN 4 ELSE 0 END + CASE WHEN SUM(Grid_Trsk_Intersect.Shape_Ar_1) > 0 THEN 4 ELSE 0 END) / CASE WHEN (CASE WHEN AVG(WaterAllocation" & DateString & ".Zr) > 0 THEN AVG(WaterAllocation" & DateString & ".Zr) ELSE 0 END) > 0 AND (CASE WHEN SUM(Grid_NatVeg_Intersect.Shape_Ar_1) > 0 THEN 4 ELSE 0 END) > 0 AND (CASE WHEN SUM(Grid_Trsk_Intersect.Shape_Ar_1) > 0 THEN 4 ELSE 0 END) > 0 THEN 3 ELSE CASE WHEN ((CASE WHEN AVG(WaterAllocation" & DateString & ".Zr) > 0 THEN AVG(WaterAllocation" & DateString & ".Zr) ELSE 0 END) > 0 AND (CASE WHEN SUM(Grid_NatVeg_Intersect.Shape_Ar_1) > 0 THEN 4 ELSE 0 END) > 0) OR ((CASE WHEN AVG(WaterAllocation" & DateString & ".Zr) > 0 THEN AVG(WaterAllocation" & DateString & ".Zr) ELSE 0 END) > 0 AND (CASE WHEN SUM(Grid_Trsk_Intersect.Shape_Ar_1) > 0 THEN 4 ELSE 0 END) > 0) OR ((CASE WHEN SUM(Grid_NatVeg_Intersect.Shape_Ar_1) > 0 THEN 4 ELSE 0 END) > 0 AND (CASE WHEN SUM(Grid_Trsk_Intersect.Shape_Ar_1) > 0 THEN 4 ELSE 0 END) > 0) THEN 2 ELSE CASE WHEN (CASE WHEN AVG(WaterAllocation" & DateString & ".Zr) > 0 THEN AVG(WaterAllocation" & DateString & ".Zr) ELSE 0 END) > 0 OR (CASE WHEN SUM(Grid_NatVeg_Intersect.Shape_Ar_1) > 0 THEN 4 ELSE 0 END) > 0 OR (CASE WHEN SUM(Grid_Trsk_Intersect.Shape_Ar_1) > 0 THEN 4 ELSE 0 END) > 0 THEN 1 ELSE 0 END END END ELSE 0 END AS Cell_ROOT "
        '        QueryString += "INTO Values_For_MODFLOW" & DateString & " "
        '        QueryString += "FROM DownStreamGrid LEFT OUTER JOIN Prec_NatVeg_Table Prec_NatVeg_Table_1 RIGHT OUTER JOIN ET_NatVeg_Table ET_NatVeg_Table_1 RIGHT OUTER JOIN Grid_Trsk_Intersect ON ET_NatVeg_Table_1.Poly_ID = Grid_Trsk_Intersect.Id ON Prec_NatVeg_Table_1.Poly_ID = Grid_Trsk_Intersect.Id ON DownStreamGrid.Cell_Number = Grid_Trsk_Intersect.Cell_Number LEFT OUTER JOIN Prec_NatVeg_Table RIGHT OUTER JOIN ET_NatVeg_Table RIGHT OUTER JOIN Grid_NatVeg_Intersect ON ET_NatVeg_Table.Poly_ID = Grid_NatVeg_Intersect.Poly_ID ON Prec_NatVeg_Table.Poly_ID = Grid_NatVeg_Intersect.Poly_ID ON DownStreamGrid.Cell_Number = Grid_NatVeg_Intersect.Cell_Number LEFT OUTER JOIN Grid_DWRFlds_Intersect LEFT OUTER JOIN WaterAllocation" & DateString & " ON Grid_DWRFlds_Intersect.FIELD_NO = WaterAllocation" & DateString & ".Field_No ON DownStreamGrid.Cell_Number = Grid_DWRFlds_Intersect.Cell_Number "
        '        QueryString += "GROUP BY DownStreamGrid.Cell_Number "
        '        QueryString += "ORDER BY DownStreamGrid.Cell_Number;"
        '    Else
        '        QueryString = "SELECT DownStreamGrid.Cell_Number, CASE WHEN SUM((Grid_EricFlds_Intersect.Shape_Ar_1 * ((WaterAllocation" & DateString & ".SurfWatDelivered + WaterAllocation" & DateString & ".PumpWatDelivered  + WaterAllocation" & DateString & ".Precip_Amt - WaterAllocation" & DateString & ".Runoff_Amt) / 1000)) / 62500) > 0 THEN SUM((Grid_EricFlds_Intersect.Shape_Ar_1 * ((WaterAllocation" & DateString & ".SurfWatDelivered + WaterAllocation" & DateString & ".PumpWatDelivered + WaterAllocation" & DateString & ".Precip_Amt  - WaterAllocation" & DateString & ".Runoff_Amt) / 1000)) / 62500) ELSE 0 END AS Cell_Applied_Flds, CASE WHEN SUM((CASE WHEN Prec_NatVeg_Table.Prec" & DateString & " > 50 THEN Prec_NatVeg_Table.Prec" & DateString & " * 0.7 ELSE Prec_NatVeg_Table.Prec" & DateString & "  END) / 1000 * Grid_NatVeg_Intersect.Shape_Ar_1 / 62500) > 0 THEN SUM((CASE WHEN Prec_NatVeg_Table.Prec" & DateString & " > 50 THEN Prec_NatVeg_Table.Prec" & DateString & " * 0.7 ELSE Prec_NatVeg_Table.Prec" & DateString & "  END) / 1000 * Grid_NatVeg_Intersect.Shape_Ar_1 / 62500) ELSE 0 END AS Cell_Precip_NatVeg, CASE WHEN SUM((CASE WHEN Prec_NatVeg_Table_1.Prec" & DateString & " > 50 THEN Prec_NatVeg_Table_1.Prec" & DateString & " * 0.7 ELSE Prec_NatVeg_Table_1.Prec" & DateString & "  END) / 1000 * Grid_Trsk_Intersect.Shape_Ar_1 / 62500) > 0 THEN SUM((CASE WHEN Prec_NatVeg_Table_1.Prec" & DateString & " > 50 THEN Prec_NatVeg_Table_1.Prec" & DateString & " * 0.7 ELSE Prec_NatVeg_Table_1.Prec" & DateString & "  END) / 1000 * Grid_Trsk_Intersect.Shape_Ar_1 / 62500) ELSE 0 END AS Cell_Precip_Trsk, (CASE WHEN SUM((Grid_EricFlds_Intersect.Shape_Ar_1 * ((WaterAllocation" & DateString & ".SurfWatDelivered + WaterAllocation" & DateString & ".PumpWatDelivered  + WaterAllocation" & DateString & ".Precip_Amt - WaterAllocation" & DateString & ".Runoff_Amt) / 1000)) / 62500) > 0 THEN "
        '        QueryString += "SUM((Grid_EricFlds_Intersect.Shape_Ar_1 * ((WaterAllocation" & DateString & ".SurfWatDelivered + WaterAllocation" & DateString & ".PumpWatDelivered + WaterAllocation" & DateString & ".Precip_Amt - WaterAllocation" & DateString & ".Runoff_Amt) / 1000)) / 62500) ELSE 0 END) + (CASE WHEN SUM((CASE WHEN Prec_NatVeg_Table.Prec" & DateString & " > 50 THEN Prec_NatVeg_Table.Prec" & DateString & " * 0.7 ELSE Prec_NatVeg_Table.Prec" & DateString & "  END) / 1000 * Grid_NatVeg_Intersect.Shape_Ar_1 / 62500) > 0 THEN SUM((CASE WHEN Prec_NatVeg_Table.Prec" & DateString & " > 50 THEN Prec_NatVeg_Table.Prec" & DateString & " * 0.7 ELSE Prec_NatVeg_Table.Prec" & DateString & "  END) / 1000 * Grid_NatVeg_Intersect.Shape_Ar_1 / 62500) ELSE 0 END) + (CASE WHEN SUM((CASE WHEN Prec_NatVeg_Table_1.Prec" & DateString & " > 50 THEN Prec_NatVeg_Table_1.Prec" & DateString & " * 0.7 ELSE Prec_NatVeg_Table_1.Prec" & DateString & "  END) / 1000 * Grid_Trsk_Intersect.Shape_Ar_1 / 62500) > 0 THEN SUM((CASE WHEN Prec_NatVeg_Table_1.Prec" & DateString & " > 50 THEN Prec_NatVeg_Table_1.Prec" & DateString & " * 0.7 ELSE Prec_NatVeg_Table_1.Prec" & DateString & "  END) / 1000 * Grid_Trsk_Intersect.Shape_Ar_1 / 62500) ELSE 0 END) AS Cell_Infil, CASE WHEN SUM(Grid_EricFlds_Intersect.Shape_Ar_1 * (WaterAllocation" & DateString & ".ETc / 1000)) / 62500 > 0 THEN SUM(Grid_EricFlds_Intersect.Shape_Ar_1 * (WaterAllocation" & DateString & ".ETc / 1000)) / 62500 ELSE 0 END AS Cell_ET_Flds, CASE WHEN SUM(Grid_NatVeg_Intersect.Shape_Ar_1 * (ET_NatVeg_Table.ETc" & DateString & " / 1000)) / 62500 > 0 THEN SUM(Grid_NatVeg_Intersect.Shape_Ar_1 * (ET_NatVeg_Table.ETc" & DateString & " / 1000)) / 62500 ELSE 0 END AS Cell_ET_NatVeg, CASE WHEN SUM(Grid_Trsk_Intersect.Shape_Ar_1 * (ET_NatVeg_Table_1.ETc" & DateString & " / 1000)) / 62500 > 0 THEN "
        '        QueryString += "SUM(Grid_Trsk_Intersect.Shape_Ar_1 * (ET_NatVeg_Table_1.ETc" & DateString & " / 1000)) / 62500 ELSE 0 END AS Cell_ET_Trsk, (CASE WHEN SUM(Grid_EricFlds_Intersect.Shape_Ar_1 * (WaterAllocation" & DateString & ".ETc / 1000)) / 62500 > 0 THEN SUM(Grid_EricFlds_Intersect.Shape_Ar_1 * (WaterAllocation" & DateString & ".ETc / 1000)) / 62500 ELSE 0 END) + (CASE WHEN SUM(Grid_NatVeg_Intersect.Shape_Ar_1 * (ET_NatVeg_Table.ETc" & DateString & " / 1000)) / 62500 > 0 THEN SUM(Grid_NatVeg_Intersect.Shape_Ar_1 * (ET_NatVeg_Table.ETc" & DateString & " / 1000)) / 62500 ELSE 0 END) + (CASE WHEN SUM(Grid_Trsk_Intersect.Shape_Ar_1 * (ET_NatVeg_Table_1.ETc" & DateString & " / 1000)) / 62500 > 0 THEN SUM(Grid_Trsk_Intersect.Shape_Ar_1 * (ET_NatVeg_Table_1.ETc" & DateString & " / 1000)) / 62500 ELSE 0 END) AS Cell_ET, CASE WHEN AVG(WaterAllocation" & DateString & ".Zr) > 0 THEN AVG(WaterAllocation" & DateString & ".Zr) ELSE 0 END AS Cell_ROOT_Flds, CASE WHEN SUM(Grid_NatVeg_Intersect.Shape_Ar_1) > 0 THEN 4 ELSE 0 END AS Cell_ROOT_NatVeg, CASE WHEN SUM(Grid_Trsk_Intersect.Shape_Ar_1) > 0 THEN 4 ELSE 0 END AS Cell_ROOT_Trsk, CASE WHEN (CASE WHEN AVG(WaterAllocation" & DateString & ".Zr) > 0 THEN AVG(WaterAllocation" & DateString & ".Zr) ELSE 0 END) > 0 AND (CASE WHEN SUM(Grid_NatVeg_Intersect.Shape_Ar_1) > 0 THEN 4 ELSE 0 END) > 0 AND (CASE WHEN SUM(Grid_Trsk_Intersect.Shape_Ar_1) > 0 THEN 4 ELSE 0 END) > 0 THEN 3 ELSE CASE WHEN ((CASE WHEN AVG(WaterAllocation" & DateString & ".Zr) > 0 THEN AVG(WaterAllocation" & DateString & ".Zr) ELSE 0 END) > 0 AND (CASE WHEN SUM(Grid_NatVeg_Intersect.Shape_Ar_1) > 0 THEN 4 ELSE 0 END) > 0) OR ((CASE WHEN AVG(WaterAllocation" & DateString & ".Zr) > 0 THEN AVG(WaterAllocation" & DateString & ".Zr) ELSE 0 END) > 0 "
        '        QueryString += "AND (CASE WHEN SUM(Grid_Trsk_Intersect.Shape_Ar_1) > 0 THEN 4 ELSE 0 END) > 0) OR ((CASE WHEN SUM(Grid_NatVeg_Intersect.Shape_Ar_1) > 0 THEN 4 ELSE 0 END) > 0 AND (CASE WHEN SUM(Grid_Trsk_Intersect.Shape_Ar_1) > 0 THEN 4 ELSE 0 END) > 0) THEN 2 ELSE CASE WHEN (CASE WHEN AVG(WaterAllocation" & DateString & ".Zr) > 0 THEN AVG(WaterAllocation" & DateString & ".Zr) ELSE 0 END) > 0 OR (CASE WHEN SUM(Grid_NatVeg_Intersect.Shape_Ar_1) > 0 THEN 4 ELSE 0 END) > 0 OR (CASE WHEN SUM(Grid_Trsk_Intersect.Shape_Ar_1) > 0 THEN 4 ELSE 0 END) > 0 THEN 1 ELSE 0 END END END AS ct, CASE WHEN (CASE WHEN (CASE WHEN AVG(WaterAllocation" & DateString & ".Zr) > 0 THEN AVG(WaterAllocation" & DateString & ".Zr) ELSE 0 END) > 0 AND (CASE WHEN SUM(Grid_NatVeg_Intersect.Shape_Ar_1) > 0 THEN 4 ELSE 0 END) > 0 AND (CASE WHEN SUM(Grid_Trsk_Intersect.Shape_Ar_1) > 0 THEN 4 ELSE 0 END) > 0 THEN 3 ELSE CASE WHEN ((CASE WHEN AVG(WaterAllocation" & DateString & ".Zr) > 0 THEN AVG(WaterAllocation" & DateString & ".Zr) ELSE 0 END) > 0 AND (CASE WHEN SUM(Grid_NatVeg_Intersect.Shape_Ar_1) > 0 THEN 4 ELSE 0 END) > 0) OR ((CASE WHEN AVG(WaterAllocation" & DateString & ".Zr) > 0 THEN AVG(WaterAllocation" & DateString & ".Zr) ELSE 0 END) > 0 AND (CASE WHEN SUM(Grid_Trsk_Intersect.Shape_Ar_1) > 0 THEN 4 ELSE 0 END) > 0) OR ((CASE WHEN SUM(Grid_NatVeg_Intersect.Shape_Ar_1) > 0 THEN 4 ELSE 0 END) > 0 AND (CASE WHEN SUM(Grid_Trsk_Intersect.Shape_Ar_1) > 0 THEN 4 ELSE 0 END) > 0) THEN 2 ELSE CASE WHEN (CASE WHEN AVG(WaterAllocation" & DateString & ".Zr) > 0 THEN AVG(WaterAllocation" & DateString & ".Zr) ELSE 0 END) > 0 OR (CASE WHEN SUM(Grid_NatVeg_Intersect.Shape_Ar_1) > 0 THEN 4 ELSE 0 END) > 0 OR "
        '        QueryString += "(CASE WHEN SUM(Grid_Trsk_Intersect.Shape_Ar_1) > 0 THEN 4 ELSE 0 END) > 0 THEN 1 ELSE 0 END END END) > 0 THEN (CASE WHEN AVG(WaterAllocation" & DateString & ".Zr) > 0 THEN AVG(WaterAllocation" & DateString & ".Zr) ELSE 0 END + CASE WHEN SUM(Grid_NatVeg_Intersect.Shape_Ar_1) > 0 THEN 4 ELSE 0 END + CASE WHEN SUM(Grid_Trsk_Intersect.Shape_Ar_1) > 0 THEN 4 ELSE 0 END) / CASE WHEN (CASE WHEN AVG(WaterAllocation" & DateString & ".Zr) > 0 THEN AVG(WaterAllocation" & DateString & ".Zr) ELSE 0 END) > 0 AND (CASE WHEN SUM(Grid_NatVeg_Intersect.Shape_Ar_1) > 0 THEN 4 ELSE 0 END) > 0 AND (CASE WHEN SUM(Grid_Trsk_Intersect.Shape_Ar_1) > 0 THEN 4 ELSE 0 END) > 0 THEN 3 ELSE CASE WHEN ((CASE WHEN AVG(WaterAllocation" & DateString & ".Zr) > 0 THEN AVG(WaterAllocation" & DateString & ".Zr) ELSE 0 END) > 0 AND (CASE WHEN SUM(Grid_NatVeg_Intersect.Shape_Ar_1) > 0 THEN 4 ELSE 0 END) > 0) OR ((CASE WHEN AVG(WaterAllocation" & DateString & ".Zr) > 0 THEN AVG(WaterAllocation" & DateString & ".Zr) ELSE 0 END) > 0 AND (CASE WHEN SUM(Grid_Trsk_Intersect.Shape_Ar_1) > 0 THEN 4 ELSE 0 END) > 0) OR ((CASE WHEN SUM(Grid_NatVeg_Intersect.Shape_Ar_1) > 0 THEN 4 ELSE 0 END) > 0 AND (CASE WHEN SUM(Grid_Trsk_Intersect.Shape_Ar_1) > 0 THEN 4 ELSE 0 END) > 0) THEN 2 ELSE CASE WHEN (CASE WHEN AVG(WaterAllocation" & DateString & ".Zr) > 0 THEN AVG(WaterAllocation" & DateString & ".Zr) ELSE 0 END) > 0 OR (CASE WHEN SUM(Grid_NatVeg_Intersect.Shape_Ar_1) > 0 THEN 4 ELSE 0 END) > 0 OR (CASE WHEN SUM(Grid_Trsk_Intersect.Shape_Ar_1) > 0 THEN 4 ELSE 0 END) > 0 THEN 1 ELSE 0 END END END ELSE 0 END AS Cell_ROOT "
        '        QueryString += "INTO Values_For_MODFLOW" & DateString & " "
        '        QueryString += "FROM DownStreamGrid LEFT OUTER JOIN Prec_NatVeg_Table Prec_NatVeg_Table_1 RIGHT OUTER JOIN ET_NatVeg_Table ET_NatVeg_Table_1 RIGHT OUTER JOIN Grid_Trsk_Intersect ON ET_NatVeg_Table_1.Poly_ID = Grid_Trsk_Intersect.Id ON Prec_NatVeg_Table_1.Poly_ID = Grid_Trsk_Intersect.Id ON DownStreamGrid.Cell_Number = Grid_Trsk_Intersect.Cell_Number LEFT OUTER JOIN Prec_NatVeg_Table RIGHT OUTER JOIN ET_NatVeg_Table RIGHT OUTER JOIN Grid_NatVeg_Intersect ON ET_NatVeg_Table.Poly_ID = Grid_NatVeg_Intersect.Poly_ID ON Prec_NatVeg_Table.Poly_ID = Grid_NatVeg_Intersect.Poly_ID ON DownStreamGrid.Cell_Number = Grid_NatVeg_Intersect.Cell_Number LEFT OUTER JOIN Grid_EricFlds_Intersect LEFT OUTER JOIN WaterAllocation" & DateString & " ON Grid_EricFlds_Intersect.FIELD_NO = WaterAllocation" & DateString & ".Field_No ON DownStreamGrid.Cell_Number = Grid_EricFlds_Intersect.Cell_Number "
        '        QueryString += "GROUP BY DownStreamGrid.Cell_Number "
        '        QueryString += "ORDER BY DownStreamGrid.Cell_Number "
        '    End If
        'End If

        'SQL_inserter.ExecuteQuery(QueryString)

    End Function
    Public Function CopyTablesToDuplicate(ByVal DataCopier As MyDBUtils, ByVal DataWriter As MyDBUtils)

        Dim QueryString As String
        Dim TempTable As DataTable = New DataTable

        QueryString = "SELECT WeeklyPrecip_Estimate_Flds.* "
        QueryString += "FROM WeeklyPrecip_Estimate_Flds;"

        TempTable = DataCopier.GetTableFromDB(QueryString, "WeeklyPrecip_Estimate_Flds")
        Try
            DataWriter.DeleteExistingTables("WeeklyPrecip_Estimate_Flds")
        Catch ex As Exception
            MsgBox(ex.Message)
        End Try
        DataWriter.CreateTableInDB(TempTable)
        DataWriter.InsertValuesInDBTable(TempTable)

    End Function

    'The following function no longer used
    Public Function IntersectModflowGrid_and_Coverages(ByVal pFeatureLayer As IFeatureLayer, _
                                                       ByVal pFeatureLayer_USGrid As IFeatureLayer, _
                                                       ByVal pWS As IWorkspace, ByVal NameFeatClassOut As String)

        'I started using this function but after speaking with Enrique, decided it was way to much to 
        'do this every time step.  Instead, I carried out the intersection and used the result as a 
        'key to set up a query that I perform in a different function call

        'For use in the "With" statement below
        Dim pInputFeatClass As IFeatureClass
        pInputFeatClass = pFeatureLayer.FeatureClass

        'Needed in the intersect function call
        Dim pInputTable As ITable
        pInputTable = pFeatureLayer

        'Needed in the intersect function call
        Dim pOverlayTable As ITable
        pOverlayTable = pFeatureLayer_USGrid

        'Dim pFeatClassName As IFeatureClassName
        'pFeatClassName = New FeatureClassName

        'With pFeatClassName
        '    .FeatureType = esriFeatureType.esriFTSimple
        '    .ShapeFieldName = pFeatureLayer.Name() & "_Intersect888"    'For now, give a unique name
        '    .ShapeType = pInputFeatClass.ShapeType
        'End With

        Dim tol As Double
        tol = 0.0#

        ' Set output location and feature class name
        ' Define the output feature class name and shape type (taken from the
        ' properties of the input feature class)

        Dim pOutAcWorkspaceName As IWorkspaceName
        Dim pFeatClassName As IFeatureClassName
        pFeatClassName = New FeatureClassName
        With pFeatClassName
            .FeatureType = esriFeatureType.esriFTSimple
            .ShapeFieldName = "Shape_To_Delete"
            .ShapeType = pInputFeatClass.ShapeType
        End With

        ' Set output location and feature class name
        pOutAcWorkspaceName = New WorkspaceName
        pOutAcWorkspaceName.ConnectionProperties = pWS.ConnectionProperties
        pOutAcWorkspaceName.WorkspaceFactoryProgID = "esriDataSourcesGDB.AccessWorkspaceFactory.1"

        Dim pDatasetName As IDatasetName
        pDatasetName = pFeatClassName
        pDatasetName.Name = NameFeatClassOut
        pDatasetName.WorkspaceName = pOutAcWorkspaceName

        'Perform the intersect routine
        Dim pOutputFeatClass As IFeatureClass
        Dim pBGP As IBasicGeoprocessor
        pBGP = New BasicGeoprocessor
        Try
            pOutputFeatClass = pBGP.Intersect(pInputTable, False, pOverlayTable, False, tol, pFeatClassName)
        Catch ex As Exception
            MsgBox(ex.Message())
        End Try

    End Function
    ReadOnly Property CalculateNumOfDaysLeftInCurrTS(ByVal CurrentDate As Date) As Integer
        Get
            Dim IterativeDate As Date
            Dim NextDate As Date
            Dim CurrentMonth As Integer
            Dim NextMonth As Integer

            'CalculateNumOfDaysLeftInCurrTS = 7 'very strange why I did this?  I don't know why! so i took it out
            CalculateNumOfDaysLeftInCurrTS = 0
            CurrentMonth = Month(CurrentDate)
            NextDate = CurrentDate.AddDays(7)
            NextMonth = Month(NextDate)
            IterativeDate = CurrentDate
            If Not NextMonth - CurrentMonth = 0 Then
                While NextMonth - CurrentMonth = 1 Or NextMonth - CurrentMonth = -11
                    IterativeDate = IterativeDate.AddDays(1)
                    CurrentMonth = Month(IterativeDate)
                    CalculateNumOfDaysLeftInCurrTS += 1
                End While
            Else
                CalculateNumOfDaysLeftInCurrTS = 7
            End If
        End Get
    End Property
    Private Function BuildDataTable(ByRef WaterAllocationTable As DataTable) As DataTable
        Dim m_col As DataColumn
        '1 Tract
        m_col = New DataColumn
        With m_col
            .ColumnName = "Tract"
            .DataType = GetType(System.Int32)
        End With
        WaterAllocationTable.Columns.Add(m_col)

        '2 Field_No
        m_col = New DataColumn
        With m_col
            .ColumnName = "Field_No"
            .DataType = GetType(System.Int32)
        End With
        WaterAllocationTable.Columns.Add(m_col)

        '2a Canal
        m_col = New DataColumn
        With m_col
            .ColumnName = "Canal"
            .DataType = GetType(System.String)
        End With
        WaterAllocationTable.Columns.Add(m_col)

        '3 Date_
        m_col = New DataColumn
        With m_col
            .ColumnName = "Date_"
            .DataType = GetType(System.DateTime)
        End With
        WaterAllocationTable.Columns.Add(m_col)

        '4 Precip_Amt
        m_col = New DataColumn
        With m_col
            .ColumnName = "Precip_Amt"
            .DataType = GetType(System.Double)
        End With
        WaterAllocationTable.Columns.Add(m_col)

        '5 ETc
        m_col = New DataColumn
        With m_col
            .ColumnName = "ETc"
            .DataType = GetType(System.Double)
        End With
        WaterAllocationTable.Columns.Add(m_col)

        '6 Zr
        m_col = New DataColumn
        With m_col
            .ColumnName = "Zr"
            .DataType = GetType(System.Double)
        End With
        WaterAllocationTable.Columns.Add(m_col)

        '7 SurfWatDelivered
        m_col = New DataColumn
        With m_col
            .ColumnName = "SurfWatDelivered"
            .DataType = GetType(System.Double)
        End With
        WaterAllocationTable.Columns.Add(m_col)

        '8 PumpWatDelivered
        m_col = New DataColumn
        With m_col
            .ColumnName = "PumpWatDelivered"
            .DataType = GetType(System.Double)
        End With
        WaterAllocationTable.Columns.Add(m_col)

        '9 Runoff_Amt
        m_col = New DataColumn
        With m_col
            .ColumnName = "Runoff_Amt"
            .DataType = GetType(System.Double)
        End With
        WaterAllocationTable.Columns.Add(m_col)

        '10 DeepPerc_Amt
        m_col = New DataColumn
        With m_col
            .ColumnName = "DeepPerc_Amt"
            .DataType = GetType(System.Double)
        End With
        WaterAllocationTable.Columns.Add(m_col)

        '11 TAW
        m_col = New DataColumn
        With m_col
            .ColumnName = "TAW"
            .DataType = GetType(System.Double)
        End With
        WaterAllocationTable.Columns.Add(m_col)

        '12 RAW
        m_col = New DataColumn
        With m_col
            .ColumnName = "RAW"
            .DataType = GetType(System.Double)
        End With
        WaterAllocationTable.Columns.Add(m_col)

        '13 Area
        m_col = New DataColumn
        With m_col
            .ColumnName = "Area"
            .DataType = GetType(System.Double)
        End With
        WaterAllocationTable.Columns.Add(m_col)
        Return WaterAllocationTable
    End Function
    Private Function BuildMFTable(ByRef ValsForMF_Table As DataTable) As DataTable
        Dim m_col As DataColumn
        '1 Cell Number
        m_col = New DataColumn
        With m_col
            .ColumnName = "Cell_Number"
            .DataType = GetType(System.Int32)
        End With
        ValsForMF_Table.Columns.Add(m_col)

        '2 Cell_Applied_Flds
        m_col = New DataColumn
        With m_col
            .ColumnName = "Cell_Applied_Flds"
            .DataType = GetType(System.Single)
        End With
        ValsForMF_Table.Columns.Add(m_col)

        '3 Cell_Precip_NatVeg
        m_col = New DataColumn
        With m_col
            .ColumnName = "Cell_Precip_NatVeg"
            .DataType = GetType(System.Single)
        End With
        ValsForMF_Table.Columns.Add(m_col)

        '4 Cell_Precip_Trsk
        m_col = New DataColumn
        With m_col
            .ColumnName = "Cell_Precip_Trsk"
            .DataType = GetType(System.Single)
        End With
        ValsForMF_Table.Columns.Add(m_col)

        '5 Cell_Infil
        m_col = New DataColumn
        With m_col
            .ColumnName = "Cell_Infil"
            .DataType = GetType(System.Single)
        End With
        ValsForMF_Table.Columns.Add(m_col)

        '6 Cell_ET_Flds
        m_col = New DataColumn
        With m_col
            .ColumnName = "Cell_ET_Flds"
            .DataType = GetType(System.Single)
        End With
        ValsForMF_Table.Columns.Add(m_col)

        '7 Cell_ET_NatVeg
        m_col = New DataColumn
        With m_col
            .ColumnName = "Cell_ET_NatVeg"
            .DataType = GetType(System.Single)
        End With
        ValsForMF_Table.Columns.Add(m_col)

        '8 Cell_ET_Trsk
        m_col = New DataColumn
        With m_col
            .ColumnName = "Cell_ET_Trsk"
            .DataType = GetType(System.Single)
        End With
        ValsForMF_Table.Columns.Add(m_col)

        '9 Cell_ET
        m_col = New DataColumn
        With m_col
            .ColumnName = "Cell_ET"
            .DataType = GetType(System.Single)
        End With
        ValsForMF_Table.Columns.Add(m_col)

        '10 Cell_ROOT_Flds
        m_col = New DataColumn
        With m_col
            .ColumnName = "Cell_ROOT_Flds"
            .DataType = GetType(System.Single)
        End With
        ValsForMF_Table.Columns.Add(m_col)

        '11 Cell_ROOT_NatVeg
        m_col = New DataColumn
        With m_col
            .ColumnName = "Cell_ROOT_NatVeg"
            .DataType = GetType(System.Single)
        End With
        ValsForMF_Table.Columns.Add(m_col)

        '11 Cell_ROOT_Trsk
        m_col = New DataColumn
        With m_col
            .ColumnName = "Cell_ROOT_Trsk"
            .DataType = GetType(System.Single)
        End With
        ValsForMF_Table.Columns.Add(m_col)

        '12 ct
        m_col = New DataColumn
        With m_col
            .ColumnName = "ct"
            .DataType = GetType(System.Single)
        End With
        ValsForMF_Table.Columns.Add(m_col)

        '14 Cell_ROOT
        m_col = New DataColumn
        With m_col
            .ColumnName = "Cell_ROOT"
            .DataType = GetType(System.Single)
        End With
        ValsForMF_Table.Columns.Add(m_col)

        Return ValsForMF_Table
    End Function
    'Private Function CheckMaxDepth(ByRef WaterAllocationTable As DataTable)
    '    Dim expression1 As String
    '    Dim expression2 As String
    '    Dim sortOrder1 As String
    '    Dim sortOrder2 As String
    '    Dim i As Integer
    '    Dim CheckTransferAmt As Double

    '    expression1 = "SurfWatDelivered > 300"   'Put a cap on the amount of water that can be delivered
    '    sortOrder1 = "SurfWatDelivered DESC"
    '    expression2 = "SurfWatDelivered <= 300"
    '    sortOrder2 = "SurfWatDelivered ASC"
    '    Dim foundRows As DataRow() = WaterAllocationTable.Select(expression1, sortOrder1)
    '    Dim RemainingRows As DataRow() = WaterAllocationTable.Select(expression2, sortOrder2)

    '    If WaterAllocationTable.Rows.Count() Then
    '        For i = 1 To foundRows.Length()
    '            CheckTransferAmt = (foundRows(i - 1)(6) - 300) * foundRows(i - 1)(12)
    '            If CheckTransferAmt / RemainingRows(i - 1)(6) > 300 Then
    '                RemainingRows(i - 1)(6) = (((foundRows(i - 1)(6) - 300) * foundRows(i - 1)(12)) / RemainingRows(i - 1)(12)) + RemainingRows(i - 1)(6)
    '                foundRows(i - 1)(6) = 300
    '            ElseIf WaterAllocationTable.Rows.Count() > 2 And i = 1 Then
    '                'split the over allocated amount among two fields instead of one (b/c so much extra)
    '                RemainingRows(i - 1)(6) = (((foundRows(i - 1)(6) - 300) / 2))
    '            End If

    '        Next i
    '    End If
    'End Function
End Class
